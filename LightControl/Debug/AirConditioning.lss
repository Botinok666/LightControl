
AirConditioning.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000960  00000a14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000960  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  00800102  00800102  00000a16  2**0
                  ALLOC
  3 .eeprom       0000000b  00810000  00810000  00000a16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00000a21  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a54  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000e0  00000000  00000000  00000a90  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000011c8  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a30  00000000  00000000  00001d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000009ab  00000000  00000000  00002768  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000260  00000000  00000000  00003114  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000006fa  00000000  00000000  00003374  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000793  00000000  00000000  00003a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000070  00000000  00000000  00004201  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
   2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
   4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
   6:	a5 c2       	rjmp	.+1354   	; 0x552 <__vector_3>
   8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
   a:	41 c3       	rjmp	.+1666   	; 0x68e <__vector_5>
   c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
   e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
  10:	4b c1       	rjmp	.+662    	; 0x2a8 <__vector_8>
  12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
  14:	76 c2       	rjmp	.+1260   	; 0x502 <__vector_10>
  16:	8c c2       	rjmp	.+1304   	; 0x530 <__vector_11>
  18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
  1a:	b4 c3       	rjmp	.+1896   	; 0x784 <__vector_13>
  1c:	2a c0       	rjmp	.+84     	; 0x72 <__bad_interrupt>
  1e:	29 c0       	rjmp	.+82     	; 0x72 <__bad_interrupt>
  20:	28 c0       	rjmp	.+80     	; 0x72 <__bad_interrupt>
  22:	27 c0       	rjmp	.+78     	; 0x72 <__bad_interrupt>
  24:	26 c0       	rjmp	.+76     	; 0x72 <__bad_interrupt>
  26:	25 c0       	rjmp	.+74     	; 0x72 <__bad_interrupt>
  28:	24 c0       	rjmp	.+72     	; 0x72 <__bad_interrupt>
  2a:	23 c0       	rjmp	.+70     	; 0x72 <__bad_interrupt>
  2c:	62 c0       	rjmp	.+196    	; 0xf2 <__vector_22>
  2e:	21 c0       	rjmp	.+66     	; 0x72 <__bad_interrupt>
  30:	0d c1       	rjmp	.+538    	; 0x24c <__vector_24>
  32:	1f c0       	rjmp	.+62     	; 0x72 <__bad_interrupt>
  34:	1e c0       	rjmp	.+60     	; 0x72 <__bad_interrupt>
  36:	1d c0       	rjmp	.+58     	; 0x72 <__bad_interrupt>
  38:	1c c0       	rjmp	.+56     	; 0x72 <__bad_interrupt>
  3a:	1b c0       	rjmp	.+54     	; 0x72 <__bad_interrupt>

0000003c <__ctors_end>:
  3c:	11 24       	eor	r1, r1
  3e:	1f be       	out	0x3f, r1	; 63
  40:	cf ef       	ldi	r28, 0xFF	; 255
  42:	d1 e0       	ldi	r29, 0x01	; 1
  44:	de bf       	out	0x3e, r29	; 62
  46:	cd bf       	out	0x3d, r28	; 61

00000048 <__do_copy_data>:
  48:	11 e0       	ldi	r17, 0x01	; 1
  4a:	a0 e0       	ldi	r26, 0x00	; 0
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	e0 e6       	ldi	r30, 0x60	; 96
  50:	f9 e0       	ldi	r31, 0x09	; 9
  52:	02 c0       	rjmp	.+4      	; 0x58 <__do_copy_data+0x10>
  54:	05 90       	lpm	r0, Z+
  56:	0d 92       	st	X+, r0
  58:	a2 30       	cpi	r26, 0x02	; 2
  5a:	b1 07       	cpc	r27, r17
  5c:	d9 f7       	brne	.-10     	; 0x54 <__do_copy_data+0xc>

0000005e <__do_clear_bss>:
  5e:	21 e0       	ldi	r18, 0x01	; 1
  60:	a2 e0       	ldi	r26, 0x02	; 2
  62:	b1 e0       	ldi	r27, 0x01	; 1
  64:	01 c0       	rjmp	.+2      	; 0x68 <.do_clear_bss_start>

00000066 <.do_clear_bss_loop>:
  66:	1d 92       	st	X+, r1

00000068 <.do_clear_bss_start>:
  68:	a2 35       	cpi	r26, 0x52	; 82
  6a:	b2 07       	cpc	r27, r18
  6c:	e1 f7       	brne	.-8      	; 0x66 <.do_clear_bss_loop>
  6e:	e6 d3       	rcall	.+1996   	; 0x83c <main>
  70:	75 c4       	rjmp	.+2282   	; 0x95c <_exit>

00000072 <__bad_interrupt>:
  72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <_Z14CalculateCRC16Pva>:
		CRC16 = _crc_xmodem_update(CRC16, *ptr++);
	return CRC16;
}

void FanRegulation()
{
  74:	61 50       	subi	r22, 0x01	; 1
  76:	0a f1       	brmi	.+66     	; 0xba <_Z14CalculateCRC16Pva+0x46>
  78:	e8 2f       	mov	r30, r24
  7a:	f9 2f       	mov	r31, r25
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	9f ef       	ldi	r25, 0xFF	; 255
  80:	21 91       	ld	r18, Z+
  82:	92 27       	eor	r25, r18
  84:	09 2e       	mov	r0, r25
  86:	02 94       	swap	r0
  88:	20 2d       	mov	r18, r0
  8a:	2f 70       	andi	r18, 0x0F	; 15
  8c:	29 27       	eor	r18, r25
  8e:	39 2f       	mov	r19, r25
  90:	30 25       	eor	r19, r0
  92:	33 0f       	add	r19, r19
  94:	30 7e       	andi	r19, 0xE0	; 224
  96:	23 27       	eor	r18, r19
  98:	30 2d       	mov	r19, r0
  9a:	39 27       	eor	r19, r25
  9c:	30 7f       	andi	r19, 0xF0	; 240
  9e:	36 95       	lsr	r19
  a0:	09 2e       	mov	r0, r25
  a2:	00 0c       	add	r0, r0
  a4:	33 1f       	adc	r19, r19
  a6:	96 95       	lsr	r25
  a8:	96 95       	lsr	r25
  aa:	96 95       	lsr	r25
  ac:	9f 71       	andi	r25, 0x1F	; 31
  ae:	93 27       	eor	r25, r19
  b0:	98 27       	eor	r25, r24
  b2:	82 2f       	mov	r24, r18
  b4:	61 50       	subi	r22, 0x01	; 1
  b6:	22 f7       	brpl	.-56     	; 0x80 <_Z14CalculateCRC16Pva+0xc>
  b8:	08 95       	ret
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	9f ef       	ldi	r25, 0xFF	; 255
  be:	08 95       	ret

000000c0 <_Z6GetRPMv>:
	}
}

uint16_t GetRPM()
{
	uint32_t temp = (F_CPU * 30 / 8) * (tachCnt - 1);
  c0:	60 91 51 01 	lds	r22, 0x0151	; 0x800151 <tachCnt>
	return (uint16_t)(temp / tachSum);
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	61 50       	subi	r22, 0x01	; 1
  c8:	71 09       	sbc	r23, r1
  ca:	07 2e       	mov	r0, r23
  cc:	00 0c       	add	r0, r0
  ce:	88 0b       	sbc	r24, r24
  d0:	99 0b       	sbc	r25, r25
  d2:	20 e0       	ldi	r18, 0x00	; 0
  d4:	30 ee       	ldi	r19, 0xE0	; 224
  d6:	45 ea       	ldi	r20, 0xA5	; 165
  d8:	51 e0       	ldi	r21, 0x01	; 1
  da:	c2 d3       	rcall	.+1924   	; 0x860 <__mulsi3>
  dc:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <tachSum>
  e0:	30 91 44 01 	lds	r19, 0x0144	; 0x800144 <tachSum+0x1>
  e4:	40 91 45 01 	lds	r20, 0x0145	; 0x800145 <tachSum+0x2>
  e8:	50 91 46 01 	lds	r21, 0x0146	; 0x800146 <tachSum+0x3>
  ec:	e6 d3       	rcall	.+1996   	; 0x8ba <__udivmodsi4>
}
  ee:	c9 01       	movw	r24, r18
  f0:	08 95       	ret

000000f2 <__vector_22>:

ISR (USART0_RX_vect)
{
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	2f 93       	push	r18
  fe:	3f 93       	push	r19
 100:	4f 93       	push	r20
 102:	5f 93       	push	r21
 104:	6f 93       	push	r22
 106:	7f 93       	push	r23
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
 10c:	af 93       	push	r26
 10e:	bf 93       	push	r27
 110:	ef 93       	push	r30
 112:	ff 93       	push	r31
	static char uCnt = 0;
	static uint8_t *rxBuf = (uint8_t*)&rcvdConf;
	uint8_t data = UDR0;
 114:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
	if (UCSR0A & (1 << MPCM0)) //Address listening mode
 118:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
 11c:	90 ff       	sbrs	r25, 0
 11e:	58 c0       	rjmp	.+176    	; 0x1d0 <__vector_22+0xde>
	{
		if (CmdLC <= data && data <= CmdUC)
 120:	9f ee       	ldi	r25, 0xEF	; 239
 122:	98 0f       	add	r25, r24
 124:	93 30       	cpi	r25, 0x03	; 3
 126:	08 f0       	brcs	.+2      	; 0x12a <__vector_22+0x38>
 128:	50 c0       	rjmp	.+160    	; 0x1ca <__vector_22+0xd8>
		{
			UCSR0A = 0; //Clear MPCM bit
 12a:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
			rxMode = data;
 12e:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <rxMode>
			if (data == SetConfig)
 132:	83 31       	cpi	r24, 0x13	; 19
 134:	81 f4       	brne	.+32     	; 0x156 <__vector_22+0x64>
			{
				uCnt = sizeof(sysConfig); //Bytes to receive
 136:	8b e0       	ldi	r24, 0x0B	; 11
 138:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ11__vector_22E4uCnt>
				rxBuf = (uint8_t*)&rcvdConf; //First byte address in structure
 13c:	8b e2       	ldi	r24, 0x2B	; 43
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 144:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				rxMark = (uint8_t)cycles;
 148:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <cycles>
 14c:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <cycles+0x1>
 150:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <rxMark>
 154:	6a c0       	rjmp	.+212    	; 0x22a <__stack+0x2b>

sysConfig EEMEM eConf = { 0xFF, 100, 400, 40, 80, 0 };

void inline U0TXen()
{
	PORTA |= (1 << PORTA5);
 156:	dd 9a       	sbi	0x1b, 5	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	80 e6       	ldi	r24, 0x60	; 96
 15a:	8a 95       	dec	r24
 15c:	f1 f7       	brne	.-4      	; 0x15a <__vector_22+0x68>
				rxMark = (uint8_t)cycles;
			}
			else
			{
				U0TXen();
				if (rxMode == GetConfig)
 15e:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <rxMode>
 162:	82 31       	cpi	r24, 0x12	; 18
 164:	51 f4       	brne	.+20     	; 0x17a <__vector_22+0x88>
				{
					txCnt = sizeof(sysConfig) - 1; //Because one byte will be send right there
 166:	8a e0       	ldi	r24, 0x0A	; 10
 168:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <txCnt>
					txBuf = (uint8_t*)&validConf;
 16c:	86 e3       	ldi	r24, 0x36	; 54
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <txBuf+0x1>
 174:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <txBuf>
 178:	1a c0       	rjmp	.+52     	; 0x1ae <__vector_22+0xbc>
				}
				else //Get status
				{
					tmpStatus.CRC16 = CalculateCRC16(&tmpStatus, sizeof(sysStatus) - 2);
 17a:	6f e0       	ldi	r22, 0x0F	; 15
 17c:	89 e0       	ldi	r24, 0x09	; 9
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	79 df       	rcall	.-270    	; 0x74 <_Z14CalculateCRC16Pva>
 182:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <tmpStatus+0x10>
 186:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <tmpStatus+0xf>
					memcpy(&validStatus, &tmpStatus, sizeof(sysStatus));
 18a:	81 e1       	ldi	r24, 0x11	; 17
 18c:	e9 e0       	ldi	r30, 0x09	; 9
 18e:	f1 e0       	ldi	r31, 0x01	; 1
 190:	aa e1       	ldi	r26, 0x1A	; 26
 192:	b1 e0       	ldi	r27, 0x01	; 1
 194:	01 90       	ld	r0, Z+
 196:	0d 92       	st	X+, r0
 198:	8a 95       	dec	r24
 19a:	e1 f7       	brne	.-8      	; 0x194 <__vector_22+0xa2>
					txCnt = sizeof(sysStatus) - 1;
 19c:	80 e1       	ldi	r24, 0x10	; 16
 19e:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <txCnt>
					txBuf = (uint8_t*)&validStatus;
 1a2:	8a e1       	ldi	r24, 0x1A	; 26
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <txBuf+0x1>
 1aa:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <txBuf>
				}
				UDR0 = *txBuf++; //Send first byte
 1ae:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <txBuf>
 1b2:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <txBuf+0x1>
 1b6:	cf 01       	movw	r24, r30
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <txBuf+0x1>
 1be:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <txBuf>
 1c2:	80 81       	ld	r24, Z
 1c4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
 1c8:	30 c0       	rjmp	.+96     	; 0x22a <__stack+0x2b>
			}
		}
		else
			rxMode = 0;
 1ca:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <rxMode>
 1ce:	2d c0       	rjmp	.+90     	; 0x22a <__stack+0x2b>
	}
	else if (rxMode == SetConfig)
 1d0:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <rxMode>
 1d4:	93 31       	cpi	r25, 0x13	; 19
 1d6:	49 f5       	brne	.+82     	; 0x22a <__stack+0x2b>
	{
		*rxBuf++ = data;
 1d8:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 1dc:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 1e0:	9f 01       	movw	r18, r30
 1e2:	2f 5f       	subi	r18, 0xFF	; 255
 1e4:	3f 4f       	sbci	r19, 0xFF	; 255
 1e6:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 1ea:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
 1ee:	80 83       	st	Z, r24
		if (--uCnt == 0) //Packet received
 1f0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_ZZ11__vector_22E4uCnt>
 1f4:	81 50       	subi	r24, 0x01	; 1
 1f6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_ZZ11__vector_22E4uCnt>
 1fa:	81 11       	cpse	r24, r1
 1fc:	16 c0       	rjmp	.+44     	; 0x22a <__stack+0x2b>
		{
			rxMode = 0;
 1fe:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <rxMode>
			if (CalculateCRC16(&rcvdConf, sizeof(sysConfig) - 2) == rcvdConf.CRC16) //CRC OK
 202:	69 e0       	ldi	r22, 0x09	; 9
 204:	8b e2       	ldi	r24, 0x2B	; 43
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	35 df       	rcall	.-406    	; 0x74 <_Z14CalculateCRC16Pva>
 20a:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <rcvdConf+0x9>
 20e:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <rcvdConf+0xa>
 212:	82 17       	cp	r24, r18
 214:	93 07       	cpc	r25, r19
 216:	49 f4       	brne	.+18     	; 0x22a <__stack+0x2b>
				memcpy(&validConf, &rcvdConf, sizeof(sysConfig));
 218:	8b e0       	ldi	r24, 0x0B	; 11
 21a:	eb e2       	ldi	r30, 0x2B	; 43
 21c:	f1 e0       	ldi	r31, 0x01	; 1
 21e:	a6 e3       	ldi	r26, 0x36	; 54
 220:	b1 e0       	ldi	r27, 0x01	; 1
 222:	01 90       	ld	r0, Z+
 224:	0d 92       	st	X+, r0
 226:	8a 95       	dec	r24
 228:	e1 f7       	brne	.-8      	; 0x222 <__stack+0x23>
		}
	}
}
 22a:	ff 91       	pop	r31
 22c:	ef 91       	pop	r30
 22e:	bf 91       	pop	r27
 230:	af 91       	pop	r26
 232:	9f 91       	pop	r25
 234:	8f 91       	pop	r24
 236:	7f 91       	pop	r23
 238:	6f 91       	pop	r22
 23a:	5f 91       	pop	r21
 23c:	4f 91       	pop	r20
 23e:	3f 91       	pop	r19
 240:	2f 91       	pop	r18
 242:	0f 90       	pop	r0
 244:	0f be       	out	0x3f, r0	; 63
 246:	0f 90       	pop	r0
 248:	1f 90       	pop	r1
 24a:	18 95       	reti

0000024c <__vector_24>:

ISR (USART0_TX_vect) //Transmit to RS485
{
 24c:	1f 92       	push	r1
 24e:	0f 92       	push	r0
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	0f 92       	push	r0
 254:	11 24       	eor	r1, r1
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
 25a:	ef 93       	push	r30
 25c:	ff 93       	push	r31
	if (txCnt--)
 25e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <txCnt>
 262:	9f ef       	ldi	r25, 0xFF	; 255
 264:	98 0f       	add	r25, r24
 266:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <txCnt>
 26a:	88 23       	and	r24, r24
 26c:	71 f0       	breq	.+28     	; 0x28a <__vector_24+0x3e>
		UDR0 = *txBuf++; //Send next character from the given buffer
 26e:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <txBuf>
 272:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <txBuf+0x1>
 276:	cf 01       	movw	r24, r30
 278:	01 96       	adiw	r24, 0x01	; 1
 27a:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <txBuf+0x1>
 27e:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <txBuf>
 282:	80 81       	ld	r24, Z
 284:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
 288:	06 c0       	rjmp	.+12     	; 0x296 <__vector_24+0x4a>
	else
	{
		U0RXen();
 28a:	dd 98       	cbi	0x1b, 5	; 27
		UCSR0A = (1 << MPCM0); //Set MPCM bit
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
		rxMode = 0;
 292:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <rxMode>
	}
}
 296:	ff 91       	pop	r31
 298:	ef 91       	pop	r30
 29a:	9f 91       	pop	r25
 29c:	8f 91       	pop	r24
 29e:	0f 90       	pop	r0
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	0f 90       	pop	r0
 2a4:	1f 90       	pop	r1
 2a6:	18 95       	reti

000002a8 <__vector_8>:

ISR (TIMER1_OVF_vect) //Occurs every 71.1ms
{
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	11 24       	eor	r1, r1
 2b2:	2f 93       	push	r18
 2b4:	3f 93       	push	r19
 2b6:	4f 93       	push	r20
 2b8:	5f 93       	push	r21
 2ba:	6f 93       	push	r22
 2bc:	7f 93       	push	r23
 2be:	8f 93       	push	r24
 2c0:	9f 93       	push	r25
 2c2:	af 93       	push	r26
 2c4:	bf 93       	push	r27
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	ef 93       	push	r30
 2cc:	ff 93       	push	r31
	static uint8_t rs485busy = 0;
	uint8_t lcycle = ((uint8_t)cycles++) & 0x1F; //Range 0-31
 2ce:	c0 91 47 01 	lds	r28, 0x0147	; 0x800147 <cycles>
 2d2:	d0 91 48 01 	lds	r29, 0x0148	; 0x800148 <cycles+0x1>
 2d6:	ce 01       	movw	r24, r28
 2d8:	01 96       	adiw	r24, 0x01	; 1
 2da:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <cycles+0x1>
 2de:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <cycles>
	if (!cycles) //~77 minutes between updates
 2e2:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <cycles>
 2e6:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <cycles+0x1>
 2ea:	89 2b       	or	r24, r25
 2ec:	39 f4       	brne	.+14     	; 0x2fc <__vector_8+0x54>
		eeprom_update_block(&validConf, &eConf, sizeof(sysConfig));
 2ee:	4b e0       	ldi	r20, 0x0B	; 11
 2f0:	50 e0       	ldi	r21, 0x00	; 0
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	86 e3       	ldi	r24, 0x36	; 54
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	10 d3       	rcall	.+1568   	; 0x91c <eeprom_update_block>
	if (lcycle == 4 || lcycle == 12) //Send start signal to the sensor
 2fc:	8c 2f       	mov	r24, r28
 2fe:	87 71       	andi	r24, 0x17	; 23
 300:	84 30       	cpi	r24, 0x04	; 4
 302:	61 f4       	brne	.+24     	; 0x31c <__vector_8+0x74>
	{
		PORTB &= ~(1 << PORTB2);
 304:	c2 98       	cbi	0x18, 2	; 24
		DDRB |= (1 << DDB2); //Interface pulled low
 306:	ba 9a       	sbi	0x17, 2	; 23
		TCCR0B = (1 << CS02); //28.8kHz, 34.72µs tick
 308:	83 bf       	out	0x33, r24	; 51
		TCNT0 = 0;
 30a:	12 be       	out	0x32, r1	; 50
		OCR0B = 48; //~1.666ms delay
 30c:	90 e3       	ldi	r25, 0x30	; 48
 30e:	9c bf       	out	0x3c, r25	; 60
		TIFR0 = (1 << TOV0) | (1 << OCF0B);
 310:	95 e0       	ldi	r25, 0x05	; 5
 312:	98 bf       	out	0x38, r25	; 56
		TIMSK0 = (1 << OCIE0B); //Enable interrupt
 314:	89 bf       	out	0x39, r24	; 57
		amCnt = -1; //Skip response signal		
 316:	8f ef       	ldi	r24, 0xFF	; 255
 318:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <amCnt>
	}
	lcycle &= 0xF; //Range 0-15
 31c:	8c 2f       	mov	r24, r28
 31e:	8f 70       	andi	r24, 0x0F	; 15
	if (!lcycle)
 320:	c1 f4       	brne	.+48     	; 0x352 <__vector_8+0xaa>
	{
		tmpStatus.rpmFront = tachCnt > 1 ? GetRPM() : 0;
 322:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <tachCnt>
 326:	82 30       	cpi	r24, 0x02	; 2
 328:	10 f0       	brcs	.+4      	; 0x32e <__vector_8+0x86>
 32a:	ca de       	rcall	.-620    	; 0xc0 <_Z6GetRPMv>
 32c:	02 c0       	rjmp	.+4      	; 0x332 <__vector_8+0x8a>
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <tmpStatus+0x2>
 336:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <tmpStatus+0x1>
		//SelChA();
		tachCnt = 0;
 33a:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <tachCnt>
		tachSum = 0;
 33e:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <tachSum>
 342:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <tachSum+0x1>
 346:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <tachSum+0x2>
 34a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <tachSum+0x3>
		TIMSK1 |= (1 << ICIE1);		
 34e:	7d 9a       	sbi	0x0f, 5	; 15
 350:	2c c0       	rjmp	.+88     	; 0x3aa <__vector_8+0x102>
	}
	else if (lcycle == 8)
 352:	88 30       	cpi	r24, 0x08	; 8
 354:	51 f5       	brne	.+84     	; 0x3aa <__vector_8+0x102>
	{
		tmpStatus.rpmRear = tachCnt > 1 ? GetRPM() : 0;
 356:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <tachCnt>
 35a:	82 30       	cpi	r24, 0x02	; 2
 35c:	10 f0       	brcs	.+4      	; 0x362 <__vector_8+0xba>
 35e:	b0 de       	rcall	.-672    	; 0xc0 <_Z6GetRPMv>
 360:	02 c0       	rjmp	.+4      	; 0x366 <__vector_8+0xbe>
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	e9 e0       	ldi	r30, 0x09	; 9
 368:	f1 e0       	ldi	r31, 0x01	; 1
 36a:	94 83       	std	Z+4, r25	; 0x04
 36c:	83 83       	std	Z+3, r24	; 0x03
		//SelChB();
		tachCnt = 0;
 36e:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <tachCnt>
		tachSum = 0;
 372:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <tachSum>
 376:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <tachSum+0x1>
 37a:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <tachSum+0x2>
 37e:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <tachSum+0x3>
		TIMSK1 |= (1 << ICIE1);
 382:	7d 9a       	sbi	0x0f, 5	; 15
		tmpStatus.currentDraw = (adcSum << 3) / Idiv_x1mA;
 384:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <adcSum>
 388:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <adcSum+0x1>
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	61 e2       	ldi	r22, 0x21	; 33
 39a:	70 e0       	ldi	r23, 0x00	; 0
 39c:	7a d2       	rcall	.+1268   	; 0x892 <__udivmodhi4>
 39e:	76 83       	std	Z+6, r23	; 0x06
 3a0:	65 83       	std	Z+5, r22	; 0x05
		adcSum = 0;
 3a2:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <adcSum+0x1>
 3a6:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <adcSum>
	}

	if (rxMode == SetConfig) //We are currently receiving data packet
 3aa:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <rxMode>
 3ae:	83 31       	cpi	r24, 0x13	; 19
 3b0:	89 f4       	brne	.+34     	; 0x3d4 <__vector_8+0x12c>
	{
		if (rs485busy == rxMark) //Second tick in a row detected
 3b2:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <rxMark>
 3b6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZZ10__vector_8E9rs485busy>
 3ba:	98 13       	cpse	r25, r24
 3bc:	06 c0       	rjmp	.+12     	; 0x3ca <__vector_8+0x122>
		{
			UCSR0A = (1 << MPCM0);
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
			rxMode = 0;
 3c4:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <rxMode>
 3c8:	0a c0       	rjmp	.+20     	; 0x3de <__vector_8+0x136>
		}
		else
			rs485busy = rxMark;
 3ca:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <rxMark>
 3ce:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZZ10__vector_8E9rs485busy>
 3d2:	05 c0       	rjmp	.+10     	; 0x3de <__vector_8+0x136>
	}
	else
		rs485busy = rxMark - 1;
 3d4:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <rxMark>
 3d8:	81 50       	subi	r24, 0x01	; 1
 3da:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <_ZZ10__vector_8E9rs485busy>
		
	if (lcycle & 1)
 3de:	c0 fd       	sbrc	r28, 0
 3e0:	7d c0       	rjmp	.+250    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
		return; //Skip half cycles
	ADCSRA |= (1 << ADSC);
 3e2:	2e 9a       	sbi	0x05, 6	; 5
	uint16_t level = validConf.fanLevelOverride != 0xFF ?
 3e4:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <validConf>
		(((uint16_t)validConf.fanLevelOverride * PWM_max) >> 8) : validStatus.fanLevel;
 3e8:	8f 3f       	cpi	r24, 0xFF	; 255
 3ea:	c1 f1       	breq	.+112    	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	a0 e0       	ldi	r26, 0x00	; 0
 3f0:	b0 e0       	ldi	r27, 0x00	; 0
 3f2:	ac 01       	movw	r20, r24
 3f4:	bd 01       	movw	r22, r26
 3f6:	44 0f       	add	r20, r20
 3f8:	55 1f       	adc	r21, r21
 3fa:	66 1f       	adc	r22, r22
 3fc:	77 1f       	adc	r23, r23
 3fe:	44 0f       	add	r20, r20
 400:	55 1f       	adc	r21, r21
 402:	66 1f       	adc	r22, r22
 404:	77 1f       	adc	r23, r23
 406:	44 0f       	add	r20, r20
 408:	55 1f       	adc	r21, r21
 40a:	66 1f       	adc	r22, r22
 40c:	77 1f       	adc	r23, r23
 40e:	48 0f       	add	r20, r24
 410:	59 1f       	adc	r21, r25
 412:	6a 1f       	adc	r22, r26
 414:	7b 1f       	adc	r23, r27
 416:	44 0f       	add	r20, r20
 418:	55 1f       	adc	r21, r21
 41a:	66 1f       	adc	r22, r22
 41c:	77 1f       	adc	r23, r23
 41e:	44 0f       	add	r20, r20
 420:	55 1f       	adc	r21, r21
 422:	66 1f       	adc	r22, r22
 424:	77 1f       	adc	r23, r23
 426:	44 0f       	add	r20, r20
 428:	55 1f       	adc	r21, r21
 42a:	66 1f       	adc	r22, r22
 42c:	77 1f       	adc	r23, r23
 42e:	48 0f       	add	r20, r24
 430:	59 1f       	adc	r21, r25
 432:	6a 1f       	adc	r22, r26
 434:	7b 1f       	adc	r23, r27
 436:	44 0f       	add	r20, r20
 438:	55 1f       	adc	r21, r21
 43a:	66 1f       	adc	r22, r22
 43c:	77 1f       	adc	r23, r23
 43e:	44 0f       	add	r20, r20
 440:	55 1f       	adc	r21, r21
 442:	66 1f       	adc	r22, r22
 444:	77 1f       	adc	r23, r23
 446:	84 0f       	add	r24, r20
 448:	95 1f       	adc	r25, r21
 44a:	a6 1f       	adc	r26, r22
 44c:	b7 1f       	adc	r27, r23
 44e:	89 2f       	mov	r24, r25
 450:	9a 2f       	mov	r25, r26
 452:	ab 2f       	mov	r26, r27
 454:	bb 27       	eor	r27, r27
 456:	a7 fd       	sbrc	r26, 7
 458:	ba 95       	dec	r27
 45a:	03 c0       	rjmp	.+6      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 45c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <validStatus>
 460:	90 e0       	ldi	r25, 0x00	; 0
	if (OCR2A > level)
 462:	20 91 c4 00 	lds	r18, 0x00C4	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
 466:	30 91 c5 00 	lds	r19, 0x00C5	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
 46a:	82 17       	cp	r24, r18
 46c:	93 07       	cpc	r25, r19
 46e:	80 f4       	brcc	.+32     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
	{
		OCR2A--;
 470:	e4 ec       	ldi	r30, 0xC4	; 196
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	80 81       	ld	r24, Z
 476:	91 81       	ldd	r25, Z+1	; 0x01
 478:	01 97       	sbiw	r24, 0x01	; 1
 47a:	91 83       	std	Z+1, r25	; 0x01
 47c:	80 83       	st	Z, r24
		if (OCR2A < FanMin)
 47e:	80 81       	ld	r24, Z
 480:	91 81       	ldd	r25, Z+1	; 0x01
 482:	4c 97       	sbiw	r24, 0x1c	; 28
 484:	e8 f4       	brcc	.+58     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
			OCR2A = 0;
 486:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
 48a:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
 48e:	18 c0       	rjmp	.+48     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
	}
	else if (OCR2A < level)
 490:	20 91 c4 00 	lds	r18, 0x00C4	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
 494:	30 91 c5 00 	lds	r19, 0x00C5	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
 498:	28 17       	cp	r18, r24
 49a:	39 07       	cpc	r19, r25
 49c:	88 f4       	brcc	.+34     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
	{
		OCR2A++;
 49e:	e4 ec       	ldi	r30, 0xC4	; 196
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	20 81       	ld	r18, Z
 4a4:	31 81       	ldd	r19, Z+1	; 0x01
 4a6:	2f 5f       	subi	r18, 0xFF	; 255
 4a8:	3f 4f       	sbci	r19, 0xFF	; 255
 4aa:	31 83       	std	Z+1, r19	; 0x01
 4ac:	20 83       	st	Z, r18
		if (OCR2A < FanMin)
 4ae:	20 81       	ld	r18, Z
 4b0:	31 81       	ldd	r19, Z+1	; 0x01
 4b2:	2c 31       	cpi	r18, 0x1C	; 28
 4b4:	31 05       	cpc	r19, r1
 4b6:	20 f4       	brcc	.+8      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
			OCR2A = level;
 4b8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
 4bc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
	}
	OCR2B = ICR2 - OCR2A;
 4c0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
 4c4:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__EEPROM_REGION_LENGTH__+0x7f00c1>
 4c8:	20 91 c4 00 	lds	r18, 0x00C4	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
 4cc:	30 91 c5 00 	lds	r19, 0x00C5	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
 4d0:	82 1b       	sub	r24, r18
 4d2:	93 0b       	sbc	r25, r19
 4d4:	90 93 c3 00 	sts	0x00C3, r25	; 0x8000c3 <__EEPROM_REGION_LENGTH__+0x7f00c3>
 4d8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
}
 4dc:	ff 91       	pop	r31
 4de:	ef 91       	pop	r30
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	bf 91       	pop	r27
 4e6:	af 91       	pop	r26
 4e8:	9f 91       	pop	r25
 4ea:	8f 91       	pop	r24
 4ec:	7f 91       	pop	r23
 4ee:	6f 91       	pop	r22
 4f0:	5f 91       	pop	r21
 4f2:	4f 91       	pop	r20
 4f4:	3f 91       	pop	r19
 4f6:	2f 91       	pop	r18
 4f8:	0f 90       	pop	r0
 4fa:	0f be       	out	0x3f, r0	; 63
 4fc:	0f 90       	pop	r0
 4fe:	1f 90       	pop	r1
 500:	18 95       	reti

00000502 <__vector_10>:

ISR	(TIMER0_COMPB_vect)
{
 502:	1f 92       	push	r1
 504:	0f 92       	push	r0
 506:	0f b6       	in	r0, 0x3f	; 63
 508:	0f 92       	push	r0
 50a:	11 24       	eor	r1, r1
 50c:	8f 93       	push	r24
	DDRB &= ~(1 << DDB2); //Interface released
 50e:	ba 98       	cbi	0x17, 2	; 23
	TCCR0B = (1 << CS01); //921.6kHz clock, 1 tick = 1.08µs
 510:	82 e0       	ldi	r24, 0x02	; 2
 512:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
 514:	12 be       	out	0x32, r1	; 50
	TIMSK0 = (1 << TOIE0); //Now enable overflow interrupt, timeout 278µs
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	89 bf       	out	0x39, r24	; 57
	PCMSK1 = (1 << PCINT10); //PINB2 as pin change interrupt source
 51a:	84 e0       	ldi	r24, 0x04	; 4
 51c:	80 bd       	out	0x20, r24	; 32
	GIFR = (1 << PCIF1);
 51e:	80 e2       	ldi	r24, 0x20	; 32
 520:	8a bf       	out	0x3a, r24	; 58
	GIMSK = (1 << PCIE1); //Enable pin change interrupt
 522:	8b bf       	out	0x3b, r24	; 59
}
 524:	8f 91       	pop	r24
 526:	0f 90       	pop	r0
 528:	0f be       	out	0x3f, r0	; 63
 52a:	0f 90       	pop	r0
 52c:	1f 90       	pop	r1
 52e:	18 95       	reti

00000530 <__vector_11>:

ISR (TIMER0_OVF_vect)
{
 530:	1f 92       	push	r1
 532:	0f 92       	push	r0
 534:	0f b6       	in	r0, 0x3f	; 63
 536:	0f 92       	push	r0
 538:	11 24       	eor	r1, r1
 53a:	8f 93       	push	r24
	TIMSK0 = 0; //Disable overflow interrupt
 53c:	19 be       	out	0x39, r1	; 57
	GIMSK = 0; //Disable pin change interrupt
 53e:	1b be       	out	0x3b, r1	; 59
	tmpStatus.fanLevel = 1; //Sensor not responded code
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tmpStatus>
}
 546:	8f 91       	pop	r24
 548:	0f 90       	pop	r0
 54a:	0f be       	out	0x3f, r0	; 63
 54c:	0f 90       	pop	r0
 54e:	1f 90       	pop	r1
 550:	18 95       	reti

00000552 <__vector_3>:

ISR (PCINT1_vect)
{
 552:	1f 92       	push	r1
 554:	0f 92       	push	r0
 556:	0f b6       	in	r0, 0x3f	; 63
 558:	0f 92       	push	r0
 55a:	11 24       	eor	r1, r1
 55c:	2f 93       	push	r18
 55e:	3f 93       	push	r19
 560:	4f 93       	push	r20
 562:	5f 93       	push	r21
 564:	8f 93       	push	r24
 566:	9f 93       	push	r25
 568:	af 93       	push	r26
 56a:	bf 93       	push	r27
 56c:	ef 93       	push	r30
 56e:	ff 93       	push	r31
	static am2302 AM2302;
	uint8_t delayz = TCNT0;
 570:	92 b7       	in	r25, 0x32	; 50
	TCNT0 = 0; //Clear counter
 572:	12 be       	out	0x32, r1	; 50
	if (PINB & (1 << PINB2))
 574:	b2 99       	sbic	0x16, 2	; 22
 576:	7c c0       	rjmp	.+248    	; 0x670 <__vector_3+0x11e>
		return; //Skip rising edge interrupt
	if (amCnt++ < 0)
 578:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <amCnt>
 57c:	8f 5f       	subi	r24, 0xFF	; 255
 57e:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <amCnt>
	{
		for (uint8_t j = 0; j < 5; j++)
			AM2302.arr[j] = 0;
		return; //Clear array and that's all
	}
	if (amCnt < 40)
 582:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <amCnt>
 586:	88 32       	cpi	r24, 0x28	; 40
 588:	00 f5       	brcc	.+64     	; 0x5ca <__vector_3+0x78>
	{
		if (delayz > 44) //High level held more than 48µs - logic one received
 58a:	9d 32       	cpi	r25, 0x2D	; 45
 58c:	f0 f0       	brcs	.+60     	; 0x5ca <__vector_3+0x78>
			AM2302.arr[amCnt >> 3] |= (1 << (7 - (amCnt & 7)));
 58e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <amCnt>
 592:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <amCnt>
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	f5 95       	asr	r31
 59a:	e7 95       	ror	r30
 59c:	f5 95       	asr	r31
 59e:	e7 95       	ror	r30
 5a0:	f5 95       	asr	r31
 5a2:	e7 95       	ror	r30
 5a4:	ee 5f       	subi	r30, 0xFE	; 254
 5a6:	fe 4f       	sbci	r31, 0xFE	; 254
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	80 95       	com	r24
 5ac:	90 95       	com	r25
 5ae:	87 70       	andi	r24, 0x07	; 7
 5b0:	99 27       	eor	r25, r25
 5b2:	21 e0       	ldi	r18, 0x01	; 1
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	a9 01       	movw	r20, r18
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <__vector_3+0x6c>
 5ba:	44 0f       	add	r20, r20
 5bc:	55 1f       	adc	r21, r21
 5be:	8a 95       	dec	r24
 5c0:	e2 f7       	brpl	.-8      	; 0x5ba <__vector_3+0x68>
 5c2:	ca 01       	movw	r24, r20
 5c4:	90 81       	ld	r25, Z
 5c6:	89 2b       	or	r24, r25
 5c8:	80 83       	st	Z, r24
	}
	if (amCnt == 39)
 5ca:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <amCnt>
 5ce:	87 32       	cpi	r24, 0x27	; 39
 5d0:	09 f0       	breq	.+2      	; 0x5d4 <__vector_3+0x82>
 5d2:	4e c0       	rjmp	.+156    	; 0x670 <__vector_3+0x11e>
	{
		TIMSK0 = 0; //Disable overflow interrupt
 5d4:	19 be       	out	0x39, r1	; 57
		GIMSK = 0; //Disable pin change interrupt
 5d6:	1b be       	out	0x3b, r1	; 59
		delayz = 0;
		for (uint8_t j = 0; j < 4; j++)
			delayz += AM2302.arr[j];
 5d8:	e2 e0       	ldi	r30, 0x02	; 2
 5da:	f1 e0       	ldi	r31, 0x01	; 1
 5dc:	90 81       	ld	r25, Z
 5de:	81 81       	ldd	r24, Z+1	; 0x01
 5e0:	89 0f       	add	r24, r25
 5e2:	92 81       	ldd	r25, Z+2	; 0x02
 5e4:	89 0f       	add	r24, r25
		if (delayz != AM2302.arr[4])
 5e6:	93 81       	ldd	r25, Z+3	; 0x03
 5e8:	89 0f       	add	r24, r25
 5ea:	94 81       	ldd	r25, Z+4	; 0x04
 5ec:	89 17       	cp	r24, r25
 5ee:	59 f0       	breq	.+22     	; 0x606 <__vector_3+0xb4>
		{
			tmpStatus.fanLevel = 10;
 5f0:	8a e0       	ldi	r24, 0x0A	; 10
 5f2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tmpStatus>
			memcpy(&tmpStatus.insideRH, AM2302.arr, sizeof(am2302));
 5f6:	85 e0       	ldi	r24, 0x05	; 5
 5f8:	a0 e1       	ldi	r26, 0x10	; 16
 5fa:	b1 e0       	ldi	r27, 0x01	; 1
 5fc:	01 90       	ld	r0, Z+
 5fe:	0d 92       	st	X+, r0
 600:	8a 95       	dec	r24
 602:	e1 f7       	brne	.-8      	; 0x5fc <__vector_3+0xaa>
			return;
 604:	35 c0       	rjmp	.+106    	; 0x670 <__vector_3+0x11e>
		}
		if (AM2302.frame.T < 0)
 606:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end+0x2>
 60a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x3>
 60e:	99 23       	and	r25, r25
 610:	44 f4       	brge	.+16     	; 0x622 <__vector_3+0xd0>
			AM2302.frame.T = ~(AM2302.frame.T & 0x7FFF) + 1;
 612:	9f 77       	andi	r25, 0x7F	; 127
 614:	91 95       	neg	r25
 616:	81 95       	neg	r24
 618:	91 09       	sbc	r25, r1
 61a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x3>
 61e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end+0x2>
			if (((uint8_t)cycles & 0xF) < 10)
 622:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <cycles>
 626:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <cycles+0x1>
 62a:	8f 70       	andi	r24, 0x0F	; 15
 62c:	99 27       	eor	r25, r25
 62e:	0a 97       	sbiw	r24, 0x0a	; 10
 630:	84 f4       	brge	.+32     	; 0x652 <__vector_3+0x100>
			{
				tmpStatus.insideRH = AM2302.frame.RH;
 632:	e9 e0       	ldi	r30, 0x09	; 9
 634:	f1 e0       	ldi	r31, 0x01	; 1
 636:	a2 e0       	ldi	r26, 0x02	; 2
 638:	b1 e0       	ldi	r27, 0x01	; 1
 63a:	8d 91       	ld	r24, X+
 63c:	9c 91       	ld	r25, X
 63e:	11 97       	sbiw	r26, 0x01	; 1
 640:	90 87       	std	Z+8, r25	; 0x08
 642:	87 83       	std	Z+7, r24	; 0x07
				tmpStatus.insideT = AM2302.frame.T;
 644:	12 96       	adiw	r26, 0x02	; 2
 646:	8d 91       	ld	r24, X+
 648:	9c 91       	ld	r25, X
 64a:	13 97       	sbiw	r26, 0x03	; 3
 64c:	94 87       	std	Z+12, r25	; 0x0c
 64e:	83 87       	std	Z+11, r24	; 0x0b
 650:	0f c0       	rjmp	.+30     	; 0x670 <__vector_3+0x11e>
			}
			else
			{
				tmpStatus.outsideRH = AM2302.frame.RH;
 652:	e9 e0       	ldi	r30, 0x09	; 9
 654:	f1 e0       	ldi	r31, 0x01	; 1
 656:	a2 e0       	ldi	r26, 0x02	; 2
 658:	b1 e0       	ldi	r27, 0x01	; 1
 65a:	8d 91       	ld	r24, X+
 65c:	9c 91       	ld	r25, X
 65e:	11 97       	sbiw	r26, 0x01	; 1
 660:	92 87       	std	Z+10, r25	; 0x0a
 662:	81 87       	std	Z+9, r24	; 0x09
				tmpStatus.outsideT = AM2302.frame.T;
 664:	12 96       	adiw	r26, 0x02	; 2
 666:	8d 91       	ld	r24, X+
 668:	9c 91       	ld	r25, X
 66a:	13 97       	sbiw	r26, 0x03	; 3
 66c:	96 87       	std	Z+14, r25	; 0x0e
 66e:	85 87       	std	Z+13, r24	; 0x0d
				FanRegulation();
			}		
	}
}
 670:	ff 91       	pop	r31
 672:	ef 91       	pop	r30
 674:	bf 91       	pop	r27
 676:	af 91       	pop	r26
 678:	9f 91       	pop	r25
 67a:	8f 91       	pop	r24
 67c:	5f 91       	pop	r21
 67e:	4f 91       	pop	r20
 680:	3f 91       	pop	r19
 682:	2f 91       	pop	r18
 684:	0f 90       	pop	r0
 686:	0f be       	out	0x3f, r0	; 63
 688:	0f 90       	pop	r0
 68a:	1f 90       	pop	r1
 68c:	18 95       	reti

0000068e <__vector_5>:

ISR (TIMER1_CAPT_vect)
{
 68e:	1f 92       	push	r1
 690:	0f 92       	push	r0
 692:	0f b6       	in	r0, 0x3f	; 63
 694:	0f 92       	push	r0
 696:	11 24       	eor	r1, r1
 698:	0f 93       	push	r16
 69a:	1f 93       	push	r17
 69c:	2f 93       	push	r18
 69e:	3f 93       	push	r19
 6a0:	4f 93       	push	r20
 6a2:	5f 93       	push	r21
 6a4:	6f 93       	push	r22
 6a6:	7f 93       	push	r23
 6a8:	8f 93       	push	r24
 6aa:	9f 93       	push	r25
 6ac:	af 93       	push	r26
 6ae:	bf 93       	push	r27
	if (tachCnt++ > 0)
 6b0:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <tachCnt>
 6b4:	91 e0       	ldi	r25, 0x01	; 1
 6b6:	98 0f       	add	r25, r24
 6b8:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <tachCnt>
 6bc:	88 23       	and	r24, r24
 6be:	09 f4       	brne	.+2      	; 0x6c2 <__vector_5+0x34>
 6c0:	45 c0       	rjmp	.+138    	; 0x74c <__vector_5+0xbe>
	{
		if (ICR1 < tachPrev)
 6c2:	24 b5       	in	r18, 0x24	; 36
 6c4:	35 b5       	in	r19, 0x25	; 37
 6c6:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <tachPrev>
 6ca:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <tachPrev+0x1>
 6ce:	28 17       	cp	r18, r24
 6d0:	39 07       	cpc	r19, r25
 6d2:	00 f5       	brcc	.+64     	; 0x714 <__vector_5+0x86>
			tachSum += 0xFFFF - tachPrev + ICR1;
 6d4:	84 b5       	in	r24, 0x24	; 36
 6d6:	95 b5       	in	r25, 0x25	; 37
 6d8:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <tachPrev>
 6dc:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <tachPrev+0x1>
 6e0:	01 97       	sbiw	r24, 0x01	; 1
 6e2:	82 1b       	sub	r24, r18
 6e4:	93 0b       	sbc	r25, r19
 6e6:	40 91 43 01 	lds	r20, 0x0143	; 0x800143 <tachSum>
 6ea:	50 91 44 01 	lds	r21, 0x0144	; 0x800144 <tachSum+0x1>
 6ee:	60 91 45 01 	lds	r22, 0x0145	; 0x800145 <tachSum+0x2>
 6f2:	70 91 46 01 	lds	r23, 0x0146	; 0x800146 <tachSum+0x3>
 6f6:	8a 01       	movw	r16, r20
 6f8:	9b 01       	movw	r18, r22
 6fa:	08 0f       	add	r16, r24
 6fc:	19 1f       	adc	r17, r25
 6fe:	21 1d       	adc	r18, r1
 700:	31 1d       	adc	r19, r1
 702:	00 93 43 01 	sts	0x0143, r16	; 0x800143 <tachSum>
 706:	10 93 44 01 	sts	0x0144, r17	; 0x800144 <tachSum+0x1>
 70a:	20 93 45 01 	sts	0x0145, r18	; 0x800145 <tachSum+0x2>
 70e:	30 93 46 01 	sts	0x0146, r19	; 0x800146 <tachSum+0x3>
 712:	1c c0       	rjmp	.+56     	; 0x74c <__vector_5+0xbe>
		else
			tachSum += ICR1 - tachPrev;
 714:	24 b5       	in	r18, 0x24	; 36
 716:	35 b5       	in	r19, 0x25	; 37
 718:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <tachPrev>
 71c:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <tachPrev+0x1>
 720:	28 1b       	sub	r18, r24
 722:	39 0b       	sbc	r19, r25
 724:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <tachSum>
 728:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <tachSum+0x1>
 72c:	a0 91 45 01 	lds	r26, 0x0145	; 0x800145 <tachSum+0x2>
 730:	b0 91 46 01 	lds	r27, 0x0146	; 0x800146 <tachSum+0x3>
 734:	82 0f       	add	r24, r18
 736:	93 1f       	adc	r25, r19
 738:	a1 1d       	adc	r26, r1
 73a:	b1 1d       	adc	r27, r1
 73c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <tachSum>
 740:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <tachSum+0x1>
 744:	a0 93 45 01 	sts	0x0145, r26	; 0x800145 <tachSum+0x2>
 748:	b0 93 46 01 	sts	0x0146, r27	; 0x800146 <tachSum+0x3>
	}
	if (tachCnt > 7)
 74c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <tachCnt>
 750:	88 30       	cpi	r24, 0x08	; 8
 752:	08 f0       	brcs	.+2      	; 0x756 <__vector_5+0xc8>
		TIMSK1 &= ~(1 << ICIE1);
 754:	7d 98       	cbi	0x0f, 5	; 15
	tachPrev = ICR1;
 756:	84 b5       	in	r24, 0x24	; 36
 758:	95 b5       	in	r25, 0x25	; 37
 75a:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <tachPrev+0x1>
 75e:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <tachPrev>
}
 762:	bf 91       	pop	r27
 764:	af 91       	pop	r26
 766:	9f 91       	pop	r25
 768:	8f 91       	pop	r24
 76a:	7f 91       	pop	r23
 76c:	6f 91       	pop	r22
 76e:	5f 91       	pop	r21
 770:	4f 91       	pop	r20
 772:	3f 91       	pop	r19
 774:	2f 91       	pop	r18
 776:	1f 91       	pop	r17
 778:	0f 91       	pop	r16
 77a:	0f 90       	pop	r0
 77c:	0f be       	out	0x3f, r0	; 63
 77e:	0f 90       	pop	r0
 780:	1f 90       	pop	r1
 782:	18 95       	reti

00000784 <__vector_13>:

ISR (ADC_vect)
{
 784:	1f 92       	push	r1
 786:	0f 92       	push	r0
 788:	0f b6       	in	r0, 0x3f	; 63
 78a:	0f 92       	push	r0
 78c:	11 24       	eor	r1, r1
 78e:	2f 93       	push	r18
 790:	3f 93       	push	r19
 792:	8f 93       	push	r24
 794:	9f 93       	push	r25
	adcSum += ADC;
 796:	26 b1       	in	r18, 0x06	; 6
 798:	37 b1       	in	r19, 0x07	; 7
 79a:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <adcSum>
 79e:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <adcSum+0x1>
 7a2:	82 0f       	add	r24, r18
 7a4:	93 1f       	adc	r25, r19
 7a6:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <adcSum+0x1>
 7aa:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <adcSum>
}
 7ae:	9f 91       	pop	r25
 7b0:	8f 91       	pop	r24
 7b2:	3f 91       	pop	r19
 7b4:	2f 91       	pop	r18
 7b6:	0f 90       	pop	r0
 7b8:	0f be       	out	0x3f, r0	; 63
 7ba:	0f 90       	pop	r0
 7bc:	1f 90       	pop	r1
 7be:	18 95       	reti

000007c0 <_Z7mcuInitv>:


void inline mcuInit()
{
	cli();
 7c0:	f8 94       	cli
	//Port A outputs: U0TX, PWMA, PWMB, U0EN, SEL
	DDRA = (1 << DDA1) | (1 << DDA3) | (1 << DDA4) | (1 << DDA5) | (1 << DDA6);
 7c2:	8a e7       	ldi	r24, 0x7A	; 122
 7c4:	8a bb       	out	0x1a, r24	; 26
	//USART 0: 76.8kbps, frame bits: start / 9 data / 2 stop, multi-processor communication
	UBRR0 = 5; //Actual maximum transfer rate: 6400Bps
 7c6:	85 e0       	ldi	r24, 0x05	; 5
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <__EEPROM_REGION_LENGTH__+0x7f0082>
 7ce:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
	UCSR0B = (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0) | (1 << UCSZ02);
 7d2:	8c ed       	ldi	r24, 0xDC	; 220
 7d4:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
	UCSR0C = (1 << USBS0) | (1 << UCSZ01) | (1 << UCSZ00);
 7d8:	8e e0       	ldi	r24, 0x0E	; 14
 7da:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	UCSR0A = (1 << MPCM0);
 7de:	81 e0       	ldi	r24, 0x01	; 1
 7e0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
	//Timer 1: 921.6kHz clock, input capture on leading edge, noise filtering, OVF interrupt
	//If fan is running for 4 poles, minimum measurable speed is 422rpm
	TCCR1B = (1 << ICNC1) | (1 << ICES1) | (1 << CS11);
 7e4:	92 ec       	ldi	r25, 0xC2	; 194
 7e6:	9e bd       	out	0x2e, r25	; 46
	TIMSK1 = (1 << TOIE1);
 7e8:	8f b9       	out	0x0f, r24	; 15
	//Timer 2: 7.3728MHz clock, fast PWM, top in ICR2, OC2A non-inverting (TOCC3), OC2B inverting (TOCC2)
	ICR2 = PWM_max; //25kHz PWM frequency
 7ea:	25 e2       	ldi	r18, 0x25	; 37
 7ec:	31 e0       	ldi	r19, 0x01	; 1
 7ee:	30 93 c1 00 	sts	0x00C1, r19	; 0x8000c1 <__EEPROM_REGION_LENGTH__+0x7f00c1>
 7f2:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
	OCR2A = 0; //Non-inverting output: off
 7f6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
 7fa:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
	OCR2B = PWM_max; //Inverting output: off
 7fe:	30 93 c3 00 	sts	0x00C3, r19	; 0x8000c3 <__EEPROM_REGION_LENGTH__+0x7f00c3>
 802:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
	TCCR2A = (1 << COM2A1) | (1 << COM2B1) | (1 << COM2B0) | (1 << WGM21);
 806:	92 eb       	ldi	r25, 0xB2	; 178
 808:	90 93 ca 00 	sts	0x00CA, r25	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
	TCCR2B = (1 << WGM23) | (1 << WGM22) | (1 << CS20);
 80c:	99 e1       	ldi	r25, 0x19	; 25
 80e:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
	TOCPMSA0 |= (1 << TOCC2S1) | (1 << TOCC3S1);
 812:	e7 e6       	ldi	r30, 0x67	; 103
 814:	f0 e0       	ldi	r31, 0x00	; 0
 816:	90 81       	ld	r25, Z
 818:	90 6a       	ori	r25, 0xA0	; 160
 81a:	90 83       	st	Z, r25
	TOCPMCOE |= (1 << TOCC2OE) | (1 << TOCC3OE);
 81c:	e6 e6       	ldi	r30, 0x66	; 102
 81e:	f0 e0       	ldi	r31, 0x00	; 0
 820:	90 81       	ld	r25, Z
 822:	9c 60       	ori	r25, 0x0C	; 12
 824:	90 83       	st	Z, r25
	//ADC: 1.1V reference, 230.4kHz clock, ADC0 input, interrupt
	ADMUXB = (1 << REFS0);
 826:	90 e2       	ldi	r25, 0x20	; 32
 828:	98 b9       	out	0x08, r25	; 8
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS0);
 82a:	9d e8       	ldi	r25, 0x8D	; 141
 82c:	95 b9       	out	0x05, r25	; 5
	DIDR0 = (1 << ADC0D);
 82e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
	//Power reduction: I²C, USART1 and SPI are not used in this project
	PRR = (1 << PRTWI) | (1 << PRUSART1) | (1 << PRSPI);
 832:	80 ed       	ldi	r24, 0xD0	; 208
 834:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__EEPROM_REGION_LENGTH__+0x7f0070>
	sei();
 838:	78 94       	sei
 83a:	08 95       	ret

0000083c <main>:
}

int main(void)
{
	mcuInit();
 83c:	c1 df       	rcall	.-126    	; 0x7c0 <_Z7mcuInitv>

	eeprom_read_block(&validConf, &eConf, sizeof(sysConfig));
 83e:	4b e0       	ldi	r20, 0x0B	; 11
 840:	50 e0       	ldi	r21, 0x00	; 0
 842:	60 e0       	ldi	r22, 0x00	; 0
 844:	70 e0       	ldi	r23, 0x00	; 0
 846:	86 e3       	ldi	r24, 0x36	; 54
 848:	91 e0       	ldi	r25, 0x01	; 1
 84a:	59 d0       	rcall	.+178    	; 0x8fe <eeprom_read_block>
	validConf.fanLevelOverride = 0xFF; //No override at startup
 84c:	c6 e3       	ldi	r28, 0x36	; 54
 84e:	d1 e0       	ldi	r29, 0x01	; 1
 850:	8f ef       	ldi	r24, 0xFF	; 255
 852:	88 83       	st	Y, r24
	validConf.CRC16 = CalculateCRC16(&validConf, sizeof(sysConfig) - 2);
 854:	69 e0       	ldi	r22, 0x09	; 9
 856:	ce 01       	movw	r24, r28
 858:	0d dc       	rcall	.-2022   	; 0x74 <_Z14CalculateCRC16Pva>
 85a:	9a 87       	std	Y+10, r25	; 0x0a
 85c:	89 87       	std	Y+9, r24	; 0x09
 85e:	ff cf       	rjmp	.-2      	; 0x85e <main+0x22>

00000860 <__mulsi3>:
 860:	ee 27       	eor	r30, r30
 862:	ff 27       	eor	r31, r31

00000864 <__mulsi3_helper>:
 864:	aa 27       	eor	r26, r26
 866:	bb 27       	eor	r27, r27
 868:	08 c0       	rjmp	.+16     	; 0x87a <__mulsi3_helper+0x16>
 86a:	a2 0f       	add	r26, r18
 86c:	b3 1f       	adc	r27, r19
 86e:	e4 1f       	adc	r30, r20
 870:	f5 1f       	adc	r31, r21
 872:	22 0f       	add	r18, r18
 874:	33 1f       	adc	r19, r19
 876:	44 1f       	adc	r20, r20
 878:	55 1f       	adc	r21, r21
 87a:	96 95       	lsr	r25
 87c:	87 95       	ror	r24
 87e:	77 95       	ror	r23
 880:	67 95       	ror	r22
 882:	98 f3       	brcs	.-26     	; 0x86a <__mulsi3_helper+0x6>
 884:	70 40       	sbci	r23, 0x00	; 0
 886:	a9 f7       	brne	.-22     	; 0x872 <__mulsi3_helper+0xe>
 888:	00 97       	sbiw	r24, 0x00	; 0
 88a:	99 f7       	brne	.-26     	; 0x872 <__mulsi3_helper+0xe>
 88c:	bd 01       	movw	r22, r26
 88e:	cf 01       	movw	r24, r30
 890:	08 95       	ret

00000892 <__udivmodhi4>:
 892:	aa 1b       	sub	r26, r26
 894:	bb 1b       	sub	r27, r27
 896:	51 e1       	ldi	r21, 0x11	; 17
 898:	07 c0       	rjmp	.+14     	; 0x8a8 <__udivmodhi4_ep>

0000089a <__udivmodhi4_loop>:
 89a:	aa 1f       	adc	r26, r26
 89c:	bb 1f       	adc	r27, r27
 89e:	a6 17       	cp	r26, r22
 8a0:	b7 07       	cpc	r27, r23
 8a2:	10 f0       	brcs	.+4      	; 0x8a8 <__udivmodhi4_ep>
 8a4:	a6 1b       	sub	r26, r22
 8a6:	b7 0b       	sbc	r27, r23

000008a8 <__udivmodhi4_ep>:
 8a8:	88 1f       	adc	r24, r24
 8aa:	99 1f       	adc	r25, r25
 8ac:	5a 95       	dec	r21
 8ae:	a9 f7       	brne	.-22     	; 0x89a <__udivmodhi4_loop>
 8b0:	80 95       	com	r24
 8b2:	90 95       	com	r25
 8b4:	bc 01       	movw	r22, r24
 8b6:	cd 01       	movw	r24, r26
 8b8:	08 95       	ret

000008ba <__udivmodsi4>:
 8ba:	a1 e2       	ldi	r26, 0x21	; 33
 8bc:	1a 2e       	mov	r1, r26
 8be:	aa 1b       	sub	r26, r26
 8c0:	bb 1b       	sub	r27, r27
 8c2:	fd 01       	movw	r30, r26
 8c4:	0d c0       	rjmp	.+26     	; 0x8e0 <__udivmodsi4_ep>

000008c6 <__udivmodsi4_loop>:
 8c6:	aa 1f       	adc	r26, r26
 8c8:	bb 1f       	adc	r27, r27
 8ca:	ee 1f       	adc	r30, r30
 8cc:	ff 1f       	adc	r31, r31
 8ce:	a2 17       	cp	r26, r18
 8d0:	b3 07       	cpc	r27, r19
 8d2:	e4 07       	cpc	r30, r20
 8d4:	f5 07       	cpc	r31, r21
 8d6:	20 f0       	brcs	.+8      	; 0x8e0 <__udivmodsi4_ep>
 8d8:	a2 1b       	sub	r26, r18
 8da:	b3 0b       	sbc	r27, r19
 8dc:	e4 0b       	sbc	r30, r20
 8de:	f5 0b       	sbc	r31, r21

000008e0 <__udivmodsi4_ep>:
 8e0:	66 1f       	adc	r22, r22
 8e2:	77 1f       	adc	r23, r23
 8e4:	88 1f       	adc	r24, r24
 8e6:	99 1f       	adc	r25, r25
 8e8:	1a 94       	dec	r1
 8ea:	69 f7       	brne	.-38     	; 0x8c6 <__udivmodsi4_loop>
 8ec:	60 95       	com	r22
 8ee:	70 95       	com	r23
 8f0:	80 95       	com	r24
 8f2:	90 95       	com	r25
 8f4:	9b 01       	movw	r18, r22
 8f6:	ac 01       	movw	r20, r24
 8f8:	bd 01       	movw	r22, r26
 8fa:	cf 01       	movw	r24, r30
 8fc:	08 95       	ret

000008fe <eeprom_read_block>:
 8fe:	dc 01       	movw	r26, r24
 900:	86 2f       	mov	r24, r22

00000902 <eeprom_read_blraw>:
 902:	e8 2f       	mov	r30, r24
 904:	e1 99       	sbic	0x1c, 1	; 28
 906:	fe cf       	rjmp	.-4      	; 0x904 <eeprom_read_blraw+0x2>
 908:	1f ba       	out	0x1f, r1	; 31
 90a:	05 c0       	rjmp	.+10     	; 0x916 <eeprom_read_blraw+0x14>
 90c:	ee bb       	out	0x1e, r30	; 30
 90e:	e0 9a       	sbi	0x1c, 0	; 28
 910:	e3 95       	inc	r30
 912:	0d b2       	in	r0, 0x1d	; 29
 914:	0d 92       	st	X+, r0
 916:	41 50       	subi	r20, 0x01	; 1
 918:	c8 f7       	brcc	.-14     	; 0x90c <eeprom_read_blraw+0xa>
 91a:	08 95       	ret

0000091c <eeprom_update_block>:
 91c:	dc 01       	movw	r26, r24
 91e:	a4 0f       	add	r26, r20
 920:	b5 1f       	adc	r27, r21
 922:	41 50       	subi	r20, 0x01	; 1
 924:	50 40       	sbci	r21, 0x00	; 0
 926:	38 f0       	brcs	.+14     	; 0x936 <eeprom_update_block+0x1a>
 928:	86 2f       	mov	r24, r22
 92a:	84 0f       	add	r24, r20
 92c:	2e 91       	ld	r18, -X
 92e:	05 d0       	rcall	.+10     	; 0x93a <eeprom_update_r18>
 930:	41 50       	subi	r20, 0x01	; 1
 932:	50 40       	sbci	r21, 0x00	; 0
 934:	d8 f7       	brcc	.-10     	; 0x92c <eeprom_update_block+0x10>
 936:	08 95       	ret

00000938 <eeprom_update_byte>:
 938:	26 2f       	mov	r18, r22

0000093a <eeprom_update_r18>:
 93a:	e1 99       	sbic	0x1c, 1	; 28
 93c:	fe cf       	rjmp	.-4      	; 0x93a <eeprom_update_r18>
 93e:	1f ba       	out	0x1f, r1	; 31
 940:	8e bb       	out	0x1e, r24	; 30
 942:	e0 9a       	sbi	0x1c, 0	; 28
 944:	81 50       	subi	r24, 0x01	; 1
 946:	0d b2       	in	r0, 0x1d	; 29
 948:	02 16       	cp	r0, r18
 94a:	39 f0       	breq	.+14     	; 0x95a <eeprom_update_r18+0x20>
 94c:	1c ba       	out	0x1c, r1	; 28
 94e:	2d bb       	out	0x1d, r18	; 29
 950:	0f b6       	in	r0, 0x3f	; 63
 952:	f8 94       	cli
 954:	e2 9a       	sbi	0x1c, 2	; 28
 956:	e1 9a       	sbi	0x1c, 1	; 28
 958:	0f be       	out	0x3f, r0	; 63
 95a:	08 95       	ret

0000095c <_exit>:
 95c:	f8 94       	cli

0000095e <__stop_program>:
 95e:	ff cf       	rjmp	.-2      	; 0x95e <__stop_program>
