
AirConditioning.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000ad2  00000b86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ad2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004b  00800102  00800102  00000b88  2**0
                  ALLOC
  3 .eeprom       0000000b  00810000  00810000  00000b88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00000b93  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bc4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000d0  00000000  00000000  00000c00  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000011a0  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a47  00000000  00000000  00001e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000099b  00000000  00000000  000028b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000024c  00000000  00000000  00003254  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000704  00000000  00000000  000034a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000880  00000000  00000000  00003ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000078  00000000  00000000  00004424  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
   2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
   4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
   6:	35 c0       	rjmp	.+106    	; 0x72 <__bad_interrupt>
   8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
   a:	1e c2       	rjmp	.+1084   	; 0x448 <__vector_5>
   c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
   e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
  10:	3f c1       	rjmp	.+638    	; 0x290 <__vector_8>
  12:	28 c1       	rjmp	.+592    	; 0x264 <__vector_9>
  14:	2e c0       	rjmp	.+92     	; 0x72 <__bad_interrupt>
  16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
  18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
  1a:	94 c2       	rjmp	.+1320   	; 0x544 <__vector_13>
  1c:	2a c0       	rjmp	.+84     	; 0x72 <__bad_interrupt>
  1e:	29 c0       	rjmp	.+82     	; 0x72 <__bad_interrupt>
  20:	28 c0       	rjmp	.+80     	; 0x72 <__bad_interrupt>
  22:	27 c0       	rjmp	.+78     	; 0x72 <__bad_interrupt>
  24:	26 c0       	rjmp	.+76     	; 0x72 <__bad_interrupt>
  26:	25 c0       	rjmp	.+74     	; 0x72 <__bad_interrupt>
  28:	24 c0       	rjmp	.+72     	; 0x72 <__bad_interrupt>
  2a:	23 c0       	rjmp	.+70     	; 0x72 <__bad_interrupt>
  2c:	49 c0       	rjmp	.+146    	; 0xc0 <__vector_22>
  2e:	21 c0       	rjmp	.+66     	; 0x72 <__bad_interrupt>
  30:	eb c0       	rjmp	.+470    	; 0x208 <__vector_24>
  32:	1f c0       	rjmp	.+62     	; 0x72 <__bad_interrupt>
  34:	1e c0       	rjmp	.+60     	; 0x72 <__bad_interrupt>
  36:	1d c0       	rjmp	.+58     	; 0x72 <__bad_interrupt>
  38:	1c c0       	rjmp	.+56     	; 0x72 <__bad_interrupt>
  3a:	1b c0       	rjmp	.+54     	; 0x72 <__bad_interrupt>

0000003c <__ctors_end>:
  3c:	11 24       	eor	r1, r1
  3e:	1f be       	out	0x3f, r1	; 63
  40:	cf ef       	ldi	r28, 0xFF	; 255
  42:	d1 e0       	ldi	r29, 0x01	; 1
  44:	de bf       	out	0x3e, r29	; 62
  46:	cd bf       	out	0x3d, r28	; 61

00000048 <__do_copy_data>:
  48:	11 e0       	ldi	r17, 0x01	; 1
  4a:	a0 e0       	ldi	r26, 0x00	; 0
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	e2 ed       	ldi	r30, 0xD2	; 210
  50:	fa e0       	ldi	r31, 0x0A	; 10
  52:	02 c0       	rjmp	.+4      	; 0x58 <__do_copy_data+0x10>
  54:	05 90       	lpm	r0, Z+
  56:	0d 92       	st	X+, r0
  58:	a2 30       	cpi	r26, 0x02	; 2
  5a:	b1 07       	cpc	r27, r17
  5c:	d9 f7       	brne	.-10     	; 0x54 <__do_copy_data+0xc>

0000005e <__do_clear_bss>:
  5e:	21 e0       	ldi	r18, 0x01	; 1
  60:	a2 e0       	ldi	r26, 0x02	; 2
  62:	b1 e0       	ldi	r27, 0x01	; 1
  64:	01 c0       	rjmp	.+2      	; 0x68 <.do_clear_bss_start>

00000066 <.do_clear_bss_loop>:
  66:	1d 92       	st	X+, r1

00000068 <.do_clear_bss_start>:
  68:	ad 34       	cpi	r26, 0x4D	; 77
  6a:	b2 07       	cpc	r27, r18
  6c:	e1 f7       	brne	.-8      	; 0x66 <.do_clear_bss_loop>
  6e:	3a d4       	rcall	.+2164   	; 0x8e4 <main>
  70:	2e c5       	rjmp	.+2652   	; 0xace <_exit>

00000072 <__bad_interrupt>:
  72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <_Z14CalculateCRC16Pva>:

uint16_t CalculateCRC16(void *arr, int8_t count)
{
	uint8_t *ptr = (uint8_t*)arr;
	uint16_t CRC16 = 0xffff;
	while (--count >= 0)
  74:	61 50       	subi	r22, 0x01	; 1
  76:	0a f1       	brmi	.+66     	; 0xba <_Z14CalculateCRC16Pva+0x46>
  78:	e8 2f       	mov	r30, r24
  7a:	f9 2f       	mov	r31, r25
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	9f ef       	ldi	r25, 0xFF	; 255
		CRC16 = _crc_xmodem_update(CRC16, *ptr++);
  80:	21 91       	ld	r18, Z+
        "eor    %B0,%A0"         "\n\t" /* ret.hi is now ready. */
        "mov    %A0,%1"          "\n\t" /* ret.lo is now ready. */
        : "=d" (__ret), "=d" (__tmp1), "=d" (__tmp2)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
  82:	92 27       	eor	r25, r18
  84:	09 2e       	mov	r0, r25
  86:	02 94       	swap	r0
  88:	20 2d       	mov	r18, r0
  8a:	2f 70       	andi	r18, 0x0F	; 15
  8c:	29 27       	eor	r18, r25
  8e:	39 2f       	mov	r19, r25
  90:	30 25       	eor	r19, r0
  92:	33 0f       	add	r19, r19
  94:	30 7e       	andi	r19, 0xE0	; 224
  96:	23 27       	eor	r18, r19
  98:	30 2d       	mov	r19, r0
  9a:	39 27       	eor	r19, r25
  9c:	30 7f       	andi	r19, 0xF0	; 240
  9e:	36 95       	lsr	r19
  a0:	09 2e       	mov	r0, r25
  a2:	00 0c       	add	r0, r0
  a4:	33 1f       	adc	r19, r19
  a6:	96 95       	lsr	r25
  a8:	96 95       	lsr	r25
  aa:	96 95       	lsr	r25
  ac:	9f 71       	andi	r25, 0x1F	; 31
  ae:	93 27       	eor	r25, r19
  b0:	98 27       	eor	r25, r24
  b2:	82 2f       	mov	r24, r18
  b4:	61 50       	subi	r22, 0x01	; 1

uint16_t CalculateCRC16(void *arr, int8_t count)
{
	uint8_t *ptr = (uint8_t*)arr;
	uint16_t CRC16 = 0xffff;
	while (--count >= 0)
  b6:	22 f7       	brpl	.-56     	; 0x80 <_Z14CalculateCRC16Pva+0xc>
  b8:	08 95       	ret
}

uint16_t CalculateCRC16(void *arr, int8_t count)
{
	uint8_t *ptr = (uint8_t*)arr;
	uint16_t CRC16 = 0xffff;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	9f ef       	ldi	r25, 0xFF	; 255
	while (--count >= 0)
		CRC16 = _crc_xmodem_update(CRC16, *ptr++);
	return CRC16;
}
  be:	08 95       	ret

000000c0 <__vector_22>:

ISR (USART0_RX_vect)
{
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	2f 93       	push	r18
  cc:	3f 93       	push	r19
  ce:	4f 93       	push	r20
  d0:	5f 93       	push	r21
  d2:	6f 93       	push	r22
  d4:	7f 93       	push	r23
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
  da:	af 93       	push	r26
  dc:	bf 93       	push	r27
  de:	ef 93       	push	r30
  e0:	ff 93       	push	r31
	static char uCnt = 0;
	static uint8_t *rxBuf = (uint8_t*)&rcvdConf;
	uint8_t data = UDR0;
  e2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
	if (UCSR0A & (1 << MPCM0)) //Address listening mode
  e6:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
  ea:	90 ff       	sbrs	r25, 0
  ec:	5d c0       	rjmp	.+186    	; 0x1a8 <__vector_22+0xe8>
	{
		if (CmdLC <= data && data <= CmdUC)
  ee:	9f ee       	ldi	r25, 0xEF	; 239
  f0:	98 0f       	add	r25, r24
  f2:	93 30       	cpi	r25, 0x03	; 3
  f4:	08 f0       	brcs	.+2      	; 0xf8 <__vector_22+0x38>
  f6:	55 c0       	rjmp	.+170    	; 0x1a2 <__vector_22+0xe2>
		{
			UCSR0A = 0; //Clear MPCM bit
  f8:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
			rxMode = data;
  fc:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <rxMode>
			if (data == SetConfig)
 100:	83 31       	cpi	r24, 0x13	; 19
 102:	a9 f4       	brne	.+42     	; 0x12e <__vector_22+0x6e>
			{
				uCnt = sizeof(sysConfig); //Bytes to receive
 104:	8b e0       	ldi	r24, 0x0B	; 11
 106:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				rxBuf = (uint8_t*)&rcvdConf; //First byte address in structure
 10a:	85 e2       	ldi	r24, 0x25	; 37
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 112:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				TCNT0 = 0;
 116:	12 be       	out	0x32, r1	; 50
				TCCR0B = (1 << CS02); //14.4kHz clock
 118:	84 e0       	ldi	r24, 0x04	; 4
 11a:	83 bf       	out	0x33, r24	; 51
				OCR0A = OCR0B; //Load cycles count
 11c:	8c b7       	in	r24, 0x3c	; 60
 11e:	86 bf       	out	0x36, r24	; 54
				TIFR0 |= (1 << OCF0A); //Clear interrupt flag
 120:	88 b7       	in	r24, 0x38	; 56
 122:	82 60       	ori	r24, 0x02	; 2
 124:	88 bf       	out	0x38, r24	; 56
				TIMSK0 |= (1 << OCIE0A); //Enable packet lost interrupt
 126:	89 b7       	in	r24, 0x39	; 57
 128:	82 60       	ori	r24, 0x02	; 2
 12a:	89 bf       	out	0x39, r24	; 57
 12c:	5c c0       	rjmp	.+184    	; 0x1e6 <__vector_22+0x126>

sysConfig EEMEM eConf = { 0xFF, 100, 400, 40, 80, 0 };

void inline U0TXen()
{
	PORTA |= (1 << PORTA5);
 12e:	dd 9a       	sbi	0x1b, 5	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	80 e3       	ldi	r24, 0x30	; 48
 132:	8a 95       	dec	r24
 134:	f1 f7       	brne	.-4      	; 0x132 <__vector_22+0x72>
				TIMSK0 |= (1 << OCIE0A); //Enable packet lost interrupt
			}
			else
			{
				U0TXen();
				if (rxMode == GetConfig)
 136:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <rxMode>
 13a:	82 31       	cpi	r24, 0x12	; 18
 13c:	51 f4       	brne	.+20     	; 0x152 <__vector_22+0x92>
				{
					txCnt = sizeof(sysConfig) - 1; //Because one byte will be send right there
 13e:	8a e0       	ldi	r24, 0x0A	; 10
 140:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <txCnt>
					txBuf = (uint8_t*)&validConf;
 144:	80 e3       	ldi	r24, 0x30	; 48
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <txBuf+0x1>
 14c:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <txBuf>
 150:	1a c0       	rjmp	.+52     	; 0x186 <__vector_22+0xc6>
				}
				else //Get status
				{
					tmpStatus.CRC16 = CalculateCRC16(&tmpStatus, sizeof(sysStatus) - 2);
 152:	6f e0       	ldi	r22, 0x0F	; 15
 154:	83 e0       	ldi	r24, 0x03	; 3
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	8d df       	rcall	.-230    	; 0x74 <_Z14CalculateCRC16Pva>
 15a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <tmpStatus+0x10>
 15e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <tmpStatus+0xf>
					memcpy(&validStatus, &tmpStatus, sizeof(sysStatus));
 162:	81 e1       	ldi	r24, 0x11	; 17
 164:	e3 e0       	ldi	r30, 0x03	; 3
 166:	f1 e0       	ldi	r31, 0x01	; 1
 168:	a4 e1       	ldi	r26, 0x14	; 20
 16a:	b1 e0       	ldi	r27, 0x01	; 1
 16c:	01 90       	ld	r0, Z+
 16e:	0d 92       	st	X+, r0
 170:	8a 95       	dec	r24
 172:	e1 f7       	brne	.-8      	; 0x16c <__vector_22+0xac>
					txCnt = sizeof(sysStatus) - 1;
 174:	80 e1       	ldi	r24, 0x10	; 16
 176:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <txCnt>
					txBuf = (uint8_t*)&validStatus;
 17a:	84 e1       	ldi	r24, 0x14	; 20
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <txBuf+0x1>
 182:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <txBuf>
				}
				UDR0 = *txBuf++; //Send first byte
 186:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <txBuf>
 18a:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <txBuf+0x1>
 18e:	cf 01       	movw	r24, r30
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <txBuf+0x1>
 196:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <txBuf>
 19a:	80 81       	ld	r24, Z
 19c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
 1a0:	22 c0       	rjmp	.+68     	; 0x1e6 <__vector_22+0x126>
			}
		}
		else
			rxMode = 0;
 1a2:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <rxMode>
 1a6:	1f c0       	rjmp	.+62     	; 0x1e6 <__vector_22+0x126>
	}
	else if (rxMode == SetConfig)
 1a8:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <rxMode>
 1ac:	93 31       	cpi	r25, 0x13	; 19
 1ae:	d9 f4       	brne	.+54     	; 0x1e6 <__vector_22+0x126>
	{
		*rxBuf++ = data;
 1b0:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 1b4:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 1b8:	9f 01       	movw	r18, r30
 1ba:	2f 5f       	subi	r18, 0xFF	; 255
 1bc:	3f 4f       	sbci	r19, 0xFF	; 255
 1be:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 1c2:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
 1c6:	80 83       	st	Z, r24
		if (--uCnt == 0) //Packet received
 1c8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1cc:	81 50       	subi	r24, 0x01	; 1
 1ce:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 1d2:	81 11       	cpse	r24, r1
 1d4:	08 c0       	rjmp	.+16     	; 0x1e6 <__vector_22+0x126>
		{
			dRdy = true;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <dRdy>
			TIMSK0 = 0; //Disable packet lost interrupt
 1dc:	19 be       	out	0x39, r1	; 57
			TCCR0B = (1 << CS01); //460.8kHz clock
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	83 bf       	out	0x33, r24	; 51
			OCR0A = 0xFE;
 1e2:	8e ef       	ldi	r24, 0xFE	; 254
 1e4:	86 bf       	out	0x36, r24	; 54
		}
	}
}
 1e6:	ff 91       	pop	r31
 1e8:	ef 91       	pop	r30
 1ea:	bf 91       	pop	r27
 1ec:	af 91       	pop	r26
 1ee:	9f 91       	pop	r25
 1f0:	8f 91       	pop	r24
 1f2:	7f 91       	pop	r23
 1f4:	6f 91       	pop	r22
 1f6:	5f 91       	pop	r21
 1f8:	4f 91       	pop	r20
 1fa:	3f 91       	pop	r19
 1fc:	2f 91       	pop	r18
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <__vector_24>:

ISR (USART0_TX_vect) //Transmit to RS485
{
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	8f 93       	push	r24
 214:	9f 93       	push	r25
 216:	ef 93       	push	r30
 218:	ff 93       	push	r31
	if (txCnt--)
 21a:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <txCnt>
 21e:	9f ef       	ldi	r25, 0xFF	; 255
 220:	98 0f       	add	r25, r24
 222:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <txCnt>
 226:	88 23       	and	r24, r24
 228:	71 f0       	breq	.+28     	; 0x246 <__vector_24+0x3e>
		UDR0 = *txBuf++; //Send next character from the given buffer
 22a:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <txBuf>
 22e:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <txBuf+0x1>
 232:	cf 01       	movw	r24, r30
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <txBuf+0x1>
 23a:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <txBuf>
 23e:	80 81       	ld	r24, Z
 240:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
 244:	06 c0       	rjmp	.+12     	; 0x252 <__vector_24+0x4a>
	else
	{
		U0RXen();
 246:	dd 98       	cbi	0x1b, 5	; 27
		UCSR0A = (1 << MPCM0); //Set MPCM bit
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
		rxMode = 0;
 24e:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <rxMode>
	}
}
 252:	ff 91       	pop	r31
 254:	ef 91       	pop	r30
 256:	9f 91       	pop	r25
 258:	8f 91       	pop	r24
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <__vector_9>:

ISR (TIMER0_COMPA_vect) //Packet lost interrupt
{
 264:	1f 92       	push	r1
 266:	0f 92       	push	r0
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	0f 92       	push	r0
 26c:	11 24       	eor	r1, r1
 26e:	8f 93       	push	r24
	TIMSK0 = 0; //Disable packet lost interrupt
 270:	19 be       	out	0x39, r1	; 57
	TCCR0B = (1 << CS01); //460.8kHz clock
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	83 bf       	out	0x33, r24	; 51
	OCR0A = 0xFE;
 276:	8e ef       	ldi	r24, 0xFE	; 254
 278:	86 bf       	out	0x36, r24	; 54
	UCSR0A = (1 << MPCM0);
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
	rxMode = 0;
 280:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <rxMode>
}
 284:	8f 91       	pop	r24
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <__vector_8>:

ISR (TIMER1_OVF_vect) //Occurs every 142.2ms
{
 290:	1f 92       	push	r1
 292:	0f 92       	push	r0
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	0f 92       	push	r0
 298:	11 24       	eor	r1, r1
 29a:	4f 93       	push	r20
 29c:	5f 93       	push	r21
 29e:	6f 93       	push	r22
 2a0:	7f 93       	push	r23
 2a2:	8f 93       	push	r24
 2a4:	9f 93       	push	r25
 2a6:	af 93       	push	r26
 2a8:	bf 93       	push	r27
 2aa:	ef 93       	push	r30
 2ac:	ff 93       	push	r31
	if (++cycles > 7)
 2ae:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <cycles>
 2b2:	8f 5f       	subi	r24, 0xFF	; 255
 2b4:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <cycles>
 2b8:	88 30       	cpi	r24, 0x08	; 8
 2ba:	10 f0       	brcs	.+4      	; 0x2c0 <__vector_8+0x30>
		cycles = 0;
 2bc:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <cycles>
	switch (cycles)
 2c0:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <cycles>
 2c4:	83 30       	cpi	r24, 0x03	; 3
 2c6:	41 f1       	breq	.+80     	; 0x318 <__vector_8+0x88>
 2c8:	28 f4       	brcc	.+10     	; 0x2d4 <__vector_8+0x44>
 2ca:	88 23       	and	r24, r24
 2cc:	51 f0       	breq	.+20     	; 0x2e2 <__vector_8+0x52>
 2ce:	82 30       	cpi	r24, 0x02	; 2
 2d0:	a9 f0       	breq	.+42     	; 0x2fc <__vector_8+0x6c>
 2d2:	55 c0       	rjmp	.+170    	; 0x37e <__vector_8+0xee>
 2d4:	86 30       	cpi	r24, 0x06	; 6
 2d6:	89 f1       	breq	.+98     	; 0x33a <__vector_8+0xaa>
 2d8:	87 30       	cpi	r24, 0x07	; 7
 2da:	f1 f0       	breq	.+60     	; 0x318 <__vector_8+0x88>
 2dc:	84 30       	cpi	r24, 0x04	; 4
 2de:	01 f1       	breq	.+64     	; 0x320 <__vector_8+0x90>
 2e0:	4e c0       	rjmp	.+156    	; 0x37e <__vector_8+0xee>
	{
		case 0:
		SelChA();
 2e2:	de 9a       	sbi	0x1b, 6	; 27
		tachCnt = 0;
 2e4:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <tachCnt>
		tachSum = 0;
 2e8:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <tachSum>
 2ec:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <tachSum+0x1>
 2f0:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <tachSum+0x2>
 2f4:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <tachSum+0x3>
		TIMSK1 |= (1 << ICIE1);
 2f8:	7d 9a       	sbi	0x0f, 5	; 15
		break;
 2fa:	41 c0       	rjmp	.+130    	; 0x37e <__vector_8+0xee>

		case 2:
		TIMSK1 &= ~(1 << ICIE1);
 2fc:	7d 98       	cbi	0x0f, 5	; 15
		if (tachCnt < 2)
 2fe:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <tachCnt>
 302:	82 30       	cpi	r24, 0x02	; 2
 304:	28 f4       	brcc	.+10     	; 0x310 <__vector_8+0x80>
			tmpStatus.rpmFront = 0;
 306:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <tmpStatus+0x2>
 30a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <tmpStatus+0x1>
 30e:	37 c0       	rjmp	.+110    	; 0x37e <__vector_8+0xee>
		else
			tRdy = true;
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <tRdy>
 316:	33 c0       	rjmp	.+102    	; 0x37e <__vector_8+0xee>
		break;

		case 3:
		case 7:
		amRead = true;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <amRead>
		break;
 31e:	2f c0       	rjmp	.+94     	; 0x37e <__vector_8+0xee>

		case 4:
		SelChB();
 320:	de 98       	cbi	0x1b, 6	; 27
		tachCnt = 0;
 322:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <tachCnt>
		tachSum = 0;
 326:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <tachSum>
 32a:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <tachSum+0x1>
 32e:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <tachSum+0x2>
 332:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <tachSum+0x3>
		TIMSK1 |= (1 << ICIE1);
 336:	7d 9a       	sbi	0x0f, 5	; 15
		break;
 338:	22 c0       	rjmp	.+68     	; 0x37e <__vector_8+0xee>

		case 6:
		TIMSK1 &= ~(1 << ICIE1);
 33a:	7d 98       	cbi	0x0f, 5	; 15
		if (tachCnt < 2)
 33c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <tachCnt>
 340:	82 30       	cpi	r24, 0x02	; 2
 342:	28 f4       	brcc	.+10     	; 0x34e <__vector_8+0xbe>
			tmpStatus.rpmRear = 0;
 344:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <tmpStatus+0x4>
 348:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <tmpStatus+0x3>
 34c:	03 c0       	rjmp	.+6      	; 0x354 <__vector_8+0xc4>
		else
			tRdy = true;
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <tRdy>
		tmpStatus.currentDraw = (adcSum << 3) / Idiv_x1mA;
 354:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <adcSum>
 358:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <adcSum+0x1>
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	88 0f       	add	r24, r24
 362:	99 1f       	adc	r25, r25
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	64 e2       	ldi	r22, 0x24	; 36
 36a:	70 e0       	ldi	r23, 0x00	; 0
 36c:	2f d3       	rcall	.+1630   	; 0x9cc <__udivmodhi4>
 36e:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <tmpStatus+0x6>
 372:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <tmpStatus+0x5>
		adcSum = 0;
 376:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <adcSum+0x1>
 37a:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <adcSum>
		break;
	}
	ADCSRA |= (1 << ADSC);
 37e:	2e 9a       	sbi	0x05, 6	; 5
	uint8_t level = validConf.fanLevelOverride < FanMax ?
 380:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <validConf>
		(((uint16_t)validConf.fanLevelOverride * PWM_max) >> 8) : validStatus.fanLevel;
 384:	8e 38       	cpi	r24, 0x8E	; 142
 386:	58 f5       	brcc	.+86     	; 0x3de <__vector_8+0x14e>
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	a0 e0       	ldi	r26, 0x00	; 0
 38c:	b0 e0       	ldi	r27, 0x00	; 0
 38e:	ac 01       	movw	r20, r24
 390:	bd 01       	movw	r22, r26
 392:	44 0f       	add	r20, r20
 394:	55 1f       	adc	r21, r21
 396:	66 1f       	adc	r22, r22
 398:	77 1f       	adc	r23, r23
 39a:	44 0f       	add	r20, r20
 39c:	55 1f       	adc	r21, r21
 39e:	66 1f       	adc	r22, r22
 3a0:	77 1f       	adc	r23, r23
 3a2:	44 0f       	add	r20, r20
 3a4:	55 1f       	adc	r21, r21
 3a6:	66 1f       	adc	r22, r22
 3a8:	77 1f       	adc	r23, r23
 3aa:	48 0f       	add	r20, r24
 3ac:	59 1f       	adc	r21, r25
 3ae:	6a 1f       	adc	r22, r26
 3b0:	7b 1f       	adc	r23, r27
 3b2:	44 0f       	add	r20, r20
 3b4:	55 1f       	adc	r21, r21
 3b6:	66 1f       	adc	r22, r22
 3b8:	77 1f       	adc	r23, r23
 3ba:	44 0f       	add	r20, r20
 3bc:	55 1f       	adc	r21, r21
 3be:	66 1f       	adc	r22, r22
 3c0:	77 1f       	adc	r23, r23
 3c2:	44 0f       	add	r20, r20
 3c4:	55 1f       	adc	r21, r21
 3c6:	66 1f       	adc	r22, r22
 3c8:	77 1f       	adc	r23, r23
 3ca:	84 0f       	add	r24, r20
 3cc:	95 1f       	adc	r25, r21
 3ce:	a6 1f       	adc	r26, r22
 3d0:	b7 1f       	adc	r27, r23
 3d2:	88 0f       	add	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	aa 1f       	adc	r26, r26
 3d8:	bb 1f       	adc	r27, r27
 3da:	89 2f       	mov	r24, r25
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <__vector_8+0x152>
 3de:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <validStatus>
	if (OCR2AL > level)
 3e2:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
 3e6:	89 17       	cp	r24, r25
 3e8:	58 f4       	brcc	.+22     	; 0x400 <__LOCK_REGION_LENGTH__>
	{
		OCR2AL--;
 3ea:	e4 ec       	ldi	r30, 0xC4	; 196
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 81       	ld	r24, Z
 3f0:	81 50       	subi	r24, 0x01	; 1
 3f2:	80 83       	st	Z, r24
		if (OCR2AL < FanMin)
 3f4:	80 81       	ld	r24, Z
 3f6:	8e 30       	cpi	r24, 0x0E	; 14
 3f8:	88 f4       	brcc	.+34     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
			OCR2AL = 0;
 3fa:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
 3fe:	0e c0       	rjmp	.+28     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	}
	else if (OCR2AL < level)
 400:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
 404:	98 17       	cp	r25, r24
 406:	50 f4       	brcc	.+20     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	{
		OCR2AL++;
 408:	e4 ec       	ldi	r30, 0xC4	; 196
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	90 81       	ld	r25, Z
 40e:	9f 5f       	subi	r25, 0xFF	; 255
 410:	90 83       	st	Z, r25
		if (OCR2AL < FanMin)
 412:	90 81       	ld	r25, Z
 414:	9e 30       	cpi	r25, 0x0E	; 14
 416:	10 f4       	brcc	.+4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
			OCR2AL = level;
 418:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
	}
	OCR2BL = ICR2L - OCR2AL;
 41c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
 420:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
 424:	89 1b       	sub	r24, r25
 426:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
}
 42a:	ff 91       	pop	r31
 42c:	ef 91       	pop	r30
 42e:	bf 91       	pop	r27
 430:	af 91       	pop	r26
 432:	9f 91       	pop	r25
 434:	8f 91       	pop	r24
 436:	7f 91       	pop	r23
 438:	6f 91       	pop	r22
 43a:	5f 91       	pop	r21
 43c:	4f 91       	pop	r20
 43e:	0f 90       	pop	r0
 440:	0f be       	out	0x3f, r0	; 63
 442:	0f 90       	pop	r0
 444:	1f 90       	pop	r1
 446:	18 95       	reti

00000448 <__vector_5>:

ISR (TIMER1_CAPT_vect)
{
 448:	1f 92       	push	r1
 44a:	0f 92       	push	r0
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	0f 92       	push	r0
 450:	11 24       	eor	r1, r1
 452:	0f 93       	push	r16
 454:	1f 93       	push	r17
 456:	2f 93       	push	r18
 458:	3f 93       	push	r19
 45a:	4f 93       	push	r20
 45c:	5f 93       	push	r21
 45e:	6f 93       	push	r22
 460:	7f 93       	push	r23
 462:	8f 93       	push	r24
 464:	9f 93       	push	r25
 466:	af 93       	push	r26
 468:	bf 93       	push	r27
	if (tachCnt++ > 0)
 46a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <tachCnt>
 46e:	91 e0       	ldi	r25, 0x01	; 1
 470:	98 0f       	add	r25, r24
 472:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <tachCnt>
 476:	88 23       	and	r24, r24
 478:	09 f4       	brne	.+2      	; 0x47c <__vector_5+0x34>
 47a:	45 c0       	rjmp	.+138    	; 0x506 <__vector_5+0xbe>
	{
		if (ICR1 < tachPrev)
 47c:	24 b5       	in	r18, 0x24	; 36
 47e:	35 b5       	in	r19, 0x25	; 37
 480:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <tachPrev>
 484:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <tachPrev+0x1>
 488:	28 17       	cp	r18, r24
 48a:	39 07       	cpc	r19, r25
 48c:	00 f5       	brcc	.+64     	; 0x4ce <__vector_5+0x86>
			tachSum += 0xFFFF - tachPrev + ICR1;
 48e:	84 b5       	in	r24, 0x24	; 36
 490:	95 b5       	in	r25, 0x25	; 37
 492:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <tachPrev>
 496:	30 91 44 01 	lds	r19, 0x0144	; 0x800144 <tachPrev+0x1>
 49a:	01 97       	sbiw	r24, 0x01	; 1
 49c:	82 1b       	sub	r24, r18
 49e:	93 0b       	sbc	r25, r19
 4a0:	40 91 3d 01 	lds	r20, 0x013D	; 0x80013d <tachSum>
 4a4:	50 91 3e 01 	lds	r21, 0x013E	; 0x80013e <tachSum+0x1>
 4a8:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <tachSum+0x2>
 4ac:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <tachSum+0x3>
 4b0:	8a 01       	movw	r16, r20
 4b2:	9b 01       	movw	r18, r22
 4b4:	08 0f       	add	r16, r24
 4b6:	19 1f       	adc	r17, r25
 4b8:	21 1d       	adc	r18, r1
 4ba:	31 1d       	adc	r19, r1
 4bc:	00 93 3d 01 	sts	0x013D, r16	; 0x80013d <tachSum>
 4c0:	10 93 3e 01 	sts	0x013E, r17	; 0x80013e <tachSum+0x1>
 4c4:	20 93 3f 01 	sts	0x013F, r18	; 0x80013f <tachSum+0x2>
 4c8:	30 93 40 01 	sts	0x0140, r19	; 0x800140 <tachSum+0x3>
 4cc:	1c c0       	rjmp	.+56     	; 0x506 <__vector_5+0xbe>
		else
			tachSum += ICR1 - tachPrev;
 4ce:	24 b5       	in	r18, 0x24	; 36
 4d0:	35 b5       	in	r19, 0x25	; 37
 4d2:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <tachPrev>
 4d6:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <tachPrev+0x1>
 4da:	28 1b       	sub	r18, r24
 4dc:	39 0b       	sbc	r19, r25
 4de:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <tachSum>
 4e2:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <tachSum+0x1>
 4e6:	a0 91 3f 01 	lds	r26, 0x013F	; 0x80013f <tachSum+0x2>
 4ea:	b0 91 40 01 	lds	r27, 0x0140	; 0x800140 <tachSum+0x3>
 4ee:	82 0f       	add	r24, r18
 4f0:	93 1f       	adc	r25, r19
 4f2:	a1 1d       	adc	r26, r1
 4f4:	b1 1d       	adc	r27, r1
 4f6:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <tachSum>
 4fa:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <tachSum+0x1>
 4fe:	a0 93 3f 01 	sts	0x013F, r26	; 0x80013f <tachSum+0x2>
 502:	b0 93 40 01 	sts	0x0140, r27	; 0x800140 <tachSum+0x3>
	}
	if (tachCnt > 7)
 506:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <tachCnt>
 50a:	88 30       	cpi	r24, 0x08	; 8
 50c:	20 f0       	brcs	.+8      	; 0x516 <__vector_5+0xce>
	{
		tRdy = true;
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <tRdy>
		TIMSK1 &= ~(1 << ICIE1);
 514:	7d 98       	cbi	0x0f, 5	; 15
	}
	tachPrev = ICR1;
 516:	84 b5       	in	r24, 0x24	; 36
 518:	95 b5       	in	r25, 0x25	; 37
 51a:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <tachPrev+0x1>
 51e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <tachPrev>
}
 522:	bf 91       	pop	r27
 524:	af 91       	pop	r26
 526:	9f 91       	pop	r25
 528:	8f 91       	pop	r24
 52a:	7f 91       	pop	r23
 52c:	6f 91       	pop	r22
 52e:	5f 91       	pop	r21
 530:	4f 91       	pop	r20
 532:	3f 91       	pop	r19
 534:	2f 91       	pop	r18
 536:	1f 91       	pop	r17
 538:	0f 91       	pop	r16
 53a:	0f 90       	pop	r0
 53c:	0f be       	out	0x3f, r0	; 63
 53e:	0f 90       	pop	r0
 540:	1f 90       	pop	r1
 542:	18 95       	reti

00000544 <__vector_13>:

ISR (ADC_vect)
{
 544:	1f 92       	push	r1
 546:	0f 92       	push	r0
 548:	0f b6       	in	r0, 0x3f	; 63
 54a:	0f 92       	push	r0
 54c:	11 24       	eor	r1, r1
 54e:	2f 93       	push	r18
 550:	3f 93       	push	r19
 552:	8f 93       	push	r24
 554:	9f 93       	push	r25
	adcSum += ADC;
 556:	26 b1       	in	r18, 0x06	; 6
 558:	37 b1       	in	r19, 0x07	; 7
 55a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <adcSum>
 55e:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <adcSum+0x1>
 562:	82 0f       	add	r24, r18
 564:	93 1f       	adc	r25, r19
 566:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <adcSum+0x1>
 56a:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <adcSum>
}
 56e:	9f 91       	pop	r25
 570:	8f 91       	pop	r24
 572:	3f 91       	pop	r19
 574:	2f 91       	pop	r18
 576:	0f 90       	pop	r0
 578:	0f be       	out	0x3f, r0	; 63
 57a:	0f 90       	pop	r0
 57c:	1f 90       	pop	r1
 57e:	18 95       	reti

00000580 <_Z10AM2302readv>:

bool AM2302read()
{
	int8_t nBits;
	DOPullLow();
 580:	ba 9a       	sbi	0x17, 2	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 582:	83 e3       	ldi	r24, 0x33	; 51
 584:	97 e0       	ldi	r25, 0x07	; 7
 586:	01 97       	sbiw	r24, 0x01	; 1
 588:	f1 f7       	brne	.-4      	; 0x586 <_Z10AM2302readv+0x6>
	_delay_ms(2);
	DORelease();
 58a:	ba 98       	cbi	0x17, 2	; 23
	TCNT0 = 0;
 58c:	12 be       	out	0x32, r1	; 50
	TIFR0 |= (1 << OCF0A);
 58e:	88 b7       	in	r24, 0x38	; 56
 590:	82 60       	ori	r24, 0x02	; 2
 592:	88 bf       	out	0x38, r24	; 56
	while ((PINB & (1 << PINB2)) && ~(TIFR0 & (1 << OCF0A))); //Low response
 594:	b2 9b       	sbis	0x16, 2	; 22
 596:	05 c0       	rjmp	.+10     	; 0x5a2 <_Z10AM2302readv+0x22>
 598:	88 b7       	in	r24, 0x38	; 56
 59a:	fc cf       	rjmp	.-8      	; 0x594 <_Z10AM2302readv+0x14>
	for (nBits = -1; nBits < 40; nBits++)
	{
		TCNT0 = 0;
		while (~(PINB & (1 << PINB2)) && ~(TIFR0 & (1 << OCF0A))); //Wait for high level
 59c:	86 b3       	in	r24, 0x16	; 22
 59e:	88 b7       	in	r24, 0x38	; 56
 5a0:	fd cf       	rjmp	.-6      	; 0x59c <_Z10AM2302readv+0x1c>
	TCNT0 = 0;
	TIFR0 |= (1 << OCF0A);
	while ((PINB & (1 << PINB2)) && ~(TIFR0 & (1 << OCF0A))); //Low response
	for (nBits = -1; nBits < 40; nBits++)
	{
		TCNT0 = 0;
 5a2:	12 be       	out	0x32, r1	; 50
 5a4:	fb cf       	rjmp	.-10     	; 0x59c <_Z10AM2302readv+0x1c>

000005a6 <_Z13FanRegulationv>:
	amRead = false;
	return true;
}

void FanRegulation()
{
 5a6:	2f 92       	push	r2
 5a8:	3f 92       	push	r3
 5aa:	4f 92       	push	r4
 5ac:	5f 92       	push	r5
 5ae:	6f 92       	push	r6
 5b0:	7f 92       	push	r7
 5b2:	8f 92       	push	r8
 5b4:	9f 92       	push	r9
 5b6:	af 92       	push	r10
 5b8:	bf 92       	push	r11
 5ba:	cf 92       	push	r12
 5bc:	df 92       	push	r13
 5be:	ef 92       	push	r14
 5c0:	ff 92       	push	r15
 5c2:	0f 93       	push	r16
 5c4:	1f 93       	push	r17
 5c6:	cf 93       	push	r28
 5c8:	df 93       	push	r29
 5ca:	cd b7       	in	r28, 0x3d	; 61
 5cc:	de b7       	in	r29, 0x3e	; 62
 5ce:	28 97       	sbiw	r28, 0x08	; 8
 5d0:	0f b6       	in	r0, 0x3f	; 63
 5d2:	f8 94       	cli
 5d4:	de bf       	out	0x3e, r29	; 62
 5d6:	0f be       	out	0x3f, r0	; 63
 5d8:	cd bf       	out	0x3d, r28	; 61
	//Upper bounds for regulation
	int16_t dT = tmpStatus.insideT - tmpStatus.outsideT - validConf.minDeltaT;
 5da:	00 91 35 01 	lds	r16, 0x0135	; 0x800135 <validConf+0x5>
 5de:	10 91 36 01 	lds	r17, 0x0136	; 0x800136 <validConf+0x6>
 5e2:	e3 e0       	ldi	r30, 0x03	; 3
 5e4:	f1 e0       	ldi	r31, 0x01	; 1
 5e6:	23 84       	ldd	r2, Z+11	; 0x0b
 5e8:	34 84       	ldd	r3, Z+12	; 0x0c
 5ea:	85 85       	ldd	r24, Z+13	; 0x0d
 5ec:	96 85       	ldd	r25, Z+14	; 0x0e
 5ee:	28 1a       	sub	r2, r24
 5f0:	39 0a       	sbc	r3, r25
 5f2:	20 1a       	sub	r2, r16
 5f4:	31 0a       	sbc	r3, r17
	int16_t dRH = tmpStatus.insideRH - tmpStatus.outsideRH - validConf.minDeltaRH;
 5f6:	a0 90 31 01 	lds	r10, 0x0131	; 0x800131 <validConf+0x1>
 5fa:	b0 90 32 01 	lds	r11, 0x0132	; 0x800132 <validConf+0x2>
 5fe:	87 81       	ldd	r24, Z+7	; 0x07
 600:	90 85       	ldd	r25, Z+8	; 0x08
 602:	21 85       	ldd	r18, Z+9	; 0x09
 604:	32 85       	ldd	r19, Z+10	; 0x0a
 606:	82 1b       	sub	r24, r18
 608:	93 0b       	sbc	r25, r19
 60a:	7c 01       	movw	r14, r24
 60c:	ea 18       	sub	r14, r10
 60e:	fb 08       	sbc	r15, r11
	int16_t A = (FanMax - FanMin) * dT / validConf.dDeltaT;
 610:	80 90 37 01 	lds	r8, 0x0137	; 0x800137 <validConf+0x7>
 614:	90 90 38 01 	lds	r9, 0x0138	; 0x800138 <validConf+0x8>
 618:	c4 01       	movw	r24, r8
 61a:	99 0c       	add	r9, r9
 61c:	aa 0b       	sbc	r26, r26
 61e:	bb 0b       	sbc	r27, r27
 620:	89 83       	std	Y+1, r24	; 0x01
 622:	9a 83       	std	Y+2, r25	; 0x02
 624:	ab 83       	std	Y+3, r26	; 0x03
 626:	bc 83       	std	Y+4, r27	; 0x04
 628:	c1 01       	movw	r24, r2
 62a:	03 2c       	mov	r0, r3
 62c:	00 0c       	add	r0, r0
 62e:	aa 0b       	sbc	r26, r26
 630:	bb 0b       	sbc	r27, r27
 632:	88 0f       	add	r24, r24
 634:	99 1f       	adc	r25, r25
 636:	aa 1f       	adc	r26, r26
 638:	bb 1f       	adc	r27, r27
 63a:	88 0f       	add	r24, r24
 63c:	99 1f       	adc	r25, r25
 63e:	aa 1f       	adc	r26, r26
 640:	bb 1f       	adc	r27, r27
 642:	88 0f       	add	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	aa 1f       	adc	r26, r26
 648:	bb 1f       	adc	r27, r27
 64a:	88 0f       	add	r24, r24
 64c:	99 1f       	adc	r25, r25
 64e:	aa 1f       	adc	r26, r26
 650:	bb 1f       	adc	r27, r27
 652:	88 0f       	add	r24, r24
 654:	99 1f       	adc	r25, r25
 656:	aa 1f       	adc	r26, r26
 658:	bb 1f       	adc	r27, r27
 65a:	88 0f       	add	r24, r24
 65c:	99 1f       	adc	r25, r25
 65e:	aa 1f       	adc	r26, r26
 660:	bb 1f       	adc	r27, r27
 662:	bc 01       	movw	r22, r24
 664:	cd 01       	movw	r24, r26
 666:	66 0f       	add	r22, r22
 668:	77 1f       	adc	r23, r23
 66a:	88 1f       	adc	r24, r24
 66c:	99 1f       	adc	r25, r25
 66e:	29 81       	ldd	r18, Y+1	; 0x01
 670:	3a 81       	ldd	r19, Y+2	; 0x02
 672:	4b 81       	ldd	r20, Y+3	; 0x03
 674:	5c 81       	ldd	r21, Y+4	; 0x04
 676:	e0 d1       	rcall	.+960    	; 0xa38 <__divmodsi4>
 678:	2d 83       	std	Y+5, r18	; 0x05
 67a:	3e 83       	std	Y+6, r19	; 0x06
 67c:	4f 83       	std	Y+7, r20	; 0x07
 67e:	58 87       	std	Y+8, r21	; 0x08
	int16_t B = (FanMax - FanMin) * dRH / validConf.dDeltaRH;
 680:	40 90 33 01 	lds	r4, 0x0133	; 0x800133 <validConf+0x3>
 684:	50 90 34 01 	lds	r5, 0x0134	; 0x800134 <validConf+0x4>
 688:	05 2c       	mov	r0, r5
 68a:	00 0c       	add	r0, r0
 68c:	66 08       	sbc	r6, r6
 68e:	77 08       	sbc	r7, r7
 690:	c7 01       	movw	r24, r14
 692:	0f 2c       	mov	r0, r15
 694:	00 0c       	add	r0, r0
 696:	aa 0b       	sbc	r26, r26
 698:	bb 0b       	sbc	r27, r27
 69a:	88 0f       	add	r24, r24
 69c:	99 1f       	adc	r25, r25
 69e:	aa 1f       	adc	r26, r26
 6a0:	bb 1f       	adc	r27, r27
 6a2:	88 0f       	add	r24, r24
 6a4:	99 1f       	adc	r25, r25
 6a6:	aa 1f       	adc	r26, r26
 6a8:	bb 1f       	adc	r27, r27
 6aa:	88 0f       	add	r24, r24
 6ac:	99 1f       	adc	r25, r25
 6ae:	aa 1f       	adc	r26, r26
 6b0:	bb 1f       	adc	r27, r27
 6b2:	88 0f       	add	r24, r24
 6b4:	99 1f       	adc	r25, r25
 6b6:	aa 1f       	adc	r26, r26
 6b8:	bb 1f       	adc	r27, r27
 6ba:	88 0f       	add	r24, r24
 6bc:	99 1f       	adc	r25, r25
 6be:	aa 1f       	adc	r26, r26
 6c0:	bb 1f       	adc	r27, r27
 6c2:	88 0f       	add	r24, r24
 6c4:	99 1f       	adc	r25, r25
 6c6:	aa 1f       	adc	r26, r26
 6c8:	bb 1f       	adc	r27, r27
 6ca:	bc 01       	movw	r22, r24
 6cc:	cd 01       	movw	r24, r26
 6ce:	66 0f       	add	r22, r22
 6d0:	77 1f       	adc	r23, r23
 6d2:	88 1f       	adc	r24, r24
 6d4:	99 1f       	adc	r25, r25
 6d6:	a3 01       	movw	r20, r6
 6d8:	92 01       	movw	r18, r4
 6da:	ae d1       	rcall	.+860    	; 0xa38 <__divmodsi4>
	if (B > A)
		A = B;
	A += FanMin;
 6dc:	cd 80       	ldd	r12, Y+5	; 0x05
 6de:	de 80       	ldd	r13, Y+6	; 0x06
 6e0:	c2 16       	cp	r12, r18
 6e2:	d3 06       	cpc	r13, r19
 6e4:	0c f4       	brge	.+2      	; 0x6e8 <_Z13FanRegulationv+0x142>
 6e6:	69 01       	movw	r12, r18
 6e8:	9e e0       	ldi	r25, 0x0E	; 14
 6ea:	c9 0e       	add	r12, r25
 6ec:	d1 1c       	adc	r13, r1
	if (A > tmpStatus.fanLevel) //At least one of upper bounds is above
 6ee:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <tmpStatus>
 6f2:	2a 2f       	mov	r18, r26
 6f4:	30 e0       	ldi	r19, 0x00	; 0
 6f6:	3e 83       	std	Y+6, r19	; 0x06
 6f8:	2d 83       	std	Y+5, r18	; 0x05
 6fa:	2c 15       	cp	r18, r12
 6fc:	3d 05       	cpc	r19, r13
 6fe:	4c f4       	brge	.+18     	; 0x712 <_Z13FanRegulationv+0x16c>
	{
		tmpStatus.fanLevel = A > FanMax ? FanMax : A; //Increase level
 700:	c6 01       	movw	r24, r12
 702:	8f 38       	cpi	r24, 0x8F	; 143
 704:	91 05       	cpc	r25, r1
 706:	14 f0       	brlt	.+4      	; 0x70c <_Z13FanRegulationv+0x166>
 708:	8e e8       	ldi	r24, 0x8E	; 142
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <tmpStatus>
 710:	77 c0       	rjmp	.+238    	; 0x800 <_Z13FanRegulationv+0x25a>
	else
	{
		//Lower bounds for regulation
		dT -= validConf.minDeltaT >> 3;
		dRH -= validConf.minDeltaRH >> 3;
		A = (FanMax - FanMin) * dT / validConf.dDeltaT;
 712:	15 95       	asr	r17
 714:	07 95       	ror	r16
 716:	15 95       	asr	r17
 718:	07 95       	ror	r16
 71a:	15 95       	asr	r17
 71c:	07 95       	ror	r16
 71e:	b1 01       	movw	r22, r2
 720:	60 1b       	sub	r22, r16
 722:	71 0b       	sbc	r23, r17
 724:	cb 01       	movw	r24, r22
 726:	77 0f       	add	r23, r23
 728:	aa 0b       	sbc	r26, r26
 72a:	bb 0b       	sbc	r27, r27
 72c:	88 0f       	add	r24, r24
 72e:	99 1f       	adc	r25, r25
 730:	aa 1f       	adc	r26, r26
 732:	bb 1f       	adc	r27, r27
 734:	88 0f       	add	r24, r24
 736:	99 1f       	adc	r25, r25
 738:	aa 1f       	adc	r26, r26
 73a:	bb 1f       	adc	r27, r27
 73c:	88 0f       	add	r24, r24
 73e:	99 1f       	adc	r25, r25
 740:	aa 1f       	adc	r26, r26
 742:	bb 1f       	adc	r27, r27
 744:	88 0f       	add	r24, r24
 746:	99 1f       	adc	r25, r25
 748:	aa 1f       	adc	r26, r26
 74a:	bb 1f       	adc	r27, r27
 74c:	88 0f       	add	r24, r24
 74e:	99 1f       	adc	r25, r25
 750:	aa 1f       	adc	r26, r26
 752:	bb 1f       	adc	r27, r27
 754:	88 0f       	add	r24, r24
 756:	99 1f       	adc	r25, r25
 758:	aa 1f       	adc	r26, r26
 75a:	bb 1f       	adc	r27, r27
 75c:	bc 01       	movw	r22, r24
 75e:	cd 01       	movw	r24, r26
 760:	66 0f       	add	r22, r22
 762:	77 1f       	adc	r23, r23
 764:	88 1f       	adc	r24, r24
 766:	99 1f       	adc	r25, r25
 768:	29 81       	ldd	r18, Y+1	; 0x01
 76a:	3a 81       	ldd	r19, Y+2	; 0x02
 76c:	4b 81       	ldd	r20, Y+3	; 0x03
 76e:	5c 81       	ldd	r21, Y+4	; 0x04
 770:	63 d1       	rcall	.+710    	; 0xa38 <__divmodsi4>
 772:	29 83       	std	Y+1, r18	; 0x01
 774:	3a 83       	std	Y+2, r19	; 0x02
 776:	4b 83       	std	Y+3, r20	; 0x03
 778:	5c 83       	std	Y+4, r21	; 0x04
		B = (FanMax - FanMin) * dRH / validConf.dDeltaRH;
 77a:	c5 01       	movw	r24, r10
 77c:	95 95       	asr	r25
 77e:	87 95       	ror	r24
 780:	95 95       	asr	r25
 782:	87 95       	ror	r24
 784:	95 95       	asr	r25
 786:	87 95       	ror	r24
 788:	b7 01       	movw	r22, r14
 78a:	68 1b       	sub	r22, r24
 78c:	79 0b       	sbc	r23, r25
 78e:	cb 01       	movw	r24, r22
 790:	77 0f       	add	r23, r23
 792:	aa 0b       	sbc	r26, r26
 794:	bb 0b       	sbc	r27, r27
 796:	88 0f       	add	r24, r24
 798:	99 1f       	adc	r25, r25
 79a:	aa 1f       	adc	r26, r26
 79c:	bb 1f       	adc	r27, r27
 79e:	88 0f       	add	r24, r24
 7a0:	99 1f       	adc	r25, r25
 7a2:	aa 1f       	adc	r26, r26
 7a4:	bb 1f       	adc	r27, r27
 7a6:	88 0f       	add	r24, r24
 7a8:	99 1f       	adc	r25, r25
 7aa:	aa 1f       	adc	r26, r26
 7ac:	bb 1f       	adc	r27, r27
 7ae:	88 0f       	add	r24, r24
 7b0:	99 1f       	adc	r25, r25
 7b2:	aa 1f       	adc	r26, r26
 7b4:	bb 1f       	adc	r27, r27
 7b6:	88 0f       	add	r24, r24
 7b8:	99 1f       	adc	r25, r25
 7ba:	aa 1f       	adc	r26, r26
 7bc:	bb 1f       	adc	r27, r27
 7be:	88 0f       	add	r24, r24
 7c0:	99 1f       	adc	r25, r25
 7c2:	aa 1f       	adc	r26, r26
 7c4:	bb 1f       	adc	r27, r27
 7c6:	bc 01       	movw	r22, r24
 7c8:	cd 01       	movw	r24, r26
 7ca:	66 0f       	add	r22, r22
 7cc:	77 1f       	adc	r23, r23
 7ce:	88 1f       	adc	r24, r24
 7d0:	99 1f       	adc	r25, r25
 7d2:	a3 01       	movw	r20, r6
 7d4:	92 01       	movw	r18, r4
 7d6:	30 d1       	rcall	.+608    	; 0xa38 <__divmodsi4>
		if (B > A)
			A = B;
		A += FanMin;
 7d8:	c9 80       	ldd	r12, Y+1	; 0x01
 7da:	da 80       	ldd	r13, Y+2	; 0x02
 7dc:	c2 16       	cp	r12, r18
 7de:	d3 06       	cpc	r13, r19
 7e0:	0c f4       	brge	.+2      	; 0x7e4 <_Z13FanRegulationv+0x23e>
 7e2:	69 01       	movw	r12, r18
 7e4:	8e e0       	ldi	r24, 0x0E	; 14
 7e6:	c8 0e       	add	r12, r24
 7e8:	d1 1c       	adc	r13, r1
 7ea:	c6 01       	movw	r24, r12
		if (A < tmpStatus.fanLevel) //Both lower bounds are below
 7ec:	ad 81       	ldd	r26, Y+5	; 0x05
 7ee:	be 81       	ldd	r27, Y+6	; 0x06
 7f0:	ca 16       	cp	r12, r26
 7f2:	db 06       	cpc	r13, r27
 7f4:	2c f4       	brge	.+10     	; 0x800 <_Z13FanRegulationv+0x25a>
			tmpStatus.fanLevel = A > FanMin ? A : 0; //Decrease level
 7f6:	0f 97       	sbiw	r24, 0x0f	; 15
 7f8:	0c f4       	brge	.+2      	; 0x7fc <_Z13FanRegulationv+0x256>
 7fa:	c1 2c       	mov	r12, r1
 7fc:	c0 92 03 01 	sts	0x0103, r12	; 0x800103 <tmpStatus>
	}
}
 800:	28 96       	adiw	r28, 0x08	; 8
 802:	0f b6       	in	r0, 0x3f	; 63
 804:	f8 94       	cli
 806:	de bf       	out	0x3e, r29	; 62
 808:	0f be       	out	0x3f, r0	; 63
 80a:	cd bf       	out	0x3d, r28	; 61
 80c:	df 91       	pop	r29
 80e:	cf 91       	pop	r28
 810:	1f 91       	pop	r17
 812:	0f 91       	pop	r16
 814:	ff 90       	pop	r15
 816:	ef 90       	pop	r14
 818:	df 90       	pop	r13
 81a:	cf 90       	pop	r12
 81c:	bf 90       	pop	r11
 81e:	af 90       	pop	r10
 820:	9f 90       	pop	r9
 822:	8f 90       	pop	r8
 824:	7f 90       	pop	r7
 826:	6f 90       	pop	r6
 828:	5f 90       	pop	r5
 82a:	4f 90       	pop	r4
 82c:	3f 90       	pop	r3
 82e:	2f 90       	pop	r2
 830:	08 95       	ret

00000832 <_Z7mcuInitv>:

void inline mcuInit()
{
 832:	cf 93       	push	r28
 834:	df 93       	push	r29
	cli();
 836:	f8 94       	cli
	//Port A outputs: U0TX, PWMA, PWMB, U0EN, SEL
	DDRA = (1 << DDA1) | (1 << DDA3) | (1 << DDA4) | (1 << DDA5) | (1 << DDA6);
 838:	8a e7       	ldi	r24, 0x7A	; 122
 83a:	8a bb       	out	0x1a, r24	; 26
	//USART 0: 76.8kbps, frame bits: start / 9 data / 2 stop, multi-processor communication
	UBRR0 = 2; //Actual maximum transfer rate: 6400Bps
 83c:	82 e0       	ldi	r24, 0x02	; 2
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <__EEPROM_REGION_LENGTH__+0x7f0082>
 844:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
	UCSR0B = (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0) | (1 << UCSZ02);
 848:	8c ed       	ldi	r24, 0xDC	; 220
 84a:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
	UCSR0C = (1 << USBS0) | (1 << UCSZ01) | (1 << UCSZ00);
 84e:	8e e0       	ldi	r24, 0x0E	; 14
 850:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	UCSR0A = (1 << MPCM0);
 854:	81 e0       	ldi	r24, 0x01	; 1
 856:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
	//Timer 0: 460.8kHz clock, CTC on OCR0A
	TCCR0A = (1 << WGM01);
 85a:	92 e0       	ldi	r25, 0x02	; 2
 85c:	90 bf       	out	0x30, r25	; 48
	TCCR0B = (1 << CS01); //1 tick = 2.17µs
 85e:	93 bf       	out	0x33, r25	; 51
	OCR0A = 0xFE;
 860:	9e ef       	ldi	r25, 0xFE	; 254
 862:	96 bf       	out	0x36, r25	; 54
	OCR0B = (sizeof(sysStatus) > sizeof(sysConfig) ? sizeof(sysStatus) : sizeof(sysConfig)) * 234 / 69;
 864:	99 e3       	ldi	r25, 0x39	; 57
 866:	9c bf       	out	0x3c, r25	; 60
	//Timer 1: 460.8kHz clock, input capture on leading edge, noise filtering, OVF interrupt
	//If fan is running for 4 poles, minimum measurable speed is 211rpm
	TCCR1B = (1 << ICNC1) | (1 << ICES1) | (1 << CS11);
 868:	92 ec       	ldi	r25, 0xC2	; 194
 86a:	9e bd       	out	0x2e, r25	; 46
	TIMSK1 = (1 << TOIE1);
 86c:	8f b9       	out	0x0f, r24	; 15
	//Timer 2: 3.6864MHz clock, fast PWM, top in ICR2, OC2A non-inverting (TOCC3), OC2B inverting (TOCC2)
	ICR2 = PWM_max; //25kHz PWM frequency
 86e:	22 e9       	ldi	r18, 0x92	; 146
 870:	30 e0       	ldi	r19, 0x00	; 0
 872:	30 93 c1 00 	sts	0x00C1, r19	; 0x8000c1 <__EEPROM_REGION_LENGTH__+0x7f00c1>
 876:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
	OCR2A = 0; //Non-inverting output: off
 87a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
 87e:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
	OCR2B = PWM_max; //Inverting output: off
 882:	30 93 c3 00 	sts	0x00C3, r19	; 0x8000c3 <__EEPROM_REGION_LENGTH__+0x7f00c3>
 886:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
	TCCR2A = (1 << COM2A1) | (1 << COM2B1) | (1 << COM2B0) | (1 << WGM21);
 88a:	92 eb       	ldi	r25, 0xB2	; 178
 88c:	90 93 ca 00 	sts	0x00CA, r25	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
	TCCR2B = (1 << WGM23) | (1 << WGM22) | (1 << CS20);
 890:	99 e1       	ldi	r25, 0x19	; 25
 892:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
	TOCPMSA0 |= (1 << TOCC2S1) | (1 << TOCC3S1);
 896:	e7 e6       	ldi	r30, 0x67	; 103
 898:	f0 e0       	ldi	r31, 0x00	; 0
 89a:	90 81       	ld	r25, Z
 89c:	90 6a       	ori	r25, 0xA0	; 160
 89e:	90 83       	st	Z, r25
	TOCPMCOE |= (1 << TOCC2OE) | (1 << TOCC3OE);
 8a0:	e6 e6       	ldi	r30, 0x66	; 102
 8a2:	f0 e0       	ldi	r31, 0x00	; 0
 8a4:	90 81       	ld	r25, Z
 8a6:	9c 60       	ori	r25, 0x0C	; 12
 8a8:	90 83       	st	Z, r25
	//ADC: 1.1V reference, 115.2kHz clock, ADC0 input, interrupt
	ADMUXB = (1 << REFS0);
 8aa:	90 e2       	ldi	r25, 0x20	; 32
 8ac:	98 b9       	out	0x08, r25	; 8
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS0);
 8ae:	9d e8       	ldi	r25, 0x8D	; 141
 8b0:	95 b9       	out	0x05, r25	; 5
	DIDR0 = (1 << ADC0D);
 8b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
	//Power reduction: I²C, USART1 and SPI are not used in this project
	PRR = (1 << PRTWI) | (1 << PRUSART1) | (1 << PRSPI);
 8b6:	80 ed       	ldi	r24, 0xD0	; 208
 8b8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__EEPROM_REGION_LENGTH__+0x7f0070>

	eeprom_read_block(&validConf, &eConf, sizeof(sysConfig));
 8bc:	4b e0       	ldi	r20, 0x0B	; 11
 8be:	50 e0       	ldi	r21, 0x00	; 0
 8c0:	60 e0       	ldi	r22, 0x00	; 0
 8c2:	70 e0       	ldi	r23, 0x00	; 0
 8c4:	80 e3       	ldi	r24, 0x30	; 48
 8c6:	91 e0       	ldi	r25, 0x01	; 1
 8c8:	d3 d0       	rcall	.+422    	; 0xa70 <eeprom_read_block>
	validConf.fanLevelOverride = 0xFF; //No override at startup
 8ca:	c0 e3       	ldi	r28, 0x30	; 48
 8cc:	d1 e0       	ldi	r29, 0x01	; 1
 8ce:	8f ef       	ldi	r24, 0xFF	; 255
 8d0:	88 83       	st	Y, r24
	validConf.CRC16 = CalculateCRC16(&validConf, sizeof(sysConfig) - 2);
 8d2:	69 e0       	ldi	r22, 0x09	; 9
 8d4:	ce 01       	movw	r24, r28
 8d6:	ce db       	rcall	.-2148   	; 0x74 <_Z14CalculateCRC16Pva>
 8d8:	9a 87       	std	Y+10, r25	; 0x0a
 8da:	89 87       	std	Y+9, r24	; 0x09
	sei();
 8dc:	78 94       	sei
}
 8de:	df 91       	pop	r29
 8e0:	cf 91       	pop	r28
 8e2:	08 95       	ret

000008e4 <main>:

int main(void)
{
	uint8_t readTries = 0;
	mcuInit();
 8e4:	a6 df       	rcall	.-180    	; 0x832 <_Z7mcuInitv>
			uint32_t temp = (F_CPU / 8) * 30 * (tachCnt - 1);
			temp /= tachSum;
			if (cycles < 4)
				tmpStatus.rpmFront = temp;
			else
				tmpStatus.rpmRear = temp;
 8e6:	c3 e0       	ldi	r28, 0x03	; 3
 8e8:	d1 e0       	ldi	r29, 0x01	; 1
	uint8_t readTries = 0;
	mcuInit();
    /* Replace with your application code */
    while (1)
    {
		if (dRdy) //Command packet acquired
 8ea:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <dRdy>
 8ee:	88 23       	and	r24, r24
 8f0:	e9 f0       	breq	.+58     	; 0x92c <main+0x48>
		{
			if (CalculateCRC16(&rcvdConf, sizeof(sysConfig) - 2) == rcvdConf.CRC16) //CRC OK
 8f2:	69 e0       	ldi	r22, 0x09	; 9
 8f4:	85 e2       	ldi	r24, 0x25	; 37
 8f6:	91 e0       	ldi	r25, 0x01	; 1
 8f8:	bd db       	rcall	.-2182   	; 0x74 <_Z14CalculateCRC16Pva>
 8fa:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <rcvdConf+0x9>
 8fe:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <rcvdConf+0xa>
 902:	82 17       	cp	r24, r18
 904:	93 07       	cpc	r25, r19
 906:	81 f4       	brne	.+32     	; 0x928 <main+0x44>
			{
				memcpy(&validConf, &rcvdConf, sizeof(sysConfig));
 908:	8b e0       	ldi	r24, 0x0B	; 11
 90a:	e5 e2       	ldi	r30, 0x25	; 37
 90c:	f1 e0       	ldi	r31, 0x01	; 1
 90e:	a0 e3       	ldi	r26, 0x30	; 48
 910:	b1 e0       	ldi	r27, 0x01	; 1
 912:	01 90       	ld	r0, Z+
 914:	0d 92       	st	X+, r0
 916:	8a 95       	dec	r24
 918:	e1 f7       	brne	.-8      	; 0x912 <main+0x2e>
				eeprom_update_block(&validConf, &eConf, sizeof(sysConfig));
 91a:	4b e0       	ldi	r20, 0x0B	; 11
 91c:	50 e0       	ldi	r21, 0x00	; 0
 91e:	60 e0       	ldi	r22, 0x00	; 0
 920:	70 e0       	ldi	r23, 0x00	; 0
 922:	80 e3       	ldi	r24, 0x30	; 48
 924:	91 e0       	ldi	r25, 0x01	; 1
 926:	b3 d0       	rcall	.+358    	; 0xa8e <eeprom_update_block>
			}
			dRdy = false;
 928:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <dRdy>
		}

		if (tRdy) //Calculate and store RPM
 92c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <tRdy>
 930:	88 23       	and	r24, r24
 932:	11 f1       	breq	.+68     	; 0x978 <main+0x94>
		{
			uint32_t temp = (F_CPU / 8) * 30 * (tachCnt - 1);
 934:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <tachCnt>
 938:	70 e0       	ldi	r23, 0x00	; 0
 93a:	61 50       	subi	r22, 0x01	; 1
 93c:	71 09       	sbc	r23, r1
 93e:	07 2e       	mov	r0, r23
 940:	00 0c       	add	r0, r0
 942:	88 0b       	sbc	r24, r24
 944:	99 0b       	sbc	r25, r25
 946:	20 e0       	ldi	r18, 0x00	; 0
 948:	30 ef       	ldi	r19, 0xF0	; 240
 94a:	42 ed       	ldi	r20, 0xD2	; 210
 94c:	50 e0       	ldi	r21, 0x00	; 0
 94e:	25 d0       	rcall	.+74     	; 0x99a <__mulsi3>
			temp /= tachSum;
 950:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <tachSum>
 954:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <tachSum+0x1>
 958:	40 91 3f 01 	lds	r20, 0x013F	; 0x80013f <tachSum+0x2>
 95c:	50 91 40 01 	lds	r21, 0x0140	; 0x800140 <tachSum+0x3>
 960:	49 d0       	rcall	.+146    	; 0x9f4 <__udivmodsi4>
			if (cycles < 4)
 962:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <cycles>
 966:	84 30       	cpi	r24, 0x04	; 4
 968:	18 f4       	brcc	.+6      	; 0x970 <main+0x8c>
				tmpStatus.rpmFront = temp;
 96a:	3a 83       	std	Y+2, r19	; 0x02
 96c:	29 83       	std	Y+1, r18	; 0x01
 96e:	02 c0       	rjmp	.+4      	; 0x974 <main+0x90>
			else
				tmpStatus.rpmRear = temp;
 970:	3c 83       	std	Y+4, r19	; 0x04
 972:	2b 83       	std	Y+3, r18	; 0x03
			tRdy = false;
 974:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <tRdy>
		}

		if (sRdy)
 978:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <sRdy>
 97c:	88 23       	and	r24, r24
 97e:	19 f0       	breq	.+6      	; 0x986 <main+0xa2>
		{
			FanRegulation();
 980:	12 de       	rcall	.-988    	; 0x5a6 <_Z13FanRegulationv>
			sRdy = false;
 982:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <sRdy>
		}

		if (amRead && !rxMode) //Read data from AM2302
 986:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <amRead>
 98a:	88 23       	and	r24, r24
 98c:	09 f4       	brne	.+2      	; 0x990 <main+0xac>
 98e:	ad cf       	rjmp	.-166    	; 0x8ea <main+0x6>
 990:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <rxMode>
 994:	81 11       	cpse	r24, r1
 996:	a9 cf       	rjmp	.-174    	; 0x8ea <main+0x6>
		{
			if (!AM2302read() && readTries++ > 3)
 998:	f3 dd       	rcall	.-1050   	; 0x580 <_Z10AM2302readv>

0000099a <__mulsi3>:
 99a:	ee 27       	eor	r30, r30
 99c:	ff 27       	eor	r31, r31

0000099e <__mulsi3_helper>:
 99e:	aa 27       	eor	r26, r26
 9a0:	bb 27       	eor	r27, r27
 9a2:	08 c0       	rjmp	.+16     	; 0x9b4 <__mulsi3_helper+0x16>
 9a4:	a2 0f       	add	r26, r18
 9a6:	b3 1f       	adc	r27, r19
 9a8:	e4 1f       	adc	r30, r20
 9aa:	f5 1f       	adc	r31, r21
 9ac:	22 0f       	add	r18, r18
 9ae:	33 1f       	adc	r19, r19
 9b0:	44 1f       	adc	r20, r20
 9b2:	55 1f       	adc	r21, r21
 9b4:	96 95       	lsr	r25
 9b6:	87 95       	ror	r24
 9b8:	77 95       	ror	r23
 9ba:	67 95       	ror	r22
 9bc:	98 f3       	brcs	.-26     	; 0x9a4 <__mulsi3_helper+0x6>
 9be:	70 40       	sbci	r23, 0x00	; 0
 9c0:	a9 f7       	brne	.-22     	; 0x9ac <__mulsi3_helper+0xe>
 9c2:	00 97       	sbiw	r24, 0x00	; 0
 9c4:	99 f7       	brne	.-26     	; 0x9ac <__mulsi3_helper+0xe>
 9c6:	bd 01       	movw	r22, r26
 9c8:	cf 01       	movw	r24, r30
 9ca:	08 95       	ret

000009cc <__udivmodhi4>:
 9cc:	aa 1b       	sub	r26, r26
 9ce:	bb 1b       	sub	r27, r27
 9d0:	51 e1       	ldi	r21, 0x11	; 17
 9d2:	07 c0       	rjmp	.+14     	; 0x9e2 <__udivmodhi4_ep>

000009d4 <__udivmodhi4_loop>:
 9d4:	aa 1f       	adc	r26, r26
 9d6:	bb 1f       	adc	r27, r27
 9d8:	a6 17       	cp	r26, r22
 9da:	b7 07       	cpc	r27, r23
 9dc:	10 f0       	brcs	.+4      	; 0x9e2 <__udivmodhi4_ep>
 9de:	a6 1b       	sub	r26, r22
 9e0:	b7 0b       	sbc	r27, r23

000009e2 <__udivmodhi4_ep>:
 9e2:	88 1f       	adc	r24, r24
 9e4:	99 1f       	adc	r25, r25
 9e6:	5a 95       	dec	r21
 9e8:	a9 f7       	brne	.-22     	; 0x9d4 <__udivmodhi4_loop>
 9ea:	80 95       	com	r24
 9ec:	90 95       	com	r25
 9ee:	bc 01       	movw	r22, r24
 9f0:	cd 01       	movw	r24, r26
 9f2:	08 95       	ret

000009f4 <__udivmodsi4>:
 9f4:	a1 e2       	ldi	r26, 0x21	; 33
 9f6:	1a 2e       	mov	r1, r26
 9f8:	aa 1b       	sub	r26, r26
 9fa:	bb 1b       	sub	r27, r27
 9fc:	fd 01       	movw	r30, r26
 9fe:	0d c0       	rjmp	.+26     	; 0xa1a <__udivmodsi4_ep>

00000a00 <__udivmodsi4_loop>:
 a00:	aa 1f       	adc	r26, r26
 a02:	bb 1f       	adc	r27, r27
 a04:	ee 1f       	adc	r30, r30
 a06:	ff 1f       	adc	r31, r31
 a08:	a2 17       	cp	r26, r18
 a0a:	b3 07       	cpc	r27, r19
 a0c:	e4 07       	cpc	r30, r20
 a0e:	f5 07       	cpc	r31, r21
 a10:	20 f0       	brcs	.+8      	; 0xa1a <__udivmodsi4_ep>
 a12:	a2 1b       	sub	r26, r18
 a14:	b3 0b       	sbc	r27, r19
 a16:	e4 0b       	sbc	r30, r20
 a18:	f5 0b       	sbc	r31, r21

00000a1a <__udivmodsi4_ep>:
 a1a:	66 1f       	adc	r22, r22
 a1c:	77 1f       	adc	r23, r23
 a1e:	88 1f       	adc	r24, r24
 a20:	99 1f       	adc	r25, r25
 a22:	1a 94       	dec	r1
 a24:	69 f7       	brne	.-38     	; 0xa00 <__udivmodsi4_loop>
 a26:	60 95       	com	r22
 a28:	70 95       	com	r23
 a2a:	80 95       	com	r24
 a2c:	90 95       	com	r25
 a2e:	9b 01       	movw	r18, r22
 a30:	ac 01       	movw	r20, r24
 a32:	bd 01       	movw	r22, r26
 a34:	cf 01       	movw	r24, r30
 a36:	08 95       	ret

00000a38 <__divmodsi4>:
 a38:	05 2e       	mov	r0, r21
 a3a:	97 fb       	bst	r25, 7
 a3c:	16 f4       	brtc	.+4      	; 0xa42 <__divmodsi4+0xa>
 a3e:	00 94       	com	r0
 a40:	0f d0       	rcall	.+30     	; 0xa60 <__negsi2>
 a42:	57 fd       	sbrc	r21, 7
 a44:	05 d0       	rcall	.+10     	; 0xa50 <__divmodsi4_neg2>
 a46:	d6 df       	rcall	.-84     	; 0x9f4 <__udivmodsi4>
 a48:	07 fc       	sbrc	r0, 7
 a4a:	02 d0       	rcall	.+4      	; 0xa50 <__divmodsi4_neg2>
 a4c:	46 f4       	brtc	.+16     	; 0xa5e <__divmodsi4_exit>
 a4e:	08 c0       	rjmp	.+16     	; 0xa60 <__negsi2>

00000a50 <__divmodsi4_neg2>:
 a50:	50 95       	com	r21
 a52:	40 95       	com	r20
 a54:	30 95       	com	r19
 a56:	21 95       	neg	r18
 a58:	3f 4f       	sbci	r19, 0xFF	; 255
 a5a:	4f 4f       	sbci	r20, 0xFF	; 255
 a5c:	5f 4f       	sbci	r21, 0xFF	; 255

00000a5e <__divmodsi4_exit>:
 a5e:	08 95       	ret

00000a60 <__negsi2>:
 a60:	90 95       	com	r25
 a62:	80 95       	com	r24
 a64:	70 95       	com	r23
 a66:	61 95       	neg	r22
 a68:	7f 4f       	sbci	r23, 0xFF	; 255
 a6a:	8f 4f       	sbci	r24, 0xFF	; 255
 a6c:	9f 4f       	sbci	r25, 0xFF	; 255
 a6e:	08 95       	ret

00000a70 <eeprom_read_block>:
 a70:	dc 01       	movw	r26, r24
 a72:	86 2f       	mov	r24, r22

00000a74 <eeprom_read_blraw>:
 a74:	e8 2f       	mov	r30, r24
 a76:	e1 99       	sbic	0x1c, 1	; 28
 a78:	fe cf       	rjmp	.-4      	; 0xa76 <eeprom_read_blraw+0x2>
 a7a:	1f ba       	out	0x1f, r1	; 31
 a7c:	05 c0       	rjmp	.+10     	; 0xa88 <eeprom_read_blraw+0x14>
 a7e:	ee bb       	out	0x1e, r30	; 30
 a80:	e0 9a       	sbi	0x1c, 0	; 28
 a82:	e3 95       	inc	r30
 a84:	0d b2       	in	r0, 0x1d	; 29
 a86:	0d 92       	st	X+, r0
 a88:	41 50       	subi	r20, 0x01	; 1
 a8a:	c8 f7       	brcc	.-14     	; 0xa7e <eeprom_read_blraw+0xa>
 a8c:	08 95       	ret

00000a8e <eeprom_update_block>:
 a8e:	dc 01       	movw	r26, r24
 a90:	a4 0f       	add	r26, r20
 a92:	b5 1f       	adc	r27, r21
 a94:	41 50       	subi	r20, 0x01	; 1
 a96:	50 40       	sbci	r21, 0x00	; 0
 a98:	38 f0       	brcs	.+14     	; 0xaa8 <eeprom_update_block+0x1a>
 a9a:	86 2f       	mov	r24, r22
 a9c:	84 0f       	add	r24, r20
 a9e:	2e 91       	ld	r18, -X
 aa0:	05 d0       	rcall	.+10     	; 0xaac <eeprom_update_r18>
 aa2:	41 50       	subi	r20, 0x01	; 1
 aa4:	50 40       	sbci	r21, 0x00	; 0
 aa6:	d8 f7       	brcc	.-10     	; 0xa9e <eeprom_update_block+0x10>
 aa8:	08 95       	ret

00000aaa <eeprom_update_byte>:
 aaa:	26 2f       	mov	r18, r22

00000aac <eeprom_update_r18>:
 aac:	e1 99       	sbic	0x1c, 1	; 28
 aae:	fe cf       	rjmp	.-4      	; 0xaac <eeprom_update_r18>
 ab0:	1f ba       	out	0x1f, r1	; 31
 ab2:	8e bb       	out	0x1e, r24	; 30
 ab4:	e0 9a       	sbi	0x1c, 0	; 28
 ab6:	81 50       	subi	r24, 0x01	; 1
 ab8:	0d b2       	in	r0, 0x1d	; 29
 aba:	02 16       	cp	r0, r18
 abc:	39 f0       	breq	.+14     	; 0xacc <eeprom_update_r18+0x20>
 abe:	1c ba       	out	0x1c, r1	; 28
 ac0:	2d bb       	out	0x1d, r18	; 29
 ac2:	0f b6       	in	r0, 0x3f	; 63
 ac4:	f8 94       	cli
 ac6:	e2 9a       	sbi	0x1c, 2	; 28
 ac8:	e1 9a       	sbi	0x1c, 1	; 28
 aca:	0f be       	out	0x3f, r0	; 63
 acc:	08 95       	ret

00000ace <_exit>:
 ace:	f8 94       	cli

00000ad0 <__stop_program>:
 ad0:	ff cf       	rjmp	.-2      	; 0xad0 <__stop_program>
