
AirConditioning.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000b45  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000aa6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  00800100  00800100  00000b3a  2**0
                  ALLOC
  3 .eeprom       0000000b  00810000  00810000  00000b3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00000b45  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b78  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000e8  00000000  00000000  00000bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000011e0  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a70  00000000  00000000  00001e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000a8f  00000000  00000000  000028f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002ac  00000000  00000000  00003380  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000701  00000000  00000000  0000362c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a75  00000000  00000000  00003d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000078  00000000  00000000  000047a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	c9 c3       	rjmp	.+1938   	; 0x79a <__vector_3>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	0a c4       	rjmp	.+2068   	; 0x820 <__vector_5>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	85 c2       	rjmp	.+1290   	; 0x51c <__vector_8>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	8e c3       	rjmp	.+1820   	; 0x732 <__vector_10>
  16:	a4 c3       	rjmp	.+1864   	; 0x760 <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	3b c4       	rjmp	.+2166   	; 0x892 <__vector_13>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>
  2a:	18 c0       	rjmp	.+48     	; 0x5c <__bad_interrupt>
  2c:	88 c1       	rjmp	.+784    	; 0x33e <__vector_22>
  2e:	16 c0       	rjmp	.+44     	; 0x5c <__bad_interrupt>
  30:	47 c2       	rjmp	.+1166   	; 0x4c0 <__vector_24>
  32:	14 c0       	rjmp	.+40     	; 0x5c <__bad_interrupt>
  34:	13 c0       	rjmp	.+38     	; 0x5c <__bad_interrupt>
  36:	12 c0       	rjmp	.+36     	; 0x5c <__bad_interrupt>
  38:	11 c0       	rjmp	.+34     	; 0x5c <__bad_interrupt>
  3a:	10 c0       	rjmp	.+32     	; 0x5c <__bad_interrupt>

0000003c <__ctors_end>:
  3c:	11 24       	eor	r1, r1
  3e:	1f be       	out	0x3f, r1	; 63
  40:	cf ef       	ldi	r28, 0xFF	; 255
  42:	d1 e0       	ldi	r29, 0x01	; 1
  44:	de bf       	out	0x3e, r29	; 62
  46:	cd bf       	out	0x3d, r28	; 61

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	a0 e0       	ldi	r26, 0x00	; 0
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a9 34       	cpi	r26, 0x49	; 73
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	78 d4       	rcall	.+2288   	; 0x94a <main>
  5a:	23 c5       	rjmp	.+2630   	; 0xaa2 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <_Z14CalculateCRC16Pva>:

uint16_t CalculateCRC16(void *arr, int8_t count)
{
	uint8_t *ptr = (uint8_t*)arr;
	uint16_t CRC16 = 0xffff;
	while (--count >= 0)
  5e:	61 50       	subi	r22, 0x01	; 1
  60:	0a f1       	brmi	.+66     	; 0xa4 <_Z14CalculateCRC16Pva+0x46>
  62:	e8 2f       	mov	r30, r24
  64:	f9 2f       	mov	r31, r25
  66:	8f ef       	ldi	r24, 0xFF	; 255
  68:	9f ef       	ldi	r25, 0xFF	; 255
		CRC16 = _crc_xmodem_update(CRC16, *ptr++);
  6a:	21 91       	ld	r18, Z+
        "eor    %B0,%A0"         "\n\t" /* ret.hi is now ready. */
        "mov    %A0,%1"          "\n\t" /* ret.lo is now ready. */
        : "=d" (__ret), "=d" (__tmp1), "=d" (__tmp2)
        : "r" (__data), "0" (__crc)
        : "r0"
    );
  6c:	92 27       	eor	r25, r18
  6e:	09 2e       	mov	r0, r25
  70:	02 94       	swap	r0
  72:	20 2d       	mov	r18, r0
  74:	2f 70       	andi	r18, 0x0F	; 15
  76:	29 27       	eor	r18, r25
  78:	39 2f       	mov	r19, r25
  7a:	30 25       	eor	r19, r0
  7c:	33 0f       	add	r19, r19
  7e:	30 7e       	andi	r19, 0xE0	; 224
  80:	23 27       	eor	r18, r19
  82:	30 2d       	mov	r19, r0
  84:	39 27       	eor	r19, r25
  86:	30 7f       	andi	r19, 0xF0	; 240
  88:	36 95       	lsr	r19
  8a:	09 2e       	mov	r0, r25
  8c:	00 0c       	add	r0, r0
  8e:	33 1f       	adc	r19, r19
  90:	96 95       	lsr	r25
  92:	96 95       	lsr	r25
  94:	96 95       	lsr	r25
  96:	9f 71       	andi	r25, 0x1F	; 31
  98:	93 27       	eor	r25, r19
  9a:	98 27       	eor	r25, r24
  9c:	82 2f       	mov	r24, r18
  9e:	61 50       	subi	r22, 0x01	; 1

uint16_t CalculateCRC16(void *arr, int8_t count)
{
	uint8_t *ptr = (uint8_t*)arr;
	uint16_t CRC16 = 0xffff;
	while (--count >= 0)
  a0:	22 f7       	brpl	.-56     	; 0x6a <_Z14CalculateCRC16Pva+0xc>
  a2:	08 95       	ret
}

uint16_t CalculateCRC16(void *arr, int8_t count)
{
	uint8_t *ptr = (uint8_t*)arr;
	uint16_t CRC16 = 0xffff;
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	9f ef       	ldi	r25, 0xFF	; 255
	while (--count >= 0)
		CRC16 = _crc_xmodem_update(CRC16, *ptr++);
	return CRC16;
}
  a8:	08 95       	ret

000000aa <_Z8FanLevelii>:

int16_t FanLevel(int16_t dT, int16_t dRH)
{
  aa:	cf 92       	push	r12
  ac:	df 92       	push	r13
  ae:	ef 92       	push	r14
  b0:	ff 92       	push	r15
  b2:	0f 93       	push	r16
  b4:	1f 93       	push	r17
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	8b 01       	movw	r16, r22
	int16_t A = (FanMax - FanMin) * dT / validConf.dDeltaT;
	int16_t B = (FanMax - FanMin) * dRH / validConf.dDeltaRH;
	return A > B ? A : B;	
  bc:	09 2e       	mov	r0, r25
  be:	00 0c       	add	r0, r0
  c0:	aa 0b       	sbc	r26, r26
  c2:	bb 0b       	sbc	r27, r27
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	aa 1f       	adc	r26, r26
  ca:	bb 1f       	adc	r27, r27
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	aa 1f       	adc	r26, r26
  d2:	bb 1f       	adc	r27, r27
  d4:	ac 01       	movw	r20, r24
  d6:	bd 01       	movw	r22, r26
  d8:	44 0f       	add	r20, r20
  da:	55 1f       	adc	r21, r21
  dc:	66 1f       	adc	r22, r22
  de:	77 1f       	adc	r23, r23
  e0:	44 0f       	add	r20, r20
  e2:	55 1f       	adc	r21, r21
  e4:	66 1f       	adc	r22, r22
  e6:	77 1f       	adc	r23, r23
  e8:	84 0f       	add	r24, r20
  ea:	95 1f       	adc	r25, r21
  ec:	a6 1f       	adc	r26, r22
  ee:	b7 1f       	adc	r27, r23
  f0:	ac 01       	movw	r20, r24
  f2:	bd 01       	movw	r22, r26
  f4:	44 0f       	add	r20, r20
  f6:	55 1f       	adc	r21, r21
  f8:	66 1f       	adc	r22, r22
  fa:	77 1f       	adc	r23, r23
  fc:	44 0f       	add	r20, r20
  fe:	55 1f       	adc	r21, r21
 100:	66 1f       	adc	r22, r22
 102:	77 1f       	adc	r23, r23
 104:	6c 01       	movw	r12, r24
 106:	7d 01       	movw	r14, r26
 108:	c4 0e       	add	r12, r20
 10a:	d5 1e       	adc	r13, r21
 10c:	e6 1e       	adc	r14, r22
 10e:	f7 1e       	adc	r15, r23
 110:	c7 01       	movw	r24, r14
 112:	b6 01       	movw	r22, r12
	return CRC16;
}

int16_t FanLevel(int16_t dT, int16_t dRH)
{
	int16_t A = (FanMax - FanMin) * dT / validConf.dDeltaT;
 114:	cb e2       	ldi	r28, 0x2B	; 43
 116:	d1 e0       	ldi	r29, 0x01	; 1
	int16_t B = (FanMax - FanMin) * dRH / validConf.dDeltaRH;
	return A > B ? A : B;	
 118:	2f 81       	ldd	r18, Y+7	; 0x07
 11a:	38 85       	ldd	r19, Y+8	; 0x08
 11c:	03 2e       	mov	r0, r19
 11e:	00 0c       	add	r0, r0
 120:	44 0b       	sbc	r20, r20
 122:	55 0b       	sbc	r21, r21
 124:	73 d4       	rcall	.+2278   	; 0xa0c <__divmodsi4>
 126:	69 01       	movw	r12, r18
 128:	7a 01       	movw	r14, r20
 12a:	a8 01       	movw	r20, r16
 12c:	11 0f       	add	r17, r17
 12e:	66 0b       	sbc	r22, r22
 130:	77 0b       	sbc	r23, r23
 132:	44 0f       	add	r20, r20
 134:	55 1f       	adc	r21, r21
 136:	66 1f       	adc	r22, r22
 138:	77 1f       	adc	r23, r23
 13a:	44 0f       	add	r20, r20
 13c:	55 1f       	adc	r21, r21
 13e:	66 1f       	adc	r22, r22
 140:	77 1f       	adc	r23, r23
 142:	db 01       	movw	r26, r22
 144:	ca 01       	movw	r24, r20
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	aa 1f       	adc	r26, r26
 14c:	bb 1f       	adc	r27, r27
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	aa 1f       	adc	r26, r26
 154:	bb 1f       	adc	r27, r27
 156:	48 0f       	add	r20, r24
 158:	59 1f       	adc	r21, r25
 15a:	6a 1f       	adc	r22, r26
 15c:	7b 1f       	adc	r23, r27
 15e:	db 01       	movw	r26, r22
 160:	ca 01       	movw	r24, r20
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	aa 1f       	adc	r26, r26
 168:	bb 1f       	adc	r27, r27
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	aa 1f       	adc	r26, r26
 170:	bb 1f       	adc	r27, r27
 172:	8a 01       	movw	r16, r20
 174:	9b 01       	movw	r18, r22
 176:	08 0f       	add	r16, r24
 178:	19 1f       	adc	r17, r25
 17a:	2a 1f       	adc	r18, r26
 17c:	3b 1f       	adc	r19, r27
 17e:	c9 01       	movw	r24, r18
 180:	b8 01       	movw	r22, r16
 182:	2b 81       	ldd	r18, Y+3	; 0x03
 184:	3c 81       	ldd	r19, Y+4	; 0x04
 186:	03 2e       	mov	r0, r19
 188:	00 0c       	add	r0, r0
 18a:	44 0b       	sbc	r20, r20
 18c:	55 0b       	sbc	r21, r21
 18e:	3e d4       	rcall	.+2172   	; 0xa0c <__divmodsi4>
 190:	c6 01       	movw	r24, r12
 192:	c2 16       	cp	r12, r18
 194:	d3 06       	cpc	r13, r19
 196:	0c f4       	brge	.+2      	; 0x19a <_Z8FanLevelii+0xf0>
 198:	c9 01       	movw	r24, r18
}
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	1f 91       	pop	r17
 1a0:	0f 91       	pop	r16
 1a2:	ff 90       	pop	r15
 1a4:	ef 90       	pop	r14
 1a6:	df 90       	pop	r13
 1a8:	cf 90       	pop	r12
 1aa:	08 95       	ret

000001ac <_Z13FanRegulationv>:

void FanRegulation()
{
 1ac:	cf 92       	push	r12
 1ae:	df 92       	push	r13
 1b0:	ef 92       	push	r14
 1b2:	ff 92       	push	r15
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
	//Upper bounds for regulation
	if (validConf.fanLevelOverride != 0xFF)
 1bc:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <validConf>
 1c0:	8f 3f       	cpi	r24, 0xFF	; 255
 1c2:	09 f0       	breq	.+2      	; 0x1c6 <_Z13FanRegulationv+0x1a>
 1c4:	5c c0       	rjmp	.+184    	; 0x27e <__stack+0x7f>
		return;
	int16_t dT = tmpStatus.insideT - tmpStatus.outsideT - validConf.minDeltaT;
 1c6:	ab e2       	ldi	r26, 0x2B	; 43
 1c8:	b1 e0       	ldi	r27, 0x01	; 1
 1ca:	15 96       	adiw	r26, 0x05	; 5
 1cc:	ed 90       	ld	r14, X+
 1ce:	fc 90       	ld	r15, X
 1d0:	16 97       	sbiw	r26, 0x06	; 6
 1d2:	ea e1       	ldi	r30, 0x1A	; 26
 1d4:	f1 e0       	ldi	r31, 0x01	; 1
 1d6:	03 85       	ldd	r16, Z+11	; 0x0b
 1d8:	14 85       	ldd	r17, Z+12	; 0x0c
 1da:	85 85       	ldd	r24, Z+13	; 0x0d
 1dc:	96 85       	ldd	r25, Z+14	; 0x0e
 1de:	08 1b       	sub	r16, r24
 1e0:	19 0b       	sbc	r17, r25
 1e2:	0e 19       	sub	r16, r14
 1e4:	1f 09       	sbc	r17, r15
	int16_t dRH = tmpStatus.insideRH - tmpStatus.outsideRH - validConf.minDeltaRH;
 1e6:	11 96       	adiw	r26, 0x01	; 1
 1e8:	cd 90       	ld	r12, X+
 1ea:	dc 90       	ld	r13, X
 1ec:	12 97       	sbiw	r26, 0x02	; 2
 1ee:	c7 81       	ldd	r28, Z+7	; 0x07
 1f0:	d0 85       	ldd	r29, Z+8	; 0x08
 1f2:	81 85       	ldd	r24, Z+9	; 0x09
 1f4:	92 85       	ldd	r25, Z+10	; 0x0a
 1f6:	c8 1b       	sub	r28, r24
 1f8:	d9 0b       	sbc	r29, r25
 1fa:	cc 19       	sub	r28, r12
 1fc:	dd 09       	sbc	r29, r13
	int16_t A = FanLevel(dT, dRH) + FanMin;
 1fe:	be 01       	movw	r22, r28
 200:	c8 01       	movw	r24, r16
 202:	53 df       	rcall	.-346    	; 0xaa <_Z8FanLevelii>
 204:	83 96       	adiw	r24, 0x23	; 35
	if ((fanLvl >= FanMin && A > fanLvl) || (fanLvl < FanMin && A > FanMin)) //At least one of upper bounds is above
 206:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <fanLvl>
 20a:	23 32       	cpi	r18, 0x23	; 35
 20c:	30 f0       	brcs	.+12     	; 0x21a <__stack+0x1b>
 20e:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <fanLvl>
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	28 17       	cp	r18, r24
 216:	39 07       	cpc	r19, r25
 218:	7c f0       	brlt	.+30     	; 0x238 <__stack+0x39>
 21a:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <fanLvl>
 21e:	23 32       	cpi	r18, 0x23	; 35
 220:	98 f4       	brcc	.+38     	; 0x248 <__stack+0x49>
 222:	84 32       	cpi	r24, 0x24	; 36
 224:	91 05       	cpc	r25, r1
 226:	44 f4       	brge	.+16     	; 0x238 <__stack+0x39>
 228:	0f c0       	rjmp	.+30     	; 0x248 <__stack+0x49>
		//Lower bounds for regulation
		dT += validConf.minDeltaT >> 3;
		dRH += validConf.minDeltaRH >> 3;
		A = FanLevel(dT, dRH) + FanMin;
		if (A < fanLvl) //Both lower bounds are below
			fanLvl = A > FanMin ? A : 0; //Decrease level
 22a:	44 32       	cpi	r20, 0x24	; 36
 22c:	51 05       	cpc	r21, r1
 22e:	0c f4       	brge	.+2      	; 0x232 <__stack+0x33>
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <fanLvl>
 236:	23 c0       	rjmp	.+70     	; 0x27e <__stack+0x7f>
		return;
	int16_t dT = tmpStatus.insideT - tmpStatus.outsideT - validConf.minDeltaT;
	int16_t dRH = tmpStatus.insideRH - tmpStatus.outsideRH - validConf.minDeltaRH;
	int16_t A = FanLevel(dT, dRH) + FanMin;
	if ((fanLvl >= FanMin && A > fanLvl) || (fanLvl < FanMin && A > FanMin)) //At least one of upper bounds is above
		fanLvl = A > FanMax ? FanMax : A; //Increase level
 238:	88 38       	cpi	r24, 0x88	; 136
 23a:	91 05       	cpc	r25, r1
 23c:	14 f0       	brlt	.+4      	; 0x242 <__stack+0x43>
 23e:	87 e8       	ldi	r24, 0x87	; 135
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <fanLvl>
 246:	1b c0       	rjmp	.+54     	; 0x27e <__stack+0x7f>
	else
	{
		//Lower bounds for regulation
		dT += validConf.minDeltaT >> 3;
		dRH += validConf.minDeltaRH >> 3;
		A = FanLevel(dT, dRH) + FanMin;
 248:	b6 01       	movw	r22, r12
 24a:	75 95       	asr	r23
 24c:	67 95       	ror	r22
 24e:	75 95       	asr	r23
 250:	67 95       	ror	r22
 252:	75 95       	asr	r23
 254:	67 95       	ror	r22
 256:	6c 0f       	add	r22, r28
 258:	7d 1f       	adc	r23, r29
 25a:	c7 01       	movw	r24, r14
 25c:	95 95       	asr	r25
 25e:	87 95       	ror	r24
 260:	95 95       	asr	r25
 262:	87 95       	ror	r24
 264:	95 95       	asr	r25
 266:	87 95       	ror	r24
 268:	80 0f       	add	r24, r16
 26a:	91 1f       	adc	r25, r17
 26c:	1e df       	rcall	.-452    	; 0xaa <_Z8FanLevelii>
 26e:	83 96       	adiw	r24, 0x23	; 35
 270:	ac 01       	movw	r20, r24
		if (A < fanLvl) //Both lower bounds are below
 272:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <fanLvl>
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	82 17       	cp	r24, r18
 27a:	93 07       	cpc	r25, r19
 27c:	b4 f2       	brlt	.-84     	; 0x22a <__stack+0x2b>
			fanLvl = A > FanMin ? A : 0; //Decrease level
	}
}
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	1f 91       	pop	r17
 284:	0f 91       	pop	r16
 286:	ff 90       	pop	r15
 288:	ef 90       	pop	r14
 28a:	df 90       	pop	r13
 28c:	cf 90       	pop	r12
 28e:	08 95       	ret

00000290 <_Z6GetRPMv>:

uint16_t GetRPM()
{
 290:	cf 92       	push	r12
 292:	df 92       	push	r13
 294:	ef 92       	push	r14
 296:	ff 92       	push	r15
	while (tachOvf--)
 298:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <tachOvf>
 29c:	9f ef       	ldi	r25, 0xFF	; 255
 29e:	98 0f       	add	r25, r24
 2a0:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <tachOvf>
 2a4:	88 23       	and	r24, r24
 2a6:	e1 f0       	breq	.+56     	; 0x2e0 <_Z6GetRPMv+0x50>
 2a8:	40 91 38 01 	lds	r20, 0x0138	; 0x800138 <tachSum>
 2ac:	50 91 39 01 	lds	r21, 0x0139	; 0x800139 <tachSum+0x1>
 2b0:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <tachSum+0x2>
 2b4:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <tachSum+0x3>
		tachSum += 0xffff;
 2b8:	41 50       	subi	r20, 0x01	; 1
 2ba:	51 09       	sbc	r21, r1
 2bc:	6f 4f       	sbci	r22, 0xFF	; 255
 2be:	7f 4f       	sbci	r23, 0xFF	; 255
	}
}

uint16_t GetRPM()
{
	while (tachOvf--)
 2c0:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <tachOvf>
 2c4:	9f ef       	ldi	r25, 0xFF	; 255
 2c6:	98 0f       	add	r25, r24
 2c8:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <tachOvf>
 2cc:	81 11       	cpse	r24, r1
 2ce:	f4 cf       	rjmp	.-24     	; 0x2b8 <_Z6GetRPMv+0x28>
 2d0:	40 93 38 01 	sts	0x0138, r20	; 0x800138 <tachSum>
 2d4:	50 93 39 01 	sts	0x0139, r21	; 0x800139 <tachSum+0x1>
 2d8:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <tachSum+0x2>
 2dc:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <tachSum+0x3>
		tachSum += 0xffff;
	tachSum -= tachPrev;
 2e0:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <tachPrev>
 2e4:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <tachPrev+0x1>
 2e8:	c0 90 38 01 	lds	r12, 0x0138	; 0x800138 <tachSum>
 2ec:	d0 90 39 01 	lds	r13, 0x0139	; 0x800139 <tachSum+0x1>
 2f0:	e0 90 3a 01 	lds	r14, 0x013A	; 0x80013a <tachSum+0x2>
 2f4:	f0 90 3b 01 	lds	r15, 0x013B	; 0x80013b <tachSum+0x3>
 2f8:	c8 1a       	sub	r12, r24
 2fa:	d9 0a       	sbc	r13, r25
 2fc:	e1 08       	sbc	r14, r1
 2fe:	f1 08       	sbc	r15, r1
 300:	c0 92 38 01 	sts	0x0138, r12	; 0x800138 <tachSum>
 304:	d0 92 39 01 	sts	0x0139, r13	; 0x800139 <tachSum+0x1>
 308:	e0 92 3a 01 	sts	0x013A, r14	; 0x80013a <tachSum+0x2>
 30c:	f0 92 3b 01 	sts	0x013B, r15	; 0x80013b <tachSum+0x3>
	uint32_t temp = (F_CPU * 60 / 8) * (tachCnt - 1);
 310:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <tachCnt>
	return (uint16_t)(temp / tachSum);
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	61 50       	subi	r22, 0x01	; 1
 318:	71 09       	sbc	r23, r1
 31a:	07 2e       	mov	r0, r23
 31c:	00 0c       	add	r0, r0
 31e:	88 0b       	sbc	r24, r24
 320:	99 0b       	sbc	r25, r25
 322:	20 e0       	ldi	r18, 0x00	; 0
 324:	30 ec       	ldi	r19, 0xC0	; 192
 326:	4b e4       	ldi	r20, 0x4B	; 75
 328:	53 e0       	ldi	r21, 0x03	; 3
 32a:	21 d3       	rcall	.+1602   	; 0x96e <__mulsi3>
 32c:	a7 01       	movw	r20, r14
 32e:	96 01       	movw	r18, r12
 330:	4b d3       	rcall	.+1686   	; 0x9c8 <__udivmodsi4>
}
 332:	c9 01       	movw	r24, r18
 334:	ff 90       	pop	r15
 336:	ef 90       	pop	r14
 338:	df 90       	pop	r13
 33a:	cf 90       	pop	r12
 33c:	08 95       	ret

0000033e <__vector_22>:

ISR (USART0_RX_vect)
{
 33e:	1f 92       	push	r1
 340:	0f 92       	push	r0
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	0f 92       	push	r0
 346:	11 24       	eor	r1, r1
 348:	2f 93       	push	r18
 34a:	3f 93       	push	r19
 34c:	4f 93       	push	r20
 34e:	5f 93       	push	r21
 350:	6f 93       	push	r22
 352:	7f 93       	push	r23
 354:	8f 93       	push	r24
 356:	9f 93       	push	r25
 358:	af 93       	push	r26
 35a:	bf 93       	push	r27
 35c:	ef 93       	push	r30
 35e:	ff 93       	push	r31
	static char uCnt;
	static uint8_t *rxBuf;
	uint8_t data = UDR0;
 360:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
	if (UCSR0A & (1 << MPCM0)) //Address listening mode
 364:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
 368:	90 ff       	sbrs	r25, 0
 36a:	54 c0       	rjmp	.+168    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	{
		if (CmdLC <= data && data <= CmdUC)
 36c:	9f ee       	ldi	r25, 0xEF	; 239
 36e:	98 0f       	add	r25, r24
 370:	93 30       	cpi	r25, 0x03	; 3
 372:	08 f0       	brcs	.+2      	; 0x376 <__vector_22+0x38>
 374:	4c c0       	rjmp	.+152    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		{
			UCSR0A = 0; //Clear MPCM bit
 376:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
			rxMode = data;
 37a:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <rxMode>
			if (data == SetConfig)
 37e:	83 31       	cpi	r24, 0x13	; 19
 380:	61 f4       	brne	.+24     	; 0x39a <__vector_22+0x5c>
			{
				uCnt = sizeof(sysConfig); //Bytes to receive
 382:	8b e0       	ldi	r24, 0x0B	; 11
 384:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_ZZ11__vector_22E4uCnt>
				rxBuf = iobuf; //First byte address in structure
 388:	84 e0       	ldi	r24, 0x04	; 4
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <_ZZ11__vector_22E5rxBuf+0x1>
 390:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <_ZZ11__vector_22E5rxBuf>
				rxMark = 0;
 394:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <rxMark>
 398:	82 c0       	rjmp	.+260    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
sysConfig EEMEM eConf = { 0xFF, 100, 300, 40, 50, 0 };
uint8_t iobuf[MAX(sizeof(sysConfig), sizeof(sysStatus))];

void inline U0TXen()
{
	PORTA |= (1 << PORTA5);
 39a:	dd 9a       	sbi	0x1b, 5	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 39c:	80 e6       	ldi	r24, 0x60	; 96
 39e:	8a 95       	dec	r24
 3a0:	f1 f7       	brne	.-4      	; 0x39e <__vector_22+0x60>
				rxMark = 0;
			}
			else
			{
				U0TXen();
				if (rxMode == GetConfig)
 3a2:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <rxMode>
 3a6:	82 31       	cpi	r24, 0x12	; 18
 3a8:	51 f4       	brne	.+20     	; 0x3be <__vector_22+0x80>
				{
					txCnt = sizeof(sysConfig) - 1; //Because one byte will be send right after
 3aa:	8a e0       	ldi	r24, 0x0A	; 10
 3ac:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <txCnt>
					txBuf = (uint8_t*)&validConf;
 3b0:	8b e2       	ldi	r24, 0x2B	; 43
 3b2:	91 e0       	ldi	r25, 0x01	; 1
 3b4:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <txBuf+0x1>
 3b8:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <txBuf>
 3bc:	1a c0       	rjmp	.+52     	; 0x3f2 <__vector_22+0xb4>
				}
				else //Get status
				{
					txBuf = iobuf;
 3be:	84 e0       	ldi	r24, 0x04	; 4
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <txBuf+0x1>
 3c6:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <txBuf>
					tmpStatus.CRC16 = CalculateCRC16(&tmpStatus, sizeof(sysStatus) - 2);
 3ca:	6f e0       	ldi	r22, 0x0F	; 15
 3cc:	8a e1       	ldi	r24, 0x1A	; 26
 3ce:	91 e0       	ldi	r25, 0x01	; 1
 3d0:	46 de       	rcall	.-884    	; 0x5e <_Z14CalculateCRC16Pva>
 3d2:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <tmpStatus+0x10>
 3d6:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <tmpStatus+0xf>
					memcpy(iobuf, &tmpStatus, sizeof(sysStatus));
 3da:	81 e1       	ldi	r24, 0x11	; 17
 3dc:	ea e1       	ldi	r30, 0x1A	; 26
 3de:	f1 e0       	ldi	r31, 0x01	; 1
 3e0:	a4 e0       	ldi	r26, 0x04	; 4
 3e2:	b1 e0       	ldi	r27, 0x01	; 1
 3e4:	01 90       	ld	r0, Z+
 3e6:	0d 92       	st	X+, r0
 3e8:	8a 95       	dec	r24
 3ea:	e1 f7       	brne	.-8      	; 0x3e4 <__vector_22+0xa6>
					txCnt = sizeof(sysStatus) - 1;
 3ec:	80 e1       	ldi	r24, 0x10	; 16
 3ee:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <txCnt>
				}
				UDR0 = *txBuf++; //Send first byte
 3f2:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <txBuf>
 3f6:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <txBuf+0x1>
 3fa:	cf 01       	movw	r24, r30
 3fc:	01 96       	adiw	r24, 0x01	; 1
 3fe:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <txBuf+0x1>
 402:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <txBuf>
 406:	80 81       	ld	r24, Z
 408:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
 40c:	48 c0       	rjmp	.+144    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
			}
		}
		else
			rxMode = 0;
 40e:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <rxMode>
 412:	45 c0       	rjmp	.+138    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
	}
	else if (rxMode == SetConfig)
 414:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <rxMode>
 418:	93 31       	cpi	r25, 0x13	; 19
 41a:	09 f0       	breq	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41c:	40 c0       	rjmp	.+128    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
	{
		*rxBuf++ = data;
 41e:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <_ZZ11__vector_22E5rxBuf>
 422:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <_ZZ11__vector_22E5rxBuf+0x1>
 426:	9f 01       	movw	r18, r30
 428:	2f 5f       	subi	r18, 0xFF	; 255
 42a:	3f 4f       	sbci	r19, 0xFF	; 255
 42c:	30 93 02 01 	sts	0x0102, r19	; 0x800102 <_ZZ11__vector_22E5rxBuf+0x1>
 430:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <_ZZ11__vector_22E5rxBuf>
 434:	80 83       	st	Z, r24
		if (!--uCnt) //Packet received
 436:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <_ZZ11__vector_22E4uCnt>
 43a:	81 50       	subi	r24, 0x01	; 1
 43c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_ZZ11__vector_22E4uCnt>
 440:	81 11       	cpse	r24, r1
 442:	2d c0       	rjmp	.+90     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
		{
			rxMode = 0;
 444:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <rxMode>
			if (CalculateCRC16(iobuf, sizeof(sysConfig) - 2) == ((sysConfig*)iobuf)->CRC16) //CRC OK
 448:	69 e0       	ldi	r22, 0x09	; 9
 44a:	84 e0       	ldi	r24, 0x04	; 4
 44c:	91 e0       	ldi	r25, 0x01	; 1
 44e:	07 de       	rcall	.-1010   	; 0x5e <_Z14CalculateCRC16Pva>
 450:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <iobuf+0x9>
 454:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <iobuf+0xa>
 458:	82 17       	cp	r24, r18
 45a:	93 07       	cpc	r25, r19
 45c:	e9 f4       	brne	.+58     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
			{
				memcpy(&validConf, iobuf, sizeof(sysConfig));
 45e:	8b e0       	ldi	r24, 0x0B	; 11
 460:	e4 e0       	ldi	r30, 0x04	; 4
 462:	f1 e0       	ldi	r31, 0x01	; 1
 464:	ab e2       	ldi	r26, 0x2B	; 43
 466:	b1 e0       	ldi	r27, 0x01	; 1
 468:	01 90       	ld	r0, Z+
 46a:	0d 92       	st	X+, r0
 46c:	8a 95       	dec	r24
 46e:	e1 f7       	brne	.-8      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
				if (validConf.fanLevelOverride != 0xFF)
 470:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <validConf>
 474:	8f 3f       	cpi	r24, 0xFF	; 255
 476:	81 f0       	breq	.+32     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
				{
					fanLvl = validConf.fanLevelOverride;
 478:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <fanLvl>
					if (fanLvl < FanMin)
 47c:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <fanLvl>
 480:	83 32       	cpi	r24, 0x23	; 35
 482:	18 f4       	brcc	.+6      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
						fanLvl = 0;
 484:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <fanLvl>
 488:	07 c0       	rjmp	.+14     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
					else if (fanLvl > FanMax)
 48a:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <fanLvl>
 48e:	88 38       	cpi	r24, 0x88	; 136
 490:	18 f0       	brcs	.+6      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
						fanLvl = FanMax;
 492:	87 e8       	ldi	r24, 0x87	; 135
 494:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <fanLvl>
				}
			}
			UCSR0A = (1 << MPCM0); //Set MPCM bit
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
		}
	}
}
 49e:	ff 91       	pop	r31
 4a0:	ef 91       	pop	r30
 4a2:	bf 91       	pop	r27
 4a4:	af 91       	pop	r26
 4a6:	9f 91       	pop	r25
 4a8:	8f 91       	pop	r24
 4aa:	7f 91       	pop	r23
 4ac:	6f 91       	pop	r22
 4ae:	5f 91       	pop	r21
 4b0:	4f 91       	pop	r20
 4b2:	3f 91       	pop	r19
 4b4:	2f 91       	pop	r18
 4b6:	0f 90       	pop	r0
 4b8:	0f be       	out	0x3f, r0	; 63
 4ba:	0f 90       	pop	r0
 4bc:	1f 90       	pop	r1
 4be:	18 95       	reti

000004c0 <__vector_24>:

ISR (USART0_TX_vect) //Transmit to RS485
{
 4c0:	1f 92       	push	r1
 4c2:	0f 92       	push	r0
 4c4:	0f b6       	in	r0, 0x3f	; 63
 4c6:	0f 92       	push	r0
 4c8:	11 24       	eor	r1, r1
 4ca:	8f 93       	push	r24
 4cc:	9f 93       	push	r25
 4ce:	ef 93       	push	r30
 4d0:	ff 93       	push	r31
	if (txCnt--)
 4d2:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <txCnt>
 4d6:	9f ef       	ldi	r25, 0xFF	; 255
 4d8:	98 0f       	add	r25, r24
 4da:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <txCnt>
 4de:	88 23       	and	r24, r24
 4e0:	71 f0       	breq	.+28     	; 0x4fe <__vector_24+0x3e>
		UDR0 = *txBuf++; //Send next character from the given buffer
 4e2:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <txBuf>
 4e6:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <txBuf+0x1>
 4ea:	cf 01       	movw	r24, r30
 4ec:	01 96       	adiw	r24, 0x01	; 1
 4ee:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <txBuf+0x1>
 4f2:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <txBuf>
 4f6:	80 81       	ld	r24, Z
 4f8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
 4fc:	06 c0       	rjmp	.+12     	; 0x50a <__vector_24+0x4a>
	else
	{
		U0RXen();
 4fe:	dd 98       	cbi	0x1b, 5	; 27
		UCSR0A = (1 << MPCM0); //Set MPCM bit
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
		rxMode = 0;
 506:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <rxMode>
	}
}
 50a:	ff 91       	pop	r31
 50c:	ef 91       	pop	r30
 50e:	9f 91       	pop	r25
 510:	8f 91       	pop	r24
 512:	0f 90       	pop	r0
 514:	0f be       	out	0x3f, r0	; 63
 516:	0f 90       	pop	r0
 518:	1f 90       	pop	r1
 51a:	18 95       	reti

0000051c <__vector_8>:

ISR (TIMER1_OVF_vect) //Occurs every 71.1ms
{
 51c:	1f 92       	push	r1
 51e:	0f 92       	push	r0
 520:	0f b6       	in	r0, 0x3f	; 63
 522:	0f 92       	push	r0
 524:	11 24       	eor	r1, r1
 526:	1f 93       	push	r17
 528:	2f 93       	push	r18
 52a:	3f 93       	push	r19
 52c:	4f 93       	push	r20
 52e:	5f 93       	push	r21
 530:	6f 93       	push	r22
 532:	7f 93       	push	r23
 534:	8f 93       	push	r24
 536:	9f 93       	push	r25
 538:	af 93       	push	r26
 53a:	bf 93       	push	r27
 53c:	cf 93       	push	r28
 53e:	df 93       	push	r29
 540:	ef 93       	push	r30
 542:	ff 93       	push	r31
	uint8_t lcycle = ((uint8_t)cycles++) & 0x3F; //Range 0-63
 544:	c0 91 3c 01 	lds	r28, 0x013C	; 0x80013c <cycles>
 548:	d0 91 3d 01 	lds	r29, 0x013D	; 0x80013d <cycles+0x1>
 54c:	ce 01       	movw	r24, r28
 54e:	01 96       	adiw	r24, 0x01	; 1
 550:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <cycles+0x1>
 554:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <cycles>
 558:	1c 2f       	mov	r17, r28
 55a:	1f 73       	andi	r17, 0x3F	; 63
	if (!cycles) //~77 minutes between updates
 55c:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <cycles>
 560:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <cycles+0x1>
 564:	89 2b       	or	r24, r25
 566:	39 f4       	brne	.+14     	; 0x576 <__vector_8+0x5a>
		eeprom_update_block(&validConf, &eConf, sizeof(sysConfig));
 568:	4b e0       	ldi	r20, 0x0B	; 11
 56a:	50 e0       	ldi	r21, 0x00	; 0
 56c:	60 e0       	ldi	r22, 0x00	; 0
 56e:	70 e0       	ldi	r23, 0x00	; 0
 570:	8b e2       	ldi	r24, 0x2B	; 43
 572:	91 e0       	ldi	r25, 0x01	; 1
 574:	76 d2       	rcall	.+1260   	; 0xa62 <eeprom_update_block>
	if (lcycle == 44 || lcycle == 52) //Send start signal to the sensor
 576:	1c 32       	cpi	r17, 0x2C	; 44
 578:	19 f0       	breq	.+6      	; 0x580 <__vector_8+0x64>
 57a:	14 33       	cpi	r17, 0x34	; 52
 57c:	09 f0       	breq	.+2      	; 0x580 <__vector_8+0x64>
 57e:	4a c0       	rjmp	.+148    	; 0x614 <__vector_8+0xf8>
	{
		uint8_t delayz = 0, j;
		for (j = 0; j < 4; j++)
			delayz += AM2302.arr[j];
 580:	e5 e1       	ldi	r30, 0x15	; 21
 582:	f1 e0       	ldi	r31, 0x01	; 1
 584:	40 81       	ld	r20, Z
 586:	31 81       	ldd	r19, Z+1	; 0x01
 588:	84 2f       	mov	r24, r20
 58a:	83 0f       	add	r24, r19
 58c:	22 81       	ldd	r18, Z+2	; 0x02
 58e:	82 0f       	add	r24, r18
 590:	93 81       	ldd	r25, Z+3	; 0x03
		j = AM2302.arr[1]; //Big endian to little endian conversion
		AM2302.arr[1] = AM2302.arr[0];
 592:	41 83       	std	Z+1, r20	; 0x01
		AM2302.arr[0] = j;
 594:	30 83       	st	Z, r19
		j = AM2302.arr[3];
		AM2302.arr[3] = AM2302.arr[2];
 596:	23 83       	std	Z+3, r18	; 0x03
		AM2302.arr[2] = j;
 598:	92 83       	std	Z+2, r25	; 0x02
		if (delayz == AM2302.arr[4] && AM2302.frame.RH != 0)
 59a:	89 0f       	add	r24, r25
 59c:	94 81       	ldd	r25, Z+4	; 0x04
 59e:	89 13       	cpse	r24, r25
 5a0:	2c c0       	rjmp	.+88     	; 0x5fa <__vector_8+0xde>
 5a2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <AM2302>
 5a6:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <AM2302+0x1>
 5aa:	00 97       	sbiw	r24, 0x00	; 0
 5ac:	31 f1       	breq	.+76     	; 0x5fa <__vector_8+0xde>
		{
			if (AM2302.frame.T < 0)
 5ae:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <AM2302+0x2>
 5b2:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <AM2302+0x3>
 5b6:	33 23       	and	r19, r19
 5b8:	44 f4       	brge	.+16     	; 0x5ca <__vector_8+0xae>
				AM2302.frame.T = ~(AM2302.frame.T & 0x7FFF) + 1;
 5ba:	3f 77       	andi	r19, 0x7F	; 127
 5bc:	31 95       	neg	r19
 5be:	21 95       	neg	r18
 5c0:	31 09       	sbc	r19, r1
 5c2:	30 93 18 01 	sts	0x0118, r19	; 0x800118 <AM2302+0x3>
 5c6:	20 93 17 01 	sts	0x0117, r18	; 0x800117 <AM2302+0x2>
			if (lcycle == 44)
 5ca:	1c 32       	cpi	r17, 0x2C	; 44
 5cc:	59 f4       	brne	.+22     	; 0x5e4 <__vector_8+0xc8>
			{
				tmpStatus.insideRH = AM2302.frame.RH;
 5ce:	ea e1       	ldi	r30, 0x1A	; 26
 5d0:	f1 e0       	ldi	r31, 0x01	; 1
 5d2:	90 87       	std	Z+8, r25	; 0x08
 5d4:	87 83       	std	Z+7, r24	; 0x07
				tmpStatus.insideT = AM2302.frame.T;
 5d6:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <AM2302+0x2>
 5da:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <AM2302+0x3>
 5de:	94 87       	std	Z+12, r25	; 0x0c
 5e0:	83 87       	std	Z+11, r24	; 0x0b
 5e2:	0b c0       	rjmp	.+22     	; 0x5fa <__vector_8+0xde>
			}
			else
			{
				tmpStatus.outsideRH = AM2302.frame.RH;
 5e4:	ea e1       	ldi	r30, 0x1A	; 26
 5e6:	f1 e0       	ldi	r31, 0x01	; 1
 5e8:	92 87       	std	Z+10, r25	; 0x0a
 5ea:	81 87       	std	Z+9, r24	; 0x09
				tmpStatus.outsideT = AM2302.frame.T;
 5ec:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <AM2302+0x2>
 5f0:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <AM2302+0x3>
 5f4:	96 87       	std	Z+14, r25	; 0x0e
 5f6:	85 87       	std	Z+13, r24	; 0x0d
				FanRegulation();
 5f8:	d9 dd       	rcall	.-1102   	; 0x1ac <_Z13FanRegulationv>
			}
		}

		PORTB &= ~(1 << PORTB2);
 5fa:	c2 98       	cbi	0x18, 2	; 24
		DDRB |= (1 << DDB2); //Interface pulled low
 5fc:	ba 9a       	sbi	0x17, 2	; 23
		TCCR0B = (1 << CS02); //28.8kHz, 34.72µs tick
 5fe:	84 e0       	ldi	r24, 0x04	; 4
 600:	83 bf       	out	0x33, r24	; 51
		TCNT0 = 0;
 602:	12 be       	out	0x32, r1	; 50
		OCR0B = 48; //~1.666ms delay
 604:	90 e3       	ldi	r25, 0x30	; 48
 606:	9c bf       	out	0x3c, r25	; 60
		TIFR0 = (1 << TOV0) | (1 << OCF0B);
 608:	95 e0       	ldi	r25, 0x05	; 5
 60a:	98 bf       	out	0x38, r25	; 56
		TIMSK0 = (1 << OCIE0B); //Enable interrupt
 60c:	89 bf       	out	0x39, r24	; 57
		amCnt = -2; //Skip response signal
 60e:	8e ef       	ldi	r24, 0xFE	; 254
 610:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <amCnt>
	}
	lcycle &= 0xF; //Range 0-15
 614:	8c 2f       	mov	r24, r28
 616:	8f 70       	andi	r24, 0x0F	; 15
	if (!lcycle)
 618:	89 f4       	brne	.+34     	; 0x63c <__vector_8+0x120>
	{
		tmpStatus.rpmFront = tachCnt > 1 ? GetRPM() : 0;
 61a:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <tachCnt>
 61e:	82 30       	cpi	r24, 0x02	; 2
 620:	10 f0       	brcs	.+4      	; 0x626 <__vector_8+0x10a>
 622:	36 de       	rcall	.-916    	; 0x290 <_Z6GetRPMv>
 624:	02 c0       	rjmp	.+4      	; 0x62a <__vector_8+0x10e>
 626:	80 e0       	ldi	r24, 0x00	; 0
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <tmpStatus+0x2>
 62e:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <tmpStatus+0x1>
		SelChA();
 632:	de 9a       	sbi	0x1b, 6	; 27
		tachCnt = 0;
 634:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <tachCnt>
		TIMSK1 |= (1 << ICIE1);
 638:	7d 9a       	sbi	0x0f, 5	; 15
 63a:	25 c0       	rjmp	.+74     	; 0x686 <__vector_8+0x16a>
	}
	else if (lcycle == 8)
 63c:	88 30       	cpi	r24, 0x08	; 8
 63e:	19 f5       	brne	.+70     	; 0x686 <__vector_8+0x16a>
	{
		tmpStatus.rpmRear = tachCnt > 1 ? GetRPM() : 0;
 640:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <tachCnt>
 644:	82 30       	cpi	r24, 0x02	; 2
 646:	10 f0       	brcs	.+4      	; 0x64c <__vector_8+0x130>
 648:	23 de       	rcall	.-954    	; 0x290 <_Z6GetRPMv>
 64a:	02 c0       	rjmp	.+4      	; 0x650 <__vector_8+0x134>
 64c:	80 e0       	ldi	r24, 0x00	; 0
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	ea e1       	ldi	r30, 0x1A	; 26
 652:	f1 e0       	ldi	r31, 0x01	; 1
 654:	94 83       	std	Z+4, r25	; 0x04
 656:	83 83       	std	Z+3, r24	; 0x03
		SelChB();
 658:	de 98       	cbi	0x1b, 6	; 27
		tachCnt = 0;
 65a:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <tachCnt>
		TIMSK1 |= (1 << ICIE1);
 65e:	7d 9a       	sbi	0x0f, 5	; 15
		tmpStatus.currentDraw = (adcSum << 3) / Idiv_x1mA;
 660:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <adcSum>
 664:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <adcSum+0x1>
 668:	88 0f       	add	r24, r24
 66a:	99 1f       	adc	r25, r25
 66c:	88 0f       	add	r24, r24
 66e:	99 1f       	adc	r25, r25
 670:	88 0f       	add	r24, r24
 672:	99 1f       	adc	r25, r25
 674:	61 e2       	ldi	r22, 0x21	; 33
 676:	70 e0       	ldi	r23, 0x00	; 0
 678:	93 d1       	rcall	.+806    	; 0x9a0 <__udivmodhi4>
 67a:	76 83       	std	Z+6, r23	; 0x06
 67c:	65 83       	std	Z+5, r22	; 0x05
		adcSum = 0;
 67e:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <adcSum+0x1>
 682:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <adcSum>
	}

	if (rxMode == SetConfig && 2 < ++rxMark) //We are currently receiving data packet
 686:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <rxMode>
 68a:	83 31       	cpi	r24, 0x13	; 19
 68c:	61 f4       	brne	.+24     	; 0x6a6 <__vector_8+0x18a>
 68e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <rxMark>
 692:	8f 5f       	subi	r24, 0xFF	; 255
 694:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <rxMark>
 698:	83 30       	cpi	r24, 0x03	; 3
 69a:	28 f0       	brcs	.+10     	; 0x6a6 <__vector_8+0x18a>
	{
		UCSR0A = (1 << MPCM0);
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
		rxMode = 0;
 6a2:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <rxMode>
	}

	if (lcycle & 1)
 6a6:	c0 fd       	sbrc	r28, 0
		ADCSRA |= (1 << ADSC);
 6a8:	2e 9a       	sbi	0x05, 6	; 5
	if ((lcycle & 3) == 3)
 6aa:	c3 70       	andi	r28, 0x03	; 3
 6ac:	c3 30       	cpi	r28, 0x03	; 3
 6ae:	69 f5       	brne	.+90     	; 0x70a <__vector_8+0x1ee>
	{
		if (OCR2AL > fanLvl)
 6b0:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
 6b4:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <fanLvl>
 6b8:	89 17       	cp	r24, r25
 6ba:	58 f4       	brcc	.+22     	; 0x6d2 <__vector_8+0x1b6>
		{
			OCR2AL--;
 6bc:	e4 ec       	ldi	r30, 0xC4	; 196
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	80 81       	ld	r24, Z
 6c2:	81 50       	subi	r24, 0x01	; 1
 6c4:	80 83       	st	Z, r24
			if (OCR2AL < FanMin)
 6c6:	80 81       	ld	r24, Z
 6c8:	83 32       	cpi	r24, 0x23	; 35
 6ca:	a0 f4       	brcc	.+40     	; 0x6f4 <__vector_8+0x1d8>
				OCR2AL = 0;
 6cc:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
 6d0:	11 c0       	rjmp	.+34     	; 0x6f4 <__vector_8+0x1d8>
		}
		else if (OCR2AL < fanLvl)
 6d2:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
 6d6:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <fanLvl>
 6da:	98 17       	cp	r25, r24
 6dc:	58 f4       	brcc	.+22     	; 0x6f4 <__vector_8+0x1d8>
		{
			OCR2AL++;
 6de:	e4 ec       	ldi	r30, 0xC4	; 196
 6e0:	f0 e0       	ldi	r31, 0x00	; 0
 6e2:	80 81       	ld	r24, Z
 6e4:	8f 5f       	subi	r24, 0xFF	; 255
 6e6:	80 83       	st	Z, r24
			if (OCR2AL < FanMin)
 6e8:	80 81       	ld	r24, Z
 6ea:	83 32       	cpi	r24, 0x23	; 35
 6ec:	18 f4       	brcc	.+6      	; 0x6f4 <__vector_8+0x1d8>
				OCR2AL = FanMin;
 6ee:	83 e2       	ldi	r24, 0x23	; 35
 6f0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
		}
		tmpStatus.fanLevel = OCR2AL;
 6f4:	e4 ec       	ldi	r30, 0xC4	; 196
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	80 81       	ld	r24, Z
 6fa:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <tmpStatus>
		OCR2BL = ICR2L - OCR2AL;
 6fe:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
 702:	90 81       	ld	r25, Z
 704:	89 1b       	sub	r24, r25
 706:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
	}
}
 70a:	ff 91       	pop	r31
 70c:	ef 91       	pop	r30
 70e:	df 91       	pop	r29
 710:	cf 91       	pop	r28
 712:	bf 91       	pop	r27
 714:	af 91       	pop	r26
 716:	9f 91       	pop	r25
 718:	8f 91       	pop	r24
 71a:	7f 91       	pop	r23
 71c:	6f 91       	pop	r22
 71e:	5f 91       	pop	r21
 720:	4f 91       	pop	r20
 722:	3f 91       	pop	r19
 724:	2f 91       	pop	r18
 726:	1f 91       	pop	r17
 728:	0f 90       	pop	r0
 72a:	0f be       	out	0x3f, r0	; 63
 72c:	0f 90       	pop	r0
 72e:	1f 90       	pop	r1
 730:	18 95       	reti

00000732 <__vector_10>:

ISR	(TIMER0_COMPB_vect)
{
 732:	1f 92       	push	r1
 734:	0f 92       	push	r0
 736:	0f b6       	in	r0, 0x3f	; 63
 738:	0f 92       	push	r0
 73a:	11 24       	eor	r1, r1
 73c:	8f 93       	push	r24
	DDRB &= ~(1 << DDB2); //Interface released
 73e:	ba 98       	cbi	0x17, 2	; 23
	TCCR0B = (1 << CS01); //921.6kHz clock, 1 tick = 1.08µs
 740:	82 e0       	ldi	r24, 0x02	; 2
 742:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
 744:	12 be       	out	0x32, r1	; 50
	TIMSK0 = (1 << TOIE0); //Now enable overflow interrupt, timeout 278µs
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	89 bf       	out	0x39, r24	; 57
	PCMSK1 = (1 << PCINT10); //PINB2 as pin change interrupt source
 74a:	84 e0       	ldi	r24, 0x04	; 4
 74c:	80 bd       	out	0x20, r24	; 32
	GIFR = (1 << PCIF1);
 74e:	80 e2       	ldi	r24, 0x20	; 32
 750:	8a bf       	out	0x3a, r24	; 58
	GIMSK = (1 << PCIE1); //Enable pin change interrupt
 752:	8b bf       	out	0x3b, r24	; 59
}
 754:	8f 91       	pop	r24
 756:	0f 90       	pop	r0
 758:	0f be       	out	0x3f, r0	; 63
 75a:	0f 90       	pop	r0
 75c:	1f 90       	pop	r1
 75e:	18 95       	reti

00000760 <__vector_11>:

ISR (TIMER0_OVF_vect)
{
 760:	1f 92       	push	r1
 762:	0f 92       	push	r0
 764:	0f b6       	in	r0, 0x3f	; 63
 766:	0f 92       	push	r0
 768:	11 24       	eor	r1, r1
 76a:	8f 93       	push	r24
 76c:	af 93       	push	r26
 76e:	bf 93       	push	r27
 770:	ef 93       	push	r30
 772:	ff 93       	push	r31
	TIMSK0 = 0; //Disable overflow interrupt
 774:	19 be       	out	0x39, r1	; 57
	GIMSK = 0; //Disable pin change interrupt
 776:	1b be       	out	0x3b, r1	; 59
	memset(&AM2302, 0, sizeof(am2302));
 778:	85 e0       	ldi	r24, 0x05	; 5
 77a:	e5 e1       	ldi	r30, 0x15	; 21
 77c:	f1 e0       	ldi	r31, 0x01	; 1
 77e:	df 01       	movw	r26, r30
 780:	1d 92       	st	X+, r1
 782:	8a 95       	dec	r24
 784:	e9 f7       	brne	.-6      	; 0x780 <__vector_11+0x20>
}
 786:	ff 91       	pop	r31
 788:	ef 91       	pop	r30
 78a:	bf 91       	pop	r27
 78c:	af 91       	pop	r26
 78e:	8f 91       	pop	r24
 790:	0f 90       	pop	r0
 792:	0f be       	out	0x3f, r0	; 63
 794:	0f 90       	pop	r0
 796:	1f 90       	pop	r1
 798:	18 95       	reti

0000079a <__vector_3>:

ISR (PCINT1_vect)
{
 79a:	1f 92       	push	r1
 79c:	0f 92       	push	r0
 79e:	0f b6       	in	r0, 0x3f	; 63
 7a0:	0f 92       	push	r0
 7a2:	11 24       	eor	r1, r1
 7a4:	8f 93       	push	r24
 7a6:	9f 93       	push	r25
 7a8:	ef 93       	push	r30
 7aa:	ff 93       	push	r31
	static uint8_t temp;
	uint8_t delayz = TCNT0;
 7ac:	92 b7       	in	r25, 0x32	; 50
	TCNT0 = 0; //Clear counter
 7ae:	12 be       	out	0x32, r1	; 50
	if (PINB & (1 << PINB2))
 7b0:	b2 99       	sbic	0x16, 2	; 22
 7b2:	2d c0       	rjmp	.+90     	; 0x80e <__vector_3+0x74>
		return; //Skip rising edge interrupt
	if (0 <= amCnt && amCnt < 40)
 7b4:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <amCnt>
 7b8:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <amCnt>
 7bc:	88 32       	cpi	r24, 0x28	; 40
 7be:	f0 f4       	brcc	.+60     	; 0x7fc <__vector_3+0x62>
	{
		temp <<= 1;
 7c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 7c4:	88 0f       	add	r24, r24
		if (delayz > 46) //High level held more than 48µs - logic one received
 7c6:	9f 32       	cpi	r25, 0x2F	; 47
 7c8:	18 f4       	brcc	.+6      	; 0x7d0 <__vector_3+0x36>
	TCNT0 = 0; //Clear counter
	if (PINB & (1 << PINB2))
		return; //Skip rising edge interrupt
	if (0 <= amCnt && amCnt < 40)
	{
		temp <<= 1;
 7ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 7ce:	03 c0       	rjmp	.+6      	; 0x7d6 <__vector_3+0x3c>
		if (delayz > 46) //High level held more than 48µs - logic one received
			temp |= 1;
 7d0:	81 60       	ori	r24, 0x01	; 1
 7d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		if ((amCnt & 7) == 7)
 7d6:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <amCnt>
 7da:	87 70       	andi	r24, 0x07	; 7
 7dc:	87 30       	cpi	r24, 0x07	; 7
 7de:	71 f4       	brne	.+28     	; 0x7fc <__vector_3+0x62>
			AM2302.arr[amCnt >> 3] = temp;
 7e0:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <amCnt>
 7e4:	f0 e0       	ldi	r31, 0x00	; 0
 7e6:	f5 95       	asr	r31
 7e8:	e7 95       	ror	r30
 7ea:	f5 95       	asr	r31
 7ec:	e7 95       	ror	r30
 7ee:	f5 95       	asr	r31
 7f0:	e7 95       	ror	r30
 7f2:	eb 5e       	subi	r30, 0xEB	; 235
 7f4:	fe 4f       	sbci	r31, 0xFE	; 254
 7f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 7fa:	80 83       	st	Z, r24
	}
	if (++amCnt == 40)
 7fc:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <amCnt>
 800:	8f 5f       	subi	r24, 0xFF	; 255
 802:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <amCnt>
 806:	88 32       	cpi	r24, 0x28	; 40
 808:	11 f4       	brne	.+4      	; 0x80e <__vector_3+0x74>
	{
		TIMSK0 = 0; //Disable overflow interrupt
 80a:	19 be       	out	0x39, r1	; 57
		GIMSK = 0; //Disable pin change interrupt
 80c:	1b be       	out	0x3b, r1	; 59
	}
}
 80e:	ff 91       	pop	r31
 810:	ef 91       	pop	r30
 812:	9f 91       	pop	r25
 814:	8f 91       	pop	r24
 816:	0f 90       	pop	r0
 818:	0f be       	out	0x3f, r0	; 63
 81a:	0f 90       	pop	r0
 81c:	1f 90       	pop	r1
 81e:	18 95       	reti

00000820 <__vector_5>:

ISR (TIMER1_CAPT_vect)
{
 820:	1f 92       	push	r1
 822:	0f 92       	push	r0
 824:	0f b6       	in	r0, 0x3f	; 63
 826:	0f 92       	push	r0
 828:	11 24       	eor	r1, r1
 82a:	8f 93       	push	r24
 82c:	9f 93       	push	r25
 82e:	af 93       	push	r26
 830:	bf 93       	push	r27
	if (!tachCnt++)
 832:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <tachCnt>
 836:	91 e0       	ldi	r25, 0x01	; 1
 838:	98 0f       	add	r25, r24
 83a:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <tachCnt>
 83e:	81 11       	cpse	r24, r1
 840:	07 c0       	rjmp	.+14     	; 0x850 <__vector_5+0x30>
		tachPrev = ICR1;
 842:	84 b5       	in	r24, 0x24	; 36
 844:	95 b5       	in	r25, 0x25	; 37
 846:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <tachPrev+0x1>
 84a:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <tachPrev>
 84e:	0c c0       	rjmp	.+24     	; 0x868 <__vector_5+0x48>
	else
		tachSum = ICR1;
 850:	84 b5       	in	r24, 0x24	; 36
 852:	95 b5       	in	r25, 0x25	; 37
 854:	a0 e0       	ldi	r26, 0x00	; 0
 856:	b0 e0       	ldi	r27, 0x00	; 0
 858:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <tachSum>
 85c:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <tachSum+0x1>
 860:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <tachSum+0x2>
 864:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <tachSum+0x3>
	if (tachCnt > 7) //8 points is enough
 868:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <tachCnt>
 86c:	88 30       	cpi	r24, 0x08	; 8
 86e:	08 f0       	brcs	.+2      	; 0x872 <__vector_5+0x52>
		TIMSK1 &= ~(1 << ICIE1);
 870:	7d 98       	cbi	0x0f, 5	; 15
	tachOvf = (char)cycles & 7;
 872:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <cycles>
 876:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <cycles+0x1>
 87a:	87 70       	andi	r24, 0x07	; 7
 87c:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <tachOvf>
}
 880:	bf 91       	pop	r27
 882:	af 91       	pop	r26
 884:	9f 91       	pop	r25
 886:	8f 91       	pop	r24
 888:	0f 90       	pop	r0
 88a:	0f be       	out	0x3f, r0	; 63
 88c:	0f 90       	pop	r0
 88e:	1f 90       	pop	r1
 890:	18 95       	reti

00000892 <__vector_13>:

ISR (ADC_vect)
{
 892:	1f 92       	push	r1
 894:	0f 92       	push	r0
 896:	0f b6       	in	r0, 0x3f	; 63
 898:	0f 92       	push	r0
 89a:	11 24       	eor	r1, r1
 89c:	2f 93       	push	r18
 89e:	3f 93       	push	r19
 8a0:	8f 93       	push	r24
 8a2:	9f 93       	push	r25
	adcSum += ADC;
 8a4:	26 b1       	in	r18, 0x06	; 6
 8a6:	37 b1       	in	r19, 0x07	; 7
 8a8:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <adcSum>
 8ac:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <adcSum+0x1>
 8b0:	82 0f       	add	r24, r18
 8b2:	93 1f       	adc	r25, r19
 8b4:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <adcSum+0x1>
 8b8:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <adcSum>
}
 8bc:	9f 91       	pop	r25
 8be:	8f 91       	pop	r24
 8c0:	3f 91       	pop	r19
 8c2:	2f 91       	pop	r18
 8c4:	0f 90       	pop	r0
 8c6:	0f be       	out	0x3f, r0	; 63
 8c8:	0f 90       	pop	r0
 8ca:	1f 90       	pop	r1
 8cc:	18 95       	reti

000008ce <_Z7mcuInitv>:


void inline mcuInit()
{
	cli();
 8ce:	f8 94       	cli
	//Port A outputs: U0TX, PWMA, PWMB, U0EN, SEL
	DDRA = (1 << DDA1) | (1 << DDA3) | (1 << DDA4) | (1 << DDA5) | (1 << DDA6);
 8d0:	8a e7       	ldi	r24, 0x7A	; 122
 8d2:	8a bb       	out	0x1a, r24	; 26
	//USART 0: 76.8kbps, frame bits: start / 9 data / 2 stop, multi-processor communication
	UBRR0 = 5; //Actual maximum transfer rate: 6400Bps
 8d4:	85 e0       	ldi	r24, 0x05	; 5
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <__EEPROM_REGION_LENGTH__+0x7f0082>
 8dc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
	UCSR0B = (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0) | (1 << UCSZ02);
 8e0:	8c ed       	ldi	r24, 0xDC	; 220
 8e2:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
	UCSR0C = (1 << USBS0) | (1 << UCSZ01) | (1 << UCSZ00);
 8e6:	8e e0       	ldi	r24, 0x0E	; 14
 8e8:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	UCSR0A = (1 << MPCM0);
 8ec:	81 e0       	ldi	r24, 0x01	; 1
 8ee:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
	//Timer 1: 921.6kHz clock, input capture on leading edge, noise filtering, OVF interrupt
	TCCR1B = (1 << ICNC1) | (1 << ICES1) | (1 << CS11);
 8f2:	92 ec       	ldi	r25, 0xC2	; 194
 8f4:	9e bd       	out	0x2e, r25	; 46
	TIMSK1 = (1 << TOIE1);
 8f6:	8f b9       	out	0x0f, r24	; 15
	//Timer 2: 7.3728MHz clock, phase and frequency correct PWM, top in ICR2
	ICR2 = PWM_max; //25kHz PWM frequency
 8f8:	23 e9       	ldi	r18, 0x93	; 147
 8fa:	30 e0       	ldi	r19, 0x00	; 0
 8fc:	30 93 c1 00 	sts	0x00C1, r19	; 0x8000c1 <__EEPROM_REGION_LENGTH__+0x7f00c1>
 900:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
	OCR2A = 0; //Non-inverting output: off
 904:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
 908:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
	OCR2B = PWM_max; //Inverting output: off
 90c:	30 93 c3 00 	sts	0x00C3, r19	; 0x8000c3 <__EEPROM_REGION_LENGTH__+0x7f00c3>
 910:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
	TCCR2A = (1 << COM2A1) | (1 << COM2B1) | (1 << COM2B0);
 914:	90 eb       	ldi	r25, 0xB0	; 176
 916:	90 93 ca 00 	sts	0x00CA, r25	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
	TCCR2B = (1 << WGM23) | (1 << CS20);
 91a:	91 e1       	ldi	r25, 0x11	; 17
 91c:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
	TOCPMSA0 |= (1 << TOCC2S1) | (1 << TOCC3S1); //OC2A non-inverting (TOCC3), OC2B inverting (TOCC2)
 920:	e7 e6       	ldi	r30, 0x67	; 103
 922:	f0 e0       	ldi	r31, 0x00	; 0
 924:	90 81       	ld	r25, Z
 926:	90 6a       	ori	r25, 0xA0	; 160
 928:	90 83       	st	Z, r25
	TOCPMCOE |= (1 << TOCC2OE) | (1 << TOCC3OE);
 92a:	e6 e6       	ldi	r30, 0x66	; 102
 92c:	f0 e0       	ldi	r31, 0x00	; 0
 92e:	90 81       	ld	r25, Z
 930:	9c 60       	ori	r25, 0x0C	; 12
 932:	90 83       	st	Z, r25
	//ADC: 1.1V reference, 230.4kHz clock, ADC0 input, interrupt
	ADMUXB = (1 << REFS0);
 934:	90 e2       	ldi	r25, 0x20	; 32
 936:	98 b9       	out	0x08, r25	; 8
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS0);
 938:	9d e8       	ldi	r25, 0x8D	; 141
 93a:	95 b9       	out	0x05, r25	; 5
	DIDR0 = (1 << ADC0D);
 93c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
	//Power reduction: I²C, USART1 and SPI are not used in this project
	PRR = (1 << PRTWI) | (1 << PRUSART1) | (1 << PRSPI);
 940:	80 ed       	ldi	r24, 0xD0	; 208
 942:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__EEPROM_REGION_LENGTH__+0x7f0070>
	sei();
 946:	78 94       	sei
 948:	08 95       	ret

0000094a <main>:
}

int main(void)
{
	mcuInit();
 94a:	c1 df       	rcall	.-126    	; 0x8ce <_Z7mcuInitv>

	eeprom_read_block(&validConf, &eConf, sizeof(sysConfig));
 94c:	4b e0       	ldi	r20, 0x0B	; 11
 94e:	50 e0       	ldi	r21, 0x00	; 0
 950:	60 e0       	ldi	r22, 0x00	; 0
 952:	70 e0       	ldi	r23, 0x00	; 0
 954:	8b e2       	ldi	r24, 0x2B	; 43
 956:	91 e0       	ldi	r25, 0x01	; 1
 958:	75 d0       	rcall	.+234    	; 0xa44 <eeprom_read_block>
	validConf.fanLevelOverride = 0xFF; //No override at startup
 95a:	cb e2       	ldi	r28, 0x2B	; 43
 95c:	d1 e0       	ldi	r29, 0x01	; 1
 95e:	8f ef       	ldi	r24, 0xFF	; 255
 960:	88 83       	st	Y, r24
	validConf.CRC16 = CalculateCRC16(&validConf, sizeof(sysConfig) - 2);
 962:	69 e0       	ldi	r22, 0x09	; 9
 964:	ce 01       	movw	r24, r28
 966:	7b db       	rcall	.-2314   	; 0x5e <_Z14CalculateCRC16Pva>
 968:	9a 87       	std	Y+10, r25	; 0x0a
 96a:	89 87       	std	Y+9, r24	; 0x09
 96c:	ff cf       	rjmp	.-2      	; 0x96c <main+0x22>

0000096e <__mulsi3>:
 96e:	ee 27       	eor	r30, r30
 970:	ff 27       	eor	r31, r31

00000972 <__mulsi3_helper>:
 972:	aa 27       	eor	r26, r26
 974:	bb 27       	eor	r27, r27
 976:	08 c0       	rjmp	.+16     	; 0x988 <__mulsi3_helper+0x16>
 978:	a2 0f       	add	r26, r18
 97a:	b3 1f       	adc	r27, r19
 97c:	e4 1f       	adc	r30, r20
 97e:	f5 1f       	adc	r31, r21
 980:	22 0f       	add	r18, r18
 982:	33 1f       	adc	r19, r19
 984:	44 1f       	adc	r20, r20
 986:	55 1f       	adc	r21, r21
 988:	96 95       	lsr	r25
 98a:	87 95       	ror	r24
 98c:	77 95       	ror	r23
 98e:	67 95       	ror	r22
 990:	98 f3       	brcs	.-26     	; 0x978 <__mulsi3_helper+0x6>
 992:	70 40       	sbci	r23, 0x00	; 0
 994:	a9 f7       	brne	.-22     	; 0x980 <__mulsi3_helper+0xe>
 996:	00 97       	sbiw	r24, 0x00	; 0
 998:	99 f7       	brne	.-26     	; 0x980 <__mulsi3_helper+0xe>
 99a:	bd 01       	movw	r22, r26
 99c:	cf 01       	movw	r24, r30
 99e:	08 95       	ret

000009a0 <__udivmodhi4>:
 9a0:	aa 1b       	sub	r26, r26
 9a2:	bb 1b       	sub	r27, r27
 9a4:	51 e1       	ldi	r21, 0x11	; 17
 9a6:	07 c0       	rjmp	.+14     	; 0x9b6 <__udivmodhi4_ep>

000009a8 <__udivmodhi4_loop>:
 9a8:	aa 1f       	adc	r26, r26
 9aa:	bb 1f       	adc	r27, r27
 9ac:	a6 17       	cp	r26, r22
 9ae:	b7 07       	cpc	r27, r23
 9b0:	10 f0       	brcs	.+4      	; 0x9b6 <__udivmodhi4_ep>
 9b2:	a6 1b       	sub	r26, r22
 9b4:	b7 0b       	sbc	r27, r23

000009b6 <__udivmodhi4_ep>:
 9b6:	88 1f       	adc	r24, r24
 9b8:	99 1f       	adc	r25, r25
 9ba:	5a 95       	dec	r21
 9bc:	a9 f7       	brne	.-22     	; 0x9a8 <__udivmodhi4_loop>
 9be:	80 95       	com	r24
 9c0:	90 95       	com	r25
 9c2:	bc 01       	movw	r22, r24
 9c4:	cd 01       	movw	r24, r26
 9c6:	08 95       	ret

000009c8 <__udivmodsi4>:
 9c8:	a1 e2       	ldi	r26, 0x21	; 33
 9ca:	1a 2e       	mov	r1, r26
 9cc:	aa 1b       	sub	r26, r26
 9ce:	bb 1b       	sub	r27, r27
 9d0:	fd 01       	movw	r30, r26
 9d2:	0d c0       	rjmp	.+26     	; 0x9ee <__udivmodsi4_ep>

000009d4 <__udivmodsi4_loop>:
 9d4:	aa 1f       	adc	r26, r26
 9d6:	bb 1f       	adc	r27, r27
 9d8:	ee 1f       	adc	r30, r30
 9da:	ff 1f       	adc	r31, r31
 9dc:	a2 17       	cp	r26, r18
 9de:	b3 07       	cpc	r27, r19
 9e0:	e4 07       	cpc	r30, r20
 9e2:	f5 07       	cpc	r31, r21
 9e4:	20 f0       	brcs	.+8      	; 0x9ee <__udivmodsi4_ep>
 9e6:	a2 1b       	sub	r26, r18
 9e8:	b3 0b       	sbc	r27, r19
 9ea:	e4 0b       	sbc	r30, r20
 9ec:	f5 0b       	sbc	r31, r21

000009ee <__udivmodsi4_ep>:
 9ee:	66 1f       	adc	r22, r22
 9f0:	77 1f       	adc	r23, r23
 9f2:	88 1f       	adc	r24, r24
 9f4:	99 1f       	adc	r25, r25
 9f6:	1a 94       	dec	r1
 9f8:	69 f7       	brne	.-38     	; 0x9d4 <__udivmodsi4_loop>
 9fa:	60 95       	com	r22
 9fc:	70 95       	com	r23
 9fe:	80 95       	com	r24
 a00:	90 95       	com	r25
 a02:	9b 01       	movw	r18, r22
 a04:	ac 01       	movw	r20, r24
 a06:	bd 01       	movw	r22, r26
 a08:	cf 01       	movw	r24, r30
 a0a:	08 95       	ret

00000a0c <__divmodsi4>:
 a0c:	05 2e       	mov	r0, r21
 a0e:	97 fb       	bst	r25, 7
 a10:	16 f4       	brtc	.+4      	; 0xa16 <__divmodsi4+0xa>
 a12:	00 94       	com	r0
 a14:	0f d0       	rcall	.+30     	; 0xa34 <__negsi2>
 a16:	57 fd       	sbrc	r21, 7
 a18:	05 d0       	rcall	.+10     	; 0xa24 <__divmodsi4_neg2>
 a1a:	d6 df       	rcall	.-84     	; 0x9c8 <__udivmodsi4>
 a1c:	07 fc       	sbrc	r0, 7
 a1e:	02 d0       	rcall	.+4      	; 0xa24 <__divmodsi4_neg2>
 a20:	46 f4       	brtc	.+16     	; 0xa32 <__divmodsi4_exit>
 a22:	08 c0       	rjmp	.+16     	; 0xa34 <__negsi2>

00000a24 <__divmodsi4_neg2>:
 a24:	50 95       	com	r21
 a26:	40 95       	com	r20
 a28:	30 95       	com	r19
 a2a:	21 95       	neg	r18
 a2c:	3f 4f       	sbci	r19, 0xFF	; 255
 a2e:	4f 4f       	sbci	r20, 0xFF	; 255
 a30:	5f 4f       	sbci	r21, 0xFF	; 255

00000a32 <__divmodsi4_exit>:
 a32:	08 95       	ret

00000a34 <__negsi2>:
 a34:	90 95       	com	r25
 a36:	80 95       	com	r24
 a38:	70 95       	com	r23
 a3a:	61 95       	neg	r22
 a3c:	7f 4f       	sbci	r23, 0xFF	; 255
 a3e:	8f 4f       	sbci	r24, 0xFF	; 255
 a40:	9f 4f       	sbci	r25, 0xFF	; 255
 a42:	08 95       	ret

00000a44 <eeprom_read_block>:
 a44:	dc 01       	movw	r26, r24
 a46:	86 2f       	mov	r24, r22

00000a48 <eeprom_read_blraw>:
 a48:	e8 2f       	mov	r30, r24
 a4a:	e1 99       	sbic	0x1c, 1	; 28
 a4c:	fe cf       	rjmp	.-4      	; 0xa4a <eeprom_read_blraw+0x2>
 a4e:	1f ba       	out	0x1f, r1	; 31
 a50:	05 c0       	rjmp	.+10     	; 0xa5c <eeprom_read_blraw+0x14>
 a52:	ee bb       	out	0x1e, r30	; 30
 a54:	e0 9a       	sbi	0x1c, 0	; 28
 a56:	e3 95       	inc	r30
 a58:	0d b2       	in	r0, 0x1d	; 29
 a5a:	0d 92       	st	X+, r0
 a5c:	41 50       	subi	r20, 0x01	; 1
 a5e:	c8 f7       	brcc	.-14     	; 0xa52 <eeprom_read_blraw+0xa>
 a60:	08 95       	ret

00000a62 <eeprom_update_block>:
 a62:	dc 01       	movw	r26, r24
 a64:	a4 0f       	add	r26, r20
 a66:	b5 1f       	adc	r27, r21
 a68:	41 50       	subi	r20, 0x01	; 1
 a6a:	50 40       	sbci	r21, 0x00	; 0
 a6c:	38 f0       	brcs	.+14     	; 0xa7c <eeprom_update_block+0x1a>
 a6e:	86 2f       	mov	r24, r22
 a70:	84 0f       	add	r24, r20
 a72:	2e 91       	ld	r18, -X
 a74:	05 d0       	rcall	.+10     	; 0xa80 <eeprom_update_r18>
 a76:	41 50       	subi	r20, 0x01	; 1
 a78:	50 40       	sbci	r21, 0x00	; 0
 a7a:	d8 f7       	brcc	.-10     	; 0xa72 <eeprom_update_block+0x10>
 a7c:	08 95       	ret

00000a7e <eeprom_update_byte>:
 a7e:	26 2f       	mov	r18, r22

00000a80 <eeprom_update_r18>:
 a80:	e1 99       	sbic	0x1c, 1	; 28
 a82:	fe cf       	rjmp	.-4      	; 0xa80 <eeprom_update_r18>
 a84:	1f ba       	out	0x1f, r1	; 31
 a86:	8e bb       	out	0x1e, r24	; 30
 a88:	e0 9a       	sbi	0x1c, 0	; 28
 a8a:	81 50       	subi	r24, 0x01	; 1
 a8c:	0d b2       	in	r0, 0x1d	; 29
 a8e:	02 16       	cp	r0, r18
 a90:	39 f0       	breq	.+14     	; 0xaa0 <eeprom_update_r18+0x20>
 a92:	1c ba       	out	0x1c, r1	; 28
 a94:	2d bb       	out	0x1d, r18	; 29
 a96:	0f b6       	in	r0, 0x3f	; 63
 a98:	f8 94       	cli
 a9a:	e2 9a       	sbi	0x1c, 2	; 28
 a9c:	e1 9a       	sbi	0x1c, 1	; 28
 a9e:	0f be       	out	0x3f, r0	; 63
 aa0:	08 95       	ret

00000aa2 <_exit>:
 aa2:	f8 94       	cli

00000aa4 <__stop_program>:
 aa4:	ff cf       	rjmp	.-2      	; 0xaa4 <__stop_program>
