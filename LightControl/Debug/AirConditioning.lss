
AirConditioning.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000008e4  00000998  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008e4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000051  00800102  00800102  0000099a  2**0
                  ALLOC
  3 .eeprom       0000000b  00810000  00810000  0000099a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000009a5  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009d8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000e0  00000000  00000000  00000a18  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001250  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a6b  00000000  00000000  00001d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000009c4  00000000  00000000  000027b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000244  00000000  00000000  00003178  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000070f  00000000  00000000  000033bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007a3  00000000  00000000  00003acb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000088  00000000  00000000  0000426e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
   2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
   4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
   6:	c2 c2       	rjmp	.+1412   	; 0x58c <__vector_3>
   8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
   a:	03 c3       	rjmp	.+1542   	; 0x612 <__vector_5>
   c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
   e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
  10:	4b c1       	rjmp	.+662    	; 0x2a8 <__vector_8>
  12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
  14:	93 c2       	rjmp	.+1318   	; 0x53c <__vector_10>
  16:	a9 c2       	rjmp	.+1362   	; 0x56a <__vector_11>
  18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
  1a:	76 c3       	rjmp	.+1772   	; 0x708 <__vector_13>
  1c:	2a c0       	rjmp	.+84     	; 0x72 <__bad_interrupt>
  1e:	29 c0       	rjmp	.+82     	; 0x72 <__bad_interrupt>
  20:	28 c0       	rjmp	.+80     	; 0x72 <__bad_interrupt>
  22:	27 c0       	rjmp	.+78     	; 0x72 <__bad_interrupt>
  24:	26 c0       	rjmp	.+76     	; 0x72 <__bad_interrupt>
  26:	25 c0       	rjmp	.+74     	; 0x72 <__bad_interrupt>
  28:	24 c0       	rjmp	.+72     	; 0x72 <__bad_interrupt>
  2a:	23 c0       	rjmp	.+70     	; 0x72 <__bad_interrupt>
  2c:	62 c0       	rjmp	.+196    	; 0xf2 <__vector_22>
  2e:	21 c0       	rjmp	.+66     	; 0x72 <__bad_interrupt>
  30:	0d c1       	rjmp	.+538    	; 0x24c <__vector_24>
  32:	1f c0       	rjmp	.+62     	; 0x72 <__bad_interrupt>
  34:	1e c0       	rjmp	.+60     	; 0x72 <__bad_interrupt>
  36:	1d c0       	rjmp	.+58     	; 0x72 <__bad_interrupt>
  38:	1c c0       	rjmp	.+56     	; 0x72 <__bad_interrupt>
  3a:	1b c0       	rjmp	.+54     	; 0x72 <__bad_interrupt>

0000003c <__ctors_end>:
  3c:	11 24       	eor	r1, r1
  3e:	1f be       	out	0x3f, r1	; 63
  40:	cf ef       	ldi	r28, 0xFF	; 255
  42:	d1 e0       	ldi	r29, 0x01	; 1
  44:	de bf       	out	0x3e, r29	; 62
  46:	cd bf       	out	0x3d, r28	; 61

00000048 <__do_copy_data>:
  48:	11 e0       	ldi	r17, 0x01	; 1
  4a:	a0 e0       	ldi	r26, 0x00	; 0
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	e4 ee       	ldi	r30, 0xE4	; 228
  50:	f8 e0       	ldi	r31, 0x08	; 8
  52:	02 c0       	rjmp	.+4      	; 0x58 <__do_copy_data+0x10>
  54:	05 90       	lpm	r0, Z+
  56:	0d 92       	st	X+, r0
  58:	a2 30       	cpi	r26, 0x02	; 2
  5a:	b1 07       	cpc	r27, r17
  5c:	d9 f7       	brne	.-10     	; 0x54 <__do_copy_data+0xc>

0000005e <__do_clear_bss>:
  5e:	21 e0       	ldi	r18, 0x01	; 1
  60:	a2 e0       	ldi	r26, 0x02	; 2
  62:	b1 e0       	ldi	r27, 0x01	; 1
  64:	01 c0       	rjmp	.+2      	; 0x68 <.do_clear_bss_start>

00000066 <.do_clear_bss_loop>:
  66:	1d 92       	st	X+, r1

00000068 <.do_clear_bss_start>:
  68:	a3 35       	cpi	r26, 0x53	; 83
  6a:	b2 07       	cpc	r27, r18
  6c:	e1 f7       	brne	.-8      	; 0x66 <.do_clear_bss_loop>
  6e:	a8 d3       	rcall	.+1872   	; 0x7c0 <main>
  70:	37 c4       	rjmp	.+2158   	; 0x8e0 <_exit>

00000072 <__bad_interrupt>:
  72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <_Z14CalculateCRC16Pva>:
		CRC16 = _crc_xmodem_update(CRC16, *ptr++);
	return CRC16;
}

void FanRegulation()
{
  74:	61 50       	subi	r22, 0x01	; 1
  76:	0a f1       	brmi	.+66     	; 0xba <_Z14CalculateCRC16Pva+0x46>
  78:	e8 2f       	mov	r30, r24
  7a:	f9 2f       	mov	r31, r25
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	9f ef       	ldi	r25, 0xFF	; 255
  80:	21 91       	ld	r18, Z+
  82:	92 27       	eor	r25, r18
  84:	09 2e       	mov	r0, r25
  86:	02 94       	swap	r0
  88:	20 2d       	mov	r18, r0
  8a:	2f 70       	andi	r18, 0x0F	; 15
  8c:	29 27       	eor	r18, r25
  8e:	39 2f       	mov	r19, r25
  90:	30 25       	eor	r19, r0
  92:	33 0f       	add	r19, r19
  94:	30 7e       	andi	r19, 0xE0	; 224
  96:	23 27       	eor	r18, r19
  98:	30 2d       	mov	r19, r0
  9a:	39 27       	eor	r19, r25
  9c:	30 7f       	andi	r19, 0xF0	; 240
  9e:	36 95       	lsr	r19
  a0:	09 2e       	mov	r0, r25
  a2:	00 0c       	add	r0, r0
  a4:	33 1f       	adc	r19, r19
  a6:	96 95       	lsr	r25
  a8:	96 95       	lsr	r25
  aa:	96 95       	lsr	r25
  ac:	9f 71       	andi	r25, 0x1F	; 31
  ae:	93 27       	eor	r25, r19
  b0:	98 27       	eor	r25, r24
  b2:	82 2f       	mov	r24, r18
  b4:	61 50       	subi	r22, 0x01	; 1
  b6:	22 f7       	brpl	.-56     	; 0x80 <_Z14CalculateCRC16Pva+0xc>
  b8:	08 95       	ret
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	9f ef       	ldi	r25, 0xFF	; 255
  be:	08 95       	ret

000000c0 <_Z6GetRPMv>:
	}
}

uint16_t GetRPM()
{
	uint32_t temp = (F_CPU * 30 / 8) * (tachCnt - 1);
  c0:	60 91 52 01 	lds	r22, 0x0152	; 0x800152 <tachCnt>
	return (uint16_t)(temp / tachSum);
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	61 50       	subi	r22, 0x01	; 1
  c8:	71 09       	sbc	r23, r1
  ca:	07 2e       	mov	r0, r23
  cc:	00 0c       	add	r0, r0
  ce:	88 0b       	sbc	r24, r24
  d0:	99 0b       	sbc	r25, r25
  d2:	20 e0       	ldi	r18, 0x00	; 0
  d4:	30 ee       	ldi	r19, 0xE0	; 224
  d6:	45 ea       	ldi	r20, 0xA5	; 165
  d8:	51 e0       	ldi	r21, 0x01	; 1
  da:	84 d3       	rcall	.+1800   	; 0x7e4 <__mulsi3>
  dc:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <tachSum>
  e0:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <tachSum+0x1>
  e4:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <tachSum+0x2>
  e8:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <tachSum+0x3>
  ec:	a8 d3       	rcall	.+1872   	; 0x83e <__udivmodsi4>
}
  ee:	c9 01       	movw	r24, r18
  f0:	08 95       	ret

000000f2 <__vector_22>:

ISR (USART0_RX_vect)
{
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	2f 93       	push	r18
  fe:	3f 93       	push	r19
 100:	4f 93       	push	r20
 102:	5f 93       	push	r21
 104:	6f 93       	push	r22
 106:	7f 93       	push	r23
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
 10c:	af 93       	push	r26
 10e:	bf 93       	push	r27
 110:	ef 93       	push	r30
 112:	ff 93       	push	r31
	static char uCnt = 0;
	static uint8_t *rxBuf = (uint8_t*)&rcvdConf;
	uint8_t data = UDR0;
 114:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
	if (UCSR0A & (1 << MPCM0)) //Address listening mode
 118:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
 11c:	90 ff       	sbrs	r25, 0
 11e:	58 c0       	rjmp	.+176    	; 0x1d0 <__vector_22+0xde>
	{
		if (CmdLC <= data && data <= CmdUC)
 120:	9f ee       	ldi	r25, 0xEF	; 239
 122:	98 0f       	add	r25, r24
 124:	93 30       	cpi	r25, 0x03	; 3
 126:	08 f0       	brcs	.+2      	; 0x12a <__vector_22+0x38>
 128:	50 c0       	rjmp	.+160    	; 0x1ca <__vector_22+0xd8>
		{
			UCSR0A = 0; //Clear MPCM bit
 12a:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
			rxMode = data;
 12e:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <rxMode>
			if (data == SetConfig)
 132:	83 31       	cpi	r24, 0x13	; 19
 134:	81 f4       	brne	.+32     	; 0x156 <__vector_22+0x64>
			{
				uCnt = sizeof(sysConfig); //Bytes to receive
 136:	8b e0       	ldi	r24, 0x0B	; 11
 138:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_ZZ11__vector_22E4uCnt>
				rxBuf = (uint8_t*)&rcvdConf; //First byte address in structure
 13c:	8c e2       	ldi	r24, 0x2C	; 44
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 144:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				rxMark = (uint8_t)cycles;
 148:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <cycles>
 14c:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <cycles+0x1>
 150:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <rxMark>
 154:	6a c0       	rjmp	.+212    	; 0x22a <__stack+0x2b>

sysConfig EEMEM eConf = { 0xFF, 100, 400, 40, 80, 0 };

void inline U0TXen()
{
	PORTA |= (1 << PORTA5);
 156:	dd 9a       	sbi	0x1b, 5	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	80 e6       	ldi	r24, 0x60	; 96
 15a:	8a 95       	dec	r24
 15c:	f1 f7       	brne	.-4      	; 0x15a <__vector_22+0x68>
				rxMark = (uint8_t)cycles;
			}
			else
			{
				U0TXen();
				if (rxMode == GetConfig)
 15e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <rxMode>
 162:	82 31       	cpi	r24, 0x12	; 18
 164:	51 f4       	brne	.+20     	; 0x17a <__vector_22+0x88>
				{
					txCnt = sizeof(sysConfig) - 1; //Because one byte will be send right there
 166:	8a e0       	ldi	r24, 0x0A	; 10
 168:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <txCnt>
					txBuf = (uint8_t*)&validConf;
 16c:	87 e3       	ldi	r24, 0x37	; 55
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <txBuf+0x1>
 174:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <txBuf>
 178:	1a c0       	rjmp	.+52     	; 0x1ae <__vector_22+0xbc>
				}
				else //Get status
				{
					tmpStatus.CRC16 = CalculateCRC16(&tmpStatus, sizeof(sysStatus) - 2);
 17a:	6f e0       	ldi	r22, 0x0F	; 15
 17c:	8a e0       	ldi	r24, 0x0A	; 10
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	79 df       	rcall	.-270    	; 0x74 <_Z14CalculateCRC16Pva>
 182:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <tmpStatus+0x10>
 186:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <tmpStatus+0xf>
					memcpy(&validStatus, &tmpStatus, sizeof(sysStatus));
 18a:	81 e1       	ldi	r24, 0x11	; 17
 18c:	ea e0       	ldi	r30, 0x0A	; 10
 18e:	f1 e0       	ldi	r31, 0x01	; 1
 190:	ab e1       	ldi	r26, 0x1B	; 27
 192:	b1 e0       	ldi	r27, 0x01	; 1
 194:	01 90       	ld	r0, Z+
 196:	0d 92       	st	X+, r0
 198:	8a 95       	dec	r24
 19a:	e1 f7       	brne	.-8      	; 0x194 <__vector_22+0xa2>
					txCnt = sizeof(sysStatus) - 1;
 19c:	80 e1       	ldi	r24, 0x10	; 16
 19e:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <txCnt>
					txBuf = (uint8_t*)&validStatus;
 1a2:	8b e1       	ldi	r24, 0x1B	; 27
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <txBuf+0x1>
 1aa:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <txBuf>
				}
				UDR0 = *txBuf++; //Send first byte
 1ae:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <txBuf>
 1b2:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <txBuf+0x1>
 1b6:	cf 01       	movw	r24, r30
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <txBuf+0x1>
 1be:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <txBuf>
 1c2:	80 81       	ld	r24, Z
 1c4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
 1c8:	30 c0       	rjmp	.+96     	; 0x22a <__stack+0x2b>
			}
		}
		else
			rxMode = 0;
 1ca:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <rxMode>
 1ce:	2d c0       	rjmp	.+90     	; 0x22a <__stack+0x2b>
	}
	else if (rxMode == SetConfig)
 1d0:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <rxMode>
 1d4:	93 31       	cpi	r25, 0x13	; 19
 1d6:	49 f5       	brne	.+82     	; 0x22a <__stack+0x2b>
	{
		*rxBuf++ = data;
 1d8:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
 1dc:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
 1e0:	9f 01       	movw	r18, r30
 1e2:	2f 5f       	subi	r18, 0xFF	; 255
 1e4:	3f 4f       	sbci	r19, 0xFF	; 255
 1e6:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 1ea:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
 1ee:	80 83       	st	Z, r24
		if (--uCnt == 0) //Packet received
 1f0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_ZZ11__vector_22E4uCnt>
 1f4:	81 50       	subi	r24, 0x01	; 1
 1f6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_ZZ11__vector_22E4uCnt>
 1fa:	81 11       	cpse	r24, r1
 1fc:	16 c0       	rjmp	.+44     	; 0x22a <__stack+0x2b>
		{
			rxMode = 0;
 1fe:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <rxMode>
			if (CalculateCRC16(&rcvdConf, sizeof(sysConfig) - 2) == rcvdConf.CRC16) //CRC OK
 202:	69 e0       	ldi	r22, 0x09	; 9
 204:	8c e2       	ldi	r24, 0x2C	; 44
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	35 df       	rcall	.-406    	; 0x74 <_Z14CalculateCRC16Pva>
 20a:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <rcvdConf+0x9>
 20e:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <rcvdConf+0xa>
 212:	82 17       	cp	r24, r18
 214:	93 07       	cpc	r25, r19
 216:	49 f4       	brne	.+18     	; 0x22a <__stack+0x2b>
				memcpy(&validConf, &rcvdConf, sizeof(sysConfig));
 218:	8b e0       	ldi	r24, 0x0B	; 11
 21a:	ec e2       	ldi	r30, 0x2C	; 44
 21c:	f1 e0       	ldi	r31, 0x01	; 1
 21e:	a7 e3       	ldi	r26, 0x37	; 55
 220:	b1 e0       	ldi	r27, 0x01	; 1
 222:	01 90       	ld	r0, Z+
 224:	0d 92       	st	X+, r0
 226:	8a 95       	dec	r24
 228:	e1 f7       	brne	.-8      	; 0x222 <__stack+0x23>
		}
	}
}
 22a:	ff 91       	pop	r31
 22c:	ef 91       	pop	r30
 22e:	bf 91       	pop	r27
 230:	af 91       	pop	r26
 232:	9f 91       	pop	r25
 234:	8f 91       	pop	r24
 236:	7f 91       	pop	r23
 238:	6f 91       	pop	r22
 23a:	5f 91       	pop	r21
 23c:	4f 91       	pop	r20
 23e:	3f 91       	pop	r19
 240:	2f 91       	pop	r18
 242:	0f 90       	pop	r0
 244:	0f be       	out	0x3f, r0	; 63
 246:	0f 90       	pop	r0
 248:	1f 90       	pop	r1
 24a:	18 95       	reti

0000024c <__vector_24>:

ISR (USART0_TX_vect) //Transmit to RS485
{
 24c:	1f 92       	push	r1
 24e:	0f 92       	push	r0
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	0f 92       	push	r0
 254:	11 24       	eor	r1, r1
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
 25a:	ef 93       	push	r30
 25c:	ff 93       	push	r31
	if (txCnt--)
 25e:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <txCnt>
 262:	9f ef       	ldi	r25, 0xFF	; 255
 264:	98 0f       	add	r25, r24
 266:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <txCnt>
 26a:	88 23       	and	r24, r24
 26c:	71 f0       	breq	.+28     	; 0x28a <__vector_24+0x3e>
		UDR0 = *txBuf++; //Send next character from the given buffer
 26e:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <txBuf>
 272:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <txBuf+0x1>
 276:	cf 01       	movw	r24, r30
 278:	01 96       	adiw	r24, 0x01	; 1
 27a:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <txBuf+0x1>
 27e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <txBuf>
 282:	80 81       	ld	r24, Z
 284:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
 288:	06 c0       	rjmp	.+12     	; 0x296 <__vector_24+0x4a>
	else
	{
		U0RXen();
 28a:	dd 98       	cbi	0x1b, 5	; 27
		UCSR0A = (1 << MPCM0); //Set MPCM bit
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
		rxMode = 0;
 292:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <rxMode>
	}
}
 296:	ff 91       	pop	r31
 298:	ef 91       	pop	r30
 29a:	9f 91       	pop	r25
 29c:	8f 91       	pop	r24
 29e:	0f 90       	pop	r0
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	0f 90       	pop	r0
 2a4:	1f 90       	pop	r1
 2a6:	18 95       	reti

000002a8 <__vector_8>:

ISR (TIMER1_OVF_vect) //Occurs every 71.1ms
{
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	11 24       	eor	r1, r1
 2b2:	2f 93       	push	r18
 2b4:	3f 93       	push	r19
 2b6:	4f 93       	push	r20
 2b8:	5f 93       	push	r21
 2ba:	6f 93       	push	r22
 2bc:	7f 93       	push	r23
 2be:	8f 93       	push	r24
 2c0:	9f 93       	push	r25
 2c2:	af 93       	push	r26
 2c4:	bf 93       	push	r27
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	ef 93       	push	r30
 2cc:	ff 93       	push	r31
	static uint8_t rs485busy = 0;
	uint8_t lcycle = ((uint8_t)cycles++) & 0x1F; //Range 0-31
 2ce:	c0 91 48 01 	lds	r28, 0x0148	; 0x800148 <cycles>
 2d2:	d0 91 49 01 	lds	r29, 0x0149	; 0x800149 <cycles+0x1>
 2d6:	ce 01       	movw	r24, r28
 2d8:	01 96       	adiw	r24, 0x01	; 1
 2da:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <cycles+0x1>
 2de:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <cycles>
	if (!cycles) //~77 minutes between updates
 2e2:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <cycles>
 2e6:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <cycles+0x1>
 2ea:	89 2b       	or	r24, r25
 2ec:	39 f4       	brne	.+14     	; 0x2fc <__vector_8+0x54>
		eeprom_update_block(&validConf, &eConf, sizeof(sysConfig));
 2ee:	4b e0       	ldi	r20, 0x0B	; 11
 2f0:	50 e0       	ldi	r21, 0x00	; 0
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	87 e3       	ldi	r24, 0x37	; 55
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	d2 d2       	rcall	.+1444   	; 0x8a0 <eeprom_update_block>
	if (lcycle == 4 || lcycle == 12) //Send start signal to the sensor
 2fc:	8c 2f       	mov	r24, r28
 2fe:	87 71       	andi	r24, 0x17	; 23
 300:	84 30       	cpi	r24, 0x04	; 4
 302:	09 f0       	breq	.+2      	; 0x306 <__vector_8+0x5e>
 304:	49 c0       	rjmp	.+146    	; 0x398 <__vector_8+0xf0>
	{
		uint8_t delayz = 0, j;
		for (j = 0; j < 4; j++)
			delayz += AM2302.arr[j];
 306:	e5 e0       	ldi	r30, 0x05	; 5
 308:	f1 e0       	ldi	r31, 0x01	; 1
 30a:	90 81       	ld	r25, Z
 30c:	81 81       	ldd	r24, Z+1	; 0x01
 30e:	89 0f       	add	r24, r25
 310:	92 81       	ldd	r25, Z+2	; 0x02
 312:	89 0f       	add	r24, r25
		if (delayz != AM2302.arr[4])
 314:	93 81       	ldd	r25, Z+3	; 0x03
 316:	89 0f       	add	r24, r25
 318:	94 81       	ldd	r25, Z+4	; 0x04
 31a:	89 17       	cp	r24, r25
 31c:	59 f0       	breq	.+22     	; 0x334 <__vector_8+0x8c>
		{
			tmpStatus.fanLevel = 10;
 31e:	8a e0       	ldi	r24, 0x0A	; 10
 320:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <tmpStatus>
			memcpy(&tmpStatus.insideRH, AM2302.arr, sizeof(am2302));
 324:	85 e0       	ldi	r24, 0x05	; 5
 326:	a1 e1       	ldi	r26, 0x11	; 17
 328:	b1 e0       	ldi	r27, 0x01	; 1
 32a:	01 90       	ld	r0, Z+
 32c:	0d 92       	st	X+, r0
 32e:	8a 95       	dec	r24
 330:	e1 f7       	brne	.-8      	; 0x32a <__vector_8+0x82>
 332:	dc c0       	rjmp	.+440    	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
		}
		else
		{
			if (AM2302.frame.T < 0)
 334:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <AM2302+0x2>
 338:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <AM2302+0x3>
 33c:	99 23       	and	r25, r25
 33e:	44 f4       	brge	.+16     	; 0x350 <__vector_8+0xa8>
				AM2302.frame.T = ~(AM2302.frame.T & 0x7FFF) + 1;
 340:	9f 77       	andi	r25, 0x7F	; 127
 342:	91 95       	neg	r25
 344:	81 95       	neg	r24
 346:	91 09       	sbc	r25, r1
 348:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <AM2302+0x3>
 34c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <AM2302+0x2>
			if (lcycle == 4)
 350:	8c 2f       	mov	r24, r28
 352:	8f 71       	andi	r24, 0x1F	; 31
 354:	84 30       	cpi	r24, 0x04	; 4
 356:	81 f4       	brne	.+32     	; 0x378 <__vector_8+0xd0>
			{
				tmpStatus.insideRH = AM2302.frame.RH;
 358:	ea e0       	ldi	r30, 0x0A	; 10
 35a:	f1 e0       	ldi	r31, 0x01	; 1
 35c:	a5 e0       	ldi	r26, 0x05	; 5
 35e:	b1 e0       	ldi	r27, 0x01	; 1
 360:	8d 91       	ld	r24, X+
 362:	9c 91       	ld	r25, X
 364:	11 97       	sbiw	r26, 0x01	; 1
 366:	90 87       	std	Z+8, r25	; 0x08
 368:	87 83       	std	Z+7, r24	; 0x07
				tmpStatus.insideT = AM2302.frame.T;
 36a:	12 96       	adiw	r26, 0x02	; 2
 36c:	8d 91       	ld	r24, X+
 36e:	9c 91       	ld	r25, X
 370:	13 97       	sbiw	r26, 0x03	; 3
 372:	94 87       	std	Z+12, r25	; 0x0c
 374:	83 87       	std	Z+11, r24	; 0x0b
 376:	ba c0       	rjmp	.+372    	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
			}
			else
			{
				tmpStatus.outsideRH = AM2302.frame.RH;
 378:	ea e0       	ldi	r30, 0x0A	; 10
 37a:	f1 e0       	ldi	r31, 0x01	; 1
 37c:	a5 e0       	ldi	r26, 0x05	; 5
 37e:	b1 e0       	ldi	r27, 0x01	; 1
 380:	8d 91       	ld	r24, X+
 382:	9c 91       	ld	r25, X
 384:	11 97       	sbiw	r26, 0x01	; 1
 386:	92 87       	std	Z+10, r25	; 0x0a
 388:	81 87       	std	Z+9, r24	; 0x09
				tmpStatus.outsideT = AM2302.frame.T;
 38a:	12 96       	adiw	r26, 0x02	; 2
 38c:	8d 91       	ld	r24, X+
 38e:	9c 91       	ld	r25, X
 390:	13 97       	sbiw	r26, 0x03	; 3
 392:	96 87       	std	Z+14, r25	; 0x0e
 394:	85 87       	std	Z+13, r24	; 0x0d
 396:	aa c0       	rjmp	.+340    	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
		OCR0B = 48; //~1.666ms delay
		TIFR0 = (1 << TOV0) | (1 << OCF0B);
		TIMSK0 = (1 << OCIE0B); //Enable interrupt
		amCnt = -1; //Skip response signal		
	}
	lcycle &= 0xF; //Range 0-15
 398:	8c 2f       	mov	r24, r28
 39a:	8f 70       	andi	r24, 0x0F	; 15
	if (!lcycle)
 39c:	c1 f4       	brne	.+48     	; 0x3ce <__vector_8+0x126>
	{
		tmpStatus.rpmFront = tachCnt > 1 ? GetRPM() : 0;
 39e:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <tachCnt>
 3a2:	82 30       	cpi	r24, 0x02	; 2
 3a4:	10 f0       	brcs	.+4      	; 0x3aa <__vector_8+0x102>
 3a6:	8c de       	rcall	.-744    	; 0xc0 <_Z6GetRPMv>
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <__vector_8+0x106>
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <tmpStatus+0x2>
 3b2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <tmpStatus+0x1>
		//SelChA();
		tachCnt = 0;
 3b6:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <tachCnt>
		tachSum = 0;
 3ba:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <tachSum>
 3be:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <tachSum+0x1>
 3c2:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <tachSum+0x2>
 3c6:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <tachSum+0x3>
		TIMSK1 |= (1 << ICIE1);		
 3ca:	7d 9a       	sbi	0x0f, 5	; 15
 3cc:	2c c0       	rjmp	.+88     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	}
	else if (lcycle == 8)
 3ce:	88 30       	cpi	r24, 0x08	; 8
 3d0:	51 f5       	brne	.+84     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	{
		tmpStatus.rpmRear = tachCnt > 1 ? GetRPM() : 0;
 3d2:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <tachCnt>
 3d6:	82 30       	cpi	r24, 0x02	; 2
 3d8:	10 f0       	brcs	.+4      	; 0x3de <__vector_8+0x136>
 3da:	72 de       	rcall	.-796    	; 0xc0 <_Z6GetRPMv>
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <__vector_8+0x13a>
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	ea e0       	ldi	r30, 0x0A	; 10
 3e4:	f1 e0       	ldi	r31, 0x01	; 1
 3e6:	94 83       	std	Z+4, r25	; 0x04
 3e8:	83 83       	std	Z+3, r24	; 0x03
		//SelChB();
		tachCnt = 0;
 3ea:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <tachCnt>
		tachSum = 0;
 3ee:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <tachSum>
 3f2:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <tachSum+0x1>
 3f6:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <tachSum+0x2>
 3fa:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <tachSum+0x3>
		TIMSK1 |= (1 << ICIE1);
 3fe:	7d 9a       	sbi	0x0f, 5	; 15
		tmpStatus.currentDraw = (adcSum << 3) / Idiv_x1mA;
 400:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <adcSum>
 404:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <adcSum+0x1>
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	61 e2       	ldi	r22, 0x21	; 33
 416:	70 e0       	ldi	r23, 0x00	; 0
 418:	fe d1       	rcall	.+1020   	; 0x816 <__udivmodhi4>
 41a:	76 83       	std	Z+6, r23	; 0x06
 41c:	65 83       	std	Z+5, r22	; 0x05
		adcSum = 0;
 41e:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <adcSum+0x1>
 422:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <adcSum>
	}

	if (rxMode == SetConfig) //We are currently receiving data packet
 426:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <rxMode>
 42a:	83 31       	cpi	r24, 0x13	; 19
 42c:	89 f4       	brne	.+34     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
	{
		if (rs485busy == rxMark) //Second tick in a row detected
 42e:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <rxMark>
 432:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_ZZ10__vector_8E9rs485busy>
 436:	98 13       	cpse	r25, r24
 438:	06 c0       	rjmp	.+12     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
		{
			UCSR0A = (1 << MPCM0);
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
			rxMode = 0;
 440:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <rxMode>
 444:	0a c0       	rjmp	.+20     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		}
		else
			rs485busy = rxMark;
 446:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <rxMark>
 44a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_ZZ10__vector_8E9rs485busy>
 44e:	05 c0       	rjmp	.+10     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
	}
	else
		rs485busy = rxMark - 1;
 450:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <rxMark>
 454:	81 50       	subi	r24, 0x01	; 1
 456:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_ZZ10__vector_8E9rs485busy>
		
	if (lcycle & 1)
 45a:	c0 ff       	sbrs	r28, 0
 45c:	5c c0       	rjmp	.+184    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
	{
		ADCSRA |= (1 << ADSC);
 45e:	2e 9a       	sbi	0x05, 6	; 5
		i16i8 u16u8;
		if (validConf.fanLevelOverride == 0xFF)
 460:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <validConf>
 464:	2f 3f       	cpi	r18, 0xFF	; 255
 466:	19 f4       	brne	.+6      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
			u16u8.ui8[1] = validStatus.fanLevel;
 468:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <validStatus>
 46c:	1a c0       	rjmp	.+52     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
		else
		{
			u16u8.ui8[0] = validConf.fanLevelOverride;
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	82 2f       	mov	r24, r18
			u16u8.ui16 *= PWM_max;
 474:	9c 01       	movw	r18, r24
 476:	22 0f       	add	r18, r18
 478:	33 1f       	adc	r19, r19
 47a:	82 0f       	add	r24, r18
 47c:	93 1f       	adc	r25, r19
 47e:	9c 01       	movw	r18, r24
 480:	22 0f       	add	r18, r18
 482:	33 1f       	adc	r19, r19
 484:	22 0f       	add	r18, r18
 486:	33 1f       	adc	r19, r19
 488:	22 0f       	add	r18, r18
 48a:	33 1f       	adc	r19, r19
 48c:	28 1b       	sub	r18, r24
 48e:	39 0b       	sbc	r19, r25
 490:	c9 01       	movw	r24, r18
 492:	88 0f       	add	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	88 0f       	add	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	82 1b       	sub	r24, r18
 4a0:	93 0b       	sbc	r25, r19
		}
		if (OCR2AL > u16u8.ui8[1])
 4a2:	30 91 c4 00 	lds	r19, 0x00C4	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
 4a6:	93 17       	cp	r25, r19
 4a8:	58 f4       	brcc	.+22     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
		{
			OCR2AL--;
 4aa:	e4 ec       	ldi	r30, 0xC4	; 196
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	80 81       	ld	r24, Z
 4b0:	81 50       	subi	r24, 0x01	; 1
 4b2:	80 83       	st	Z, r24
			if (OCR2AL < FanMin)
 4b4:	80 81       	ld	r24, Z
 4b6:	8e 30       	cpi	r24, 0x0E	; 14
 4b8:	88 f4       	brcc	.+34     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
				OCR2AL = 0;
 4ba:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
 4be:	0e c0       	rjmp	.+28     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
		}
		else if (OCR2AL < u16u8.ui8[1])
 4c0:	30 91 c4 00 	lds	r19, 0x00C4	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
 4c4:	39 17       	cp	r19, r25
 4c6:	50 f4       	brcc	.+20     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
		{
			OCR2AL++;
 4c8:	e4 ec       	ldi	r30, 0xC4	; 196
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	20 81       	ld	r18, Z
 4ce:	2f 5f       	subi	r18, 0xFF	; 255
 4d0:	20 83       	st	Z, r18
			if (OCR2AL < FanMin)
 4d2:	20 81       	ld	r18, Z
 4d4:	2e 30       	cpi	r18, 0x0E	; 14
 4d6:	10 f4       	brcc	.+4      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
				OCR2AL = u16u8.ui8[1];
 4d8:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
		}
		OCR2BL = ICR2L - OCR2AL;
 4dc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
 4e0:	90 91 c4 00 	lds	r25, 0x00C4	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
 4e4:	89 1b       	sub	r24, r25
 4e6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
	}
}
 4ea:	15 c0       	rjmp	.+42     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
				tmpStatus.outsideT = AM2302.frame.T;
				FanRegulation();
			}
		}
		for (j = 0; j < 5; j++)
			AM2302.arr[j] = 0;
 4ec:	e5 e0       	ldi	r30, 0x05	; 5
 4ee:	f1 e0       	ldi	r31, 0x01	; 1
 4f0:	10 82       	st	Z, r1
 4f2:	11 82       	std	Z+1, r1	; 0x01
 4f4:	12 82       	std	Z+2, r1	; 0x02
 4f6:	13 82       	std	Z+3, r1	; 0x03
 4f8:	14 82       	std	Z+4, r1	; 0x04

		PORTB &= ~(1 << PORTB2);
 4fa:	c2 98       	cbi	0x18, 2	; 24
		DDRB |= (1 << DDB2); //Interface pulled low
 4fc:	ba 9a       	sbi	0x17, 2	; 23
		TCCR0B = (1 << CS02); //28.8kHz, 34.72µs tick
 4fe:	84 e0       	ldi	r24, 0x04	; 4
 500:	83 bf       	out	0x33, r24	; 51
		TCNT0 = 0;
 502:	12 be       	out	0x32, r1	; 50
		OCR0B = 48; //~1.666ms delay
 504:	90 e3       	ldi	r25, 0x30	; 48
 506:	9c bf       	out	0x3c, r25	; 60
		TIFR0 = (1 << TOV0) | (1 << OCF0B);
 508:	95 e0       	ldi	r25, 0x05	; 5
 50a:	98 bf       	out	0x38, r25	; 56
		TIMSK0 = (1 << OCIE0B); //Enable interrupt
 50c:	89 bf       	out	0x39, r24	; 57
		amCnt = -1; //Skip response signal		
 50e:	8f ef       	ldi	r24, 0xFF	; 255
 510:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <amCnt>
 514:	41 cf       	rjmp	.-382    	; 0x398 <__vector_8+0xf0>
			if (OCR2AL < FanMin)
				OCR2AL = u16u8.ui8[1];
		}
		OCR2BL = ICR2L - OCR2AL;
	}
}
 516:	ff 91       	pop	r31
 518:	ef 91       	pop	r30
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	bf 91       	pop	r27
 520:	af 91       	pop	r26
 522:	9f 91       	pop	r25
 524:	8f 91       	pop	r24
 526:	7f 91       	pop	r23
 528:	6f 91       	pop	r22
 52a:	5f 91       	pop	r21
 52c:	4f 91       	pop	r20
 52e:	3f 91       	pop	r19
 530:	2f 91       	pop	r18
 532:	0f 90       	pop	r0
 534:	0f be       	out	0x3f, r0	; 63
 536:	0f 90       	pop	r0
 538:	1f 90       	pop	r1
 53a:	18 95       	reti

0000053c <__vector_10>:

ISR	(TIMER0_COMPB_vect)
{
 53c:	1f 92       	push	r1
 53e:	0f 92       	push	r0
 540:	0f b6       	in	r0, 0x3f	; 63
 542:	0f 92       	push	r0
 544:	11 24       	eor	r1, r1
 546:	8f 93       	push	r24
	DDRB &= ~(1 << DDB2); //Interface released
 548:	ba 98       	cbi	0x17, 2	; 23
	TCCR0B = (1 << CS01); //921.6kHz clock, 1 tick = 1.08µs
 54a:	82 e0       	ldi	r24, 0x02	; 2
 54c:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
 54e:	12 be       	out	0x32, r1	; 50
	TIMSK0 = (1 << TOIE0); //Now enable overflow interrupt, timeout 278µs
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	89 bf       	out	0x39, r24	; 57
	PCMSK1 = (1 << PCINT10); //PINB2 as pin change interrupt source
 554:	84 e0       	ldi	r24, 0x04	; 4
 556:	80 bd       	out	0x20, r24	; 32
	GIFR = (1 << PCIF1);
 558:	80 e2       	ldi	r24, 0x20	; 32
 55a:	8a bf       	out	0x3a, r24	; 58
	GIMSK = (1 << PCIE1); //Enable pin change interrupt
 55c:	8b bf       	out	0x3b, r24	; 59
}
 55e:	8f 91       	pop	r24
 560:	0f 90       	pop	r0
 562:	0f be       	out	0x3f, r0	; 63
 564:	0f 90       	pop	r0
 566:	1f 90       	pop	r1
 568:	18 95       	reti

0000056a <__vector_11>:

ISR (TIMER0_OVF_vect)
{
 56a:	1f 92       	push	r1
 56c:	0f 92       	push	r0
 56e:	0f b6       	in	r0, 0x3f	; 63
 570:	0f 92       	push	r0
 572:	11 24       	eor	r1, r1
 574:	8f 93       	push	r24
	TIMSK0 = 0; //Disable overflow interrupt
 576:	19 be       	out	0x39, r1	; 57
	GIMSK = 0; //Disable pin change interrupt
 578:	1b be       	out	0x3b, r1	; 59
	tmpStatus.fanLevel = 1; //Sensor not responded code
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <tmpStatus>
}
 580:	8f 91       	pop	r24
 582:	0f 90       	pop	r0
 584:	0f be       	out	0x3f, r0	; 63
 586:	0f 90       	pop	r0
 588:	1f 90       	pop	r1
 58a:	18 95       	reti

0000058c <__vector_3>:

ISR (PCINT1_vect)
{
 58c:	1f 92       	push	r1
 58e:	0f 92       	push	r0
 590:	0f b6       	in	r0, 0x3f	; 63
 592:	0f 92       	push	r0
 594:	11 24       	eor	r1, r1
 596:	8f 93       	push	r24
 598:	9f 93       	push	r25
 59a:	ef 93       	push	r30
 59c:	ff 93       	push	r31
	static uint8_t temp;
	uint8_t delayz = TCNT0;
 59e:	92 b7       	in	r25, 0x32	; 50
	TCNT0 = 0; //Clear counter
 5a0:	12 be       	out	0x32, r1	; 50
	if (PINB & (1 << PINB2))
 5a2:	b2 99       	sbic	0x16, 2	; 22
 5a4:	2d c0       	rjmp	.+90     	; 0x600 <__vector_3+0x74>
		return; //Skip rising edge interrupt
	if (amCnt++ < 0)
 5a6:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <amCnt>
 5aa:	8f 5f       	subi	r24, 0xFF	; 255
 5ac:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <amCnt>
		return; //Clear array and that's all
	if (amCnt < 40)
 5b0:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <amCnt>
 5b4:	88 32       	cpi	r24, 0x28	; 40
 5b6:	f0 f4       	brcc	.+60     	; 0x5f4 <__vector_3+0x68>
	{
		temp <<= 1;
 5b8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 5bc:	88 0f       	add	r24, r24
		if (delayz > 44) //High level held more than 48µs - logic one received
 5be:	9d 32       	cpi	r25, 0x2D	; 45
 5c0:	18 f4       	brcc	.+6      	; 0x5c8 <__vector_3+0x3c>
		return; //Skip rising edge interrupt
	if (amCnt++ < 0)
		return; //Clear array and that's all
	if (amCnt < 40)
	{
		temp <<= 1;
 5c2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 5c6:	03 c0       	rjmp	.+6      	; 0x5ce <__vector_3+0x42>
		if (delayz > 44) //High level held more than 48µs - logic one received
			temp |= 1;
 5c8:	81 60       	ori	r24, 0x01	; 1
 5ca:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		if ((amCnt & 7) == 7)
 5ce:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <amCnt>
 5d2:	87 70       	andi	r24, 0x07	; 7
 5d4:	87 30       	cpi	r24, 0x07	; 7
 5d6:	71 f4       	brne	.+28     	; 0x5f4 <__vector_3+0x68>
			AM2302.arr[amCnt >> 3] = temp;
 5d8:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <amCnt>
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	f5 95       	asr	r31
 5e0:	e7 95       	ror	r30
 5e2:	f5 95       	asr	r31
 5e4:	e7 95       	ror	r30
 5e6:	f5 95       	asr	r31
 5e8:	e7 95       	ror	r30
 5ea:	eb 5f       	subi	r30, 0xFB	; 251
 5ec:	fe 4f       	sbci	r31, 0xFE	; 254
 5ee:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 5f2:	80 83       	st	Z, r24
	}
	if (amCnt == 39)
 5f4:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <amCnt>
 5f8:	87 32       	cpi	r24, 0x27	; 39
 5fa:	11 f4       	brne	.+4      	; 0x600 <__vector_3+0x74>
	{
		TIMSK0 = 0; //Disable overflow interrupt
 5fc:	19 be       	out	0x39, r1	; 57
		GIMSK = 0; //Disable pin change interrupt
 5fe:	1b be       	out	0x3b, r1	; 59
	}
}
 600:	ff 91       	pop	r31
 602:	ef 91       	pop	r30
 604:	9f 91       	pop	r25
 606:	8f 91       	pop	r24
 608:	0f 90       	pop	r0
 60a:	0f be       	out	0x3f, r0	; 63
 60c:	0f 90       	pop	r0
 60e:	1f 90       	pop	r1
 610:	18 95       	reti

00000612 <__vector_5>:

ISR (TIMER1_CAPT_vect)
{
 612:	1f 92       	push	r1
 614:	0f 92       	push	r0
 616:	0f b6       	in	r0, 0x3f	; 63
 618:	0f 92       	push	r0
 61a:	11 24       	eor	r1, r1
 61c:	0f 93       	push	r16
 61e:	1f 93       	push	r17
 620:	2f 93       	push	r18
 622:	3f 93       	push	r19
 624:	4f 93       	push	r20
 626:	5f 93       	push	r21
 628:	6f 93       	push	r22
 62a:	7f 93       	push	r23
 62c:	8f 93       	push	r24
 62e:	9f 93       	push	r25
 630:	af 93       	push	r26
 632:	bf 93       	push	r27
	if (tachCnt++ > 0)
 634:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <tachCnt>
 638:	91 e0       	ldi	r25, 0x01	; 1
 63a:	98 0f       	add	r25, r24
 63c:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <tachCnt>
 640:	88 23       	and	r24, r24
 642:	09 f4       	brne	.+2      	; 0x646 <__vector_5+0x34>
 644:	45 c0       	rjmp	.+138    	; 0x6d0 <__vector_5+0xbe>
	{
		if (ICR1 < tachPrev)
 646:	24 b5       	in	r18, 0x24	; 36
 648:	35 b5       	in	r19, 0x25	; 37
 64a:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <tachPrev>
 64e:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <tachPrev+0x1>
 652:	28 17       	cp	r18, r24
 654:	39 07       	cpc	r19, r25
 656:	00 f5       	brcc	.+64     	; 0x698 <__vector_5+0x86>
			tachSum += 0xFFFF - tachPrev + ICR1;
 658:	84 b5       	in	r24, 0x24	; 36
 65a:	95 b5       	in	r25, 0x25	; 37
 65c:	20 91 4c 01 	lds	r18, 0x014C	; 0x80014c <tachPrev>
 660:	30 91 4d 01 	lds	r19, 0x014D	; 0x80014d <tachPrev+0x1>
 664:	01 97       	sbiw	r24, 0x01	; 1
 666:	82 1b       	sub	r24, r18
 668:	93 0b       	sbc	r25, r19
 66a:	40 91 44 01 	lds	r20, 0x0144	; 0x800144 <tachSum>
 66e:	50 91 45 01 	lds	r21, 0x0145	; 0x800145 <tachSum+0x1>
 672:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <tachSum+0x2>
 676:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <tachSum+0x3>
 67a:	8a 01       	movw	r16, r20
 67c:	9b 01       	movw	r18, r22
 67e:	08 0f       	add	r16, r24
 680:	19 1f       	adc	r17, r25
 682:	21 1d       	adc	r18, r1
 684:	31 1d       	adc	r19, r1
 686:	00 93 44 01 	sts	0x0144, r16	; 0x800144 <tachSum>
 68a:	10 93 45 01 	sts	0x0145, r17	; 0x800145 <tachSum+0x1>
 68e:	20 93 46 01 	sts	0x0146, r18	; 0x800146 <tachSum+0x2>
 692:	30 93 47 01 	sts	0x0147, r19	; 0x800147 <tachSum+0x3>
 696:	1c c0       	rjmp	.+56     	; 0x6d0 <__vector_5+0xbe>
		else
			tachSum += ICR1 - tachPrev;
 698:	24 b5       	in	r18, 0x24	; 36
 69a:	35 b5       	in	r19, 0x25	; 37
 69c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <tachPrev>
 6a0:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <tachPrev+0x1>
 6a4:	28 1b       	sub	r18, r24
 6a6:	39 0b       	sbc	r19, r25
 6a8:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <tachSum>
 6ac:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <tachSum+0x1>
 6b0:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <tachSum+0x2>
 6b4:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <tachSum+0x3>
 6b8:	82 0f       	add	r24, r18
 6ba:	93 1f       	adc	r25, r19
 6bc:	a1 1d       	adc	r26, r1
 6be:	b1 1d       	adc	r27, r1
 6c0:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <tachSum>
 6c4:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <tachSum+0x1>
 6c8:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <tachSum+0x2>
 6cc:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <tachSum+0x3>
	}
	if (tachCnt > 7)
 6d0:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <tachCnt>
 6d4:	88 30       	cpi	r24, 0x08	; 8
 6d6:	08 f0       	brcs	.+2      	; 0x6da <__vector_5+0xc8>
		TIMSK1 &= ~(1 << ICIE1);
 6d8:	7d 98       	cbi	0x0f, 5	; 15
	tachPrev = ICR1;
 6da:	84 b5       	in	r24, 0x24	; 36
 6dc:	95 b5       	in	r25, 0x25	; 37
 6de:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <tachPrev+0x1>
 6e2:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <tachPrev>
}
 6e6:	bf 91       	pop	r27
 6e8:	af 91       	pop	r26
 6ea:	9f 91       	pop	r25
 6ec:	8f 91       	pop	r24
 6ee:	7f 91       	pop	r23
 6f0:	6f 91       	pop	r22
 6f2:	5f 91       	pop	r21
 6f4:	4f 91       	pop	r20
 6f6:	3f 91       	pop	r19
 6f8:	2f 91       	pop	r18
 6fa:	1f 91       	pop	r17
 6fc:	0f 91       	pop	r16
 6fe:	0f 90       	pop	r0
 700:	0f be       	out	0x3f, r0	; 63
 702:	0f 90       	pop	r0
 704:	1f 90       	pop	r1
 706:	18 95       	reti

00000708 <__vector_13>:

ISR (ADC_vect)
{
 708:	1f 92       	push	r1
 70a:	0f 92       	push	r0
 70c:	0f b6       	in	r0, 0x3f	; 63
 70e:	0f 92       	push	r0
 710:	11 24       	eor	r1, r1
 712:	2f 93       	push	r18
 714:	3f 93       	push	r19
 716:	8f 93       	push	r24
 718:	9f 93       	push	r25
	adcSum += ADC;
 71a:	26 b1       	in	r18, 0x06	; 6
 71c:	37 b1       	in	r19, 0x07	; 7
 71e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <adcSum>
 722:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <adcSum+0x1>
 726:	82 0f       	add	r24, r18
 728:	93 1f       	adc	r25, r19
 72a:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <adcSum+0x1>
 72e:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <adcSum>
}
 732:	9f 91       	pop	r25
 734:	8f 91       	pop	r24
 736:	3f 91       	pop	r19
 738:	2f 91       	pop	r18
 73a:	0f 90       	pop	r0
 73c:	0f be       	out	0x3f, r0	; 63
 73e:	0f 90       	pop	r0
 740:	1f 90       	pop	r1
 742:	18 95       	reti

00000744 <_Z7mcuInitv>:


void inline mcuInit()
{
	cli();
 744:	f8 94       	cli
	//Port A outputs: U0TX, PWMA, PWMB, U0EN, SEL
	DDRA = (1 << DDA1) | (1 << DDA3) | (1 << DDA4) | (1 << DDA5) | (1 << DDA6);
 746:	8a e7       	ldi	r24, 0x7A	; 122
 748:	8a bb       	out	0x1a, r24	; 26
	//USART 0: 76.8kbps, frame bits: start / 9 data / 2 stop, multi-processor communication
	UBRR0 = 5; //Actual maximum transfer rate: 6400Bps
 74a:	85 e0       	ldi	r24, 0x05	; 5
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <__EEPROM_REGION_LENGTH__+0x7f0082>
 752:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
	UCSR0B = (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0) | (1 << UCSZ02);
 756:	8c ed       	ldi	r24, 0xDC	; 220
 758:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
	UCSR0C = (1 << USBS0) | (1 << UCSZ01) | (1 << UCSZ00);
 75c:	8e e0       	ldi	r24, 0x0E	; 14
 75e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	UCSR0A = (1 << MPCM0);
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
	//Timer 1: 921.6kHz clock, input capture on leading edge, noise filtering, OVF interrupt
	//If fan is running for 4 poles, minimum measurable speed is 422rpm
	TCCR1B = (1 << ICNC1) | (1 << ICES1) | (1 << CS11);
 768:	92 ec       	ldi	r25, 0xC2	; 194
 76a:	9e bd       	out	0x2e, r25	; 46
	TIMSK1 = (1 << TOIE1);
 76c:	8f b9       	out	0x0f, r24	; 15
	//Timer 2: 7.3728MHz clock, phase and frequency correct PWM, top in ICR2
	ICR2 = PWM_max; //25kHz PWM frequency
 76e:	23 e9       	ldi	r18, 0x93	; 147
 770:	30 e0       	ldi	r19, 0x00	; 0
 772:	30 93 c1 00 	sts	0x00C1, r19	; 0x8000c1 <__EEPROM_REGION_LENGTH__+0x7f00c1>
 776:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__EEPROM_REGION_LENGTH__+0x7f00c0>
	OCR2A = 0; //Non-inverting output: off
 77a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
 77e:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
	OCR2B = PWM_max; //Inverting output: off
 782:	30 93 c3 00 	sts	0x00C3, r19	; 0x8000c3 <__EEPROM_REGION_LENGTH__+0x7f00c3>
 786:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
	TCCR2A = (1 << COM2A1) | (1 << COM2B1) | (1 << COM2B0);
 78a:	90 eb       	ldi	r25, 0xB0	; 176
 78c:	90 93 ca 00 	sts	0x00CA, r25	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
	TCCR2B = (1 << WGM23) | (1 << CS20);
 790:	91 e1       	ldi	r25, 0x11	; 17
 792:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
	TOCPMSA0 |= (1 << TOCC2S1) | (1 << TOCC3S1); //OC2A non-inverting (TOCC3), OC2B inverting (TOCC2)
 796:	e7 e6       	ldi	r30, 0x67	; 103
 798:	f0 e0       	ldi	r31, 0x00	; 0
 79a:	90 81       	ld	r25, Z
 79c:	90 6a       	ori	r25, 0xA0	; 160
 79e:	90 83       	st	Z, r25
	TOCPMCOE |= (1 << TOCC2OE) | (1 << TOCC3OE);
 7a0:	e6 e6       	ldi	r30, 0x66	; 102
 7a2:	f0 e0       	ldi	r31, 0x00	; 0
 7a4:	90 81       	ld	r25, Z
 7a6:	9c 60       	ori	r25, 0x0C	; 12
 7a8:	90 83       	st	Z, r25
	//ADC: 1.1V reference, 230.4kHz clock, ADC0 input, interrupt
	ADMUXB = (1 << REFS0);
 7aa:	90 e2       	ldi	r25, 0x20	; 32
 7ac:	98 b9       	out	0x08, r25	; 8
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS2) | (1 << ADPS0);
 7ae:	9d e8       	ldi	r25, 0x8D	; 141
 7b0:	95 b9       	out	0x05, r25	; 5
	DIDR0 = (1 << ADC0D);
 7b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
	//Power reduction: I²C, USART1 and SPI are not used in this project
	PRR = (1 << PRTWI) | (1 << PRUSART1) | (1 << PRSPI);
 7b6:	80 ed       	ldi	r24, 0xD0	; 208
 7b8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__EEPROM_REGION_LENGTH__+0x7f0070>
	sei();
 7bc:	78 94       	sei
 7be:	08 95       	ret

000007c0 <main>:
}

int main(void)
{
	mcuInit();
 7c0:	c1 df       	rcall	.-126    	; 0x744 <_Z7mcuInitv>

	eeprom_read_block(&validConf, &eConf, sizeof(sysConfig));
 7c2:	4b e0       	ldi	r20, 0x0B	; 11
 7c4:	50 e0       	ldi	r21, 0x00	; 0
 7c6:	60 e0       	ldi	r22, 0x00	; 0
 7c8:	70 e0       	ldi	r23, 0x00	; 0
 7ca:	87 e3       	ldi	r24, 0x37	; 55
 7cc:	91 e0       	ldi	r25, 0x01	; 1
 7ce:	59 d0       	rcall	.+178    	; 0x882 <eeprom_read_block>
	validConf.fanLevelOverride = 0xFF; //No override at startup
 7d0:	c7 e3       	ldi	r28, 0x37	; 55
 7d2:	d1 e0       	ldi	r29, 0x01	; 1
 7d4:	8f ef       	ldi	r24, 0xFF	; 255
 7d6:	88 83       	st	Y, r24
	validConf.CRC16 = CalculateCRC16(&validConf, sizeof(sysConfig) - 2);
 7d8:	69 e0       	ldi	r22, 0x09	; 9
 7da:	ce 01       	movw	r24, r28
 7dc:	4b dc       	rcall	.-1898   	; 0x74 <_Z14CalculateCRC16Pva>
 7de:	9a 87       	std	Y+10, r25	; 0x0a
 7e0:	89 87       	std	Y+9, r24	; 0x09
 7e2:	ff cf       	rjmp	.-2      	; 0x7e2 <main+0x22>

000007e4 <__mulsi3>:
 7e4:	ee 27       	eor	r30, r30
 7e6:	ff 27       	eor	r31, r31

000007e8 <__mulsi3_helper>:
 7e8:	aa 27       	eor	r26, r26
 7ea:	bb 27       	eor	r27, r27
 7ec:	08 c0       	rjmp	.+16     	; 0x7fe <__mulsi3_helper+0x16>
 7ee:	a2 0f       	add	r26, r18
 7f0:	b3 1f       	adc	r27, r19
 7f2:	e4 1f       	adc	r30, r20
 7f4:	f5 1f       	adc	r31, r21
 7f6:	22 0f       	add	r18, r18
 7f8:	33 1f       	adc	r19, r19
 7fa:	44 1f       	adc	r20, r20
 7fc:	55 1f       	adc	r21, r21
 7fe:	96 95       	lsr	r25
 800:	87 95       	ror	r24
 802:	77 95       	ror	r23
 804:	67 95       	ror	r22
 806:	98 f3       	brcs	.-26     	; 0x7ee <__mulsi3_helper+0x6>
 808:	70 40       	sbci	r23, 0x00	; 0
 80a:	a9 f7       	brne	.-22     	; 0x7f6 <__mulsi3_helper+0xe>
 80c:	00 97       	sbiw	r24, 0x00	; 0
 80e:	99 f7       	brne	.-26     	; 0x7f6 <__mulsi3_helper+0xe>
 810:	bd 01       	movw	r22, r26
 812:	cf 01       	movw	r24, r30
 814:	08 95       	ret

00000816 <__udivmodhi4>:
 816:	aa 1b       	sub	r26, r26
 818:	bb 1b       	sub	r27, r27
 81a:	51 e1       	ldi	r21, 0x11	; 17
 81c:	07 c0       	rjmp	.+14     	; 0x82c <__udivmodhi4_ep>

0000081e <__udivmodhi4_loop>:
 81e:	aa 1f       	adc	r26, r26
 820:	bb 1f       	adc	r27, r27
 822:	a6 17       	cp	r26, r22
 824:	b7 07       	cpc	r27, r23
 826:	10 f0       	brcs	.+4      	; 0x82c <__udivmodhi4_ep>
 828:	a6 1b       	sub	r26, r22
 82a:	b7 0b       	sbc	r27, r23

0000082c <__udivmodhi4_ep>:
 82c:	88 1f       	adc	r24, r24
 82e:	99 1f       	adc	r25, r25
 830:	5a 95       	dec	r21
 832:	a9 f7       	brne	.-22     	; 0x81e <__udivmodhi4_loop>
 834:	80 95       	com	r24
 836:	90 95       	com	r25
 838:	bc 01       	movw	r22, r24
 83a:	cd 01       	movw	r24, r26
 83c:	08 95       	ret

0000083e <__udivmodsi4>:
 83e:	a1 e2       	ldi	r26, 0x21	; 33
 840:	1a 2e       	mov	r1, r26
 842:	aa 1b       	sub	r26, r26
 844:	bb 1b       	sub	r27, r27
 846:	fd 01       	movw	r30, r26
 848:	0d c0       	rjmp	.+26     	; 0x864 <__udivmodsi4_ep>

0000084a <__udivmodsi4_loop>:
 84a:	aa 1f       	adc	r26, r26
 84c:	bb 1f       	adc	r27, r27
 84e:	ee 1f       	adc	r30, r30
 850:	ff 1f       	adc	r31, r31
 852:	a2 17       	cp	r26, r18
 854:	b3 07       	cpc	r27, r19
 856:	e4 07       	cpc	r30, r20
 858:	f5 07       	cpc	r31, r21
 85a:	20 f0       	brcs	.+8      	; 0x864 <__udivmodsi4_ep>
 85c:	a2 1b       	sub	r26, r18
 85e:	b3 0b       	sbc	r27, r19
 860:	e4 0b       	sbc	r30, r20
 862:	f5 0b       	sbc	r31, r21

00000864 <__udivmodsi4_ep>:
 864:	66 1f       	adc	r22, r22
 866:	77 1f       	adc	r23, r23
 868:	88 1f       	adc	r24, r24
 86a:	99 1f       	adc	r25, r25
 86c:	1a 94       	dec	r1
 86e:	69 f7       	brne	.-38     	; 0x84a <__udivmodsi4_loop>
 870:	60 95       	com	r22
 872:	70 95       	com	r23
 874:	80 95       	com	r24
 876:	90 95       	com	r25
 878:	9b 01       	movw	r18, r22
 87a:	ac 01       	movw	r20, r24
 87c:	bd 01       	movw	r22, r26
 87e:	cf 01       	movw	r24, r30
 880:	08 95       	ret

00000882 <eeprom_read_block>:
 882:	dc 01       	movw	r26, r24
 884:	86 2f       	mov	r24, r22

00000886 <eeprom_read_blraw>:
 886:	e8 2f       	mov	r30, r24
 888:	e1 99       	sbic	0x1c, 1	; 28
 88a:	fe cf       	rjmp	.-4      	; 0x888 <eeprom_read_blraw+0x2>
 88c:	1f ba       	out	0x1f, r1	; 31
 88e:	05 c0       	rjmp	.+10     	; 0x89a <eeprom_read_blraw+0x14>
 890:	ee bb       	out	0x1e, r30	; 30
 892:	e0 9a       	sbi	0x1c, 0	; 28
 894:	e3 95       	inc	r30
 896:	0d b2       	in	r0, 0x1d	; 29
 898:	0d 92       	st	X+, r0
 89a:	41 50       	subi	r20, 0x01	; 1
 89c:	c8 f7       	brcc	.-14     	; 0x890 <eeprom_read_blraw+0xa>
 89e:	08 95       	ret

000008a0 <eeprom_update_block>:
 8a0:	dc 01       	movw	r26, r24
 8a2:	a4 0f       	add	r26, r20
 8a4:	b5 1f       	adc	r27, r21
 8a6:	41 50       	subi	r20, 0x01	; 1
 8a8:	50 40       	sbci	r21, 0x00	; 0
 8aa:	38 f0       	brcs	.+14     	; 0x8ba <eeprom_update_block+0x1a>
 8ac:	86 2f       	mov	r24, r22
 8ae:	84 0f       	add	r24, r20
 8b0:	2e 91       	ld	r18, -X
 8b2:	05 d0       	rcall	.+10     	; 0x8be <eeprom_update_r18>
 8b4:	41 50       	subi	r20, 0x01	; 1
 8b6:	50 40       	sbci	r21, 0x00	; 0
 8b8:	d8 f7       	brcc	.-10     	; 0x8b0 <eeprom_update_block+0x10>
 8ba:	08 95       	ret

000008bc <eeprom_update_byte>:
 8bc:	26 2f       	mov	r18, r22

000008be <eeprom_update_r18>:
 8be:	e1 99       	sbic	0x1c, 1	; 28
 8c0:	fe cf       	rjmp	.-4      	; 0x8be <eeprom_update_r18>
 8c2:	1f ba       	out	0x1f, r1	; 31
 8c4:	8e bb       	out	0x1e, r24	; 30
 8c6:	e0 9a       	sbi	0x1c, 0	; 28
 8c8:	81 50       	subi	r24, 0x01	; 1
 8ca:	0d b2       	in	r0, 0x1d	; 29
 8cc:	02 16       	cp	r0, r18
 8ce:	39 f0       	breq	.+14     	; 0x8de <eeprom_update_r18+0x20>
 8d0:	1c ba       	out	0x1c, r1	; 28
 8d2:	2d bb       	out	0x1d, r18	; 29
 8d4:	0f b6       	in	r0, 0x3f	; 63
 8d6:	f8 94       	cli
 8d8:	e2 9a       	sbi	0x1c, 2	; 28
 8da:	e1 9a       	sbi	0x1c, 1	; 28
 8dc:	0f be       	out	0x3f, r0	; 63
 8de:	08 95       	ret

000008e0 <_exit>:
 8e0:	f8 94       	cli

000008e2 <__stop_program>:
 8e2:	ff cf       	rjmp	.-2      	; 0x8e2 <__stop_program>
