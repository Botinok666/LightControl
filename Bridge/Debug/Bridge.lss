
Bridge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000220  000002b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000220  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000042  00800104  00800104  000002b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000097c  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000842  00000000  00000000  00000ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000037f  00000000  00000000  00001522  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  000018a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c7  00000000  00000000  00001968  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000182  00000000  00000000  00001e2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001fb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
   2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
   4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
   6:	35 c0       	rjmp	.+106    	; 0x72 <__bad_interrupt>
   8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
   a:	33 c0       	rjmp	.+102    	; 0x72 <__bad_interrupt>
   c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
   e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
  10:	30 c0       	rjmp	.+96     	; 0x72 <__bad_interrupt>
  12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
  14:	2e c0       	rjmp	.+92     	; 0x72 <__bad_interrupt>
  16:	d4 c0       	rjmp	.+424    	; 0x1c0 <__vector_11>
  18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
  1a:	2b c0       	rjmp	.+86     	; 0x72 <__bad_interrupt>
  1c:	2a c0       	rjmp	.+84     	; 0x72 <__bad_interrupt>
  1e:	29 c0       	rjmp	.+82     	; 0x72 <__bad_interrupt>
  20:	28 c0       	rjmp	.+80     	; 0x72 <__bad_interrupt>
  22:	27 c0       	rjmp	.+78     	; 0x72 <__bad_interrupt>
  24:	26 c0       	rjmp	.+76     	; 0x72 <__bad_interrupt>
  26:	25 c0       	rjmp	.+74     	; 0x72 <__bad_interrupt>
  28:	24 c0       	rjmp	.+72     	; 0x72 <__bad_interrupt>
  2a:	23 c0       	rjmp	.+70     	; 0x72 <__bad_interrupt>
  2c:	23 c0       	rjmp	.+70     	; 0x74 <__vector_22>
  2e:	21 c0       	rjmp	.+66     	; 0x72 <__bad_interrupt>
  30:	31 c0       	rjmp	.+98     	; 0x94 <__vector_24>
  32:	1f c0       	rjmp	.+62     	; 0x72 <__bad_interrupt>
  34:	75 c0       	rjmp	.+234    	; 0x120 <__vector_26>
  36:	1d c0       	rjmp	.+58     	; 0x72 <__bad_interrupt>
  38:	1c c0       	rjmp	.+56     	; 0x72 <__bad_interrupt>
  3a:	1b c0       	rjmp	.+54     	; 0x72 <__bad_interrupt>

0000003c <__ctors_end>:
  3c:	11 24       	eor	r1, r1
  3e:	1f be       	out	0x3f, r1	; 63
  40:	cf ef       	ldi	r28, 0xFF	; 255
  42:	d1 e0       	ldi	r29, 0x01	; 1
  44:	de bf       	out	0x3e, r29	; 62
  46:	cd bf       	out	0x3d, r28	; 61

00000048 <__do_copy_data>:
  48:	11 e0       	ldi	r17, 0x01	; 1
  4a:	a0 e0       	ldi	r26, 0x00	; 0
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	e0 e2       	ldi	r30, 0x20	; 32
  50:	f2 e0       	ldi	r31, 0x02	; 2
  52:	02 c0       	rjmp	.+4      	; 0x58 <__do_copy_data+0x10>
  54:	05 90       	lpm	r0, Z+
  56:	0d 92       	st	X+, r0
  58:	a4 30       	cpi	r26, 0x04	; 4
  5a:	b1 07       	cpc	r27, r17
  5c:	d9 f7       	brne	.-10     	; 0x54 <__do_copy_data+0xc>

0000005e <__do_clear_bss>:
  5e:	21 e0       	ldi	r18, 0x01	; 1
  60:	a4 e0       	ldi	r26, 0x04	; 4
  62:	b1 e0       	ldi	r27, 0x01	; 1
  64:	01 c0       	rjmp	.+2      	; 0x68 <.do_clear_bss_start>

00000066 <.do_clear_bss_loop>:
  66:	1d 92       	st	X+, r1

00000068 <.do_clear_bss_start>:
  68:	a6 34       	cpi	r26, 0x46	; 70
  6a:	b2 07       	cpc	r27, r18
  6c:	e1 f7       	brne	.-8      	; 0x66 <.do_clear_bss_loop>
  6e:	b9 d0       	rcall	.+370    	; 0x1e2 <main>
  70:	d5 c0       	rjmp	.+426    	; 0x21c <_exit>

00000072 <__bad_interrupt>:
  72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <__vector_22>:
volatile bool u1rx = false;
volatile uint8_t destAddr;
volatile uint8_t *u1rxBuf = uBuf, *u0txBuf = uBuf;

ISR (USART0_RX_vect) //Data from RS485
{
  74:	1f 92       	push	r1
  76:	0f 92       	push	r0
  78:	0f b6       	in	r0, 0x3f	; 63
  7a:	0f 92       	push	r0
  7c:	11 24       	eor	r1, r1
  7e:	8f 93       	push	r24
	UDR1 = UDR0; //Retransmit received byte directly because RS485 is slower than RasPi
  80:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
  84:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__EEPROM_REGION_LENGTH__+0x7f0090>
}
  88:	8f 91       	pop	r24
  8a:	0f 90       	pop	r0
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	0f 90       	pop	r0
  90:	1f 90       	pop	r1
  92:	18 95       	reti

00000094 <__vector_24>:

ISR (USART0_TX_vect) //Data into RS485
{
  94:	1f 92       	push	r1
  96:	0f 92       	push	r0
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
  a2:	ef 93       	push	r30
  a4:	ff 93       	push	r31
	if (UCSR0B & (1 << TXB80)) //Address has been transmitted
  a6:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
  aa:	80 ff       	sbrs	r24, 0
  ac:	1a c0       	rjmp	.+52     	; 0xe2 <__vector_24+0x4e>
	{
		UCSR0B &= ~(1 << TXB80); //Clear 9th bit
  ae:	e5 e8       	ldi	r30, 0x85	; 133
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	8e 7f       	andi	r24, 0xFE	; 254
  b6:	80 83       	st	Z, r24
		if ((destAddr & 0x0F) == 3) //Lower nibble equals 3: set config
  b8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
  bc:	8f 70       	andi	r24, 0x0F	; 15
  be:	83 30       	cpi	r24, 0x03	; 3
  c0:	71 f4       	brne	.+28     	; 0xde <__vector_24+0x4a>
			UDR0 = *u0txBuf++; //Send first byte from buffer
  c2:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
  c6:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
  ca:	cf 01       	movw	r24, r30
  cc:	01 96       	adiw	r24, 0x01	; 1
  ce:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
  d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  d6:	80 81       	ld	r24, Z
  d8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
  dc:	18 c0       	rjmp	.+48     	; 0x10e <__vector_24+0x7a>
		else
			U0RXen(); //Enable receiver (we will receive some data)
  de:	db 98       	cbi	0x1b, 3	; 27
  e0:	16 c0       	rjmp	.+44     	; 0x10e <__vector_24+0x7a>
	}
	else if (u0txBuf <= u1rxBuf) //Transmit all data
  e2:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
  e6:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
  ea:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <u1rxBuf>
  ee:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <u1rxBuf+0x1>
  f2:	8e 17       	cp	r24, r30
  f4:	9f 07       	cpc	r25, r31
  f6:	50 f0       	brcs	.+20     	; 0x10c <__vector_24+0x78>
		UDR0 = *u0txBuf++;
  f8:	cf 01       	movw	r24, r30
  fa:	01 96       	adiw	r24, 0x01	; 1
  fc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 100:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 104:	80 81       	ld	r24, Z
 106:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
 10a:	01 c0       	rjmp	.+2      	; 0x10e <__vector_24+0x7a>
	else //All data has been transmitted
		U0RXen(); //Enable receiver (set bus into idle mode)
 10c:	db 98       	cbi	0x1b, 3	; 27
}
 10e:	ff 91       	pop	r31
 110:	ef 91       	pop	r30
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <__vector_26>:

ISR (USART1_RX_vect) //Data from RasPi
{
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	8f 93       	push	r24
 12c:	9f 93       	push	r25
 12e:	ef 93       	push	r30
 130:	ff 93       	push	r31
	if (!u1rx)
 132:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <u1rx>
 136:	81 11       	cpse	r24, r1
 138:	2c c0       	rjmp	.+88     	; 0x192 <__vector_26+0x72>
	{
		destAddr = UDR1;
 13a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__EEPROM_REGION_LENGTH__+0x7f0090>
 13e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
		U0TXen();
 142:	db 9a       	sbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	8a 95       	dec	r24
 148:	f1 f7       	brne	.-4      	; 0x146 <__vector_26+0x26>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <__vector_26+0x2c>
		_delay_us(2);
		UCSR0B |= (1 << TXB80);
 14c:	e5 e8       	ldi	r30, 0x85	; 133
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	81 60       	ori	r24, 0x01	; 1
 154:	80 83       	st	Z, r24
		UDR0 = destAddr; //Send address over RS485
 156:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 15a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
		if ((destAddr & 0x0F) == 3) //Lower nibble equals 3: set config
 15e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 162:	8f 70       	andi	r24, 0x0F	; 15
 164:	83 30       	cpi	r24, 0x03	; 3
 166:	19 f5       	brne	.+70     	; 0x1ae <__vector_26+0x8e>
		{
			u1rx = true;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <u1rx>
			u0txBuf = u1rxBuf = uBuf; //We will receive other data from RasPi and send it over RS485
 16e:	86 e0       	ldi	r24, 0x06	; 6
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <u1rxBuf+0x1>
 176:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <u1rxBuf>
 17a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 17e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			TCNT0 = 0;
 182:	12 be       	out	0x32, r1	; 50
			TIFR0 |= (1 << TOV0);
 184:	88 b7       	in	r24, 0x38	; 56
 186:	81 60       	ori	r24, 0x01	; 1
 188:	88 bf       	out	0x38, r24	; 56
			TIMSK0 |= (1 << TOIE0);
 18a:	89 b7       	in	r24, 0x39	; 57
 18c:	81 60       	ori	r24, 0x01	; 1
 18e:	89 bf       	out	0x39, r24	; 57
 190:	0e c0       	rjmp	.+28     	; 0x1ae <__vector_26+0x8e>
		}
	}
	else
	{
		TCNT0 = 0;
 192:	12 be       	out	0x32, r1	; 50
		*u1rxBuf++ = UDR1;
 194:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <u1rxBuf>
 198:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <u1rxBuf+0x1>
 19c:	cf 01       	movw	r24, r30
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <u1rxBuf+0x1>
 1a4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <u1rxBuf>
 1a8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__EEPROM_REGION_LENGTH__+0x7f0090>
 1ac:	80 83       	st	Z, r24
	}
}
 1ae:	ff 91       	pop	r31
 1b0:	ef 91       	pop	r30
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <__vector_11>:

ISR (TIMER0_OVF_vect) //555µs timeout
{
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	8f 93       	push	r24
	TIMSK0 &= ~(1 << TOIE0);
 1cc:	89 b7       	in	r24, 0x39	; 57
 1ce:	8e 7f       	andi	r24, 0xFE	; 254
 1d0:	89 bf       	out	0x39, r24	; 57
	u1rx = false; //Receiving from RasPi was finished
 1d2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <u1rx>
}
 1d6:	8f 91       	pop	r24
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <main>:

inline void mcuInit()
{
	cli();
 1e2:	f8 94       	cli
	//Port A outputs: U0TX, U0EN, U1TX
	DDRA = (1 << DDA1) | (1 << DDA3) | (1 << DDA5);
 1e4:	8a e2       	ldi	r24, 0x2A	; 42
 1e6:	8a bb       	out	0x1a, r24	; 26
	//USART 0: 76.8kbps, frame bits: start / 9 data / 2 stop, multi-processor communication
	UBRR0 = 2; //Actual maximum transfer rate: 6400Bps
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <__EEPROM_REGION_LENGTH__+0x7f0082>
 1f0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
	UCSR0B = (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0) | (1 << UCSZ02); //Interrupts enabled
 1f4:	2c ed       	ldi	r18, 0xDC	; 220
 1f6:	20 93 85 00 	sts	0x0085, r18	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
	UCSR0C = (1 << USBS0) | (1 << UCSZ01) | (1 << UCSZ00);
 1fa:	2e e0       	ldi	r18, 0x0E	; 14
 1fc:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	//USART 1: 76.8kbps, frame bits: start / 8 data / no parity / 1 stop
	UBRR1 = 2; //Actual maximum transfer rate: 7680Bps
 200:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <__EEPROM_REGION_LENGTH__+0x7f0092>
 204:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__EEPROM_REGION_LENGTH__+0x7f0091>
	UCSR1B = (1 << RXCIE1) | (1 << RXEN1) | (1 << TXEN1); //RX interrupt enabled
 208:	88 e9       	ldi	r24, 0x98	; 152
 20a:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__EEPROM_REGION_LENGTH__+0x7f0095>
	//Timer 0: 460.8kHz clock
	TCCR0B = (1 << CS01);
 20e:	82 e0       	ldi	r24, 0x02	; 2
 210:	83 bf       	out	0x33, r24	; 51
	//Power reduction
	PRR = (1 << PRTWI) | (1 << PRSPI) | (1 << PRTIM1) | (1 << PRTIM2) | (1 << PRADC);
 212:	8d e9       	ldi	r24, 0x9D	; 157
 214:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__EEPROM_REGION_LENGTH__+0x7f0070>
	sei();
 218:	78 94       	sei
 21a:	ff cf       	rjmp	.-2      	; 0x21a <__stack+0x1b>

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>
