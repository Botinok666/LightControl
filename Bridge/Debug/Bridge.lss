
Bridge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000044  00800100  00800100  00000270  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000976  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000839  00000000  00000000  00000c92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000397  00000000  00000000  000014cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001864  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c3  00000000  00000000  00001924  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000175  00000000  00000000  00001de7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001f5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	c4 c0       	rjmp	.+392    	; 0x19e <__vector_10>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>
  2a:	18 c0       	rjmp	.+48     	; 0x5c <__bad_interrupt>
  2c:	18 c0       	rjmp	.+48     	; 0x5e <__vector_22>
  2e:	16 c0       	rjmp	.+44     	; 0x5c <__bad_interrupt>
  30:	26 c0       	rjmp	.+76     	; 0x7e <__vector_24>
  32:	14 c0       	rjmp	.+40     	; 0x5c <__bad_interrupt>
  34:	58 c0       	rjmp	.+176    	; 0xe6 <__vector_26>
  36:	12 c0       	rjmp	.+36     	; 0x5c <__bad_interrupt>
  38:	11 c0       	rjmp	.+34     	; 0x5c <__bad_interrupt>
  3a:	10 c0       	rjmp	.+32     	; 0x5c <__bad_interrupt>

0000003c <__ctors_end>:
  3c:	11 24       	eor	r1, r1
  3e:	1f be       	out	0x3f, r1	; 63
  40:	cf ef       	ldi	r28, 0xFF	; 255
  42:	d1 e0       	ldi	r29, 0x01	; 1
  44:	de bf       	out	0x3e, r29	; 62
  46:	cd bf       	out	0x3d, r28	; 61

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	a0 e0       	ldi	r26, 0x00	; 0
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 34       	cpi	r26, 0x44	; 68
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	b0 d0       	rcall	.+352    	; 0x1ba <main>
  5a:	ce c0       	rjmp	.+412    	; 0x1f8 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_22>:
volatile bool u1rx = false;
volatile uint8_t destAddr;
volatile uint8_t rxIdx, txIdx;

ISR (USART0_RX_vect) //Data from RS485
{
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	8f 93       	push	r24
	UDR1 = UDR0; //Retransmit received byte directly because RS485 is slower than RasPi
  6a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
  6e:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__EEPROM_REGION_LENGTH__+0x7f0090>
}
  72:	8f 91       	pop	r24
  74:	0f 90       	pop	r0
  76:	0f be       	out	0x3f, r0	; 63
  78:	0f 90       	pop	r0
  7a:	1f 90       	pop	r1
  7c:	18 95       	reti

0000007e <__vector_24>:

ISR (USART0_TX_vect) //Data into RS485
{
  7e:	1f 92       	push	r1
  80:	0f 92       	push	r0
  82:	0f b6       	in	r0, 0x3f	; 63
  84:	0f 92       	push	r0
  86:	11 24       	eor	r1, r1
  88:	8f 93       	push	r24
  8a:	9f 93       	push	r25
  8c:	ef 93       	push	r30
  8e:	ff 93       	push	r31
	if (UCSR0B & (1 << TXB80)) //Address has been transmitted
  90:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
  94:	80 ff       	sbrs	r24, 0
  96:	0c c0       	rjmp	.+24     	; 0xb0 <__vector_24+0x32>
	{
		UCSR0B &= ~(1 << TXB80); //Clear 9th bit
  98:	e5 e8       	ldi	r30, 0x85	; 133
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	8e 7f       	andi	r24, 0xFE	; 254
  a0:	80 83       	st	Z, r24
		if ((destAddr & 0x0F) != 3) //Lower nibble equals 3: set config
  a2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <destAddr>
  a6:	8f 70       	andi	r24, 0x0F	; 15
  a8:	83 30       	cpi	r24, 0x03	; 3
  aa:	a1 f0       	breq	.+40     	; 0xd4 <__vector_24+0x56>
			U0RXen(); //Enable receiver (we will receive some data)
  ac:	db 98       	cbi	0x1b, 3	; 27
  ae:	12 c0       	rjmp	.+36     	; 0xd4 <__vector_24+0x56>
	}
	else if (txIdx < rxIdx) //Transmit data from RasPi
  b0:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
  b4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <rxIdx>
  b8:	98 17       	cp	r25, r24
  ba:	60 f4       	brcc	.+24     	; 0xd4 <__vector_24+0x56>
		UDR0 = uBuf[txIdx++];
  bc:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	8e 0f       	add	r24, r30
  c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	ec 5f       	subi	r30, 0xFC	; 252
  cc:	fe 4f       	sbci	r31, 0xFE	; 254
  ce:	80 81       	ld	r24, Z
  d0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
}
  d4:	ff 91       	pop	r31
  d6:	ef 91       	pop	r30
  d8:	9f 91       	pop	r25
  da:	8f 91       	pop	r24
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <__vector_26>:

ISR (USART1_RX_vect) //Data from RasPi
{
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
  f4:	ef 93       	push	r30
  f6:	ff 93       	push	r31
	if (!u1rx)
  f8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <u1rx>
  fc:	81 11       	cpse	r24, r1
  fe:	23 c0       	rjmp	.+70     	; 0x146 <__vector_26+0x60>
	{
		destAddr = UDR1;
 100:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__EEPROM_REGION_LENGTH__+0x7f0090>
 104:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <destAddr>
		U0TXen();
 108:	db 9a       	sbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	8a 95       	dec	r24
 10e:	f1 f7       	brne	.-4      	; 0x10c <__vector_26+0x26>
 110:	00 c0       	rjmp	.+0      	; 0x112 <__vector_26+0x2c>
		_delay_us(2);
		UCSR0B |= (1 << TXB80);
 112:	e5 e8       	ldi	r30, 0x85	; 133
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	81 60       	ori	r24, 0x01	; 1
 11a:	80 83       	st	Z, r24
		UDR0 = destAddr; //Send address over RS485
 11c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <destAddr>
 120:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
		if ((destAddr & 0x0F) == 3) //Lower nibble equals 3: set config
 124:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <destAddr>
 128:	8f 70       	andi	r24, 0x0F	; 15
 12a:	83 30       	cpi	r24, 0x03	; 3
 12c:	79 f5       	brne	.+94     	; 0x18c <__vector_26+0xa6>
		{
			u1rx = true;
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <u1rx>
			txIdx = rxIdx = 0; //We will receive other data from RasPi and send it over RS485
 134:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <rxIdx>
 138:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			TCNT0 = 0;
 13c:	12 be       	out	0x32, r1	; 50
			TIFR0 = (1 << OCF0B);
 13e:	84 e0       	ldi	r24, 0x04	; 4
 140:	88 bf       	out	0x38, r24	; 56
			TIMSK0 = (1 << OCIE0B);
 142:	89 bf       	out	0x39, r24	; 57
 144:	23 c0       	rjmp	.+70     	; 0x18c <__vector_26+0xa6>
		}
	}
	else
	{
		TCNT0 = 0;
 146:	12 be       	out	0x32, r1	; 50
		uBuf[rxIdx++] = UDR1;
 148:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <rxIdx>
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	8e 0f       	add	r24, r30
 150:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <rxIdx>
 154:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__EEPROM_REGION_LENGTH__+0x7f0090>
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	ec 5f       	subi	r30, 0xFC	; 252
 15c:	fe 4f       	sbci	r31, 0xFE	; 254
 15e:	80 83       	st	Z, r24
		if ((UCSR0A & (1 << UDRE0)) && txIdx < rxIdx)
 160:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
 164:	85 ff       	sbrs	r24, 5
 166:	12 c0       	rjmp	.+36     	; 0x18c <__vector_26+0xa6>
 168:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 16c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <rxIdx>
 170:	98 17       	cp	r25, r24
 172:	60 f4       	brcc	.+24     	; 0x18c <__vector_26+0xa6>
			UDR0 = uBuf[txIdx++];
 174:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	8e 0f       	add	r24, r30
 17c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	ec 5f       	subi	r30, 0xFC	; 252
 184:	fe 4f       	sbci	r31, 0xFE	; 254
 186:	80 81       	ld	r24, Z
 188:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
	}
}
 18c:	ff 91       	pop	r31
 18e:	ef 91       	pop	r30
 190:	9f 91       	pop	r25
 192:	8f 91       	pop	r24
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <__vector_10>:

ISR (TIMER0_COMPB_vect) //2.66ms timeout
{
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
	TIMSK0 = 0;
 1a8:	19 be       	out	0x39, r1	; 57
	u1rx = false; //Receiving from RasPi was finished
 1aa:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <u1rx>
	U0RXen(); //Enable receiver (set bus into idle mode)
 1ae:	db 98       	cbi	0x1b, 3	; 27
}
 1b0:	0f 90       	pop	r0
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	0f 90       	pop	r0
 1b6:	1f 90       	pop	r1
 1b8:	18 95       	reti

000001ba <main>:

inline void mcuInit()
{
	cli();
 1ba:	f8 94       	cli
	//Port A outputs: U0TX, U0EN, U1TX
	DDRA = (1 << DDA1) | (1 << DDA3) | (1 << DDA5);
 1bc:	8a e2       	ldi	r24, 0x2A	; 42
 1be:	8a bb       	out	0x1a, r24	; 26
	//USART 0: 76.8kbps, frame bits: start / 9 data / 2 stop, multi-processor communication
	UBRR0 = 2; //Actual maximum transfer rate: 6400Bps
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <__EEPROM_REGION_LENGTH__+0x7f0082>
 1c8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
	UCSR0B = (1 << RXCIE0) | (1 << TXCIE0) | (1 << RXEN0) | (1 << TXEN0) | (1 << UCSZ02); //Interrupts enabled
 1cc:	2c ed       	ldi	r18, 0xDC	; 220
 1ce:	20 93 85 00 	sts	0x0085, r18	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
	UCSR0C = (1 << USBS0) | (1 << UCSZ01) | (1 << UCSZ00);
 1d2:	2e e0       	ldi	r18, 0x0E	; 14
 1d4:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
	//USART 1: 76.8kbps, frame bits: start / 8 data / no parity / 1 stop
	UBRR1 = 2; //Actual maximum transfer rate: 7680Bps
 1d8:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <__EEPROM_REGION_LENGTH__+0x7f0092>
 1dc:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__EEPROM_REGION_LENGTH__+0x7f0091>
	UCSR1B = (1 << RXCIE1) | (1 << RXEN1) | (1 << TXEN1); //RX interrupt enabled
 1e0:	88 e9       	ldi	r24, 0x98	; 152
 1e2:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__EEPROM_REGION_LENGTH__+0x7f0095>
	//Timer 0: 57.6kHz clock
	TCCR0B = (1 << CS01) | (1 << CS00); //~17.36µs tick
 1e6:	83 e0       	ldi	r24, 0x03	; 3
 1e8:	83 bf       	out	0x33, r24	; 51
	OCR0B = 154; //~2.66ms timeout
 1ea:	8a e9       	ldi	r24, 0x9A	; 154
 1ec:	8c bf       	out	0x3c, r24	; 60
	//Power reduction
	PRR = (1 << PRTWI) | (1 << PRSPI) | (1 << PRTIM1) | (1 << PRTIM2) | (1 << PRADC);
 1ee:	8d e9       	ldi	r24, 0x9D	; 157
 1f0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__EEPROM_REGION_LENGTH__+0x7f0070>
	sei();
 1f4:	78 94       	sei
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <main+0x3c>

000001f8 <_exit>:
 1f8:	f8 94       	cli

000001fa <__stop_program>:
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <__stop_program>
