
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001444  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00001531  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000016e  00802000  00802000  000014d8  2**0
                  ALLOC
  3 .eeprom       00000059  00810000  00810000  000014d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00001531  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001564  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000100  00000000  00000000  000015a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000053be  00000000  00000000  000016a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001f3b  00000000  00000000  00006a66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000ed1  00000000  00000000  000089a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000028c  00000000  00000000  00009874  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003cfa  00000000  00000000  00009b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000fe7  00000000  00000000  0000d7fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000158  00000000  00000000  0000e7e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 57 00 	jmp	0xae	; 0xae <__ctors_end>
       4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      10:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__vector_4>
      14:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      18:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      1c:	0c 94 b8 01 	jmp	0x370	; 0x370 <__vector_7>
      20:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      24:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      28:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      2c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      30:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      34:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      38:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      3c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      40:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      44:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      48:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      4c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      50:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      54:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      58:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      5c:	0c 94 ce 07 	jmp	0xf9c	; 0xf9c <__vector_23>
      60:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      68:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      6c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      70:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      74:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      78:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      7c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      80:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      84:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      88:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <__vector_34>
      8c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      90:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      94:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      98:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      9c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      a0:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      a4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      a8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>

000000ac <__ctors_start>:
      ac:	6b 09       	sbc	r22, r11

000000ae <__ctors_end>:
      ae:	11 24       	eor	r1, r1
      b0:	1f be       	out	0x3f, r1	; 63
      b2:	cf ef       	ldi	r28, 0xFF	; 255
      b4:	cd bf       	out	0x3d, r28	; 61
      b6:	d7 e2       	ldi	r29, 0x27	; 39
      b8:	de bf       	out	0x3e, r29	; 62

000000ba <__do_clear_bss>:
      ba:	21 e2       	ldi	r18, 0x21	; 33
      bc:	a0 e0       	ldi	r26, 0x00	; 0
      be:	b0 e2       	ldi	r27, 0x20	; 32
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	ae 36       	cpi	r26, 0x6E	; 110
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>

000000ca <__do_global_ctors>:
      ca:	10 e0       	ldi	r17, 0x00	; 0
      cc:	c7 e5       	ldi	r28, 0x57	; 87
      ce:	d0 e0       	ldi	r29, 0x00	; 0
      d0:	04 c0       	rjmp	.+8      	; 0xda <__do_global_ctors+0x10>
      d2:	21 97       	sbiw	r28, 0x01	; 1
      d4:	fe 01       	movw	r30, r28
      d6:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__tablejump2__>
      da:	c6 35       	cpi	r28, 0x56	; 86
      dc:	d1 07       	cpc	r29, r17
      de:	c9 f7       	brne	.-14     	; 0xd2 <__do_global_ctors+0x8>
      e0:	0e 94 4c 09 	call	0x1298	; 0x1298 <main>
      e4:	0c 94 20 0a 	jmp	0x1440	; 0x1440 <_exit>

000000e8 <__bad_interrupt>:
      e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ec <_Z14CalculateCRC16Pvh>:
}

uint16_t CalculateCRC16(void *arr, uint8_t count)
{
	uint8_t *ptr = (uint8_t*)arr;
	CRC.CTRL |= CRC_RESET_RESET0_gc;
      ec:	e0 ed       	ldi	r30, 0xD0	; 208
      ee:	f0 e0       	ldi	r31, 0x00	; 0
      f0:	20 81       	ld	r18, Z
      f2:	20 68       	ori	r18, 0x80	; 128
      f4:	20 83       	st	Z, r18
	while (--count)
      f6:	61 50       	subi	r22, 0x01	; 1
      f8:	51 f0       	breq	.+20     	; 0x10e <_Z14CalculateCRC16Pvh+0x22>
      fa:	e8 2f       	mov	r30, r24
      fc:	f9 2f       	mov	r31, r25
		CRC.DATAIN = *ptr++;
      fe:	a0 ed       	ldi	r26, 0xD0	; 208
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	81 91       	ld	r24, Z+
     104:	13 96       	adiw	r26, 0x03	; 3
     106:	8c 93       	st	X, r24
     108:	13 97       	sbiw	r26, 0x03	; 3

uint16_t CalculateCRC16(void *arr, uint8_t count)
{
	uint8_t *ptr = (uint8_t*)arr;
	CRC.CTRL |= CRC_RESET_RESET0_gc;
	while (--count)
     10a:	61 50       	subi	r22, 0x01	; 1
     10c:	d1 f7       	brne	.-12     	; 0x102 <_Z14CalculateCRC16Pvh+0x16>
		CRC.DATAIN = *ptr++;
	return ((uint16_t)CRC.CHECKSUM1 << 8) | CRC.CHECKSUM0;
     10e:	e0 ed       	ldi	r30, 0xD0	; 208
     110:	f0 e0       	ldi	r31, 0x00	; 0
     112:	25 81       	ldd	r18, Z+5	; 0x05
     114:	84 81       	ldd	r24, Z+4	; 0x04
     116:	90 e0       	ldi	r25, 0x00	; 0
}
     118:	92 2b       	or	r25, r18
     11a:	08 95       	ret

0000011c <_Z11ApplyConfigv>:

void ApplyConfig()
{
     11c:	2f 92       	push	r2
     11e:	3f 92       	push	r3
     120:	4f 92       	push	r4
     122:	5f 92       	push	r5
     124:	6f 92       	push	r6
     126:	7f 92       	push	r7
     128:	8f 92       	push	r8
     12a:	9f 92       	push	r9
     12c:	af 92       	push	r10
     12e:	bf 92       	push	r11
     130:	cf 92       	push	r12
     132:	df 92       	push	r13
     134:	ef 92       	push	r14
     136:	ff 92       	push	r15
     138:	0f 93       	push	r16
     13a:	1f 93       	push	r17
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
     140:	cd b7       	in	r28, 0x3d	; 61
     142:	de b7       	in	r29, 0x3e	; 62
     144:	25 97       	sbiw	r28, 0x05	; 5
     146:	cd bf       	out	0x3d, r28	; 61
     148:	de bf       	out	0x3e, r29	; 62
	systemConfig *temp = (systemConfig*)iobuf;
	//Both bits 7 are set: one of the on-time counters must be rewritten
	if ((temp->groupConf & 0x80) && (temp->overrideCfg & 0x80))
     14a:	00 91 bc 20 	lds	r16, 0x20BC	; 0x8020bc <iobuf+0x1d>
     14e:	00 23       	and	r16, r16
     150:	24 f5       	brge	.+72     	; 0x19a <_Z11ApplyConfigv+0x7e>
     152:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <iobuf+0x11>
     156:	88 23       	and	r24, r24
     158:	04 f5       	brge	.+64     	; 0x19a <_Z11ApplyConfigv+0x7e>
	{
		uint8_t j = temp->overrideCfg & 0xF; //Update on-time of link
		channelOT.linkOnTime[j] = *((uint32_t*)temp->minLvl);
     15a:	8f 70       	andi	r24, 0x0F	; 15
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	fc 01       	movw	r30, r24
     160:	ee 0f       	add	r30, r30
     162:	ff 1f       	adc	r31, r31
     164:	ee 0f       	add	r30, r30
     166:	ff 1f       	adc	r31, r31
     168:	e9 52       	subi	r30, 0x29	; 41
     16a:	ff 4d       	sbci	r31, 0xDF	; 223
     16c:	af e9       	ldi	r26, 0x9F	; 159
     16e:	b0 e2       	ldi	r27, 0x20	; 32
     170:	4d 91       	ld	r20, X+
     172:	5d 91       	ld	r21, X+
     174:	6d 91       	ld	r22, X+
     176:	7c 91       	ld	r23, X
     178:	13 97       	sbiw	r26, 0x03	; 3
     17a:	40 83       	st	Z, r20
     17c:	51 83       	std	Z+1, r21	; 0x01
     17e:	62 83       	std	Z+2, r22	; 0x02
     180:	73 83       	std	Z+3, r23	; 0x03
		channelOT.linkSwCnt[j] = *((uint16_t*)temp->maxLvl);
     182:	88 0f       	add	r24, r24
     184:	99 1f       	adc	r25, r25
     186:	fc 01       	movw	r30, r24
     188:	e5 50       	subi	r30, 0x05	; 5
     18a:	ff 4d       	sbci	r31, 0xDF	; 223
     18c:	18 96       	adiw	r26, 0x08	; 8
     18e:	8d 91       	ld	r24, X+
     190:	9c 91       	ld	r25, X
     192:	19 97       	sbiw	r26, 0x09	; 9
     194:	80 83       	st	Z, r24
     196:	91 83       	std	Z+1, r25	; 0x01
		return;
     198:	d5 c0       	rjmp	.+426    	; 0x344 <_Z11ApplyConfigv+0x228>
	}
	memcpy(&validConf, iobuf, sizeof(systemConfig));
     19a:	81 e2       	ldi	r24, 0x21	; 33
     19c:	ef e9       	ldi	r30, 0x9F	; 159
     19e:	f0 e2       	ldi	r31, 0x20	; 32
     1a0:	a7 e2       	ldi	r26, 0x27	; 39
     1a2:	b1 e2       	ldi	r27, 0x21	; 33
     1a4:	01 90       	ld	r0, Z+
     1a6:	0d 92       	st	X+, r0
     1a8:	8a 95       	dec	r24
     1aa:	e1 f7       	brne	.-8      	; 0x1a4 <_Z11ApplyConfigv+0x88>
		bool dimInProcess = false;
		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			uint8_t j = _link[i];
			dimInProcess |= (_lvl[i] != gLevels[j]);
			_lvl[i] = validConf.overrideLvl;
     1ac:	90 91 37 21 	lds	r25, 0x2137	; 0x802137 <validConf+0x10>
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
			_tickLastChg = sysState.sysTick;
     1b0:	ef e0       	ldi	r30, 0x0F	; 15
     1b2:	f1 e2       	ldi	r31, 0x21	; 33
     1b4:	a0 80       	ld	r10, Z
     1b6:	b1 80       	ldd	r11, Z+1	; 0x01
     1b8:	c2 80       	ldd	r12, Z+2	; 0x02
     1ba:	d3 80       	ldd	r13, Z+3	; 0x03
     1bc:	e4 80       	ldd	r14, Z+4	; 0x04
     1be:	75 80       	ldd	r7, Z+5	; 0x05
     1c0:	66 80       	ldd	r6, Z+6	; 0x06
     1c2:	27 80       	ldd	r2, Z+7	; 0x07
     1c4:	43 e1       	ldi	r20, 0x13	; 19
     1c6:	50 e2       	ldi	r21, 0x20	; 32
     1c8:	26 e1       	ldi	r18, 0x16	; 22
     1ca:	30 e2       	ldi	r19, 0x20	; 32
     1cc:	0f 2e       	mov	r0, r31
     1ce:	ff e9       	ldi	r31, 0x9F	; 159
     1d0:	4f 2e       	mov	r4, r31
     1d2:	f0 e2       	ldi	r31, 0x20	; 32
     1d4:	5f 2e       	mov	r5, r31
     1d6:	f0 2d       	mov	r31, r0
	void setParams()
	{
		uint8_t pos, min = validConf.fadeRate[_linkNum], max = validConf.linkDelay[_linkNum];
		if (min < 32)
			min = 32;
		_fadeRate = (min > 160) ? 160 : min;
     1d8:	0f 2e       	mov	r0, r31
     1da:	f0 ea       	ldi	r31, 0xA0	; 160
     1dc:	3f 2e       	mov	r3, r31
     1de:	f0 2d       	mov	r31, r0
		_linkDelay = (max > 63) ? 64 : max + 1;
     1e0:	70 e0       	ldi	r23, 0x00	; 0
		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			pos = _link[i];
			min = validConf.minLvl[pos];
			max = validConf.maxLvl[pos];
			_minLvl[i] = (min < 222) ? min + 1 : 223;
     1e2:	0f 2e       	mov	r0, r31
     1e4:	ff ed       	ldi	r31, 0xDF	; 223
     1e6:	ff 2e       	mov	r15, r31
     1e8:	f0 2d       	mov	r31, r0
     1ea:	49 83       	std	Y+1, r20	; 0x01
     1ec:	5a 83       	std	Y+2, r21	; 0x02
     1ee:	9a 2c       	mov	r9, r10
     1f0:	ab 2c       	mov	r10, r11
     1f2:	bc 2c       	mov	r11, r12
     1f4:	82 2c       	mov	r8, r2
     1f6:	3b 82       	std	Y+3, r3	; 0x03
     1f8:	19 01       	movw	r2, r18
     1fa:	29 81       	ldd	r18, Y+1	; 0x01
     1fc:	3a 81       	ldd	r19, Y+2	; 0x02
     1fe:	2c 83       	std	Y+4, r18	; 0x04
     200:	3d 83       	std	Y+5, r19	; 0x05
		_chActMask = 0x10 << num;
	};

	void setParams()
	{
		uint8_t pos, min = validConf.fadeRate[_linkNum], max = validConf.linkDelay[_linkNum];
     202:	d9 01       	movw	r26, r18
     204:	12 96       	adiw	r26, 0x02	; 2
     206:	ec 91       	ld	r30, X
     208:	f0 e0       	ldi	r31, 0x00	; 0
     20a:	e9 5d       	subi	r30, 0xD9	; 217
     20c:	fe 4d       	sbci	r31, 0xDE	; 222
     20e:	82 89       	ldd	r24, Z+18	; 0x12
     210:	26 89       	ldd	r18, Z+22	; 0x16
		if (min < 32)
     212:	80 32       	cpi	r24, 0x20	; 32
     214:	08 f4       	brcc	.+2      	; 0x218 <_Z11ApplyConfigv+0xfc>
			min = 32;
     216:	80 e2       	ldi	r24, 0x20	; 32
		_fadeRate = (min > 160) ? 160 : min;
     218:	81 3a       	cpi	r24, 0xA1	; 161
     21a:	08 f0       	brcs	.+2      	; 0x21e <_Z11ApplyConfigv+0x102>
     21c:	8b 81       	ldd	r24, Y+3	; 0x03
     21e:	ec 81       	ldd	r30, Y+4	; 0x04
     220:	fd 81       	ldd	r31, Y+5	; 0x05
     222:	87 87       	std	Z+15, r24	; 0x0f
		_linkDelay = (max > 63) ? 64 : max + 1;
     224:	20 34       	cpi	r18, 0x40	; 64
     226:	20 f4       	brcc	.+8      	; 0x230 <_Z11ApplyConfigv+0x114>
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	2f 5f       	subi	r18, 0xFF	; 255
     22c:	3f 4f       	sbci	r19, 0xFF	; 255
     22e:	02 c0       	rjmp	.+4      	; 0x234 <_Z11ApplyConfigv+0x118>
     230:	20 e4       	ldi	r18, 0x40	; 64
     232:	37 2f       	mov	r19, r23
     234:	ac 81       	ldd	r26, Y+4	; 0x04
     236:	bd 81       	ldd	r27, Y+5	; 0x05
     238:	50 96       	adiw	r26, 0x10	; 16
     23a:	2d 93       	st	X+, r18
     23c:	3c 93       	st	X, r19
     23e:	51 97       	sbiw	r26, 0x11	; 17
		for (uint8_t i = 0; i < _linkCnt; i++)
     240:	11 96       	adiw	r26, 0x01	; 1
     242:	8c 91       	ld	r24, X
     244:	88 23       	and	r24, r24
     246:	e9 f1       	breq	.+122    	; 0x2c2 <_Z11ApplyConfigv+0x1a6>
     248:	d1 01       	movw	r26, r2
     24a:	30 e0       	ldi	r19, 0x00	; 0
		{
			pos = _link[i];
     24c:	ed 91       	ld	r30, X+
			min = validConf.minLvl[pos];
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	e9 5d       	subi	r30, 0xD9	; 217
     252:	fe 4d       	sbci	r31, 0xDE	; 222
     254:	20 81       	ld	r18, Z
			max = validConf.maxLvl[pos];
     256:	40 85       	ldd	r20, Z+8	; 0x08
			_minLvl[i] = (min < 222) ? min + 1 : 223;
     258:	2e 3d       	cpi	r18, 0xDE	; 222
     25a:	10 f4       	brcc	.+4      	; 0x260 <_Z11ApplyConfigv+0x144>
     25c:	2f 5f       	subi	r18, 0xFF	; 255
     25e:	01 c0       	rjmp	.+2      	; 0x262 <_Z11ApplyConfigv+0x146>
     260:	2f 2d       	mov	r18, r15
     262:	fd 01       	movw	r30, r26
     264:	15 96       	adiw	r26, 0x05	; 5
     266:	2c 93       	st	X, r18
     268:	15 97       	sbiw	r26, 0x05	; 5
			_difLvl[i] = max;
			if (max > _minLvl[i])
     26a:	24 17       	cp	r18, r20
     26c:	20 f0       	brcs	.+8      	; 0x276 <_Z11ApplyConfigv+0x15a>
		{
			pos = _link[i];
			min = validConf.minLvl[pos];
			max = validConf.maxLvl[pos];
			_minLvl[i] = (min < 222) ? min + 1 : 223;
			_difLvl[i] = max;
     26e:	18 96       	adiw	r26, 0x08	; 8
     270:	4c 93       	st	X, r20
     272:	18 97       	sbiw	r26, 0x08	; 8
     274:	05 c0       	rjmp	.+10     	; 0x280 <_Z11ApplyConfigv+0x164>
			if (max > _minLvl[i])
			{
				max -= _minLvl[i];
				_difLvl[i] = (max >= 32) ? max : 32;
     276:	42 1b       	sub	r20, r18
     278:	40 32       	cpi	r20, 0x20	; 32
     27a:	08 f4       	brcc	.+2      	; 0x27e <_Z11ApplyConfigv+0x162>
     27c:	40 e2       	ldi	r20, 0x20	; 32
     27e:	40 87       	std	Z+8, r20	; 0x08
		uint8_t pos, min = validConf.fadeRate[_linkNum], max = validConf.linkDelay[_linkNum];
		if (min < 32)
			min = 32;
		_fadeRate = (min > 160) ? 160 : min;
		_linkDelay = (max > 63) ? 64 : max + 1;
		for (uint8_t i = 0; i < _linkCnt; i++)
     280:	3f 5f       	subi	r19, 0xFF	; 255
     282:	38 13       	cpse	r19, r24
     284:	e3 cf       	rjmp	.-58     	; 0x24c <_Z11ApplyConfigv+0x130>
     286:	d1 01       	movw	r26, r2
     288:	c1 2c       	mov	r12, r1
     28a:	60 e0       	ldi	r22, 0x00	; 0
	void overrideCheck()
	{
		bool dimInProcess = false;
		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			uint8_t j = _link[i];
     28c:	ed 91       	ld	r30, X+
     28e:	ad 01       	movw	r20, r26
			dimInProcess |= (_lvl[i] != gLevels[j]);
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	ee 0f       	add	r30, r30
     294:	ff 1f       	adc	r31, r31
     296:	e4 5a       	subi	r30, 0xA4	; 164
     298:	fe 4d       	sbci	r31, 0xDE	; 222
     29a:	01 90       	ld	r0, Z+
     29c:	f0 81       	ld	r31, Z
     29e:	e0 2d       	mov	r30, r0
     2a0:	12 96       	adiw	r26, 0x02	; 2
     2a2:	2c 91       	ld	r18, X
     2a4:	12 97       	sbiw	r26, 0x02	; 2
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	11 e0       	ldi	r17, 0x01	; 1
     2aa:	2e 17       	cp	r18, r30
     2ac:	3f 07       	cpc	r19, r31
     2ae:	09 f4       	brne	.+2      	; 0x2b2 <_Z11ApplyConfigv+0x196>
     2b0:	10 e0       	ldi	r17, 0x00	; 0
     2b2:	c1 2a       	or	r12, r17
			_lvl[i] = validConf.overrideLvl;
     2b4:	fa 01       	movw	r30, r20
     2b6:	92 83       	std	Z+2, r25	; 0x02
	}

	void overrideCheck()
	{
		bool dimInProcess = false;
		for (uint8_t i = 0; i < _linkCnt; i++)
     2b8:	6f 5f       	subi	r22, 0xFF	; 255
     2ba:	68 13       	cpse	r22, r24
     2bc:	e7 cf       	rjmp	.-50     	; 0x28c <_Z11ApplyConfigv+0x170>
		{
			uint8_t j = _link[i];
			dimInProcess |= (_lvl[i] != gLevels[j]);
			_lvl[i] = validConf.overrideLvl;
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     2be:	c1 10       	cpse	r12, r1
     2c0:	19 c0       	rjmp	.+50     	; 0x2f4 <_Z11ApplyConfigv+0x1d8>
			_tickLastChg = sysState.sysTick;
     2c2:	ac 81       	ldd	r26, Y+4	; 0x04
     2c4:	bd 81       	ldd	r27, Y+5	; 0x05
     2c6:	53 96       	adiw	r26, 0x13	; 19
     2c8:	9c 92       	st	X, r9
     2ca:	53 97       	sbiw	r26, 0x13	; 19
     2cc:	54 96       	adiw	r26, 0x14	; 20
     2ce:	ac 92       	st	X, r10
     2d0:	54 97       	sbiw	r26, 0x14	; 20
     2d2:	55 96       	adiw	r26, 0x15	; 21
     2d4:	bc 92       	st	X, r11
     2d6:	55 97       	sbiw	r26, 0x15	; 21
     2d8:	56 96       	adiw	r26, 0x16	; 22
     2da:	dc 92       	st	X, r13
     2dc:	56 97       	sbiw	r26, 0x16	; 22
     2de:	57 96       	adiw	r26, 0x17	; 23
     2e0:	ec 92       	st	X, r14
     2e2:	57 97       	sbiw	r26, 0x17	; 23
     2e4:	58 96       	adiw	r26, 0x18	; 24
     2e6:	7c 92       	st	X, r7
     2e8:	58 97       	sbiw	r26, 0x18	; 24
     2ea:	59 96       	adiw	r26, 0x19	; 25
     2ec:	6c 92       	st	X, r6
     2ee:	59 97       	sbiw	r26, 0x19	; 25
     2f0:	5a 96       	adiw	r26, 0x1a	; 26
     2f2:	8c 92       	st	X, r8
     2f4:	e9 81       	ldd	r30, Y+1	; 0x01
     2f6:	fa 81       	ldd	r31, Y+2	; 0x02
     2f8:	b3 96       	adiw	r30, 0x23	; 35
     2fa:	e9 83       	std	Y+1, r30	; 0x01
     2fc:	fa 83       	std	Y+2, r31	; 0x02
     2fe:	f3 e2       	ldi	r31, 0x23	; 35
     300:	2f 0e       	add	r2, r31
     302:	31 1c       	adc	r3, r1
		channelOT.linkOnTime[j] = *((uint32_t*)temp->minLvl);
		channelOT.linkSwCnt[j] = *((uint16_t*)temp->maxLvl);
		return;
	}
	memcpy(&validConf, iobuf, sizeof(systemConfig));
	for (uint8_t i = 0; i < 4; i++)
     304:	29 81       	ldd	r18, Y+1	; 0x01
     306:	3a 81       	ldd	r19, Y+2	; 0x02
     308:	24 15       	cp	r18, r4
     30a:	35 05       	cpc	r19, r5
     30c:	09 f0       	breq	.+2      	; 0x310 <_Z11ApplyConfigv+0x1f4>
     30e:	75 cf       	rjmp	.-278    	; 0x1fa <_Z11ApplyConfigv+0xde>
	{
		_linkNum = actLink;
	};
	void setParams()
	{
		_onTime = validConf.msenOnTime > 5 ? validConf.msenOnTime : 6;
     310:	80 91 41 21 	lds	r24, 0x2141	; 0x802141 <validConf+0x1a>
     314:	86 30       	cpi	r24, 0x06	; 6
     316:	08 f4       	brcc	.+2      	; 0x31a <_Z11ApplyConfigv+0x1fe>
     318:	86 e0       	ldi	r24, 0x06	; 6
     31a:	e5 e0       	ldi	r30, 0x05	; 5
     31c:	f0 e2       	ldi	r31, 0x20	; 32
     31e:	84 83       	std	Z+4, r24	; 0x04
		_fTime = _onTime + validConf.msenLowTime;
     320:	90 91 42 21 	lds	r25, 0x2142	; 0x802142 <validConf+0x1b>
     324:	89 0f       	add	r24, r25
     326:	85 83       	std	Z+5, r24	; 0x05
	{
		links[i].setParams();
		links[i].overrideCheck();
	}
	msenCh.setParams();
	if (validConf.groupConf & 0x08) //Bit 3 is set: save config to EEPROM
     328:	03 ff       	sbrs	r16, 3
     32a:	08 c0       	rjmp	.+16     	; 0x33c <_Z11ApplyConfigv+0x220>
		eeprom_update_block(&validConf, &savedConfig, sizeof(systemConfig));
     32c:	41 e2       	ldi	r20, 0x21	; 33
     32e:	50 e0       	ldi	r21, 0x00	; 0
     330:	60 e0       	ldi	r22, 0x00	; 0
     332:	70 e0       	ldi	r23, 0x00	; 0
     334:	87 e2       	ldi	r24, 0x27	; 39
     336:	91 e2       	ldi	r25, 0x21	; 33
     338:	0e 94 de 09 	call	0x13bc	; 0x13bc <eeprom_update_block>
	RTC.CALIB = validConf.rtcCorrect;
     33c:	80 91 45 21 	lds	r24, 0x2145	; 0x802145 <validConf+0x1e>
     340:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
}
     344:	25 96       	adiw	r28, 0x05	; 5
     346:	cd bf       	out	0x3d, r28	; 61
     348:	de bf       	out	0x3e, r29	; 62
     34a:	df 91       	pop	r29
     34c:	cf 91       	pop	r28
     34e:	1f 91       	pop	r17
     350:	0f 91       	pop	r16
     352:	ff 90       	pop	r15
     354:	ef 90       	pop	r14
     356:	df 90       	pop	r13
     358:	cf 90       	pop	r12
     35a:	bf 90       	pop	r11
     35c:	af 90       	pop	r10
     35e:	9f 90       	pop	r9
     360:	8f 90       	pop	r8
     362:	7f 90       	pop	r7
     364:	6f 90       	pop	r6
     366:	5f 90       	pop	r5
     368:	4f 90       	pop	r4
     36a:	3f 90       	pop	r3
     36c:	2f 90       	pop	r2
     36e:	08 95       	ret

00000370 <__vector_7>:

ISR(RTC_OVF_vect)
{
     370:	1f 92       	push	r1
     372:	0f 92       	push	r0
     374:	0f b6       	in	r0, 0x3f	; 63
     376:	0f 92       	push	r0
     378:	11 24       	eor	r1, r1
     37a:	2f 92       	push	r2
     37c:	3f 92       	push	r3
     37e:	4f 92       	push	r4
     380:	5f 92       	push	r5
     382:	6f 92       	push	r6
     384:	7f 92       	push	r7
     386:	8f 92       	push	r8
     388:	9f 92       	push	r9
     38a:	af 92       	push	r10
     38c:	bf 92       	push	r11
     38e:	cf 92       	push	r12
     390:	df 92       	push	r13
     392:	ef 92       	push	r14
     394:	ff 92       	push	r15
     396:	0f 93       	push	r16
     398:	1f 93       	push	r17
     39a:	2f 93       	push	r18
     39c:	3f 93       	push	r19
     39e:	4f 93       	push	r20
     3a0:	5f 93       	push	r21
     3a2:	6f 93       	push	r22
     3a4:	7f 93       	push	r23
     3a6:	8f 93       	push	r24
     3a8:	9f 93       	push	r25
     3aa:	af 93       	push	r26
     3ac:	bf 93       	push	r27
     3ae:	ef 93       	push	r30
     3b0:	ff 93       	push	r31
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	cd b7       	in	r28, 0x3d	; 61
     3b8:	de b7       	in	r29, 0x3e	; 62
     3ba:	2c 97       	sbiw	r28, 0x0c	; 12
     3bc:	cd bf       	out	0x3d, r28	; 61
     3be:	de bf       	out	0x3e, r29	; 62
	sysState.sysTick++;
     3c0:	ef e0       	ldi	r30, 0x0F	; 15
     3c2:	f1 e2       	ldi	r31, 0x21	; 33
     3c4:	20 81       	ld	r18, Z
     3c6:	31 81       	ldd	r19, Z+1	; 0x01
     3c8:	42 81       	ldd	r20, Z+2	; 0x02
     3ca:	53 81       	ldd	r21, Z+3	; 0x03
     3cc:	64 81       	ldd	r22, Z+4	; 0x04
     3ce:	75 81       	ldd	r23, Z+5	; 0x05
     3d0:	86 81       	ldd	r24, Z+6	; 0x06
     3d2:	97 81       	ldd	r25, Z+7	; 0x07
     3d4:	a1 e0       	ldi	r26, 0x01	; 1
     3d6:	0e 94 b4 09 	call	0x1368	; 0x1368 <__adddi3_s8>
     3da:	20 83       	st	Z, r18
     3dc:	31 83       	std	Z+1, r19	; 0x01
     3de:	42 83       	std	Z+2, r20	; 0x02
     3e0:	53 83       	std	Z+3, r21	; 0x03
     3e2:	64 83       	std	Z+4, r22	; 0x04
     3e4:	75 83       	std	Z+5, r23	; 0x05
     3e6:	86 83       	std	Z+6, r24	; 0x06
     3e8:	97 83       	std	Z+7, r25	; 0x07
     3ea:	0f 2e       	mov	r0, r31
     3ec:	f3 e1       	ldi	r31, 0x13	; 19
     3ee:	2f 2e       	mov	r2, r31
     3f0:	f0 e2       	ldi	r31, 0x20	; 32
     3f2:	3f 2e       	mov	r3, r31
     3f4:	f0 2d       	mov	r31, r0
     3f6:	81 2c       	mov	r8, r1
     3f8:	91 2c       	mov	r9, r1
     3fa:	f1 01       	movw	r30, r2
			_tickLastChg = sysState.sysTick;
	}

	void updateLevel()
	{
		int16_t ticksEl = (int16_t)(sysState.sysTick - _tickLastChg); //Elapsed ticks since beginning of dim
     3fc:	af e0       	ldi	r26, 0x0F	; 15
     3fe:	b1 e2       	ldi	r27, 0x21	; 33
     400:	ed 90       	ld	r14, X+
     402:	fc 90       	ld	r15, X
     404:	83 89       	ldd	r24, Z+19	; 0x13
     406:	94 89       	ldd	r25, Z+20	; 0x14
     408:	e8 1a       	sub	r14, r24
     40a:	f9 0a       	sbc	r15, r25
		int16_t delta = (((ticksEl + 1) * _fadeRate) >> 5) - ((ticksEl * _fadeRate) >> 5); //Number of steps
     40c:	47 85       	ldd	r20, Z+15	; 0x0f
     40e:	50 e0       	ldi	r21, 0x00	; 0
     410:	b7 01       	movw	r22, r14
     412:	6f 5f       	subi	r22, 0xFF	; 255
     414:	7f 4f       	sbci	r23, 0xFF	; 255
     416:	64 9f       	mul	r22, r20
     418:	c0 01       	movw	r24, r0
     41a:	65 9f       	mul	r22, r21
     41c:	90 0d       	add	r25, r0
     41e:	74 9f       	mul	r23, r20
     420:	90 0d       	add	r25, r0
     422:	11 24       	eor	r1, r1
     424:	6c 01       	movw	r12, r24
     426:	d5 94       	asr	r13
     428:	c7 94       	ror	r12
     42a:	d5 94       	asr	r13
     42c:	c7 94       	ror	r12
     42e:	d5 94       	asr	r13
     430:	c7 94       	ror	r12
     432:	d5 94       	asr	r13
     434:	c7 94       	ror	r12
     436:	d5 94       	asr	r13
     438:	c7 94       	ror	r12
     43a:	84 1b       	sub	r24, r20
     43c:	95 0b       	sbc	r25, r21
     43e:	95 95       	asr	r25
     440:	87 95       	ror	r24
     442:	95 95       	asr	r25
     444:	87 95       	ror	r24
     446:	95 95       	asr	r25
     448:	87 95       	ror	r24
     44a:	95 95       	asr	r25
     44c:	87 95       	ror	r24
     44e:	95 95       	asr	r25
     450:	87 95       	ror	r24
     452:	c8 1a       	sub	r12, r24
     454:	d9 0a       	sbc	r13, r25
		PORTC.OUTCLR = _chActMask;
     456:	82 89       	ldd	r24, Z+18	; 0x12
     458:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
		for (int8_t i = 0; i < _linkCnt; i++)
     45c:	81 81       	ldd	r24, Z+1	; 0x01
     45e:	88 23       	and	r24, r24
     460:	09 f4       	brne	.+2      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     462:	f7 c0       	rjmp	.+494    	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
     464:	60 e0       	ldi	r22, 0x00	; 0
     466:	70 e0       	ldi	r23, 0x00	; 0
     468:	b1 2c       	mov	r11, r1
		{
			uint8_t s = _dir ? i : _linkCnt - i - 1; //Direction '1' means forward
			uint8_t j = _link[s];
     46a:	93 e2       	ldi	r25, 0x23	; 35
     46c:	98 9d       	mul	r25, r8
     46e:	d0 01       	movw	r26, r0
     470:	99 9d       	mul	r25, r9
     472:	b0 0d       	add	r27, r0
     474:	11 24       	eor	r1, r1
     476:	ad 5e       	subi	r26, 0xED	; 237
     478:	bf 4d       	sbci	r27, 0xDF	; 223
						trfReq = true;
					}
				}
				else //Level needs to be raised
				{
					tempLvl += ((-tempLvl > delta) ? delta : -tempLvl) + (int16_t)_lvl[s];
     47a:	c9 82       	std	Y+1, r12	; 0x01
     47c:	da 82       	std	Y+2, r13	; 0x02
     47e:	ad 83       	std	Y+5, r26	; 0x05
     480:	be 83       	std	Y+6, r27	; 0x06
		int16_t ticksEl = (int16_t)(sysState.sysTick - _tickLastChg); //Elapsed ticks since beginning of dim
		int16_t delta = (((ticksEl + 1) * _fadeRate) >> 5) - ((ticksEl * _fadeRate) >> 5); //Number of steps
		PORTC.OUTCLR = _chActMask;
		for (int8_t i = 0; i < _linkCnt; i++)
		{
			uint8_t s = _dir ? i : _linkCnt - i - 1; //Direction '1' means forward
     482:	90 81       	ld	r25, Z
     484:	99 23       	and	r25, r25
     486:	11 f0       	breq	.+4      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     488:	8b 2d       	mov	r24, r11
     48a:	03 c0       	rjmp	.+6      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     48c:	9b 2d       	mov	r25, r11
     48e:	90 95       	com	r25
     490:	89 0f       	add	r24, r25
			uint8_t j = _link[s];
     492:	0d 81       	ldd	r16, Y+5	; 0x05
     494:	1e 81       	ldd	r17, Y+6	; 0x06
     496:	08 0f       	add	r16, r24
     498:	11 1d       	adc	r17, r1
			int16_t tempLvl = gLevels[j];
     49a:	d8 01       	movw	r26, r16
     49c:	13 96       	adiw	r26, 0x03	; 3
     49e:	ac 90       	ld	r10, X
     4a0:	4a 2d       	mov	r20, r10
     4a2:	50 e0       	ldi	r21, 0x00	; 0
     4a4:	ca 01       	movw	r24, r20
     4a6:	88 0f       	add	r24, r24
     4a8:	99 1f       	adc	r25, r25
     4aa:	84 5a       	subi	r24, 0xA4	; 164
     4ac:	9e 4d       	sbci	r25, 0xDE	; 222
     4ae:	dc 01       	movw	r26, r24
     4b0:	8d 91       	ld	r24, X+
     4b2:	9c 91       	ld	r25, X
			tempLvl -= _lvl[s]; //Difference between actual and set levels
     4b4:	d8 01       	movw	r26, r16
     4b6:	16 96       	adiw	r26, 0x06	; 6
     4b8:	2c 91       	ld	r18, X
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	82 1b       	sub	r24, r18
     4be:	93 0b       	sbc	r25, r19
			if (tempLvl && ticksEl > i * _linkDelay)
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
     4c2:	bb c0       	rjmp	.+374    	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
     4c4:	00 89       	ldd	r16, Z+16	; 0x10
     4c6:	11 89       	ldd	r17, Z+17	; 0x11
     4c8:	60 9f       	mul	r22, r16
     4ca:	30 01       	movw	r6, r0
     4cc:	61 9f       	mul	r22, r17
     4ce:	70 0c       	add	r7, r0
     4d0:	70 9f       	mul	r23, r16
     4d2:	70 0c       	add	r7, r0
     4d4:	11 24       	eor	r1, r1
     4d6:	6e 14       	cp	r6, r14
     4d8:	7f 04       	cpc	r7, r15
     4da:	0c f0       	brlt	.+2      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     4dc:	ae c0       	rjmp	.+348    	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
			{
				bool trfReq = -2 < tempLvl || tempLvl > 2;
     4de:	11 e0       	ldi	r17, 0x01	; 1
     4e0:	8f 3f       	cpi	r24, 0xFF	; 255
     4e2:	bf ef       	ldi	r27, 0xFF	; 255
     4e4:	9b 07       	cpc	r25, r27
     4e6:	0c f4       	brge	.+2      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     4e8:	10 e0       	ldi	r17, 0x00	; 0
				if (tempLvl > 0) //Level needs to be lowered
     4ea:	18 16       	cp	r1, r24
     4ec:	19 06       	cpc	r1, r25
     4ee:	0c f0       	brlt	.+2      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     4f0:	56 c0       	rjmp	.+172    	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
				{
					tempLvl -= ((tempLvl > delta) ? delta : tempLvl) - (int16_t)_lvl[s];
     4f2:	69 81       	ldd	r22, Y+1	; 0x01
     4f4:	7a 81       	ldd	r23, Y+2	; 0x02
     4f6:	8c 15       	cp	r24, r12
     4f8:	9d 05       	cpc	r25, r13
     4fa:	0c f4       	brge	.+2      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     4fc:	bc 01       	movw	r22, r24
     4fe:	62 1b       	sub	r22, r18
     500:	73 0b       	sbc	r23, r19
     502:	86 1b       	sub	r24, r22
     504:	97 0b       	sbc	r25, r23
					if (!tempLvl) //Actual level became zero
     506:	09 f0       	breq	.+2      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
     508:	80 c0       	rjmp	.+256    	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
					{
						tempLvl -= (int16_t)_fadeRate << 2; //Subtract 4x fade steps, so off/on delay will be 4s
     50a:	87 85       	ldd	r24, Z+15	; 0x0f
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	88 0f       	add	r24, r24
     510:	99 1f       	adc	r25, r25
     512:	88 0f       	add	r24, r24
     514:	99 1f       	adc	r25, r25
     516:	91 95       	neg	r25
     518:	81 95       	neg	r24
     51a:	91 09       	sbc	r25, r1
						channelOT.linkOnTime[j] += (uint32_t)(sysState.sysTick - _onTimeStamp) >> 5; //Add seconds
     51c:	ba 01       	movw	r22, r20
     51e:	66 0f       	add	r22, r22
     520:	77 1f       	adc	r23, r23
     522:	66 0f       	add	r22, r22
     524:	77 1f       	adc	r23, r23
     526:	69 52       	subi	r22, 0x29	; 41
     528:	7f 4d       	sbci	r23, 0xDF	; 223
     52a:	af e0       	ldi	r26, 0x0F	; 15
     52c:	b1 e2       	ldi	r27, 0x21	; 33
     52e:	0d 91       	ld	r16, X+
     530:	1d 91       	ld	r17, X+
     532:	2d 91       	ld	r18, X+
     534:	3c 91       	ld	r19, X
     536:	43 8c       	ldd	r4, Z+27	; 0x1b
     538:	54 8c       	ldd	r5, Z+28	; 0x1c
     53a:	65 8c       	ldd	r6, Z+29	; 0x1d
     53c:	76 8c       	ldd	r7, Z+30	; 0x1e
     53e:	04 19       	sub	r16, r4
     540:	15 09       	sbc	r17, r5
     542:	26 09       	sbc	r18, r6
     544:	37 09       	sbc	r19, r7
     546:	68 94       	set
     548:	14 f8       	bld	r1, 4
     54a:	36 95       	lsr	r19
     54c:	27 95       	ror	r18
     54e:	17 95       	ror	r17
     550:	07 95       	ror	r16
     552:	16 94       	lsr	r1
     554:	d1 f7       	brne	.-12     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
     556:	db 01       	movw	r26, r22
     558:	4d 90       	ld	r4, X+
     55a:	5d 90       	ld	r5, X+
     55c:	6d 90       	ld	r6, X+
     55e:	7c 90       	ld	r7, X
     560:	13 97       	sbiw	r26, 0x03	; 3
     562:	04 0d       	add	r16, r4
     564:	15 1d       	adc	r17, r5
     566:	26 1d       	adc	r18, r6
     568:	37 1d       	adc	r19, r7
     56a:	0d 93       	st	X+, r16
     56c:	1d 93       	st	X+, r17
     56e:	2d 93       	st	X+, r18
     570:	3c 93       	st	X, r19
     572:	13 97       	sbiw	r26, 0x03	; 3
						channelOT.linkSwCnt[j]++; //Increment switch counter
     574:	ba 01       	movw	r22, r20
     576:	66 0f       	add	r22, r22
     578:	77 1f       	adc	r23, r23
     57a:	65 50       	subi	r22, 0x05	; 5
     57c:	7f 4d       	sbci	r23, 0xDF	; 223
     57e:	db 01       	movw	r26, r22
     580:	2d 91       	ld	r18, X+
     582:	3c 91       	ld	r19, X
     584:	11 97       	sbiw	r26, 0x01	; 1
     586:	2f 5f       	subi	r18, 0xFF	; 255
     588:	3f 4f       	sbci	r19, 0xFF	; 255
     58a:	2d 93       	st	X+, r18
     58c:	3c 93       	st	X, r19
					tempLvl += ((-tempLvl > delta) ? delta : -tempLvl) + (int16_t)_lvl[s];
					trfReq &= tempLvl > 0;
					if (!gLevels[j]) //Lamp has been switched on - remember ticks
						_onTimeStamp = sysState.sysTick;
				}
				gLevels[j] = tempLvl;
     58e:	44 0f       	add	r20, r20
     590:	55 1f       	adc	r21, r21
     592:	44 5a       	subi	r20, 0xA4	; 164
     594:	5e 4d       	sbci	r21, 0xDE	; 222
     596:	da 01       	movw	r26, r20
     598:	8d 93       	st	X+, r24
     59a:	9c 93       	st	X, r25
     59c:	3f c0       	rjmp	.+126    	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
						trfReq = true;
					}
				}
				else //Level needs to be raised
				{
					tempLvl += ((-tempLvl > delta) ? delta : -tempLvl) + (int16_t)_lvl[s];
     59e:	66 27       	eor	r22, r22
     5a0:	77 27       	eor	r23, r23
     5a2:	68 1b       	sub	r22, r24
     5a4:	79 0b       	sbc	r23, r25
     5a6:	c6 16       	cp	r12, r22
     5a8:	d7 06       	cpc	r13, r23
     5aa:	14 f4       	brge	.+4      	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
     5ac:	69 81       	ldd	r22, Y+1	; 0x01
     5ae:	7a 81       	ldd	r23, Y+2	; 0x02
     5b0:	26 0f       	add	r18, r22
     5b2:	37 1f       	adc	r19, r23
     5b4:	82 0f       	add	r24, r18
     5b6:	93 1f       	adc	r25, r19
     5b8:	21 e0       	ldi	r18, 0x01	; 1
     5ba:	18 16       	cp	r1, r24
     5bc:	19 06       	cpc	r1, r25
     5be:	0c f0       	brlt	.+2      	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	12 23       	and	r17, r18
					trfReq &= tempLvl > 0;
					if (!gLevels[j]) //Lamp has been switched on - remember ticks
     5c4:	ba 01       	movw	r22, r20
     5c6:	66 0f       	add	r22, r22
     5c8:	77 1f       	adc	r23, r23
     5ca:	64 5a       	subi	r22, 0xA4	; 164
     5cc:	7e 4d       	sbci	r23, 0xDE	; 222
     5ce:	db 01       	movw	r26, r22
     5d0:	2d 91       	ld	r18, X+
     5d2:	3c 91       	ld	r19, X
     5d4:	23 2b       	or	r18, r19
     5d6:	c9 f4       	brne	.+50     	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
						_onTimeStamp = sysState.sysTick;
     5d8:	af e0       	ldi	r26, 0x0F	; 15
     5da:	b1 e2       	ldi	r27, 0x21	; 33
     5dc:	2c 91       	ld	r18, X
     5de:	23 8f       	std	Z+27, r18	; 0x1b
     5e0:	20 91 10 21 	lds	r18, 0x2110	; 0x802110 <sysState+0x1>
     5e4:	24 8f       	std	Z+28, r18	; 0x1c
     5e6:	20 91 11 21 	lds	r18, 0x2111	; 0x802111 <sysState+0x2>
     5ea:	25 8f       	std	Z+29, r18	; 0x1d
     5ec:	20 91 12 21 	lds	r18, 0x2112	; 0x802112 <sysState+0x3>
     5f0:	26 8f       	std	Z+30, r18	; 0x1e
     5f2:	20 91 13 21 	lds	r18, 0x2113	; 0x802113 <sysState+0x4>
     5f6:	27 8f       	std	Z+31, r18	; 0x1f
     5f8:	20 91 14 21 	lds	r18, 0x2114	; 0x802114 <sysState+0x5>
     5fc:	20 a3       	std	Z+32, r18	; 0x20
     5fe:	20 91 15 21 	lds	r18, 0x2115	; 0x802115 <sysState+0x6>
     602:	21 a3       	std	Z+33, r18	; 0x21
     604:	20 91 16 21 	lds	r18, 0x2116	; 0x802116 <sysState+0x7>
     608:	22 a3       	std	Z+34, r18	; 0x22
				}
				gLevels[j] = tempLvl;
     60a:	44 0f       	add	r20, r20
     60c:	55 1f       	adc	r21, r21
     60e:	44 5a       	subi	r20, 0xA4	; 164
     610:	5e 4d       	sbci	r21, 0xDE	; 222
     612:	da 01       	movw	r26, r20
     614:	8d 93       	st	X+, r24
     616:	9c 93       	st	X, r25
				if (trfReq)
     618:	11 23       	and	r17, r17
     61a:	79 f0       	breq	.+30     	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
				{
					gLevelChg |= 1 << j;
     61c:	20 91 5b 21 	lds	r18, 0x215B	; 0x80215b <gLevelChg>
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	02 c0       	rjmp	.+4      	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
     626:	88 0f       	add	r24, r24
     628:	99 1f       	adc	r25, r25
     62a:	aa 94       	dec	r10
     62c:	e2 f7       	brpl	.-8      	; 0x626 <__LOCK_REGION_LENGTH__+0x226>
     62e:	82 2b       	or	r24, r18
     630:	80 93 5b 21 	sts	0x215B, r24	; 0x80215b <gLevelChg>
					PORTC.OUTSET = _chActMask; //Switch on activity LED
     634:	82 89       	ldd	r24, Z+18	; 0x12
     636:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     63a:	b3 94       	inc	r11
	void updateLevel()
	{
		int16_t ticksEl = (int16_t)(sysState.sysTick - _tickLastChg); //Elapsed ticks since beginning of dim
		int16_t delta = (((ticksEl + 1) * _fadeRate) >> 5) - ((ticksEl * _fadeRate) >> 5); //Number of steps
		PORTC.OUTCLR = _chActMask;
		for (int8_t i = 0; i < _linkCnt; i++)
     63c:	6b 2d       	mov	r22, r11
     63e:	0b 2c       	mov	r0, r11
     640:	00 0c       	add	r0, r0
     642:	77 0b       	sbc	r23, r23
     644:	81 81       	ldd	r24, Z+1	; 0x01
     646:	28 2f       	mov	r18, r24
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	62 17       	cp	r22, r18
     64c:	73 07       	cpc	r23, r19
     64e:	0c f4       	brge	.+2      	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
     650:	18 cf       	rjmp	.-464    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     652:	bf ef       	ldi	r27, 0xFF	; 255
     654:	8b 1a       	sub	r8, r27
     656:	9b 0a       	sbc	r9, r27
     658:	e3 e2       	ldi	r30, 0x23	; 35
     65a:	2e 0e       	add	r2, r30
     65c:	31 1c       	adc	r3, r1
ISR(RTC_OVF_vect)
{
	sysState.sysTick++;
	static bool rs485busy = false;
	uint8_t i;
	for (i = 0; i < 4; i++)
     65e:	f4 e0       	ldi	r31, 0x04	; 4
     660:	8f 16       	cp	r8, r31
     662:	91 04       	cpc	r9, r1
     664:	09 f0       	breq	.+2      	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
     666:	c9 ce       	rjmp	.-622    	; 0x3fa <__vector_7+0x8a>
			cntDown = true;
		}
	}
	void updateLevel()
	{
		if (cntDown)
     668:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <msenCh>
     66c:	88 23       	and	r24, r24
     66e:	09 f4       	brne	.+2      	; 0x672 <__LOCK_REGION_LENGTH__+0x272>
     670:	06 c2       	rjmp	.+1036   	; 0xa7e <__LOCK_REGION_LENGTH__+0x67e>
		{
			uint16_t ton = (uint16_t)(sysState.sysTick - _onTimeStamp) >> 5;
     672:	2f e0       	ldi	r18, 0x0F	; 15
     674:	31 e2       	ldi	r19, 0x21	; 33
     676:	d9 01       	movw	r26, r18
     678:	bc 91       	ld	r27, X
     67a:	bd 83       	std	Y+5, r27	; 0x05
     67c:	f9 01       	movw	r30, r18
     67e:	f1 81       	ldd	r31, Z+1	; 0x01
     680:	fe 83       	std	Y+6, r31	; 0x06
     682:	d9 01       	movw	r26, r18
     684:	12 96       	adiw	r26, 0x02	; 2
     686:	bc 91       	ld	r27, X
     688:	bf 83       	std	Y+7, r27	; 0x07
     68a:	f9 01       	movw	r30, r18
     68c:	f3 81       	ldd	r31, Z+3	; 0x03
     68e:	f8 87       	std	Y+8, r31	; 0x08
     690:	d9 01       	movw	r26, r18
     692:	14 96       	adiw	r26, 0x04	; 4
     694:	bc 91       	ld	r27, X
     696:	b9 87       	std	Y+9, r27	; 0x09
     698:	f9 01       	movw	r30, r18
     69a:	f5 81       	ldd	r31, Z+5	; 0x05
     69c:	fa 87       	std	Y+10, r31	; 0x0a
     69e:	d9 01       	movw	r26, r18
     6a0:	16 96       	adiw	r26, 0x06	; 6
     6a2:	bc 91       	ld	r27, X
     6a4:	bb 87       	std	Y+11, r27	; 0x0b
     6a6:	f9 01       	movw	r30, r18
     6a8:	f7 81       	ldd	r31, Z+7	; 0x07
     6aa:	fc 87       	std	Y+12, r31	; 0x0c
     6ac:	25 e0       	ldi	r18, 0x05	; 5
     6ae:	30 e2       	ldi	r19, 0x20	; 32
			if (ton > _fTime)
     6b0:	d9 01       	movw	r26, r18
     6b2:	16 96       	adiw	r26, 0x06	; 6
     6b4:	4d 91       	ld	r20, X+
     6b6:	5c 91       	ld	r21, X
     6b8:	17 97       	sbiw	r26, 0x07	; 7
     6ba:	ed 81       	ldd	r30, Y+5	; 0x05
     6bc:	fe 81       	ldd	r31, Y+6	; 0x06
     6be:	e4 1b       	sub	r30, r20
     6c0:	f5 0b       	sbc	r31, r21
     6c2:	af 01       	movw	r20, r30
     6c4:	56 95       	lsr	r21
     6c6:	47 95       	ror	r20
     6c8:	52 95       	swap	r21
     6ca:	42 95       	swap	r20
     6cc:	4f 70       	andi	r20, 0x0F	; 15
     6ce:	45 27       	eor	r20, r21
     6d0:	5f 70       	andi	r21, 0x0F	; 15
     6d2:	45 27       	eor	r20, r21
     6d4:	15 96       	adiw	r26, 0x05	; 5
     6d6:	2c 91       	ld	r18, X
     6d8:	15 97       	sbiw	r26, 0x05	; 5
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	24 17       	cp	r18, r20
     6de:	35 07       	cpc	r19, r21
     6e0:	08 f0       	brcs	.+2      	; 0x6e4 <__LOCK_REGION_LENGTH__+0x2e4>
     6e2:	68 c0       	rjmp	.+208    	; 0x7b4 <__LOCK_REGION_LENGTH__+0x3b4>
			{
				ltEnt = cntDown = false;
     6e4:	1c 92       	st	X, r1
     6e6:	11 96       	adiw	r26, 0x01	; 1
     6e8:	1c 92       	st	X, r1
     6ea:	11 97       	sbiw	r26, 0x01	; 1
				links[_linkNum].setLevel(0); //Both on and low time are expired, shut down the lamp
     6ec:	12 96       	adiw	r26, 0x02	; 2
     6ee:	4c 91       	ld	r20, X
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
     6f0:	a4 2e       	mov	r10, r20
     6f2:	b1 2c       	mov	r11, r1
     6f4:	b3 e2       	ldi	r27, 0x23	; 35
     6f6:	4b 9f       	mul	r20, r27
     6f8:	b0 01       	movw	r22, r0
     6fa:	11 24       	eor	r1, r1
     6fc:	6d 5e       	subi	r22, 0xED	; 237
     6fe:	7f 4d       	sbci	r23, 0xDF	; 223
     700:	fb 01       	movw	r30, r22
     702:	22 81       	ldd	r18, Z+2	; 0x02
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	21 5f       	subi	r18, 0xF1	; 241
     708:	3e 4d       	sbci	r19, 0xDE	; 222
     70a:	d9 01       	movw	r26, r18
     70c:	51 96       	adiw	r26, 0x11	; 17
     70e:	1c 92       	st	X, r1
		for (uint8_t i = 0; i < _linkCnt; i++)
     710:	c1 80       	ldd	r12, Z+1	; 0x01
     712:	cc 20       	and	r12, r12
     714:	19 f1       	breq	.+70     	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
     716:	b3 e2       	ldi	r27, 0x23	; 35
     718:	4b 9f       	mul	r20, r27
     71a:	a0 01       	movw	r20, r0
     71c:	11 24       	eor	r1, r1
     71e:	4a 5e       	subi	r20, 0xEA	; 234
     720:	5f 4d       	sbci	r21, 0xDF	; 223
     722:	d1 2c       	mov	r13, r1
     724:	f1 2c       	mov	r15, r1
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     726:	fa 01       	movw	r30, r20
     728:	20 81       	ld	r18, Z
     72a:	4f 5f       	subi	r20, 0xFF	; 255
     72c:	5f 4f       	sbci	r21, 0xFF	; 255
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	22 0f       	add	r18, r18
     732:	33 1f       	adc	r19, r19
     734:	24 5a       	subi	r18, 0xA4	; 164
     736:	3e 4d       	sbci	r19, 0xDE	; 222
     738:	d9 01       	movw	r26, r18
     73a:	0d 91       	ld	r16, X+
     73c:	1c 91       	ld	r17, X
     73e:	23 81       	ldd	r18, Z+3	; 0x03
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	61 e0       	ldi	r22, 0x01	; 1
     744:	20 17       	cp	r18, r16
     746:	31 07       	cpc	r19, r17
     748:	09 f4       	brne	.+2      	; 0x74c <__LOCK_REGION_LENGTH__+0x34c>
     74a:	60 e0       	ldi	r22, 0x00	; 0
     74c:	d6 2a       	or	r13, r22
			if (!level || !_difLvl[i]) //Set zero level directly
				_lvl[i] = 0;
     74e:	fa 01       	movw	r30, r20
     750:	12 82       	std	Z+2, r1	; 0x02

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
		for (uint8_t i = 0; i < _linkCnt; i++)
     752:	f3 94       	inc	r15
     754:	fc 10       	cpse	r15, r12
     756:	e7 cf       	rjmp	.-50     	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     758:	d1 10       	cpse	r13, r1
     75a:	91 c1       	rjmp	.+802    	; 0xa7e <__LOCK_REGION_LENGTH__+0x67e>
			_tickLastChg = sysState.sysTick;
     75c:	23 e2       	ldi	r18, 0x23	; 35
     75e:	2a 9d       	mul	r18, r10
     760:	a0 01       	movw	r20, r0
     762:	2b 9d       	mul	r18, r11
     764:	50 0d       	add	r21, r0
     766:	11 24       	eor	r1, r1
     768:	4d 5e       	subi	r20, 0xED	; 237
     76a:	5f 4d       	sbci	r21, 0xDF	; 223
     76c:	9a 01       	movw	r18, r20
     76e:	2d 5e       	subi	r18, 0xED	; 237
     770:	3f 4f       	sbci	r19, 0xFF	; 255
     772:	ed 81       	ldd	r30, Y+5	; 0x05
     774:	da 01       	movw	r26, r20
     776:	53 96       	adiw	r26, 0x13	; 19
     778:	ec 93       	st	X, r30
     77a:	ee 81       	ldd	r30, Y+6	; 0x06
     77c:	d9 01       	movw	r26, r18
     77e:	11 96       	adiw	r26, 0x01	; 1
     780:	ec 93       	st	X, r30
     782:	11 97       	sbiw	r26, 0x01	; 1
     784:	ff 81       	ldd	r31, Y+7	; 0x07
     786:	12 96       	adiw	r26, 0x02	; 2
     788:	fc 93       	st	X, r31
     78a:	12 97       	sbiw	r26, 0x02	; 2
     78c:	68 85       	ldd	r22, Y+8	; 0x08
     78e:	13 96       	adiw	r26, 0x03	; 3
     790:	6c 93       	st	X, r22
     792:	13 97       	sbiw	r26, 0x03	; 3
     794:	79 85       	ldd	r23, Y+9	; 0x09
     796:	14 96       	adiw	r26, 0x04	; 4
     798:	7c 93       	st	X, r23
     79a:	14 97       	sbiw	r26, 0x04	; 4
     79c:	8a 85       	ldd	r24, Y+10	; 0x0a
     79e:	15 96       	adiw	r26, 0x05	; 5
     7a0:	8c 93       	st	X, r24
     7a2:	15 97       	sbiw	r26, 0x05	; 5
     7a4:	9b 85       	ldd	r25, Y+11	; 0x0b
     7a6:	16 96       	adiw	r26, 0x06	; 6
     7a8:	9c 93       	st	X, r25
     7aa:	16 97       	sbiw	r26, 0x06	; 6
     7ac:	ec 85       	ldd	r30, Y+12	; 0x0c
     7ae:	17 96       	adiw	r26, 0x07	; 7
     7b0:	ec 93       	st	X, r30
     7b2:	65 c1       	rjmp	.+714    	; 0xa7e <__LOCK_REGION_LENGTH__+0x67e>
			if (ton > _fTime)
			{
				ltEnt = cntDown = false;
				links[_linkNum].setLevel(0); //Both on and low time are expired, shut down the lamp
			}
			else if (!ltEnt && _onTime)
     7b4:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <msenCh+0x1>
     7b8:	21 11       	cpse	r18, r1
     7ba:	61 c1       	rjmp	.+706    	; 0xa7e <__LOCK_REGION_LENGTH__+0x67e>
     7bc:	20 91 09 20 	lds	r18, 0x2009	; 0x802009 <msenCh+0x4>
     7c0:	22 23       	and	r18, r18
     7c2:	09 f4       	brne	.+2      	; 0x7c6 <__LOCK_REGION_LENGTH__+0x3c6>
     7c4:	5c c1       	rjmp	.+696    	; 0xa7e <__LOCK_REGION_LENGTH__+0x67e>
			{
				ltEnt = true;
     7c6:	25 e0       	ldi	r18, 0x05	; 5
     7c8:	30 e2       	ldi	r19, 0x20	; 32
     7ca:	41 e0       	ldi	r20, 0x01	; 1
     7cc:	d9 01       	movw	r26, r18
     7ce:	11 96       	adiw	r26, 0x01	; 1
     7d0:	4c 93       	st	X, r20
     7d2:	11 97       	sbiw	r26, 0x01	; 1
				links[_linkNum].setLevel(validConf.msenLowLvl);
     7d4:	f0 90 43 21 	lds	r15, 0x2143	; 0x802143 <validConf+0x1c>
     7d8:	12 96       	adiw	r26, 0x02	; 2
     7da:	2c 91       	ld	r18, X
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
     7dc:	a2 2e       	mov	r10, r18
     7de:	b1 2c       	mov	r11, r1
     7e0:	b3 e2       	ldi	r27, 0x23	; 35
     7e2:	2b 9f       	mul	r18, r27
     7e4:	b0 01       	movw	r22, r0
     7e6:	11 24       	eor	r1, r1
     7e8:	6d 5e       	subi	r22, 0xED	; 237
     7ea:	7f 4d       	sbci	r23, 0xDF	; 223
     7ec:	fb 01       	movw	r30, r22
     7ee:	42 81       	ldd	r20, Z+2	; 0x02
     7f0:	50 e0       	ldi	r21, 0x00	; 0
     7f2:	41 5f       	subi	r20, 0xF1	; 241
     7f4:	5e 4d       	sbci	r21, 0xDE	; 222
     7f6:	da 01       	movw	r26, r20
     7f8:	51 96       	adiw	r26, 0x11	; 17
     7fa:	fc 92       	st	X, r15
		for (uint8_t i = 0; i < _linkCnt; i++)
     7fc:	e1 80       	ldd	r14, Z+1	; 0x01
     7fe:	ee 20       	and	r14, r14
     800:	b1 f1       	breq	.+108    	; 0x86e <__LOCK_REGION_LENGTH__+0x46e>
     802:	b3 e2       	ldi	r27, 0x23	; 35
     804:	2b 9f       	mul	r18, r27
     806:	90 01       	movw	r18, r0
     808:	11 24       	eor	r1, r1
     80a:	2a 5e       	subi	r18, 0xEA	; 234
     80c:	3f 4d       	sbci	r19, 0xDF	; 223
     80e:	70 e0       	ldi	r23, 0x00	; 0
     810:	60 e0       	ldi	r22, 0x00	; 0
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
			if (!level || !_difLvl[i]) //Set zero level directly
				_lvl[i] = 0;
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
     812:	cf 2c       	mov	r12, r15
     814:	d1 2c       	mov	r13, r1
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     816:	f9 01       	movw	r30, r18
     818:	40 81       	ld	r20, Z
     81a:	2f 5f       	subi	r18, 0xFF	; 255
     81c:	3f 4f       	sbci	r19, 0xFF	; 255
     81e:	50 e0       	ldi	r21, 0x00	; 0
     820:	44 0f       	add	r20, r20
     822:	55 1f       	adc	r21, r21
     824:	44 5a       	subi	r20, 0xA4	; 164
     826:	5e 4d       	sbci	r21, 0xDE	; 222
     828:	da 01       	movw	r26, r20
     82a:	8d 90       	ld	r8, X+
     82c:	9c 90       	ld	r9, X
     82e:	43 81       	ldd	r20, Z+3	; 0x03
     830:	50 e0       	ldi	r21, 0x00	; 0
     832:	11 e0       	ldi	r17, 0x01	; 1
     834:	48 15       	cp	r20, r8
     836:	59 05       	cpc	r21, r9
     838:	09 f4       	brne	.+2      	; 0x83c <__LOCK_REGION_LENGTH__+0x43c>
     83a:	10 e0       	ldi	r17, 0x00	; 0
     83c:	71 2b       	or	r23, r17
			if (!level || !_difLvl[i]) //Set zero level directly
     83e:	ff 20       	and	r15, r15
     840:	21 f0       	breq	.+8      	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
     842:	f9 01       	movw	r30, r18
     844:	40 85       	ldd	r20, Z+8	; 0x08
     846:	41 11       	cpse	r20, r1
     848:	04 c0       	rjmp	.+8      	; 0x852 <__LOCK_REGION_LENGTH__+0x452>
				_lvl[i] = 0;
     84a:	d9 01       	movw	r26, r18
     84c:	12 96       	adiw	r26, 0x02	; 2
     84e:	1c 92       	st	X, r1
     850:	09 c0       	rjmp	.+18     	; 0x864 <__LOCK_REGION_LENGTH__+0x464>
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
     852:	4c 9d       	mul	r20, r12
     854:	80 01       	movw	r16, r0
     856:	4d 9d       	mul	r20, r13
     858:	10 0d       	add	r17, r0
     85a:	11 24       	eor	r1, r1
     85c:	f9 01       	movw	r30, r18
     85e:	45 81       	ldd	r20, Z+5	; 0x05
     860:	41 0f       	add	r20, r17
     862:	42 83       	std	Z+2, r20	; 0x02

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
		for (uint8_t i = 0; i < _linkCnt; i++)
     864:	6f 5f       	subi	r22, 0xFF	; 255
     866:	6e 11       	cpse	r22, r14
     868:	d6 cf       	rjmp	.-84     	; 0x816 <__LOCK_REGION_LENGTH__+0x416>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     86a:	71 11       	cpse	r23, r1
     86c:	08 c1       	rjmp	.+528    	; 0xa7e <__LOCK_REGION_LENGTH__+0x67e>
			_tickLastChg = sysState.sysTick;
     86e:	23 e2       	ldi	r18, 0x23	; 35
     870:	2a 9d       	mul	r18, r10
     872:	a0 01       	movw	r20, r0
     874:	2b 9d       	mul	r18, r11
     876:	50 0d       	add	r21, r0
     878:	11 24       	eor	r1, r1
     87a:	4d 5e       	subi	r20, 0xED	; 237
     87c:	5f 4d       	sbci	r21, 0xDF	; 223
     87e:	9a 01       	movw	r18, r20
     880:	2d 5e       	subi	r18, 0xED	; 237
     882:	3f 4f       	sbci	r19, 0xFF	; 255
     884:	ed 81       	ldd	r30, Y+5	; 0x05
     886:	da 01       	movw	r26, r20
     888:	53 96       	adiw	r26, 0x13	; 19
     88a:	ec 93       	st	X, r30
     88c:	ee 81       	ldd	r30, Y+6	; 0x06
     88e:	d9 01       	movw	r26, r18
     890:	11 96       	adiw	r26, 0x01	; 1
     892:	ec 93       	st	X, r30
     894:	11 97       	sbiw	r26, 0x01	; 1
     896:	ff 81       	ldd	r31, Y+7	; 0x07
     898:	12 96       	adiw	r26, 0x02	; 2
     89a:	fc 93       	st	X, r31
     89c:	12 97       	sbiw	r26, 0x02	; 2
     89e:	68 85       	ldd	r22, Y+8	; 0x08
     8a0:	13 96       	adiw	r26, 0x03	; 3
     8a2:	6c 93       	st	X, r22
     8a4:	13 97       	sbiw	r26, 0x03	; 3
     8a6:	79 85       	ldd	r23, Y+9	; 0x09
     8a8:	14 96       	adiw	r26, 0x04	; 4
     8aa:	7c 93       	st	X, r23
     8ac:	14 97       	sbiw	r26, 0x04	; 4
     8ae:	8a 85       	ldd	r24, Y+10	; 0x0a
     8b0:	15 96       	adiw	r26, 0x05	; 5
     8b2:	8c 93       	st	X, r24
     8b4:	15 97       	sbiw	r26, 0x05	; 5
     8b6:	9b 85       	ldd	r25, Y+11	; 0x0b
     8b8:	16 96       	adiw	r26, 0x06	; 6
     8ba:	9c 93       	st	X, r25
     8bc:	16 97       	sbiw	r26, 0x06	; 6
     8be:	ec 85       	ldd	r30, Y+12	; 0x0c
     8c0:	17 96       	adiw	r26, 0x07	; 7
     8c2:	ec 93       	st	X, r30
     8c4:	dc c0       	rjmp	.+440    	; 0xa7e <__LOCK_REGION_LENGTH__+0x67e>
	uint8_t i;
	for (i = 0; i < 4; i++)
		links[i].updateLevel();
	msenCh.updateLevel();
	for (i = 0; i < 9; i++)
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
     8c6:	fc 01       	movw	r30, r24
     8c8:	ee 0f       	add	r30, r30
     8ca:	ff 1f       	adc	r31, r31
     8cc:	e4 5a       	subi	r30, 0xA4	; 164
     8ce:	fe 4d       	sbci	r31, 0xDE	; 222
     8d0:	20 81       	ld	r18, Z
     8d2:	31 81       	ldd	r19, Z+1	; 0x01
     8d4:	12 16       	cp	r1, r18
     8d6:	13 06       	cpc	r1, r19
     8d8:	44 f4       	brge	.+16     	; 0x8ea <__LOCK_REGION_LENGTH__+0x4ea>
     8da:	fc 01       	movw	r30, r24
     8dc:	ee 0f       	add	r30, r30
     8de:	ff 1f       	adc	r31, r31
     8e0:	e4 5a       	subi	r30, 0xA4	; 164
     8e2:	fe 4d       	sbci	r31, 0xDE	; 222
     8e4:	20 81       	ld	r18, Z
     8e6:	31 81       	ldd	r19, Z+1	; 0x01
     8e8:	01 c0       	rjmp	.+2      	; 0x8ec <__LOCK_REGION_LENGTH__+0x4ec>
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	2d 93       	st	X+, r18
     8ee:	01 96       	adiw	r24, 0x01	; 1
	static bool rs485busy = false;
	uint8_t i;
	for (i = 0; i < 4; i++)
		links[i].updateLevel();
	msenCh.updateLevel();
	for (i = 0; i < 9; i++)
     8f0:	89 30       	cpi	r24, 0x09	; 9
     8f2:	91 05       	cpc	r25, r1
     8f4:	41 f7       	brne	.-48     	; 0x8c6 <__LOCK_REGION_LENGTH__+0x4c6>
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
	DSI8xFrames[0] = gLevelChg; //DSI start bit
     8f6:	80 91 5b 21 	lds	r24, 0x215B	; 0x80215b <gLevelChg>
     8fa:	80 93 48 21 	sts	0x2148, r24	; 0x802148 <DSI8xFrames>
     8fe:	1b 82       	std	Y+3, r1	; 0x03
     900:	1c 82       	std	Y+4, r1	; 0x04
     902:	68 94       	set
     904:	ee 24       	eor	r14, r14
     906:	e3 f8       	bld	r14, 3
     908:	01 e0       	ldi	r16, 0x01	; 1
     90a:	10 e0       	ldi	r17, 0x00	; 0
     90c:	d8 01       	movw	r26, r16
     90e:	0b 80       	ldd	r0, Y+3	; 0x03
     910:	02 c0       	rjmp	.+4      	; 0x916 <__LOCK_REGION_LENGTH__+0x516>
     912:	aa 0f       	add	r26, r26
     914:	bb 1f       	adc	r27, r27
     916:	0a 94       	dec	r0
     918:	e2 f7       	brpl	.-8      	; 0x912 <__LOCK_REGION_LENGTH__+0x512>
     91a:	ef e0       	ldi	r30, 0x0F	; 15
     91c:	f1 e2       	ldi	r31, 0x21	; 33
		{
			tmp1 >>= 1;
			tmp0 >>= 1;
			if (gLevelChg & (1 << j)) //Particular level has been changed
			{
				if (sysState.setLevels[j] & (1 << i)) //Set upper half-bit
     91e:	20 e0       	ldi	r18, 0x00	; 0
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	d1 2c       	mov	r13, r1
     924:	f1 2c       	mov	r15, r1
	for (i = 0; i < 8; i++) //DSI frame bits 0-7
	{
		uint8_t tmp0 = 0, tmp1 = 0, j;
		for (j = 0; j < 8; j++) //Levels
		{
			tmp1 >>= 1;
     926:	6d 2d       	mov	r22, r13
     928:	70 e0       	ldi	r23, 0x00	; 0
     92a:	75 95       	asr	r23
     92c:	67 95       	ror	r22
     92e:	d6 2e       	mov	r13, r22
			tmp0 >>= 1;
     930:	4f 2d       	mov	r20, r15
     932:	50 e0       	ldi	r21, 0x00	; 0
     934:	55 95       	asr	r21
     936:	47 95       	ror	r20
     938:	f4 2e       	mov	r15, r20
			if (gLevelChg & (1 << j)) //Particular level has been changed
     93a:	80 91 5b 21 	lds	r24, 0x215B	; 0x80215b <gLevelChg>
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	02 2e       	mov	r0, r18
     942:	02 c0       	rjmp	.+4      	; 0x948 <__LOCK_REGION_LENGTH__+0x548>
     944:	95 95       	asr	r25
     946:	87 95       	ror	r24
     948:	0a 94       	dec	r0
     94a:	e2 f7       	brpl	.-8      	; 0x944 <__LOCK_REGION_LENGTH__+0x544>
     94c:	80 ff       	sbrs	r24, 0
     94e:	0d c0       	rjmp	.+26     	; 0x96a <__LOCK_REGION_LENGTH__+0x56a>
			{
				if (sysState.setLevels[j] & (1 << i)) //Set upper half-bit
     950:	80 85       	ldd	r24, Z+8	; 0x08
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	8a 23       	and	r24, r26
     956:	9b 23       	and	r25, r27
     958:	89 2b       	or	r24, r25
     95a:	21 f0       	breq	.+8      	; 0x964 <__LOCK_REGION_LENGTH__+0x564>
					tmp1 |= 0x80;
     95c:	86 2f       	mov	r24, r22
     95e:	80 68       	ori	r24, 0x80	; 128
     960:	d8 2e       	mov	r13, r24
     962:	03 c0       	rjmp	.+6      	; 0x96a <__LOCK_REGION_LENGTH__+0x56a>
				else
					tmp0 |= 0x80; //Set lower half-bit (one-zero transition)
     964:	94 2f       	mov	r25, r20
     966:	90 68       	ori	r25, 0x80	; 128
     968:	f9 2e       	mov	r15, r25
     96a:	2f 5f       	subi	r18, 0xFF	; 255
     96c:	3f 4f       	sbci	r19, 0xFF	; 255
     96e:	31 96       	adiw	r30, 0x01	; 1
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
	DSI8xFrames[0] = gLevelChg; //DSI start bit
	for (i = 0; i < 8; i++) //DSI frame bits 0-7
	{
		uint8_t tmp0 = 0, tmp1 = 0, j;
		for (j = 0; j < 8; j++) //Levels
     970:	28 30       	cpi	r18, 0x08	; 8
     972:	31 05       	cpc	r19, r1
     974:	c1 f6       	brne	.-80     	; 0x926 <__LOCK_REGION_LENGTH__+0x526>
				else
					tmp0 |= 0x80; //Set lower half-bit (one-zero transition)
			}
		}
		j = (8 - i) << 1;
		DSI8xFrames[j - 1] = tmp1;
     976:	ee 2d       	mov	r30, r14
     978:	ee 0f       	add	r30, r30
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	e8 5b       	subi	r30, 0xB8	; 184
     97e:	fe 4d       	sbci	r31, 0xDE	; 222
     980:	df 01       	movw	r26, r30
     982:	11 97       	sbiw	r26, 0x01	; 1
     984:	dc 92       	st	X, r13
		DSI8xFrames[j] = tmp0; //Manchester coded
     986:	f0 82       	st	Z, r15
     988:	ea 94       	dec	r14
     98a:	ab 81       	ldd	r26, Y+3	; 0x03
     98c:	bc 81       	ldd	r27, Y+4	; 0x04
     98e:	11 96       	adiw	r26, 0x01	; 1
     990:	ab 83       	std	Y+3, r26	; 0x03
     992:	bc 83       	std	Y+4, r27	; 0x04
		links[i].updateLevel();
	msenCh.updateLevel();
	for (i = 0; i < 9; i++)
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
	DSI8xFrames[0] = gLevelChg; //DSI start bit
	for (i = 0; i < 8; i++) //DSI frame bits 0-7
     994:	e1 10       	cpse	r14, r1
     996:	ba cf       	rjmp	.-140    	; 0x90c <__LOCK_REGION_LENGTH__+0x50c>
		}
		j = (8 - i) << 1;
		DSI8xFrames[j - 1] = tmp1;
		DSI8xFrames[j] = tmp0; //Manchester coded
	}
	DSI8xFrames[17] = 0; //DSI stop bit
     998:	10 92 59 21 	sts	0x2159, r1	; 0x802159 <DSI8xFrames+0x11>
	gLevelChg = 0; //Clear flags for changed levels
     99c:	10 92 5b 21 	sts	0x215B, r1	; 0x80215b <gLevelChg>
	if (sysState.setLevels[8] > 0) //On/off channel processing
     9a0:	80 91 1f 21 	lds	r24, 0x211F	; 0x80211f <sysState+0x10>
     9a4:	88 23       	and	r24, r24
     9a6:	21 f0       	breq	.+8      	; 0x9b0 <__LOCK_REGION_LENGTH__+0x5b0>
		PORTA.OUTSET = PIN7_bm;
     9a8:	80 e8       	ldi	r24, 0x80	; 128
     9aa:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
     9ae:	03 c0       	rjmp	.+6      	; 0x9b6 <__LOCK_REGION_LENGTH__+0x5b6>
	else
		PORTA.OUTCLR = PIN7_bm;
     9b0:	80 e8       	ldi	r24, 0x80	; 128
     9b2:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>

	if ((char)sysState.sysTick % 4 == 0) //Initialize conversion sequence 8 times per second
     9b6:	80 91 0f 21 	lds	r24, 0x210F	; 0x80210f <sysState>
     9ba:	83 70       	andi	r24, 0x03	; 3
     9bc:	39 f4       	brne	.+14     	; 0x9cc <__LOCK_REGION_LENGTH__+0x5cc>
	{
		ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN1_gc;
     9be:	e0 e0       	ldi	r30, 0x00	; 0
     9c0:	f2 e0       	ldi	r31, 0x02	; 2
     9c2:	88 e0       	ldi	r24, 0x08	; 8
     9c4:	81 a3       	std	Z+33, r24	; 0x21
		ADCA.CTRLA |= ADC_START_bm; //Start conversion from pin 1 (channel 1)
     9c6:	80 81       	ld	r24, Z
     9c8:	84 60       	ori	r24, 0x04	; 4
     9ca:	80 83       	st	Z, r24
	}

	int16_t h = (int8_t)sysState.sysTick;
     9cc:	2f e0       	ldi	r18, 0x0F	; 15
     9ce:	31 e2       	ldi	r19, 0x21	; 33
     9d0:	f9 01       	movw	r30, r18
     9d2:	f0 81       	ld	r31, Z
     9d4:	fd 83       	std	Y+5, r31	; 0x05
     9d6:	d9 01       	movw	r26, r18
     9d8:	11 96       	adiw	r26, 0x01	; 1
     9da:	bc 91       	ld	r27, X
     9dc:	be 83       	std	Y+6, r27	; 0x06
     9de:	f9 01       	movw	r30, r18
     9e0:	f2 81       	ldd	r31, Z+2	; 0x02
     9e2:	ff 83       	std	Y+7, r31	; 0x07
     9e4:	d9 01       	movw	r26, r18
     9e6:	13 96       	adiw	r26, 0x03	; 3
     9e8:	bc 91       	ld	r27, X
     9ea:	b8 87       	std	Y+8, r27	; 0x08
     9ec:	f9 01       	movw	r30, r18
     9ee:	f4 81       	ldd	r31, Z+4	; 0x04
     9f0:	f9 87       	std	Y+9, r31	; 0x09
     9f2:	d9 01       	movw	r26, r18
     9f4:	15 96       	adiw	r26, 0x05	; 5
     9f6:	bc 91       	ld	r27, X
     9f8:	ba 87       	std	Y+10, r27	; 0x0a
     9fa:	f9 01       	movw	r30, r18
     9fc:	f6 81       	ldd	r31, Z+6	; 0x06
     9fe:	fb 87       	std	Y+11, r31	; 0x0b
     a00:	d9 01       	movw	r26, r18
     a02:	17 96       	adiw	r26, 0x07	; 7
     a04:	bc 91       	ld	r27, X
     a06:	bc 87       	std	Y+12, r27	; 0x0c
	TCC4.CCABUF = h * h; //This will produce slow fading of HB LED (4s up/down)
     a08:	ed 81       	ldd	r30, Y+5	; 0x05
     a0a:	ee 02       	muls	r30, r30
     a0c:	90 01       	movw	r18, r0
     a0e:	11 24       	eor	r1, r1
     a10:	20 93 38 08 	sts	0x0838, r18	; 0x800838 <__TEXT_REGION_LENGTH__+0x700838>
     a14:	30 93 39 08 	sts	0x0839, r19	; 0x800839 <__TEXT_REGION_LENGTH__+0x700839>

	if (((uint32_t)sysState.sysTick & 0x7FFFF) == 0) //Save state to EEPROM every 4.5 hrs
     a18:	8d 81       	ldd	r24, Y+5	; 0x05
     a1a:	9e 81       	ldd	r25, Y+6	; 0x06
     a1c:	af 81       	ldd	r26, Y+7	; 0x07
     a1e:	b8 85       	ldd	r27, Y+8	; 0x08
     a20:	a7 70       	andi	r26, 0x07	; 7
     a22:	bb 27       	eor	r27, r27
     a24:	89 2b       	or	r24, r25
     a26:	8a 2b       	or	r24, r26
     a28:	8b 2b       	or	r24, r27
     a2a:	41 f4       	brne	.+16     	; 0xa3c <__LOCK_REGION_LENGTH__+0x63c>
		eeprom_update_block(&channelOT, &savedCOT, sizeof(channelsOnTime));
     a2c:	48 e3       	ldi	r20, 0x38	; 56
     a2e:	50 e0       	ldi	r21, 0x00	; 0
     a30:	61 e2       	ldi	r22, 0x21	; 33
     a32:	70 e0       	ldi	r23, 0x00	; 0
     a34:	87 ed       	ldi	r24, 0xD7	; 215
     a36:	90 e2       	ldi	r25, 0x20	; 32
     a38:	0e 94 de 09 	call	0x13bc	; 0x13bc <eeprom_update_block>

	if (rxMode == SetConfig) //We are currently receiving data packet
     a3c:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <rxMode>
     a40:	83 32       	cpi	r24, 0x23	; 35
     a42:	81 f4       	brne	.+32     	; 0xa64 <__LOCK_REGION_LENGTH__+0x664>
	{
		if (rs485busy) //Second tick in a row detected
     a44:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <_ZZ10__vector_7E9rs485busy>
     a48:	88 23       	and	r24, r24
     a4a:	41 f0       	breq	.+16     	; 0xa5c <__LOCK_REGION_LENGTH__+0x65c>
		{
			rxMode = 0; //Packet considered lost
     a4c:	10 92 5a 21 	sts	0x215A, r1	; 0x80215a <rxMode>
			USARTC0.CTRLB |= USART_MPCM_bm; //Set MPCM bit
     a50:	e0 ec       	ldi	r30, 0xC0	; 192
     a52:	f8 e0       	ldi	r31, 0x08	; 8
     a54:	83 81       	ldd	r24, Z+3	; 0x03
     a56:	82 60       	ori	r24, 0x02	; 2
     a58:	83 83       	std	Z+3, r24	; 0x03
     a5a:	06 c0       	rjmp	.+12     	; 0xa68 <__LOCK_REGION_LENGTH__+0x668>
		}
		else
			rs485busy = true;
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <_ZZ10__vector_7E9rs485busy>
     a62:	02 c0       	rjmp	.+4      	; 0xa68 <__LOCK_REGION_LENGTH__+0x668>
	}
	else
		rs485busy = false;
     a64:	10 92 04 20 	sts	0x2004, r1	; 0x802004 <_ZZ10__vector_7E9rs485busy>
	#ifdef DSI_EDMA
	EDMA.CH2.CTRLA = 0;
     a68:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
	while (EDMA.CH2.CTRLB & EDMA_CH_CHBUSY_bm);
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f1 e0       	ldi	r31, 0x01	; 1
     a70:	81 a9       	ldd	r24, Z+49	; 0x31
     a72:	88 23       	and	r24, r24
     a74:	ec f3       	brlt	.-6      	; 0xa70 <__LOCK_REGION_LENGTH__+0x670>
	EDMA.CH2.CTRLA = EDMA_CH_ENABLE_bm | EDMA_CH_SINGLE_bm;
     a76:	84 e8       	ldi	r24, 0x84	; 132
     a78:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__TEXT_REGION_LENGTH__+0x700130>
	#else
	framePtr = DSI8xFrames;
	TCD5.INTFLAGS |= TC5_OVFIF_bm;
	TCD5.INTCTRLA = TC_OVFINTLVL_HI_gc;
	#endif
}
     a7c:	05 c0       	rjmp	.+10     	; 0xa88 <__LOCK_REGION_LENGTH__+0x688>
     a7e:	a7 e1       	ldi	r26, 0x17	; 23
     a80:	b1 e2       	ldi	r27, 0x21	; 33

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
		for (uint8_t i = 0; i < _linkCnt; i++)
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	1f cf       	rjmp	.-450    	; 0x8c6 <__LOCK_REGION_LENGTH__+0x4c6>
	#else
	framePtr = DSI8xFrames;
	TCD5.INTFLAGS |= TC5_OVFIF_bm;
	TCD5.INTCTRLA = TC_OVFINTLVL_HI_gc;
	#endif
}
     a88:	2c 96       	adiw	r28, 0x0c	; 12
     a8a:	cd bf       	out	0x3d, r28	; 61
     a8c:	de bf       	out	0x3e, r29	; 62
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	ff 91       	pop	r31
     a94:	ef 91       	pop	r30
     a96:	bf 91       	pop	r27
     a98:	af 91       	pop	r26
     a9a:	9f 91       	pop	r25
     a9c:	8f 91       	pop	r24
     a9e:	7f 91       	pop	r23
     aa0:	6f 91       	pop	r22
     aa2:	5f 91       	pop	r21
     aa4:	4f 91       	pop	r20
     aa6:	3f 91       	pop	r19
     aa8:	2f 91       	pop	r18
     aaa:	1f 91       	pop	r17
     aac:	0f 91       	pop	r16
     aae:	ff 90       	pop	r15
     ab0:	ef 90       	pop	r14
     ab2:	df 90       	pop	r13
     ab4:	cf 90       	pop	r12
     ab6:	bf 90       	pop	r11
     ab8:	af 90       	pop	r10
     aba:	9f 90       	pop	r9
     abc:	8f 90       	pop	r8
     abe:	7f 90       	pop	r7
     ac0:	6f 90       	pop	r6
     ac2:	5f 90       	pop	r5
     ac4:	4f 90       	pop	r4
     ac6:	3f 90       	pop	r3
     ac8:	2f 90       	pop	r2
     aca:	0f 90       	pop	r0
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	0f 90       	pop	r0
     ad0:	1f 90       	pop	r1
     ad2:	18 95       	reti

00000ad4 <__vector_34>:

ISR(ADCA_CH0_vect)
{
     ad4:	1f 92       	push	r1
     ad6:	0f 92       	push	r0
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	0f 92       	push	r0
     adc:	11 24       	eor	r1, r1
     ade:	af 92       	push	r10
     ae0:	bf 92       	push	r11
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	2f 93       	push	r18
     aee:	3f 93       	push	r19
     af0:	4f 93       	push	r20
     af2:	5f 93       	push	r21
     af4:	6f 93       	push	r22
     af6:	7f 93       	push	r23
     af8:	8f 93       	push	r24
     afa:	9f 93       	push	r25
     afc:	af 93       	push	r26
     afe:	bf 93       	push	r27
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
     b04:	ef 93       	push	r30
     b06:	ff 93       	push	r31
	static uint8_t sAdcCnt = 0;
	int16_t result = ADCA.CH0RES;
     b08:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__TEXT_REGION_LENGTH__+0x700210>
     b0c:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__TEXT_REGION_LENGTH__+0x700211>
	if (sAdcCnt < 4 && LINK_VALID_MIN < result && result < LINK_VALID_MAX)
     b10:	20 91 03 20 	lds	r18, 0x2003	; 0x802003 <_ZZ11__vector_34E7sAdcCnt>
     b14:	24 30       	cpi	r18, 0x04	; 4
     b16:	08 f0       	brcs	.+2      	; 0xb1a <__vector_34+0x46>
     b18:	3a c1       	rjmp	.+628    	; 0xd8e <__vector_34+0x2ba>
     b1a:	bc 01       	movw	r22, r24
     b1c:	6e 5e       	subi	r22, 0xEE	; 238
     b1e:	73 41       	sbci	r23, 0x13	; 19
     b20:	6b 36       	cpi	r22, 0x6B	; 107
     b22:	77 46       	sbci	r23, 0x67	; 103
     b24:	08 f0       	brcs	.+2      	; 0xb28 <__vector_34+0x54>
     b26:	24 c1       	rjmp	.+584    	; 0xd70 <__vector_34+0x29c>
	{
		sysState.linksMask |= (1 << sAdcCnt); //Set 'valid' bit
     b28:	a2 2e       	mov	r10, r18
     b2a:	b1 2c       	mov	r11, r1
     b2c:	ef e0       	ldi	r30, 0x0F	; 15
     b2e:	f1 e2       	ldi	r31, 0x21	; 33
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	02 2e       	mov	r0, r18
     b36:	02 c0       	rjmp	.+4      	; 0xb3c <__vector_34+0x68>
     b38:	66 0f       	add	r22, r22
     b3a:	77 1f       	adc	r23, r23
     b3c:	0a 94       	dec	r0
     b3e:	e2 f7       	brpl	.-8      	; 0xb38 <__vector_34+0x64>
     b40:	35 89       	ldd	r19, Z+21	; 0x15
     b42:	36 2b       	or	r19, r22
     b44:	35 8b       	std	Z+21, r19	; 0x15
		if (result < LINK_ON_BARRIER)
     b46:	85 34       	cpi	r24, 0x45	; 69
     b48:	6b e1       	ldi	r22, 0x1B	; 27
     b4a:	96 07       	cpc	r25, r22
     b4c:	0c f0       	brlt	.+2      	; 0xb50 <__vector_34+0x7c>
     b4e:	73 c0       	rjmp	.+230    	; 0xc36 <__vector_34+0x162>
		{
			result = 0;
			if (sysState.linksMask & (0x10 << sAdcCnt)) //Previous level was non-zero
     b50:	60 e1       	ldi	r22, 0x10	; 16
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	02 2e       	mov	r0, r18
     b56:	02 c0       	rjmp	.+4      	; 0xb5c <__vector_34+0x88>
     b58:	66 0f       	add	r22, r22
     b5a:	77 1f       	adc	r23, r23
     b5c:	0a 94       	dec	r0
     b5e:	e2 f7       	brpl	.-8      	; 0xb58 <__vector_34+0x84>
     b60:	83 2f       	mov	r24, r19
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	86 23       	and	r24, r22
     b66:	97 23       	and	r25, r23
     b68:	89 2b       	or	r24, r25
     b6a:	09 f4       	brne	.+2      	; 0xb6e <__vector_34+0x9a>
     b6c:	5f c0       	rjmp	.+190    	; 0xc2c <__vector_34+0x158>
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
     b6e:	83 e2       	ldi	r24, 0x23	; 35
     b70:	8a 9d       	mul	r24, r10
     b72:	d0 01       	movw	r26, r0
     b74:	8b 9d       	mul	r24, r11
     b76:	b0 0d       	add	r27, r0
     b78:	11 24       	eor	r1, r1
     b7a:	ad 5e       	subi	r26, 0xED	; 237
     b7c:	bf 4d       	sbci	r27, 0xDF	; 223
     b7e:	12 96       	adiw	r26, 0x02	; 2
     b80:	ec 91       	ld	r30, X
     b82:	12 97       	sbiw	r26, 0x02	; 2
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	e1 5f       	subi	r30, 0xF1	; 241
     b88:	fe 4d       	sbci	r31, 0xDE	; 222
     b8a:	11 8a       	std	Z+17, r1	; 0x11
		for (uint8_t i = 0; i < _linkCnt; i++)
     b8c:	11 96       	adiw	r26, 0x01	; 1
     b8e:	dc 90       	ld	r13, X
     b90:	dd 20       	and	r13, r13
     b92:	11 f1       	breq	.+68     	; 0xbd8 <__vector_34+0x104>
     b94:	c3 e2       	ldi	r28, 0x23	; 35
     b96:	2c 9f       	mul	r18, r28
     b98:	c0 01       	movw	r24, r0
     b9a:	11 24       	eor	r1, r1
     b9c:	8a 5e       	subi	r24, 0xEA	; 234
     b9e:	9f 4d       	sbci	r25, 0xDF	; 223
     ba0:	00 e0       	ldi	r16, 0x00	; 0
     ba2:	10 e0       	ldi	r17, 0x00	; 0
     ba4:	dc 01       	movw	r26, r24
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     ba6:	ec 91       	ld	r30, X
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	ee 0f       	add	r30, r30
     bae:	ff 1f       	adc	r31, r31
     bb0:	e4 5a       	subi	r30, 0xA4	; 164
     bb2:	fe 4d       	sbci	r31, 0xDE	; 222
     bb4:	e0 80       	ld	r14, Z
     bb6:	f1 80       	ldd	r15, Z+1	; 0x01
     bb8:	13 96       	adiw	r26, 0x03	; 3
     bba:	4c 91       	ld	r20, X
     bbc:	50 e0       	ldi	r21, 0x00	; 0
     bbe:	e1 e0       	ldi	r30, 0x01	; 1
     bc0:	4e 15       	cp	r20, r14
     bc2:	5f 05       	cpc	r21, r15
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <__vector_34+0xf4>
     bc6:	e0 e0       	ldi	r30, 0x00	; 0
     bc8:	0e 2b       	or	r16, r30
			if (!level || !_difLvl[i]) //Set zero level directly
				_lvl[i] = 0;
     bca:	fc 01       	movw	r30, r24
     bcc:	12 82       	std	Z+2, r1	; 0x02

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
		for (uint8_t i = 0; i < _linkCnt; i++)
     bce:	1f 5f       	subi	r17, 0xFF	; 255
     bd0:	1d 11       	cpse	r17, r13
     bd2:	e8 cf       	rjmp	.-48     	; 0xba4 <__vector_34+0xd0>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     bd4:	01 11       	cpse	r16, r1
     bd6:	2a c0       	rjmp	.+84     	; 0xc2c <__vector_34+0x158>
			_tickLastChg = sysState.sysTick;
     bd8:	43 e2       	ldi	r20, 0x23	; 35
     bda:	4a 9d       	mul	r20, r10
     bdc:	c0 01       	movw	r24, r0
     bde:	4b 9d       	mul	r20, r11
     be0:	90 0d       	add	r25, r0
     be2:	11 24       	eor	r1, r1
     be4:	ec 01       	movw	r28, r24
     be6:	cd 5e       	subi	r28, 0xED	; 237
     be8:	df 4d       	sbci	r29, 0xDF	; 223
     bea:	de 01       	movw	r26, r28
     bec:	53 96       	adiw	r26, 0x13	; 19
     bee:	ef e0       	ldi	r30, 0x0F	; 15
     bf0:	f1 e2       	ldi	r31, 0x21	; 33
     bf2:	80 81       	ld	r24, Z
     bf4:	8b 8b       	std	Y+19, r24	; 0x13
     bf6:	81 81       	ldd	r24, Z+1	; 0x01
     bf8:	11 96       	adiw	r26, 0x01	; 1
     bfa:	8c 93       	st	X, r24
     bfc:	11 97       	sbiw	r26, 0x01	; 1
     bfe:	82 81       	ldd	r24, Z+2	; 0x02
     c00:	12 96       	adiw	r26, 0x02	; 2
     c02:	8c 93       	st	X, r24
     c04:	12 97       	sbiw	r26, 0x02	; 2
     c06:	83 81       	ldd	r24, Z+3	; 0x03
     c08:	13 96       	adiw	r26, 0x03	; 3
     c0a:	8c 93       	st	X, r24
     c0c:	13 97       	sbiw	r26, 0x03	; 3
     c0e:	84 81       	ldd	r24, Z+4	; 0x04
     c10:	14 96       	adiw	r26, 0x04	; 4
     c12:	8c 93       	st	X, r24
     c14:	14 97       	sbiw	r26, 0x04	; 4
     c16:	85 81       	ldd	r24, Z+5	; 0x05
     c18:	15 96       	adiw	r26, 0x05	; 5
     c1a:	8c 93       	st	X, r24
     c1c:	15 97       	sbiw	r26, 0x05	; 5
     c1e:	86 81       	ldd	r24, Z+6	; 0x06
     c20:	16 96       	adiw	r26, 0x06	; 6
     c22:	8c 93       	st	X, r24
     c24:	16 97       	sbiw	r26, 0x06	; 6
     c26:	87 81       	ldd	r24, Z+7	; 0x07
     c28:	17 96       	adiw	r26, 0x07	; 7
     c2a:	8c 93       	st	X, r24
		if (result < LINK_ON_BARRIER)
		{
			result = 0;
			if (sysState.linksMask & (0x10 << sAdcCnt)) //Previous level was non-zero
				links[sAdcCnt].setLevel(0);
			sysState.linksMask &= ~(0x10 << sAdcCnt); //Clear 'non-zero' bit
     c2c:	60 95       	com	r22
     c2e:	36 23       	and	r19, r22
     c30:	30 93 24 21 	sts	0x2124, r19	; 0x802124 <sysState+0x15>
     c34:	85 c1       	rjmp	.+778    	; 0xf40 <__vector_34+0x46c>
		}
		else
		{
			result = (result - LINK_1PERC_CODE) / LINK_SCALE;
     c36:	80 59       	subi	r24, 0x90	; 144
     c38:	91 42       	sbci	r25, 0x21	; 33
     c3a:	64 e5       	ldi	r22, 0x54	; 84
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	0e 94 a0 09 	call	0x1340	; 0x1340 <__divmodhi4>
			if (result < 1)
     c42:	16 16       	cp	r1, r22
     c44:	17 06       	cpc	r1, r23
     c46:	14 f0       	brlt	.+4      	; 0xc4c <__vector_34+0x178>
				result = 1;
     c48:	61 e0       	ldi	r22, 0x01	; 1
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	6f 3f       	cpi	r22, 0xFF	; 255
     c4e:	71 05       	cpc	r23, r1
     c50:	19 f0       	breq	.+6      	; 0xc58 <__vector_34+0x184>
     c52:	14 f0       	brlt	.+4      	; 0xc58 <__vector_34+0x184>
     c54:	6f ef       	ldi	r22, 0xFF	; 255
     c56:	70 e0       	ldi	r23, 0x00	; 0
			if (result > 255)
				result = 255;
			sysState.linksMask |= (0x10 << sAdcCnt); //Set 'non-zero' bit
     c58:	80 e1       	ldi	r24, 0x10	; 16
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	02 2e       	mov	r0, r18
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <__vector_34+0x190>
     c60:	88 0f       	add	r24, r24
     c62:	99 1f       	adc	r25, r25
     c64:	0a 94       	dec	r0
     c66:	e2 f7       	brpl	.-8      	; 0xc60 <__vector_34+0x18c>
     c68:	38 2b       	or	r19, r24
     c6a:	30 93 24 21 	sts	0x2124, r19	; 0x802124 <sysState+0x15>
			if (sysState.linkLevels[sAdcCnt] != (uint8_t)result) //Update only when level was changed
     c6e:	ab 01       	movw	r20, r22
     c70:	55 27       	eor	r21, r21
     c72:	f5 01       	movw	r30, r10
     c74:	e1 5f       	subi	r30, 0xF1	; 241
     c76:	fe 4d       	sbci	r31, 0xDE	; 222
     c78:	81 89       	ldd	r24, Z+17	; 0x11
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	84 17       	cp	r24, r20
     c7e:	95 07       	cpc	r25, r21
     c80:	09 f4       	brne	.+2      	; 0xc84 <__vector_34+0x1b0>
     c82:	5e c1       	rjmp	.+700    	; 0xf40 <__vector_34+0x46c>
				links[sAdcCnt].setLevel((uint8_t)result);
     c84:	06 2f       	mov	r16, r22
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
     c86:	83 e2       	ldi	r24, 0x23	; 35
     c88:	8a 9d       	mul	r24, r10
     c8a:	d0 01       	movw	r26, r0
     c8c:	8b 9d       	mul	r24, r11
     c8e:	b0 0d       	add	r27, r0
     c90:	11 24       	eor	r1, r1
     c92:	ad 5e       	subi	r26, 0xED	; 237
     c94:	bf 4d       	sbci	r27, 0xDF	; 223
     c96:	12 96       	adiw	r26, 0x02	; 2
     c98:	ec 91       	ld	r30, X
     c9a:	12 97       	sbiw	r26, 0x02	; 2
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	e1 5f       	subi	r30, 0xF1	; 241
     ca0:	fe 4d       	sbci	r31, 0xDE	; 222
     ca2:	61 8b       	std	Z+17, r22	; 0x11
		for (uint8_t i = 0; i < _linkCnt; i++)
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	1c 91       	ld	r17, X
     ca8:	11 23       	and	r17, r17
     caa:	b9 f1       	breq	.+110    	; 0xd1a <__vector_34+0x246>
     cac:	f3 e2       	ldi	r31, 0x23	; 35
     cae:	2f 9f       	mul	r18, r31
     cb0:	d0 01       	movw	r26, r0
     cb2:	11 24       	eor	r1, r1
     cb4:	aa 5e       	subi	r26, 0xEA	; 234
     cb6:	bf 4d       	sbci	r27, 0xDF	; 223
     cb8:	70 e0       	ldi	r23, 0x00	; 0
     cba:	30 e0       	ldi	r19, 0x00	; 0
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     cbc:	ed 01       	movw	r28, r26
     cbe:	e8 81       	ld	r30, Y
     cc0:	11 96       	adiw	r26, 0x01	; 1
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	ee 0f       	add	r30, r30
     cc6:	ff 1f       	adc	r31, r31
     cc8:	e4 5a       	subi	r30, 0xA4	; 164
     cca:	fe 4d       	sbci	r31, 0xDE	; 222
     ccc:	01 90       	ld	r0, Z+
     cce:	f0 81       	ld	r31, Z
     cd0:	e0 2d       	mov	r30, r0
     cd2:	8b 81       	ldd	r24, Y+3	; 0x03
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	61 e0       	ldi	r22, 0x01	; 1
     cd8:	8e 17       	cp	r24, r30
     cda:	9f 07       	cpc	r25, r31
     cdc:	09 f4       	brne	.+2      	; 0xce0 <__vector_34+0x20c>
     cde:	60 e0       	ldi	r22, 0x00	; 0
     ce0:	76 2b       	or	r23, r22
			if (!level || !_difLvl[i]) //Set zero level directly
     ce2:	00 23       	and	r16, r16
     ce4:	29 f0       	breq	.+10     	; 0xcf0 <__vector_34+0x21c>
     ce6:	18 96       	adiw	r26, 0x08	; 8
     ce8:	8c 91       	ld	r24, X
     cea:	18 97       	sbiw	r26, 0x08	; 8
     cec:	81 11       	cpse	r24, r1
     cee:	04 c0       	rjmp	.+8      	; 0xcf8 <__vector_34+0x224>
				_lvl[i] = 0;
     cf0:	12 96       	adiw	r26, 0x02	; 2
     cf2:	1c 92       	st	X, r1
     cf4:	12 97       	sbiw	r26, 0x02	; 2
     cf6:	0c c0       	rjmp	.+24     	; 0xd10 <__vector_34+0x23c>
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
     cf8:	84 9f       	mul	r24, r20
     cfa:	f0 01       	movw	r30, r0
     cfc:	85 9f       	mul	r24, r21
     cfe:	f0 0d       	add	r31, r0
     d00:	11 24       	eor	r1, r1
     d02:	15 96       	adiw	r26, 0x05	; 5
     d04:	8c 91       	ld	r24, X
     d06:	15 97       	sbiw	r26, 0x05	; 5
     d08:	8f 0f       	add	r24, r31
     d0a:	12 96       	adiw	r26, 0x02	; 2
     d0c:	8c 93       	st	X, r24
     d0e:	12 97       	sbiw	r26, 0x02	; 2

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
		for (uint8_t i = 0; i < _linkCnt; i++)
     d10:	3f 5f       	subi	r19, 0xFF	; 255
     d12:	13 13       	cpse	r17, r19
     d14:	d3 cf       	rjmp	.-90     	; 0xcbc <__vector_34+0x1e8>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     d16:	71 11       	cpse	r23, r1
     d18:	13 c1       	rjmp	.+550    	; 0xf40 <__vector_34+0x46c>
			_tickLastChg = sysState.sysTick;
     d1a:	33 e2       	ldi	r19, 0x23	; 35
     d1c:	3a 9d       	mul	r19, r10
     d1e:	c0 01       	movw	r24, r0
     d20:	3b 9d       	mul	r19, r11
     d22:	90 0d       	add	r25, r0
     d24:	11 24       	eor	r1, r1
     d26:	ec 01       	movw	r28, r24
     d28:	cd 5e       	subi	r28, 0xED	; 237
     d2a:	df 4d       	sbci	r29, 0xDF	; 223
     d2c:	de 01       	movw	r26, r28
     d2e:	53 96       	adiw	r26, 0x13	; 19
     d30:	ef e0       	ldi	r30, 0x0F	; 15
     d32:	f1 e2       	ldi	r31, 0x21	; 33
     d34:	80 81       	ld	r24, Z
     d36:	8b 8b       	std	Y+19, r24	; 0x13
     d38:	81 81       	ldd	r24, Z+1	; 0x01
     d3a:	11 96       	adiw	r26, 0x01	; 1
     d3c:	8c 93       	st	X, r24
     d3e:	11 97       	sbiw	r26, 0x01	; 1
     d40:	82 81       	ldd	r24, Z+2	; 0x02
     d42:	12 96       	adiw	r26, 0x02	; 2
     d44:	8c 93       	st	X, r24
     d46:	12 97       	sbiw	r26, 0x02	; 2
     d48:	83 81       	ldd	r24, Z+3	; 0x03
     d4a:	13 96       	adiw	r26, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	13 97       	sbiw	r26, 0x03	; 3
     d50:	84 81       	ldd	r24, Z+4	; 0x04
     d52:	14 96       	adiw	r26, 0x04	; 4
     d54:	8c 93       	st	X, r24
     d56:	14 97       	sbiw	r26, 0x04	; 4
     d58:	85 81       	ldd	r24, Z+5	; 0x05
     d5a:	15 96       	adiw	r26, 0x05	; 5
     d5c:	8c 93       	st	X, r24
     d5e:	15 97       	sbiw	r26, 0x05	; 5
     d60:	86 81       	ldd	r24, Z+6	; 0x06
     d62:	16 96       	adiw	r26, 0x06	; 6
     d64:	8c 93       	st	X, r24
     d66:	16 97       	sbiw	r26, 0x06	; 6
     d68:	87 81       	ldd	r24, Z+7	; 0x07
     d6a:	17 96       	adiw	r26, 0x07	; 7
     d6c:	8c 93       	st	X, r24
     d6e:	e8 c0       	rjmp	.+464    	; 0xf40 <__vector_34+0x46c>
				links[sAdcCnt].setLevel((uint8_t)result);
		}

	}
	else if (sAdcCnt < 4)
		sysState.linksMask &= ~(0x11 << sAdcCnt); //Clear 'valid' and 'non-zero' bits
     d70:	ef e0       	ldi	r30, 0x0F	; 15
     d72:	f1 e2       	ldi	r31, 0x21	; 33
     d74:	81 e1       	ldi	r24, 0x11	; 17
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	02 2e       	mov	r0, r18
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <__vector_34+0x2ac>
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	0a 94       	dec	r0
     d82:	e2 f7       	brpl	.-8      	; 0xd7c <__vector_34+0x2a8>
     d84:	80 95       	com	r24
     d86:	95 89       	ldd	r25, Z+21	; 0x15
     d88:	89 23       	and	r24, r25
     d8a:	85 8b       	std	Z+21, r24	; 0x15
     d8c:	d9 c0       	rjmp	.+434    	; 0xf40 <__vector_34+0x46c>
	else //sAdcCnt == 4: MSEN channel
		msenCh.setLevel((uint8_t)(result >> 6));
     d8e:	08 2e       	mov	r0, r24
     d90:	89 2f       	mov	r24, r25
     d92:	00 0c       	add	r0, r0
     d94:	88 1f       	adc	r24, r24
     d96:	99 0b       	sbc	r25, r25
     d98:	00 0c       	add	r0, r0
     d9a:	88 1f       	adc	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	38 2f       	mov	r19, r24
		_onTime = validConf.msenOnTime > 5 ? validConf.msenOnTime : 6;
		_fTime = _onTime + validConf.msenLowTime;
	}
	void setLevel(uint8_t level)
	{
		if (level < MSEN_VALID_MIN || !validConf.msenOnTime || (sysState.linksMask & (0x10 << _linkNum)))
     da0:	84 31       	cpi	r24, 0x14	; 20
     da2:	c0 f0       	brcs	.+48     	; 0xdd4 <__vector_34+0x300>
     da4:	40 91 41 21 	lds	r20, 0x2141	; 0x802141 <validConf+0x1a>
     da8:	44 23       	and	r20, r20
     daa:	a1 f0       	breq	.+40     	; 0xdd4 <__vector_34+0x300>
     dac:	e0 91 07 20 	lds	r30, 0x2007	; 0x802007 <msenCh+0x2>
     db0:	ae 2f       	mov	r26, r30
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	40 91 24 21 	lds	r20, 0x2124	; 0x802124 <sysState+0x15>
     db8:	64 2f       	mov	r22, r20
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	40 e1       	ldi	r20, 0x10	; 16
     dbe:	50 e0       	ldi	r21, 0x00	; 0
     dc0:	0e 2e       	mov	r0, r30
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <__vector_34+0x2f4>
     dc4:	44 0f       	add	r20, r20
     dc6:	55 1f       	adc	r21, r21
     dc8:	0a 94       	dec	r0
     dca:	e2 f7       	brpl	.-8      	; 0xdc4 <__vector_34+0x2f0>
     dcc:	46 23       	and	r20, r22
     dce:	57 23       	and	r21, r23
     dd0:	45 2b       	or	r20, r21
     dd2:	29 f0       	breq	.+10     	; 0xdde <__vector_34+0x30a>
		{
			_lvl = 0; //MSEN disconnected, disabled (by zero on time) or there is non-zero level from link
     dd4:	e5 e0       	ldi	r30, 0x05	; 5
     dd6:	f0 e2       	ldi	r31, 0x20	; 32
     dd8:	13 82       	std	Z+3, r1	; 0x03
			cntDown = false;
     dda:	10 82       	st	Z, r1
     ddc:	b1 c0       	rjmp	.+354    	; 0xf40 <__vector_34+0x46c>
			return;
		}
		if (level > MSEN_SEN1_TRIG && _lvl == MSEN_VALID_MIN) //Off to on transition
     dde:	8a 33       	cpi	r24, 0x3A	; 58
     de0:	08 f4       	brcc	.+2      	; 0xde4 <__vector_34+0x310>
     de2:	83 c0       	rjmp	.+262    	; 0xeea <__vector_34+0x416>
     de4:	40 91 08 20 	lds	r20, 0x2008	; 0x802008 <msenCh+0x3>
     de8:	44 31       	cpi	r20, 0x14	; 20
     dea:	09 f0       	breq	.+2      	; 0xdee <__vector_34+0x31a>
     dec:	7e c0       	rjmp	.+252    	; 0xeea <__vector_34+0x416>
		{
			_lvl = level;
     dee:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <msenCh+0x3>
		}
	}

	void setLevel(uint8_t level, bool direction) //Accepts level in the range 0…255
	{
		_dir = direction;
     df2:	83 e2       	ldi	r24, 0x23	; 35
     df4:	8a 9f       	mul	r24, r26
     df6:	e0 01       	movw	r28, r0
     df8:	8b 9f       	mul	r24, r27
     dfa:	d0 0d       	add	r29, r0
     dfc:	11 24       	eor	r1, r1
     dfe:	cd 5e       	subi	r28, 0xED	; 237
     e00:	df 4d       	sbci	r29, 0xDF	; 223
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	37 34       	cpi	r19, 0x47	; 71
     e06:	08 f4       	brcc	.+2      	; 0xe0a <__vector_34+0x336>
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	88 83       	st	Y, r24
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
     e0c:	33 e2       	ldi	r19, 0x23	; 35
     e0e:	3a 9f       	mul	r19, r26
     e10:	c0 01       	movw	r24, r0
     e12:	3b 9f       	mul	r19, r27
     e14:	90 0d       	add	r25, r0
     e16:	11 24       	eor	r1, r1
     e18:	8d 5e       	subi	r24, 0xED	; 237
     e1a:	9f 4d       	sbci	r25, 0xDF	; 223
     e1c:	ec 01       	movw	r28, r24
     e1e:	3a 81       	ldd	r19, Y+2	; 0x02
     e20:	c3 2f       	mov	r28, r19
     e22:	d0 e0       	ldi	r29, 0x00	; 0
     e24:	c1 5f       	subi	r28, 0xF1	; 241
     e26:	de 4d       	sbci	r29, 0xDE	; 222
     e28:	3f ef       	ldi	r19, 0xFF	; 255
     e2a:	39 8b       	std	Y+17, r19	; 0x11
		for (uint8_t i = 0; i < _linkCnt; i++)
     e2c:	ec 01       	movw	r28, r24
     e2e:	69 81       	ldd	r22, Y+1	; 0x01
     e30:	66 23       	and	r22, r22
     e32:	69 f1       	breq	.+90     	; 0xe8e <__vector_34+0x3ba>
     e34:	d3 e2       	ldi	r29, 0x23	; 35
     e36:	ed 9f       	mul	r30, r29
     e38:	f0 01       	movw	r30, r0
     e3a:	11 24       	eor	r1, r1
     e3c:	ea 5e       	subi	r30, 0xEA	; 234
     e3e:	ff 4d       	sbci	r31, 0xDF	; 223
     e40:	50 e0       	ldi	r21, 0x00	; 0
     e42:	30 e0       	ldi	r19, 0x00	; 0
				_lvl[i] = 0;
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
     e44:	7f ef       	ldi	r23, 0xFF	; 255
     e46:	cf 01       	movw	r24, r30
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     e48:	40 81       	ld	r20, Z
     e4a:	31 96       	adiw	r30, 0x01	; 1
     e4c:	c4 2f       	mov	r28, r20
     e4e:	d0 e0       	ldi	r29, 0x00	; 0
     e50:	cc 0f       	add	r28, r28
     e52:	dd 1f       	adc	r29, r29
     e54:	c4 5a       	subi	r28, 0xA4	; 164
     e56:	de 4d       	sbci	r29, 0xDE	; 222
     e58:	08 81       	ld	r16, Y
     e5a:	19 81       	ldd	r17, Y+1	; 0x01
     e5c:	ec 01       	movw	r28, r24
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	41 e0       	ldi	r20, 0x01	; 1
     e64:	80 17       	cp	r24, r16
     e66:	91 07       	cpc	r25, r17
     e68:	09 f4       	brne	.+2      	; 0xe6c <__vector_34+0x398>
     e6a:	40 e0       	ldi	r20, 0x00	; 0
     e6c:	54 2b       	or	r21, r20
			if (!level || !_difLvl[i]) //Set zero level directly
     e6e:	80 85       	ldd	r24, Z+8	; 0x08
     e70:	81 11       	cpse	r24, r1
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <__vector_34+0x3a4>
				_lvl[i] = 0;
     e74:	12 82       	std	Z+2, r1	; 0x02
     e76:	06 c0       	rjmp	.+12     	; 0xe84 <__vector_34+0x3b0>
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
     e78:	78 9f       	mul	r23, r24
     e7a:	c0 01       	movw	r24, r0
     e7c:	11 24       	eor	r1, r1
     e7e:	85 81       	ldd	r24, Z+5	; 0x05
     e80:	89 0f       	add	r24, r25
     e82:	82 83       	std	Z+2, r24	; 0x02

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
		for (uint8_t i = 0; i < _linkCnt; i++)
     e84:	3f 5f       	subi	r19, 0xFF	; 255
     e86:	36 13       	cpse	r19, r22
     e88:	de cf       	rjmp	.-68     	; 0xe46 <__vector_34+0x372>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     e8a:	51 11       	cpse	r21, r1
     e8c:	29 c0       	rjmp	.+82     	; 0xee0 <__vector_34+0x40c>
			_tickLastChg = sysState.sysTick;
     e8e:	83 e2       	ldi	r24, 0x23	; 35
     e90:	8a 9f       	mul	r24, r26
     e92:	e0 01       	movw	r28, r0
     e94:	8b 9f       	mul	r24, r27
     e96:	d0 0d       	add	r29, r0
     e98:	11 24       	eor	r1, r1
     e9a:	cd 5e       	subi	r28, 0xED	; 237
     e9c:	df 4d       	sbci	r29, 0xDF	; 223
     e9e:	de 01       	movw	r26, r28
     ea0:	53 96       	adiw	r26, 0x13	; 19
     ea2:	ef e0       	ldi	r30, 0x0F	; 15
     ea4:	f1 e2       	ldi	r31, 0x21	; 33
     ea6:	80 81       	ld	r24, Z
     ea8:	8b 8b       	std	Y+19, r24	; 0x13
     eaa:	81 81       	ldd	r24, Z+1	; 0x01
     eac:	11 96       	adiw	r26, 0x01	; 1
     eae:	8c 93       	st	X, r24
     eb0:	11 97       	sbiw	r26, 0x01	; 1
     eb2:	82 81       	ldd	r24, Z+2	; 0x02
     eb4:	12 96       	adiw	r26, 0x02	; 2
     eb6:	8c 93       	st	X, r24
     eb8:	12 97       	sbiw	r26, 0x02	; 2
     eba:	83 81       	ldd	r24, Z+3	; 0x03
     ebc:	13 96       	adiw	r26, 0x03	; 3
     ebe:	8c 93       	st	X, r24
     ec0:	13 97       	sbiw	r26, 0x03	; 3
     ec2:	84 81       	ldd	r24, Z+4	; 0x04
     ec4:	14 96       	adiw	r26, 0x04	; 4
     ec6:	8c 93       	st	X, r24
     ec8:	14 97       	sbiw	r26, 0x04	; 4
     eca:	85 81       	ldd	r24, Z+5	; 0x05
     ecc:	15 96       	adiw	r26, 0x05	; 5
     ece:	8c 93       	st	X, r24
     ed0:	15 97       	sbiw	r26, 0x05	; 5
     ed2:	86 81       	ldd	r24, Z+6	; 0x06
     ed4:	16 96       	adiw	r26, 0x06	; 6
     ed6:	8c 93       	st	X, r24
     ed8:	16 97       	sbiw	r26, 0x06	; 6
     eda:	87 81       	ldd	r24, Z+7	; 0x07
     edc:	17 96       	adiw	r26, 0x07	; 7
     ede:	8c 93       	st	X, r24
		}
		if (level > MSEN_SEN1_TRIG && _lvl == MSEN_VALID_MIN) //Off to on transition
		{
			_lvl = level;
			links[_linkNum].setLevel(255, level > MSEN_SEN2_TRIG); //Start from max light level
			ltEnt = cntDown = false;
     ee0:	e5 e0       	ldi	r30, 0x05	; 5
     ee2:	f0 e2       	ldi	r31, 0x20	; 32
     ee4:	10 82       	st	Z, r1
     ee6:	11 82       	std	Z+1, r1	; 0x01
     ee8:	2b c0       	rjmp	.+86     	; 0xf40 <__vector_34+0x46c>
			return;
		}
		if (level < MSEN_SEN1_TRIG && _lvl > level) //On to off transition
     eea:	39 33       	cpi	r19, 0x39	; 57
     eec:	48 f5       	brcc	.+82     	; 0xf40 <__vector_34+0x46c>
     eee:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <msenCh+0x3>
     ef2:	38 17       	cp	r19, r24
     ef4:	28 f5       	brcc	.+74     	; 0xf40 <__vector_34+0x46c>
		{
			_lvl = MSEN_VALID_MIN;
     ef6:	e5 e0       	ldi	r30, 0x05	; 5
     ef8:	f0 e2       	ldi	r31, 0x20	; 32
     efa:	84 e1       	ldi	r24, 0x14	; 20
     efc:	83 83       	std	Z+3, r24	; 0x03
			_onTimeStamp = sysState.sysTick;
     efe:	af e0       	ldi	r26, 0x0F	; 15
     f00:	b1 e2       	ldi	r27, 0x21	; 33
     f02:	8c 91       	ld	r24, X
     f04:	86 83       	std	Z+6, r24	; 0x06
     f06:	11 96       	adiw	r26, 0x01	; 1
     f08:	8c 91       	ld	r24, X
     f0a:	11 97       	sbiw	r26, 0x01	; 1
     f0c:	87 83       	std	Z+7, r24	; 0x07
     f0e:	12 96       	adiw	r26, 0x02	; 2
     f10:	8c 91       	ld	r24, X
     f12:	12 97       	sbiw	r26, 0x02	; 2
     f14:	80 87       	std	Z+8, r24	; 0x08
     f16:	13 96       	adiw	r26, 0x03	; 3
     f18:	8c 91       	ld	r24, X
     f1a:	13 97       	sbiw	r26, 0x03	; 3
     f1c:	81 87       	std	Z+9, r24	; 0x09
     f1e:	14 96       	adiw	r26, 0x04	; 4
     f20:	8c 91       	ld	r24, X
     f22:	14 97       	sbiw	r26, 0x04	; 4
     f24:	82 87       	std	Z+10, r24	; 0x0a
     f26:	15 96       	adiw	r26, 0x05	; 5
     f28:	8c 91       	ld	r24, X
     f2a:	15 97       	sbiw	r26, 0x05	; 5
     f2c:	83 87       	std	Z+11, r24	; 0x0b
     f2e:	16 96       	adiw	r26, 0x06	; 6
     f30:	8c 91       	ld	r24, X
     f32:	16 97       	sbiw	r26, 0x06	; 6
     f34:	84 87       	std	Z+12, r24	; 0x0c
     f36:	17 96       	adiw	r26, 0x07	; 7
     f38:	8c 91       	ld	r24, X
     f3a:	85 87       	std	Z+13, r24	; 0x0d
			cntDown = true;
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	80 83       	st	Z, r24
	else if (sAdcCnt < 4)
		sysState.linksMask &= ~(0x11 << sAdcCnt); //Clear 'valid' and 'non-zero' bits
	else //sAdcCnt == 4: MSEN channel
		msenCh.setLevel((uint8_t)(result >> 6));

	sAdcCnt++;
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	82 0f       	add	r24, r18
     f44:	80 93 03 20 	sts	0x2003, r24	; 0x802003 <_ZZ11__vector_34E7sAdcCnt>
	ADCA.CH0.MUXCTRL = (sAdcCnt + 1) << ADC_CH_MUXPOS_gp;
     f48:	2e 5f       	subi	r18, 0xFE	; 254
     f4a:	22 0f       	add	r18, r18
     f4c:	22 0f       	add	r18, r18
     f4e:	22 0f       	add	r18, r18
     f50:	20 93 21 02 	sts	0x0221, r18	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
	if (sAdcCnt < 5)
     f54:	85 30       	cpi	r24, 0x05	; 5
     f56:	30 f4       	brcc	.+12     	; 0xf64 <__vector_34+0x490>
		ADCA.CTRLA |= ADC_START_bm;
     f58:	e0 e0       	ldi	r30, 0x00	; 0
     f5a:	f2 e0       	ldi	r31, 0x02	; 2
     f5c:	80 81       	ld	r24, Z
     f5e:	84 60       	ori	r24, 0x04	; 4
     f60:	80 83       	st	Z, r24
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <__vector_34+0x494>
	else
		sAdcCnt = 0;
     f64:	10 92 03 20 	sts	0x2003, r1	; 0x802003 <_ZZ11__vector_34E7sAdcCnt>
}
     f68:	ff 91       	pop	r31
     f6a:	ef 91       	pop	r30
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	bf 91       	pop	r27
     f72:	af 91       	pop	r26
     f74:	9f 91       	pop	r25
     f76:	8f 91       	pop	r24
     f78:	7f 91       	pop	r23
     f7a:	6f 91       	pop	r22
     f7c:	5f 91       	pop	r21
     f7e:	4f 91       	pop	r20
     f80:	3f 91       	pop	r19
     f82:	2f 91       	pop	r18
     f84:	1f 91       	pop	r17
     f86:	0f 91       	pop	r16
     f88:	ff 90       	pop	r15
     f8a:	ef 90       	pop	r14
     f8c:	df 90       	pop	r13
     f8e:	bf 90       	pop	r11
     f90:	af 90       	pop	r10
     f92:	0f 90       	pop	r0
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	0f 90       	pop	r0
     f98:	1f 90       	pop	r1
     f9a:	18 95       	reti

00000f9c <__vector_23>:

ISR(USARTC0_RXC_vect) //Data received from RS485
{
     f9c:	1f 92       	push	r1
     f9e:	0f 92       	push	r0
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	0f 92       	push	r0
     fa4:	11 24       	eor	r1, r1
     fa6:	2f 93       	push	r18
     fa8:	3f 93       	push	r19
     faa:	4f 93       	push	r20
     fac:	5f 93       	push	r21
     fae:	6f 93       	push	r22
     fb0:	7f 93       	push	r23
     fb2:	8f 93       	push	r24
     fb4:	9f 93       	push	r25
     fb6:	af 93       	push	r26
     fb8:	bf 93       	push	r27
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	ef 93       	push	r30
     fc0:	ff 93       	push	r31
	static uint8_t uCnt;
	static uint8_t *rxBuf;
	uint8_t data = USARTC0.DATA;
     fc2:	e0 ec       	ldi	r30, 0xC0	; 192
     fc4:	f8 e0       	ldi	r31, 0x08	; 8
     fc6:	80 81       	ld	r24, Z
	if (USARTC0.CTRLB & USART_MPCM_bm) //Address listening mode
     fc8:	93 81       	ldd	r25, Z+3	; 0x03
     fca:	91 ff       	sbrs	r25, 1
     fcc:	6e c0       	rjmp	.+220    	; 0x10aa <__vector_23+0x10e>
	{
		if (CmdLC <= data && data <= CmdUC)
     fce:	9f ed       	ldi	r25, 0xDF	; 223
     fd0:	98 0f       	add	r25, r24
     fd2:	94 30       	cpi	r25, 0x04	; 4
     fd4:	08 f0       	brcs	.+2      	; 0xfd8 <__vector_23+0x3c>
     fd6:	66 c0       	rjmp	.+204    	; 0x10a4 <__vector_23+0x108>
		{
			USARTC0.CTRLB &= ~USART_MPCM_bm; //Clear MPCM bit
     fd8:	93 81       	ldd	r25, Z+3	; 0x03
     fda:	9d 7f       	andi	r25, 0xFD	; 253
     fdc:	93 83       	std	Z+3, r25	; 0x03
			rxMode = data;
     fde:	80 93 5a 21 	sts	0x215A, r24	; 0x80215a <rxMode>
			if (data == SetConfig)
     fe2:	83 32       	cpi	r24, 0x23	; 35
     fe4:	51 f4       	brne	.+20     	; 0xffa <__vector_23+0x5e>
			{
				uCnt = sizeof(systemConfig); //Bytes to receive
     fe6:	81 e2       	ldi	r24, 0x21	; 33
     fe8:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <_ZZ11__vector_23E4uCnt>
				rxBuf = iobuf; //First byte address in structure
     fec:	8f e9       	ldi	r24, 0x9F	; 159
     fee:	90 e2       	ldi	r25, 0x20	; 32
     ff0:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <_edata>
     ff4:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <_edata+0x1>
     ff8:	84 c0       	rjmp	.+264    	; 0x1102 <__vector_23+0x166>
0, 30, 96,	//Motion sensor on time, low time, low level
0, 0, 0};	//ninthLvl, rtcCorrect, CRC16

void inline UCTXen()
{
	PORTC.OUTSET = PIN1_bm;
     ffa:	82 e0       	ldi	r24, 0x02	; 2
     ffc:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1000:	85 e1       	ldi	r24, 0x15	; 21
    1002:	8a 95       	dec	r24
    1004:	f1 f7       	brne	.-4      	; 0x1002 <__vector_23+0x66>
    1006:	00 00       	nop
				rxBuf = iobuf; //First byte address in structure
			}
			else //Data transmit request
			{
				UCTXen();
				if (rxMode == GetConfig)
    1008:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <rxMode>
    100c:	82 32       	cpi	r24, 0x22	; 34
    100e:	59 f4       	brne	.+22     	; 0x1026 <__vector_23+0x8a>
				{
					EDMA.CH1.TRFCNT = sizeof(systemConfig);
    1010:	e0 e0       	ldi	r30, 0x00	; 0
    1012:	f1 e0       	ldi	r31, 0x01	; 1
    1014:	81 e2       	ldi	r24, 0x21	; 33
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	86 a3       	std	Z+38, r24	; 0x26
    101a:	97 a3       	std	Z+39, r25	; 0x27
					EDMA.CH1.ADDR = (uint16_t)&validConf;
    101c:	87 e2       	ldi	r24, 0x27	; 39
    101e:	91 e2       	ldi	r25, 0x21	; 33
    1020:	80 a7       	std	Z+40, r24	; 0x28
    1022:	91 a7       	std	Z+41, r25	; 0x29
    1024:	39 c0       	rjmp	.+114    	; 0x1098 <__vector_23+0xfc>
				}
				else if (rxMode == GetStatus) //Get state
    1026:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <rxMode>
    102a:	81 32       	cpi	r24, 0x21	; 33
    102c:	c9 f4       	brne	.+50     	; 0x1060 <__vector_23+0xc4>
				{
					memcpy(iobuf, &sysState, sizeof(systemState));
    102e:	cf e9       	ldi	r28, 0x9F	; 159
    1030:	d0 e2       	ldi	r29, 0x20	; 32
    1032:	88 e1       	ldi	r24, 0x18	; 24
    1034:	ef e0       	ldi	r30, 0x0F	; 15
    1036:	f1 e2       	ldi	r31, 0x21	; 33
    1038:	de 01       	movw	r26, r28
    103a:	01 90       	ld	r0, Z+
    103c:	0d 92       	st	X+, r0
    103e:	8a 95       	dec	r24
    1040:	e1 f7       	brne	.-8      	; 0x103a <__vector_23+0x9e>
					((systemState*)iobuf)->CRC16 = CalculateCRC16(iobuf, sizeof(systemState) - 2);
    1042:	66 e1       	ldi	r22, 0x16	; 22
    1044:	ce 01       	movw	r24, r28
    1046:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pvh>
    104a:	8e 8b       	std	Y+22, r24	; 0x16
    104c:	9f 8b       	std	Y+23, r25	; 0x17
					EDMA.CH1.TRFCNT = sizeof(systemState);
    104e:	e0 e0       	ldi	r30, 0x00	; 0
    1050:	f1 e0       	ldi	r31, 0x01	; 1
    1052:	88 e1       	ldi	r24, 0x18	; 24
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	86 a3       	std	Z+38, r24	; 0x26
    1058:	97 a3       	std	Z+39, r25	; 0x27
					EDMA.CH1.ADDR = (uint16_t)iobuf;
    105a:	c0 a7       	std	Z+40, r28	; 0x28
    105c:	d1 a7       	std	Z+41, r29	; 0x29
    105e:	1c c0       	rjmp	.+56     	; 0x1098 <__vector_23+0xfc>
				}
				else //Get on time
				{
					memcpy(iobuf, &channelOT, sizeof(channelsOnTime));
    1060:	88 e3       	ldi	r24, 0x38	; 56
    1062:	e7 ed       	ldi	r30, 0xD7	; 215
    1064:	f0 e2       	ldi	r31, 0x20	; 32
    1066:	af e9       	ldi	r26, 0x9F	; 159
    1068:	b0 e2       	ldi	r27, 0x20	; 32
    106a:	01 90       	ld	r0, Z+
    106c:	0d 92       	st	X+, r0
    106e:	8a 95       	dec	r24
    1070:	e1 f7       	brne	.-8      	; 0x106a <__vector_23+0xce>
					((channelsOnTime*)iobuf)->CRC16 = CalculateCRC16(iobuf, sizeof(channelsOnTime) - 2);
    1072:	66 e3       	ldi	r22, 0x36	; 54
    1074:	8f e9       	ldi	r24, 0x9F	; 159
    1076:	90 e2       	ldi	r25, 0x20	; 32
    1078:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pvh>
    107c:	af e9       	ldi	r26, 0x9F	; 159
    107e:	b0 e2       	ldi	r27, 0x20	; 32
    1080:	d6 96       	adiw	r26, 0x36	; 54
    1082:	8d 93       	st	X+, r24
    1084:	9c 93       	st	X, r25
    1086:	d7 97       	sbiw	r26, 0x37	; 55
					EDMA.CH1.TRFCNT = sizeof(channelsOnTime);
    1088:	e0 e0       	ldi	r30, 0x00	; 0
    108a:	f1 e0       	ldi	r31, 0x01	; 1
    108c:	88 e3       	ldi	r24, 0x38	; 56
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	86 a3       	std	Z+38, r24	; 0x26
    1092:	97 a3       	std	Z+39, r25	; 0x27
					EDMA.CH1.ADDR = (uint16_t)iobuf;
    1094:	a0 a7       	std	Z+40, r26	; 0x28
    1096:	b1 a7       	std	Z+41, r27	; 0x29
				}
				EDMA.CH1.CTRLA |= EDMA_CH_ENABLE_bm;
    1098:	e0 e0       	ldi	r30, 0x00	; 0
    109a:	f1 e0       	ldi	r31, 0x01	; 1
    109c:	80 a1       	ldd	r24, Z+32	; 0x20
    109e:	80 68       	ori	r24, 0x80	; 128
    10a0:	80 a3       	std	Z+32, r24	; 0x20
    10a2:	2f c0       	rjmp	.+94     	; 0x1102 <__vector_23+0x166>
			}
		}
		else
			rxMode = 0;
    10a4:	10 92 5a 21 	sts	0x215A, r1	; 0x80215a <rxMode>
    10a8:	2c c0       	rjmp	.+88     	; 0x1102 <__vector_23+0x166>
	}
	else if (rxMode == SetConfig)
    10aa:	90 91 5a 21 	lds	r25, 0x215A	; 0x80215a <rxMode>
    10ae:	93 32       	cpi	r25, 0x23	; 35
    10b0:	41 f5       	brne	.+80     	; 0x1102 <__vector_23+0x166>
	{
		*rxBuf++ = data;
    10b2:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <_edata>
    10b6:	f0 91 01 20 	lds	r31, 0x2001	; 0x802001 <_edata+0x1>
    10ba:	9f 01       	movw	r18, r30
    10bc:	2f 5f       	subi	r18, 0xFF	; 255
    10be:	3f 4f       	sbci	r19, 0xFF	; 255
    10c0:	20 93 00 20 	sts	0x2000, r18	; 0x802000 <_edata>
    10c4:	30 93 01 20 	sts	0x2001, r19	; 0x802001 <_edata+0x1>
    10c8:	80 83       	st	Z, r24
		if (--uCnt == 0) //Packet received
    10ca:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <_ZZ11__vector_23E4uCnt>
    10ce:	81 50       	subi	r24, 0x01	; 1
    10d0:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <_ZZ11__vector_23E4uCnt>
    10d4:	81 11       	cpse	r24, r1
    10d6:	15 c0       	rjmp	.+42     	; 0x1102 <__vector_23+0x166>
		{
			rxMode = 0;
    10d8:	10 92 5a 21 	sts	0x215A, r1	; 0x80215a <rxMode>
			USARTC0.CTRLB |= USART_MPCM_bm; //Set MPCM bit
    10dc:	e0 ec       	ldi	r30, 0xC0	; 192
    10de:	f8 e0       	ldi	r31, 0x08	; 8
    10e0:	83 81       	ldd	r24, Z+3	; 0x03
    10e2:	82 60       	ori	r24, 0x02	; 2
    10e4:	83 83       	std	Z+3, r24	; 0x03
			if (CalculateCRC16(iobuf, sizeof(systemConfig) - 2) == ((systemConfig*)iobuf)->CRC16)
    10e6:	6f e1       	ldi	r22, 0x1F	; 31
    10e8:	8f e9       	ldi	r24, 0x9F	; 159
    10ea:	90 e2       	ldi	r25, 0x20	; 32
    10ec:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pvh>
    10f0:	20 91 be 20 	lds	r18, 0x20BE	; 0x8020be <iobuf+0x1f>
    10f4:	30 91 bf 20 	lds	r19, 0x20BF	; 0x8020bf <iobuf+0x20>
    10f8:	82 17       	cp	r24, r18
    10fa:	93 07       	cpc	r25, r19
    10fc:	11 f4       	brne	.+4      	; 0x1102 <__vector_23+0x166>
				ApplyConfig();
    10fe:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z11ApplyConfigv>
		}
	}
}
    1102:	ff 91       	pop	r31
    1104:	ef 91       	pop	r30
    1106:	df 91       	pop	r29
    1108:	cf 91       	pop	r28
    110a:	bf 91       	pop	r27
    110c:	af 91       	pop	r26
    110e:	9f 91       	pop	r25
    1110:	8f 91       	pop	r24
    1112:	7f 91       	pop	r23
    1114:	6f 91       	pop	r22
    1116:	5f 91       	pop	r21
    1118:	4f 91       	pop	r20
    111a:	3f 91       	pop	r19
    111c:	2f 91       	pop	r18
    111e:	0f 90       	pop	r0
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	0f 90       	pop	r0
    1124:	1f 90       	pop	r1
    1126:	18 95       	reti

00001128 <__vector_4>:

ISR(EDMA_CH1_vect) //Packet has been sent completely over RS485
{
    1128:	1f 92       	push	r1
    112a:	0f 92       	push	r0
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	0f 92       	push	r0
    1130:	11 24       	eor	r1, r1
    1132:	8f 93       	push	r24
    1134:	ef 93       	push	r30
    1136:	ff 93       	push	r31
	UCRXen(); //Set bus in the idle state
    1138:	84 e0       	ldi	r24, 0x04	; 4
    113a:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	rxMode = 0;
    113e:	10 92 5a 21 	sts	0x215A, r1	; 0x80215a <rxMode>
	EDMA.CH1.CTRLB |= EDMA_CH_TRNIF_bm;
    1142:	e0 e0       	ldi	r30, 0x00	; 0
    1144:	f1 e0       	ldi	r31, 0x01	; 1
    1146:	81 a1       	ldd	r24, Z+33	; 0x21
    1148:	80 61       	ori	r24, 0x10	; 16
    114a:	81 a3       	std	Z+33, r24	; 0x21
}
    114c:	ff 91       	pop	r31
    114e:	ef 91       	pop	r30
    1150:	8f 91       	pop	r24
    1152:	0f 90       	pop	r0
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	0f 90       	pop	r0
    1158:	1f 90       	pop	r1
    115a:	18 95       	reti

0000115c <_Z7mcuInitv>:
#endif

inline void mcuInit()
{
	//Port A configuration: 0-5 analog inputs, 7 inverted output
	PORTA.DIRSET = PIN7_bm;
    115c:	e0 e0       	ldi	r30, 0x00	; 0
    115e:	f6 e0       	ldi	r31, 0x06	; 6
    1160:	80 e8       	ldi	r24, 0x80	; 128
    1162:	81 83       	std	Z+1, r24	; 0x01
	PORTCFG.MPCMASK = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm;
    1164:	a0 eb       	ldi	r26, 0xB0	; 176
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	8f e3       	ldi	r24, 0x3F	; 63
    116a:	8c 93       	st	X, r24
	PORTA.PIN0CTRL = PORT_OPC_TOTEM_gc | PORT_ISC_INPUT_DISABLE_gc;
    116c:	87 e0       	ldi	r24, 0x07	; 7
    116e:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN7CTRL = PORT_OPC_TOTEM_gc | PORT_INVEN_bm;
    1170:	80 e4       	ldi	r24, 0x40	; 64
    1172:	87 8b       	std	Z+23, r24	; 0x17
	//Port C configuration: 0-1, 3-7 outputs
	PORTC.DIRSET = PIN0_bm | PIN1_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
    1174:	9b ef       	ldi	r25, 0xFB	; 251
    1176:	90 93 41 06 	sts	0x0641, r25	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
	//Port D configuration: 0-7 inverted outputs
	PORTD.DIRSET = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
    117a:	e0 e6       	ldi	r30, 0x60	; 96
    117c:	f6 e0       	ldi	r31, 0x06	; 6
    117e:	9f ef       	ldi	r25, 0xFF	; 255
    1180:	91 83       	std	Z+1, r25	; 0x01
	PORTCFG.MPCMASK = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
    1182:	9c 93       	st	X, r25
	PORTD.PIN0CTRL = PORT_OPC_TOTEM_gc | PORT_INVEN_bm;
    1184:	80 8b       	std	Z+16, r24	; 0x10
	//Clock configuration: 32MHz RC with DFLL from XOSC 32768Hz
	OSC.XOSCCTRL = OSC_XOSCSEL_32KHz_gc;
    1186:	e0 e5       	ldi	r30, 0x50	; 80
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	82 e0       	ldi	r24, 0x02	; 2
    118c:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |= OSC_RC32MEN_bm | OSC_XOSCEN_bm;
    118e:	80 81       	ld	r24, Z
    1190:	8a 60       	ori	r24, 0x0A	; 10
    1192:	80 83       	st	Z, r24
	while (!(OSC.STATUS & OSC_XOSCRDY_bm));
    1194:	81 81       	ldd	r24, Z+1	; 0x01
    1196:	83 ff       	sbrs	r24, 3
    1198:	fd cf       	rjmp	.-6      	; 0x1194 <_Z7mcuInitv+0x38>
	while (!(OSC.STATUS & OSC_RC32MRDY_bm));
    119a:	e0 e5       	ldi	r30, 0x50	; 80
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	81 81       	ldd	r24, Z+1	; 0x01
    11a0:	81 ff       	sbrs	r24, 1
    11a2:	fd cf       	rjmp	.-6      	; 0x119e <_Z7mcuInitv+0x42>
	OSC.DFLLCTRL = OSC_RC32MCREF_XOSC32K_gc;
    11a4:	a0 e5       	ldi	r26, 0x50	; 80
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	82 e0       	ldi	r24, 0x02	; 2
    11aa:	16 96       	adiw	r26, 0x06	; 6
    11ac:	8c 93       	st	X, r24
    11ae:	16 97       	sbiw	r26, 0x06	; 6
	DFLLRC32M.CTRL = DFLL_ENABLE_bm;
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
	CCP = CCP_IOREG_gc;
    11b6:	98 ed       	ldi	r25, 0xD8	; 216
    11b8:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
    11ba:	e0 e4       	ldi	r30, 0x40	; 64
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 83       	st	Z, r24
	OSC.CTRL = OSC_RC32MEN_bm | OSC_XOSCEN_bm; //Disable unused clock sources
    11c0:	8a e0       	ldi	r24, 0x0A	; 10
    11c2:	8c 93       	st	X, r24
	CLK.RTCCTRL = CLK_RTCSRC_TOSC_gc | CLK_RTCEN_bm; //1024Hz RTC clock source
    11c4:	83 e0       	ldi	r24, 0x03	; 3
    11c6:	83 83       	std	Z+3, r24	; 0x03
	while (RTC.STATUS & RTC_SYNCBUSY_bm);
    11c8:	e0 e0       	ldi	r30, 0x00	; 0
    11ca:	f4 e0       	ldi	r31, 0x04	; 4
    11cc:	81 81       	ldd	r24, Z+1	; 0x01
    11ce:	80 fd       	sbrc	r24, 0
    11d0:	fd cf       	rjmp	.-6      	; 0x11cc <_Z7mcuInitv+0x70>
	CCP = CCP_IOREG_gc;
    11d2:	38 ed       	ldi	r19, 0xD8	; 216
    11d4:	34 bf       	out	0x34, r19	; 52
	CLK.LOCK = CLK_LOCK_bm; //Disable further changes in clock system
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	80 93 42 00 	sts	0x0042, r24	; 0x800042 <__TEXT_REGION_LENGTH__+0x700042>
	//PMIC: enable interrupts
	PMIC.CTRL = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
    11dc:	47 e0       	ldi	r20, 0x07	; 7
    11de:	40 93 a2 00 	sts	0x00A2, r20	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	//RTC configuration: 1024 / 2 = 512Hz clock, medium level interrupt
	RTC.PER = 16; //32 overflows per second
    11e2:	e0 e0       	ldi	r30, 0x00	; 0
    11e4:	f4 e0       	ldi	r31, 0x04	; 4
    11e6:	60 e1       	ldi	r22, 0x10	; 16
    11e8:	70 e0       	ldi	r23, 0x00	; 0
    11ea:	62 87       	std	Z+10, r22	; 0x0a
    11ec:	73 87       	std	Z+11, r23	; 0x0b
	RTC.INTCTRL = RTC_OVFINTLVL_MED_gc;
    11ee:	92 e0       	ldi	r25, 0x02	; 2
    11f0:	92 83       	std	Z+2, r25	; 0x02
	RTC.CTRL = RTC_PRESCALER_DIV2_gc;
    11f2:	90 83       	st	Z, r25
	RTC.CNT = 0;
    11f4:	10 86       	std	Z+8, r1	; 0x08
    11f6:	11 86       	std	Z+9, r1	; 0x09
	//USARTC configuration: start / 9 data / 2 stop; 76.8kbps baud, multi-processor communication
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm | USART_MPCM_bm;
    11f8:	e0 ec       	ldi	r30, 0xC0	; 192
    11fa:	f8 e0       	ldi	r31, 0x08	; 8
    11fc:	9a e1       	ldi	r25, 0x1A	; 26
    11fe:	93 83       	std	Z+3, r25	; 0x03
	USARTC0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_SBMODE_bm | USART_CHSIZE_9BIT_gc;
    1200:	9f e0       	ldi	r25, 0x0F	; 15
    1202:	94 83       	std	Z+4, r25	; 0x04
	USARTC0.BAUDCTRLA = 12;
    1204:	9c e0       	ldi	r25, 0x0C	; 12
    1206:	96 83       	std	Z+6, r25	; 0x06
	USARTC0.BAUDCTRLB = 1 << USART_BSCALE_gp;
    1208:	50 e1       	ldi	r21, 0x10	; 16
    120a:	57 83       	std	Z+7, r21	; 0x07
	#ifdef DSI_EDMA
	USARTC0.CTRLA = USART_DRIE_bm | USART_RXCINTLVL_HI_gc;
    120c:	90 e7       	ldi	r25, 0x70	; 112
    120e:	92 83       	std	Z+2, r25	; 0x02
	#else
	USARTC0.CTRLA = USART_DRIE_bm | USART_RXCINTLVL_MED_gc;
	#endif
	//ADC configuration: 1MHz, 15bit oversampling
	ADCA.CTRLA = ADC_ENABLE_bm;
    1210:	e0 e0       	ldi	r30, 0x00	; 0
    1212:	f2 e0       	ldi	r31, 0x02	; 2
    1214:	80 83       	st	Z, r24
	ADCA.CTRLB = ADC_CONMODE_bm | ADC_RESOLUTION_MT12BIT_gc; //Signed mode
    1216:	92 e1       	ldi	r25, 0x12	; 18
    1218:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;
    121a:	20 e2       	ldi	r18, 0x20	; 32
    121c:	22 83       	std	Z+2, r18	; 0x02
	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc;
    121e:	93 e0       	ldi	r25, 0x03	; 3
    1220:	94 83       	std	Z+4, r25	; 0x04
	ADCA.SAMPCTRL = 7 << ADC_SAMPVAL_gp;
    1222:	40 87       	std	Z+8, r20	; 0x08
	ADCA.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc | ADC_CH_GAIN_1X_gc;
    1224:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.CH0.INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc;
    1226:	82 a3       	std	Z+34, r24	; 0x22
	ADCA.CH0.AVGCTRL = ADC_CH_SAMPNUM_16X_gc; //This will produce 15 bit result
    1228:	44 e0       	ldi	r20, 0x04	; 4
    122a:	44 a7       	std	Z+44, r20	; 0x2c
	//TCC4 configuration: 8MHz, dual slope 244Hz (heartbeat LED)
	TCC4.CTRLA = TC_CLKSEL_DIV4_gc;
    122c:	e0 e0       	ldi	r30, 0x00	; 0
    122e:	f8 e0       	ldi	r31, 0x08	; 8
    1230:	90 83       	st	Z, r25
	TCC4.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_DSTOP_gc;
    1232:	45 e0       	ldi	r20, 0x05	; 5
    1234:	41 83       	std	Z+1, r20	; 0x01
	TCC4.CTRLC = TC4_POLA_bm;
    1236:	52 83       	std	Z+2, r21	; 0x02
	TCC4.CTRLE = TC_CCAMODE_COMP_gc;
    1238:	84 83       	std	Z+4, r24	; 0x04
	TCC4.PERBUF = 16384;
    123a:	60 e0       	ldi	r22, 0x00	; 0
    123c:	70 e4       	ldi	r23, 0x40	; 64
    123e:	66 ab       	std	Z+54, r22	; 0x36
    1240:	77 ab       	std	Z+55, r23	; 0x37
	TCC4.CCABUF = 0;
    1242:	10 ae       	std	Z+56, r1	; 0x38
    1244:	11 ae       	std	Z+57, r1	; 0x39
	TCC4.CTRLGCLR = TC4_STOP_bm;
    1246:	20 87       	std	Z+8, r18	; 0x08
	//TCD5 configuration: 500kHz, 1199Hz overflow rate
	TCD5.CTRLA = TC_CLKSEL_DIV64_gc;
    1248:	e0 e4       	ldi	r30, 0x40	; 64
    124a:	f9 e0       	ldi	r31, 0x09	; 9
    124c:	40 83       	st	Z, r20
	TCD5.CTRLB = TC_WGMODE_NORMAL_gc;
    124e:	11 82       	std	Z+1, r1	; 0x01
	TCD5.PERBUF = 417;
    1250:	41 ea       	ldi	r20, 0xA1	; 161
    1252:	51 e0       	ldi	r21, 0x01	; 1
    1254:	46 ab       	std	Z+54, r20	; 0x36
    1256:	57 ab       	std	Z+55, r21	; 0x37
	TCD5.CTRLGCLR = TC5_STOP_bm;
    1258:	20 87       	std	Z+8, r18	; 0x08
	//EDMA peripheral channel 1: USARTC write transfer
	EDMA.CH1.CTRLB = EDMA_CH_TRNINTLVL_LO_gc; //Medium-level interrupt
    125a:	e0 e0       	ldi	r30, 0x00	; 0
    125c:	f1 e0       	ldi	r31, 0x01	; 1
    125e:	81 a3       	std	Z+33, r24	; 0x21
	EDMA.CH1.ADDRCTRL = EDMA_CH_RELOAD_BLOCK_gc | EDMA_CH_DIR_INC_gc;
    1260:	21 e1       	ldi	r18, 0x11	; 17
    1262:	22 a3       	std	Z+34, r18	; 0x22
	EDMA.CH1.TRIGSRC = EDMA_CH_TRIGSRC_USARTC0_DRE_gc;
    1264:	2d e4       	ldi	r18, 0x4D	; 77
    1266:	24 a3       	std	Z+36, r18	; 0x24
	#ifdef DSI_EDMA
	//EDMA standard channel 2: PORTD.OUT write
	EVSYS.CH2MUX = EVSYS_CHMUX_TCD5_OVF_gc;
    1268:	30 93 82 01 	sts	0x0182, r19	; 0x800182 <__TEXT_REGION_LENGTH__+0x700182>
	EDMA.CH2.TRIGSRC = EDMA_CH_TRIGSRC_EVSYS_CH2_gc;
    126c:	94 ab       	std	Z+52, r25	; 0x34
	EDMA.CH2.TRFCNT = sizeof(DSI8xFrames);
    126e:	22 e1       	ldi	r18, 0x12	; 18
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	26 ab       	std	Z+54, r18	; 0x36
    1274:	37 ab       	std	Z+55, r19	; 0x37
	EDMA.CH2.ADDR = (register16_t)DSI8xFrames;
    1276:	28 e4       	ldi	r18, 0x48	; 72
    1278:	31 e2       	ldi	r19, 0x21	; 33
    127a:	20 af       	std	Z+56, r18	; 0x38
    127c:	31 af       	std	Z+57, r19	; 0x39
	EDMA.CH2.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_INC_gc;
    127e:	91 e3       	ldi	r25, 0x31	; 49
    1280:	92 ab       	std	Z+50, r25	; 0x32
	EDMA.CH2.DESTADDR = (register16_t)&PORTD.OUT;
    1282:	24 e6       	ldi	r18, 0x64	; 100
    1284:	36 e0       	ldi	r19, 0x06	; 6
    1286:	24 af       	std	Z+60, r18	; 0x3c
    1288:	35 af       	std	Z+61, r19	; 0x3d
	EDMA.CH2.DESTADDRCTRL = EDMA_CH_RELOAD_NONE_gc | EDMA_CH_DIR_FIXED_gc;
    128a:	13 aa       	std	Z+51, r1	; 0x33
	#endif
	//EDMA: 1 standard and 2 peripheral channels
	EDMA.CTRL = EDMA_ENABLE_bm | EDMA_CHMODE_STD2_gc | EDMA_DBUFMODE_DISABLE_gc | EDMA_PRIMODE_RR0123_gc;
    128c:	90 ea       	ldi	r25, 0xA0	; 160
    128e:	90 83       	st	Z, r25
	//CRC: CRC16 mode, source IO interface
	CRC.CTRL = CRC_SOURCE_IO_gc;
    1290:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
	sei();
    1294:	78 94       	sei
    1296:	08 95       	ret

00001298 <main>:
}

int main(void)
{
	mcuInit();
    1298:	0e 94 ae 08 	call	0x115c	; 0x115c <_Z7mcuInitv>
	eeprom_read_block(&channelOT, &savedCOT, sizeof(channelsOnTime));
    129c:	48 e3       	ldi	r20, 0x38	; 56
    129e:	50 e0       	ldi	r21, 0x00	; 0
    12a0:	61 e2       	ldi	r22, 0x21	; 33
    12a2:	70 e0       	ldi	r23, 0x00	; 0
    12a4:	87 ed       	ldi	r24, 0xD7	; 215
    12a6:	90 e2       	ldi	r25, 0x20	; 32
    12a8:	0e 94 da 09 	call	0x13b4	; 0x13b4 <eeprom_read_block>
	eeprom_read_block(iobuf, &savedConfig, sizeof(systemConfig) - 2);
    12ac:	4f e1       	ldi	r20, 0x1F	; 31
    12ae:	50 e0       	ldi	r21, 0x00	; 0
    12b0:	60 e0       	ldi	r22, 0x00	; 0
    12b2:	70 e0       	ldi	r23, 0x00	; 0
    12b4:	8f e9       	ldi	r24, 0x9F	; 159
    12b6:	90 e2       	ldi	r25, 0x20	; 32
    12b8:	0e 94 da 09 	call	0x13b4	; 0x13b4 <eeprom_read_block>
	((systemConfig*)iobuf)->overrideCfg = ((systemConfig*)iobuf)->groupConf = 0; //Ignore saved overrides
    12bc:	cf e9       	ldi	r28, 0x9F	; 159
    12be:	d0 e2       	ldi	r29, 0x20	; 32
    12c0:	1d 8e       	std	Y+29, r1	; 0x1d
    12c2:	19 8a       	std	Y+17, r1	; 0x11
	((systemConfig*)iobuf)->CRC16 = CalculateCRC16(iobuf, sizeof(systemConfig) - 2);
    12c4:	6f e1       	ldi	r22, 0x1F	; 31
    12c6:	ce 01       	movw	r24, r28
    12c8:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pvh>
    12cc:	8f 8f       	std	Y+31, r24	; 0x1f
    12ce:	98 a3       	std	Y+32, r25	; 0x20
	ApplyConfig();
    12d0:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z11ApplyConfigv>
    12d4:	ff cf       	rjmp	.-2      	; 0x12d4 <main+0x3c>

000012d6 <_GLOBAL__sub_I_gLevels>:
	uint64_t _tickLastChg, _onTimeStamp;

public:
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    12d6:	e3 e1       	ldi	r30, 0x13	; 19
    12d8:	f0 e2       	ldi	r31, 0x20	; 32
    12da:	93 e0       	ldi	r25, 0x03	; 3
    12dc:	91 83       	std	Z+1, r25	; 0x01
		_link[0] = posA;
    12de:	87 e0       	ldi	r24, 0x07	; 7
    12e0:	83 83       	std	Z+3, r24	; 0x03
		_link[1] = posB;
    12e2:	86 e0       	ldi	r24, 0x06	; 6
    12e4:	84 83       	std	Z+4, r24	; 0x04
		_link[2] = posC;
    12e6:	85 e0       	ldi	r24, 0x05	; 5
    12e8:	85 83       	std	Z+5, r24	; 0x05
		_linkNum = num;
    12ea:	12 82       	std	Z+2, r1	; 0x02
		_chActMask = 0x10 << num;
    12ec:	80 e1       	ldi	r24, 0x10	; 16
    12ee:	82 8b       	std	Z+18, r24	; 0x12
	uint64_t _tickLastChg, _onTimeStamp;

public:
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    12f0:	94 a3       	std	Z+36, r25	; 0x24
		_link[0] = posA;
    12f2:	84 e0       	ldi	r24, 0x04	; 4
    12f4:	86 a3       	std	Z+38, r24	; 0x26
		_link[1] = posB;
    12f6:	97 a3       	std	Z+39, r25	; 0x27
		_link[2] = posC;
    12f8:	82 e0       	ldi	r24, 0x02	; 2
    12fa:	80 a7       	std	Z+40, r24	; 0x28
		_linkNum = num;
    12fc:	21 e0       	ldi	r18, 0x01	; 1
    12fe:	25 a3       	std	Z+37, r18	; 0x25
		_chActMask = 0x10 << num;
    1300:	30 e2       	ldi	r19, 0x20	; 32
    1302:	35 ab       	std	Z+53, r19	; 0x35
	uint64_t _tickLastChg, _onTimeStamp;

public:
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    1304:	80 93 5a 20 	sts	0x205A, r24	; 0x80205a <links+0x47>
		_link[0] = posA;
    1308:	20 93 5c 20 	sts	0x205C, r18	; 0x80205c <links+0x49>
		_link[1] = posB;
    130c:	10 92 5d 20 	sts	0x205D, r1	; 0x80205d <links+0x4a>
		_link[2] = posC;
    1310:	10 92 5e 20 	sts	0x205E, r1	; 0x80205e <links+0x4b>
		_linkNum = num;
    1314:	80 93 5b 20 	sts	0x205B, r24	; 0x80205b <links+0x48>
		_chActMask = 0x10 << num;
    1318:	30 e4       	ldi	r19, 0x40	; 64
    131a:	30 93 6b 20 	sts	0x206B, r19	; 0x80206b <links+0x58>
	uint64_t _tickLastChg, _onTimeStamp;

public:
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    131e:	20 93 7d 20 	sts	0x207D, r18	; 0x80207d <links+0x6a>
		_link[0] = posA;
    1322:	28 e0       	ldi	r18, 0x08	; 8
    1324:	20 93 7f 20 	sts	0x207F, r18	; 0x80207f <links+0x6c>
		_link[1] = posB;
    1328:	10 92 80 20 	sts	0x2080, r1	; 0x802080 <links+0x6d>
		_link[2] = posC;
    132c:	10 92 81 20 	sts	0x2081, r1	; 0x802081 <links+0x6e>
		_linkNum = num;
    1330:	90 93 7e 20 	sts	0x207E, r25	; 0x80207e <links+0x6b>
		_chActMask = 0x10 << num;
    1334:	90 e8       	ldi	r25, 0x80	; 128
    1336:	90 93 8e 20 	sts	0x208E, r25	; 0x80208e <links+0x7b>
	uint8_t _onTime, _fTime;
	uint64_t _onTimeStamp;
public:
	Msen(uint8_t actLink)
	{
		_linkNum = actLink;
    133a:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <msenCh+0x2>
    133e:	08 95       	ret

00001340 <__divmodhi4>:
    1340:	97 fb       	bst	r25, 7
    1342:	07 2e       	mov	r0, r23
    1344:	16 f4       	brtc	.+4      	; 0x134a <__divmodhi4+0xa>
    1346:	00 94       	com	r0
    1348:	07 d0       	rcall	.+14     	; 0x1358 <__divmodhi4_neg1>
    134a:	77 fd       	sbrc	r23, 7
    134c:	09 d0       	rcall	.+18     	; 0x1360 <__divmodhi4_neg2>
    134e:	0e 94 c0 09 	call	0x1380	; 0x1380 <__udivmodhi4>
    1352:	07 fc       	sbrc	r0, 7
    1354:	05 d0       	rcall	.+10     	; 0x1360 <__divmodhi4_neg2>
    1356:	3e f4       	brtc	.+14     	; 0x1366 <__divmodhi4_exit>

00001358 <__divmodhi4_neg1>:
    1358:	90 95       	com	r25
    135a:	81 95       	neg	r24
    135c:	9f 4f       	sbci	r25, 0xFF	; 255
    135e:	08 95       	ret

00001360 <__divmodhi4_neg2>:
    1360:	70 95       	com	r23
    1362:	61 95       	neg	r22
    1364:	7f 4f       	sbci	r23, 0xFF	; 255

00001366 <__divmodhi4_exit>:
    1366:	08 95       	ret

00001368 <__adddi3_s8>:
    1368:	00 24       	eor	r0, r0
    136a:	a7 fd       	sbrc	r26, 7
    136c:	00 94       	com	r0
    136e:	2a 0f       	add	r18, r26
    1370:	30 1d       	adc	r19, r0
    1372:	40 1d       	adc	r20, r0
    1374:	50 1d       	adc	r21, r0
    1376:	60 1d       	adc	r22, r0
    1378:	70 1d       	adc	r23, r0
    137a:	80 1d       	adc	r24, r0
    137c:	90 1d       	adc	r25, r0
    137e:	08 95       	ret

00001380 <__udivmodhi4>:
    1380:	aa 1b       	sub	r26, r26
    1382:	bb 1b       	sub	r27, r27
    1384:	51 e1       	ldi	r21, 0x11	; 17
    1386:	07 c0       	rjmp	.+14     	; 0x1396 <__udivmodhi4_ep>

00001388 <__udivmodhi4_loop>:
    1388:	aa 1f       	adc	r26, r26
    138a:	bb 1f       	adc	r27, r27
    138c:	a6 17       	cp	r26, r22
    138e:	b7 07       	cpc	r27, r23
    1390:	10 f0       	brcs	.+4      	; 0x1396 <__udivmodhi4_ep>
    1392:	a6 1b       	sub	r26, r22
    1394:	b7 0b       	sbc	r27, r23

00001396 <__udivmodhi4_ep>:
    1396:	88 1f       	adc	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	5a 95       	dec	r21
    139c:	a9 f7       	brne	.-22     	; 0x1388 <__udivmodhi4_loop>
    139e:	80 95       	com	r24
    13a0:	90 95       	com	r25
    13a2:	bc 01       	movw	r22, r24
    13a4:	cd 01       	movw	r24, r26
    13a6:	08 95       	ret

000013a8 <__tablejump2__>:
    13a8:	ee 0f       	add	r30, r30
    13aa:	ff 1f       	adc	r31, r31
    13ac:	05 90       	lpm	r0, Z+
    13ae:	f4 91       	lpm	r31, Z
    13b0:	e0 2d       	mov	r30, r0
    13b2:	09 94       	ijmp

000013b4 <eeprom_read_block>:
    13b4:	60 50       	subi	r22, 0x00	; 0
    13b6:	70 4f       	sbci	r23, 0xF0	; 240
    13b8:	0c 94 17 0a 	jmp	0x142e	; 0x142e <memcpy>

000013bc <eeprom_update_block>:
    13bc:	dc 01       	movw	r26, r24
    13be:	a4 0f       	add	r26, r20
    13c0:	b5 1f       	adc	r27, r21
    13c2:	41 50       	subi	r20, 0x01	; 1
    13c4:	50 40       	sbci	r21, 0x00	; 0
    13c6:	48 f0       	brcs	.+18     	; 0x13da <eeprom_update_block+0x1e>
    13c8:	cb 01       	movw	r24, r22
    13ca:	84 0f       	add	r24, r20
    13cc:	95 1f       	adc	r25, r21
    13ce:	2e 91       	ld	r18, -X
    13d0:	0e 94 ef 09 	call	0x13de	; 0x13de <eeprom_update_r18>
    13d4:	41 50       	subi	r20, 0x01	; 1
    13d6:	50 40       	sbci	r21, 0x00	; 0
    13d8:	d0 f7       	brcc	.-12     	; 0x13ce <eeprom_update_block+0x12>
    13da:	08 95       	ret

000013dc <eeprom_update_byte>:
    13dc:	26 2f       	mov	r18, r22

000013de <eeprom_update_r18>:
    13de:	0e 94 13 0a 	call	0x1426	; 0x1426 <eeprom_mapen>
    13e2:	00 80       	ld	r0, Z
    13e4:	02 16       	cp	r0, r18
    13e6:	19 f0       	breq	.+6      	; 0x13ee <eeprom_update_r18+0x10>
    13e8:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <eeprom_write_r18>
    13ec:	01 97       	sbiw	r24, 0x01	; 1
    13ee:	01 97       	sbiw	r24, 0x01	; 1
    13f0:	08 95       	ret

000013f2 <eeprom_write_byte>:
    13f2:	26 2f       	mov	r18, r22

000013f4 <eeprom_write_r18>:
    13f4:	af 93       	push	r26
    13f6:	bf 93       	push	r27
    13f8:	e0 ec       	ldi	r30, 0xC0	; 192
    13fa:	f1 e0       	ldi	r31, 0x01	; 1
    13fc:	37 85       	ldd	r19, Z+15	; 0x0f
    13fe:	37 fd       	sbrc	r19, 7
    1400:	fd cf       	rjmp	.-6      	; 0x13fc <eeprom_write_r18+0x8>
    1402:	dc 01       	movw	r26, r24
    1404:	a0 50       	subi	r26, 0x00	; 0
    1406:	b0 4f       	sbci	r27, 0xF0	; 240
    1408:	2c 93       	st	X, r18
    140a:	25 e3       	ldi	r18, 0x35	; 53
    140c:	22 87       	std	Z+10, r18	; 0x0a
    140e:	28 ed       	ldi	r18, 0xD8	; 216
    1410:	31 e0       	ldi	r19, 0x01	; 1
    1412:	24 bf       	out	0x34, r18	; 52
    1414:	33 87       	std	Z+11, r19	; 0x0b
    1416:	01 96       	adiw	r24, 0x01	; 1
    1418:	bf 91       	pop	r27
    141a:	af 91       	pop	r26
    141c:	08 95       	ret

0000141e <eeprom_read_byte>:
    141e:	03 d0       	rcall	.+6      	; 0x1426 <eeprom_mapen>
    1420:	80 81       	ld	r24, Z
    1422:	99 27       	eor	r25, r25
    1424:	08 95       	ret

00001426 <eeprom_mapen>:
    1426:	fc 01       	movw	r30, r24
    1428:	e0 50       	subi	r30, 0x00	; 0
    142a:	f0 4f       	sbci	r31, 0xF0	; 240
    142c:	08 95       	ret

0000142e <memcpy>:
    142e:	fb 01       	movw	r30, r22
    1430:	dc 01       	movw	r26, r24
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <memcpy+0xa>
    1434:	01 90       	ld	r0, Z+
    1436:	0d 92       	st	X+, r0
    1438:	41 50       	subi	r20, 0x01	; 1
    143a:	50 40       	sbci	r21, 0x00	; 0
    143c:	d8 f7       	brcc	.-10     	; 0x1434 <memcpy+0x6>
    143e:	08 95       	ret

00001440 <_exit>:
    1440:	f8 94       	cli

00001442 <__stop_program>:
    1442:	ff cf       	rjmp	.-2      	; 0x1442 <__stop_program>
