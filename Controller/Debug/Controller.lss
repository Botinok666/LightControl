
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001550  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000163d  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000016f  00802000  00802000  000015e4  2**0
                  ALLOC
  3 .eeprom       00000059  00810000  00810000  000015e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000163d  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001670  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000110  00000000  00000000  000016b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000050d8  00000000  00000000  000017c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001f4a  00000000  00000000  00006898  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f51  00000000  00000000  000087e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000030c  00000000  00000000  00009734  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003555  00000000  00000000  00009a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000011f6  00000000  00000000  0000cf95  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000168  00000000  00000000  0000e18b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 57 00 	jmp	0xae	; 0xae <__ctors_end>
       4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       c:	0c 94 c4 08 	jmp	0x1188	; 0x1188 <__vector_3>
      10:	0c 94 00 09 	jmp	0x1200	; 0x1200 <__vector_4>
      14:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      18:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      1c:	0c 94 94 01 	jmp	0x328	; 0x328 <__vector_7>
      20:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      24:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      28:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      2c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      30:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      34:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      38:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      3c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      40:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      44:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      48:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      4c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      50:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      54:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      58:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      5c:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__vector_23>
      60:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      68:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      6c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      70:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      74:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      78:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      7c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      80:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      84:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      88:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__vector_34>
      8c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      90:	0c 94 14 09 	jmp	0x1228	; 0x1228 <__vector_36>
      94:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      98:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      9c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      a0:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      a4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      a8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>

000000ac <__ctors_start>:
      ac:	f1 09       	sbc	r31, r1

000000ae <__ctors_end>:
      ae:	11 24       	eor	r1, r1
      b0:	1f be       	out	0x3f, r1	; 63
      b2:	cf ef       	ldi	r28, 0xFF	; 255
      b4:	cd bf       	out	0x3d, r28	; 61
      b6:	d7 e2       	ldi	r29, 0x27	; 39
      b8:	de bf       	out	0x3e, r29	; 62

000000ba <__do_clear_bss>:
      ba:	21 e2       	ldi	r18, 0x21	; 33
      bc:	a0 e0       	ldi	r26, 0x00	; 0
      be:	b0 e2       	ldi	r27, 0x20	; 32
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	af 36       	cpi	r26, 0x6F	; 111
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>

000000ca <__do_global_ctors>:
      ca:	10 e0       	ldi	r17, 0x00	; 0
      cc:	c7 e5       	ldi	r28, 0x57	; 87
      ce:	d0 e0       	ldi	r29, 0x00	; 0
      d0:	04 c0       	rjmp	.+8      	; 0xda <__do_global_ctors+0x10>
      d2:	21 97       	sbiw	r28, 0x01	; 1
      d4:	fe 01       	movw	r30, r28
      d6:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__tablejump2__>
      da:	c6 35       	cpi	r28, 0x56	; 86
      dc:	d1 07       	cpc	r29, r17
      de:	c9 f7       	brne	.-14     	; 0xd2 <__do_global_ctors+0x8>
      e0:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <main>
      e4:	0c 94 a6 0a 	jmp	0x154c	; 0x154c <_exit>

000000e8 <__bad_interrupt>:
      e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ec <_Z14CalculateCRC16Pvh>:
}

uint16_t CalculateCRC16(void *arr, uint8_t count)
{
	uint8_t *ptr = (uint8_t*)arr;
	CRC.CTRL |= CRC_RESET_RESET0_gc;
      ec:	e0 ed       	ldi	r30, 0xD0	; 208
      ee:	f0 e0       	ldi	r31, 0x00	; 0
      f0:	20 81       	ld	r18, Z
      f2:	20 68       	ori	r18, 0x80	; 128
      f4:	20 83       	st	Z, r18
	while (--count)
      f6:	61 50       	subi	r22, 0x01	; 1
      f8:	51 f0       	breq	.+20     	; 0x10e <_Z14CalculateCRC16Pvh+0x22>
      fa:	e8 2f       	mov	r30, r24
      fc:	f9 2f       	mov	r31, r25
		CRC.DATAIN = *ptr++;
      fe:	a0 ed       	ldi	r26, 0xD0	; 208
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	81 91       	ld	r24, Z+
     104:	13 96       	adiw	r26, 0x03	; 3
     106:	8c 93       	st	X, r24
     108:	13 97       	sbiw	r26, 0x03	; 3

uint16_t CalculateCRC16(void *arr, uint8_t count)
{
	uint8_t *ptr = (uint8_t*)arr;
	CRC.CTRL |= CRC_RESET_RESET0_gc;
	while (--count)
     10a:	61 50       	subi	r22, 0x01	; 1
     10c:	d1 f7       	brne	.-12     	; 0x102 <_Z14CalculateCRC16Pvh+0x16>
		CRC.DATAIN = *ptr++;
	return ((uint16_t)CRC.CHECKSUM1 << 8) | CRC.CHECKSUM0;
     10e:	e0 ed       	ldi	r30, 0xD0	; 208
     110:	f0 e0       	ldi	r31, 0x00	; 0
     112:	25 81       	ldd	r18, Z+5	; 0x05
     114:	84 81       	ldd	r24, Z+4	; 0x04
     116:	90 e0       	ldi	r25, 0x00	; 0
}
     118:	92 2b       	or	r25, r18
     11a:	08 95       	ret

0000011c <_Z11ApplyConfigv>:

void ApplyConfig()
{
     11c:	2f 92       	push	r2
     11e:	3f 92       	push	r3
     120:	4f 92       	push	r4
     122:	5f 92       	push	r5
     124:	6f 92       	push	r6
     126:	7f 92       	push	r7
     128:	8f 92       	push	r8
     12a:	9f 92       	push	r9
     12c:	af 92       	push	r10
     12e:	bf 92       	push	r11
     130:	cf 92       	push	r12
     132:	df 92       	push	r13
     134:	ef 92       	push	r14
     136:	ff 92       	push	r15
     138:	0f 93       	push	r16
     13a:	1f 93       	push	r17
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
     140:	cd b7       	in	r28, 0x3d	; 61
     142:	de b7       	in	r29, 0x3e	; 62
     144:	25 97       	sbiw	r28, 0x05	; 5
     146:	cd bf       	out	0x3d, r28	; 61
     148:	de bf       	out	0x3e, r29	; 62
	systemConfig *temp = (systemConfig*)iobuf;
	//Both bits 7 are set: one of the on-time counters must be rewritten
	if ((temp->groupConf & 0x80) && (temp->overrideCfg & 0x80))
     14a:	50 90 b9 20 	lds	r5, 0x20B9	; 0x8020b9 <iobuf+0x1d>
     14e:	55 20       	and	r5, r5
     150:	24 f5       	brge	.+72     	; 0x19a <_Z11ApplyConfigv+0x7e>
     152:	80 91 ad 20 	lds	r24, 0x20AD	; 0x8020ad <iobuf+0x11>
     156:	88 23       	and	r24, r24
     158:	04 f5       	brge	.+64     	; 0x19a <_Z11ApplyConfigv+0x7e>
	{
		uint8_t j = temp->overrideCfg & 0xF; //Update on-time of link
		channelOT.linkOnTime[j] = *((uint32_t*)temp->minLvl);
     15a:	8f 70       	andi	r24, 0x0F	; 15
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	fc 01       	movw	r30, r24
     160:	ee 0f       	add	r30, r30
     162:	ff 1f       	adc	r31, r31
     164:	ee 0f       	add	r30, r30
     166:	ff 1f       	adc	r31, r31
     168:	ec 52       	subi	r30, 0x2C	; 44
     16a:	ff 4d       	sbci	r31, 0xDF	; 223
     16c:	ac e9       	ldi	r26, 0x9C	; 156
     16e:	b0 e2       	ldi	r27, 0x20	; 32
     170:	4d 91       	ld	r20, X+
     172:	5d 91       	ld	r21, X+
     174:	6d 91       	ld	r22, X+
     176:	7c 91       	ld	r23, X
     178:	13 97       	sbiw	r26, 0x03	; 3
     17a:	40 83       	st	Z, r20
     17c:	51 83       	std	Z+1, r21	; 0x01
     17e:	62 83       	std	Z+2, r22	; 0x02
     180:	73 83       	std	Z+3, r23	; 0x03
		channelOT.linkSwCnt[j] = *((uint16_t*)temp->maxLvl);
     182:	88 0f       	add	r24, r24
     184:	99 1f       	adc	r25, r25
     186:	fc 01       	movw	r30, r24
     188:	e8 50       	subi	r30, 0x08	; 8
     18a:	ff 4d       	sbci	r31, 0xDF	; 223
     18c:	18 96       	adiw	r26, 0x08	; 8
     18e:	8d 91       	ld	r24, X+
     190:	9c 91       	ld	r25, X
     192:	19 97       	sbiw	r26, 0x09	; 9
     194:	80 83       	st	Z, r24
     196:	91 83       	std	Z+1, r25	; 0x01
		return;
     198:	b1 c0       	rjmp	.+354    	; 0x2fc <_Z11ApplyConfigv+0x1e0>
	}
	memcpy(&validConf, iobuf, sizeof(systemConfig));
     19a:	81 e2       	ldi	r24, 0x21	; 33
     19c:	ec e9       	ldi	r30, 0x9C	; 156
     19e:	f0 e2       	ldi	r31, 0x20	; 32
     1a0:	a4 e2       	ldi	r26, 0x24	; 36
     1a2:	b1 e2       	ldi	r27, 0x21	; 33
     1a4:	01 90       	ld	r0, Z+
     1a6:	0d 92       	st	X+, r0
     1a8:	8a 95       	dec	r24
     1aa:	e1 f7       	brne	.-8      	; 0x1a4 <_Z11ApplyConfigv+0x88>
		_fadeRate = (min > 160) ? 160 : min;
		_linkDelay = (max > 63) ? 64 : max + 1;
		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			pos = _link[i];
			if (validConf.overrideCfg == (pos | 0x10))
     1ac:	20 91 35 21 	lds	r18, 0x2135	; 0x802135 <validConf+0x11>
			{
				if (_lvl[i] == gLevels[pos]) //Refresh saved ticks value only if no dimming in the process right now
					_tickLastChg = sysState.sysTick;				
     1b0:	ec e0       	ldi	r30, 0x0C	; 12
     1b2:	f1 e2       	ldi	r31, 0x21	; 33
     1b4:	b0 80       	ld	r11, Z
     1b6:	c1 80       	ldd	r12, Z+1	; 0x01
     1b8:	d2 80       	ldd	r13, Z+2	; 0x02
     1ba:	e3 80       	ldd	r14, Z+3	; 0x03
     1bc:	a4 80       	ldd	r10, Z+4	; 0x04
     1be:	95 80       	ldd	r9, Z+5	; 0x05
     1c0:	76 80       	ldd	r7, Z+6	; 0x06
     1c2:	67 80       	ldd	r6, Z+7	; 0x07
				_lvl[i] = validConf.overrideLvl;
     1c4:	f0 90 34 21 	lds	r15, 0x2134	; 0x802134 <validConf+0x10>
     1c8:	00 e1       	ldi	r16, 0x10	; 16
     1ca:	10 e2       	ldi	r17, 0x20	; 32
     1cc:	0f 2e       	mov	r0, r31
     1ce:	fc e9       	ldi	r31, 0x9C	; 156
     1d0:	2f 2e       	mov	r2, r31
     1d2:	f0 e2       	ldi	r31, 0x20	; 32
     1d4:	3f 2e       	mov	r3, r31
     1d6:	f0 2d       	mov	r31, r0
	void setParams()
	{
		uint8_t pos, min = validConf.fadeRate[_linkNum], max = validConf.linkDelay[_linkNum];
		if (min < 32)
			min = 32;
		_fadeRate = (min > 160) ? 160 : min;
     1d8:	0f 2e       	mov	r0, r31
     1da:	f0 ea       	ldi	r31, 0xA0	; 160
     1dc:	8f 2e       	mov	r8, r31
     1de:	f0 2d       	mov	r31, r0
		_linkDelay = (max > 63) ? 64 : max + 1;
     1e0:	41 2c       	mov	r4, r1
     1e2:	a8 01       	movw	r20, r16
		_chActMask = 0x10 << num;
	};

	void setParams()
	{
		uint8_t pos, min = validConf.fadeRate[_linkNum], max = validConf.linkDelay[_linkNum];
     1e4:	d8 01       	movw	r26, r16
     1e6:	12 96       	adiw	r26, 0x02	; 2
     1e8:	ec 91       	ld	r30, X
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	ec 5d       	subi	r30, 0xDC	; 220
     1ee:	fe 4d       	sbci	r31, 0xDE	; 222
     1f0:	92 89       	ldd	r25, Z+18	; 0x12
     1f2:	86 89       	ldd	r24, Z+22	; 0x16
		if (min < 32)
     1f4:	90 32       	cpi	r25, 0x20	; 32
     1f6:	08 f4       	brcc	.+2      	; 0x1fa <_Z11ApplyConfigv+0xde>
			min = 32;
     1f8:	90 e2       	ldi	r25, 0x20	; 32
		_fadeRate = (min > 160) ? 160 : min;
     1fa:	91 3a       	cpi	r25, 0xA1	; 161
     1fc:	08 f0       	brcs	.+2      	; 0x200 <_Z11ApplyConfigv+0xe4>
     1fe:	98 2d       	mov	r25, r8
     200:	fa 01       	movw	r30, r20
     202:	97 87       	std	Z+15, r25	; 0x0f
		_linkDelay = (max > 63) ? 64 : max + 1;
     204:	80 34       	cpi	r24, 0x40	; 64
     206:	18 f4       	brcc	.+6      	; 0x20e <_Z11ApplyConfigv+0xf2>
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	01 96       	adiw	r24, 0x01	; 1
     20c:	02 c0       	rjmp	.+4      	; 0x212 <_Z11ApplyConfigv+0xf6>
     20e:	80 e4       	ldi	r24, 0x40	; 64
     210:	94 2d       	mov	r25, r4
     212:	da 01       	movw	r26, r20
     214:	50 96       	adiw	r26, 0x10	; 16
     216:	8d 93       	st	X+, r24
     218:	9c 93       	st	X, r25
     21a:	51 97       	sbiw	r26, 0x11	; 17
		for (uint8_t i = 0; i < _linkCnt; i++)
     21c:	11 96       	adiw	r26, 0x01	; 1
     21e:	9c 91       	ld	r25, X
     220:	99 23       	and	r25, r25
     222:	09 f4       	brne	.+2      	; 0x226 <_Z11ApplyConfigv+0x10a>
     224:	4b c0       	rjmp	.+150    	; 0x2bc <_Z11ApplyConfigv+0x1a0>
     226:	d8 01       	movw	r26, r16
     228:	13 96       	adiw	r26, 0x03	; 3
     22a:	80 e0       	ldi	r24, 0x00	; 0
		{
			pos = _link[i];
     22c:	ed 91       	ld	r30, X+
     22e:	ed 83       	std	Y+5, r30	; 0x05
			if (validConf.overrideCfg == (pos | 0x10))
     230:	3e 2f       	mov	r19, r30
     232:	30 61       	ori	r19, 0x10	; 16
     234:	23 13       	cpse	r18, r19
     236:	1f c0       	rjmp	.+62     	; 0x276 <_Z11ApplyConfigv+0x15a>
     238:	a9 83       	std	Y+1, r26	; 0x01
     23a:	ba 83       	std	Y+2, r27	; 0x02
			{
				if (_lvl[i] == gLevels[pos]) //Refresh saved ticks value only if no dimming in the process right now
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	ee 0f       	add	r30, r30
     240:	ff 1f       	adc	r31, r31
     242:	bf 01       	movw	r22, r30
     244:	63 5a       	subi	r22, 0xA3	; 163
     246:	7e 4d       	sbci	r23, 0xDE	; 222
     248:	fb 01       	movw	r30, r22
     24a:	01 90       	ld	r0, Z+
     24c:	f0 81       	ld	r31, Z
     24e:	e0 2d       	mov	r30, r0
     250:	12 96       	adiw	r26, 0x02	; 2
     252:	6c 91       	ld	r22, X
     254:	12 97       	sbiw	r26, 0x02	; 2
     256:	70 e0       	ldi	r23, 0x00	; 0
     258:	6e 17       	cp	r22, r30
     25a:	7f 07       	cpc	r23, r31
     25c:	49 f4       	brne	.+18     	; 0x270 <_Z11ApplyConfigv+0x154>
					_tickLastChg = sysState.sysTick;				
     25e:	fa 01       	movw	r30, r20
     260:	b3 8a       	std	Z+19, r11	; 0x13
     262:	c4 8a       	std	Z+20, r12	; 0x14
     264:	d5 8a       	std	Z+21, r13	; 0x15
     266:	e6 8a       	std	Z+22, r14	; 0x16
     268:	a7 8a       	std	Z+23, r10	; 0x17
     26a:	90 8e       	std	Z+24, r9	; 0x18
     26c:	71 8e       	std	Z+25, r7	; 0x19
     26e:	62 8e       	std	Z+26, r6	; 0x1a
				_lvl[i] = validConf.overrideLvl;
     270:	e9 81       	ldd	r30, Y+1	; 0x01
     272:	fa 81       	ldd	r31, Y+2	; 0x02
     274:	f2 82       	std	Z+2, r15	; 0x02
			}
			min = pos > 7 ? 4 : validConf.minLvl[pos];
     276:	fd 81       	ldd	r31, Y+5	; 0x05
     278:	f8 30       	cpi	r31, 0x08	; 8
     27a:	48 f4       	brcc	.+18     	; 0x28e <_Z11ApplyConfigv+0x172>
     27c:	ef 2f       	mov	r30, r31
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	ec 5d       	subi	r30, 0xDC	; 220
     282:	fe 4d       	sbci	r31, 0xDE	; 222
     284:	30 81       	ld	r19, Z
			max = pos > 7 ? 63 : validConf.maxLvl[pos];
     286:	60 85       	ldd	r22, Z+8	; 0x08
			_minLvl[i] = (min < 222) ? min + 1 : 223;
     288:	3e 3d       	cpi	r19, 0xDE	; 222
     28a:	28 f4       	brcc	.+10     	; 0x296 <_Z11ApplyConfigv+0x17a>
     28c:	02 c0       	rjmp	.+4      	; 0x292 <_Z11ApplyConfigv+0x176>
			{
				if (_lvl[i] == gLevels[pos]) //Refresh saved ticks value only if no dimming in the process right now
					_tickLastChg = sysState.sysTick;				
				_lvl[i] = validConf.overrideLvl;
			}
			min = pos > 7 ? 4 : validConf.minLvl[pos];
     28e:	34 e0       	ldi	r19, 0x04	; 4
			max = pos > 7 ? 63 : validConf.maxLvl[pos];
     290:	6f e3       	ldi	r22, 0x3F	; 63
			_minLvl[i] = (min < 222) ? min + 1 : 223;
     292:	3f 5f       	subi	r19, 0xFF	; 255
     294:	01 c0       	rjmp	.+2      	; 0x298 <_Z11ApplyConfigv+0x17c>
     296:	3f ed       	ldi	r19, 0xDF	; 223
     298:	fd 01       	movw	r30, r26
     29a:	15 96       	adiw	r26, 0x05	; 5
     29c:	3c 93       	st	X, r19
     29e:	15 97       	sbiw	r26, 0x05	; 5
			_difLvl[i] = max;
			if (max > _minLvl[i])
     2a0:	36 17       	cp	r19, r22
     2a2:	20 f0       	brcs	.+8      	; 0x2ac <_Z11ApplyConfigv+0x190>
				_lvl[i] = validConf.overrideLvl;
			}
			min = pos > 7 ? 4 : validConf.minLvl[pos];
			max = pos > 7 ? 63 : validConf.maxLvl[pos];
			_minLvl[i] = (min < 222) ? min + 1 : 223;
			_difLvl[i] = max;
     2a4:	18 96       	adiw	r26, 0x08	; 8
     2a6:	6c 93       	st	X, r22
     2a8:	18 97       	sbiw	r26, 0x08	; 8
     2aa:	05 c0       	rjmp	.+10     	; 0x2b6 <_Z11ApplyConfigv+0x19a>
			if (max > _minLvl[i])
			{
				max -= _minLvl[i];
				_difLvl[i] = (max >= 32) ? max : 32;
     2ac:	63 1b       	sub	r22, r19
     2ae:	60 32       	cpi	r22, 0x20	; 32
     2b0:	08 f4       	brcc	.+2      	; 0x2b4 <_Z11ApplyConfigv+0x198>
     2b2:	60 e2       	ldi	r22, 0x20	; 32
     2b4:	60 87       	std	Z+8, r22	; 0x08
		uint8_t pos, min = validConf.fadeRate[_linkNum], max = validConf.linkDelay[_linkNum];
		if (min < 32)
			min = 32;
		_fadeRate = (min > 160) ? 160 : min;
		_linkDelay = (max > 63) ? 64 : max + 1;
		for (uint8_t i = 0; i < _linkCnt; i++)
     2b6:	8f 5f       	subi	r24, 0xFF	; 255
     2b8:	89 13       	cpse	r24, r25
     2ba:	b8 cf       	rjmp	.-144    	; 0x22c <_Z11ApplyConfigv+0x110>
     2bc:	0d 5d       	subi	r16, 0xDD	; 221
     2be:	1f 4f       	sbci	r17, 0xFF	; 255
		channelOT.linkOnTime[j] = *((uint32_t*)temp->minLvl);
		channelOT.linkSwCnt[j] = *((uint16_t*)temp->maxLvl);
		return;
	}
	memcpy(&validConf, iobuf, sizeof(systemConfig));
	for (uint8_t i = 0; i < 4; i++)
     2c0:	02 15       	cp	r16, r2
     2c2:	13 05       	cpc	r17, r3
     2c4:	09 f0       	breq	.+2      	; 0x2c8 <_Z11ApplyConfigv+0x1ac>
     2c6:	8d cf       	rjmp	.-230    	; 0x1e2 <_Z11ApplyConfigv+0xc6>
	{
		_linkNum = actLink;
	};
	void setParams()
	{
		_onTime = validConf.msenOnTime > 5 ? validConf.msenOnTime : 6;
     2c8:	80 91 3e 21 	lds	r24, 0x213E	; 0x80213e <validConf+0x1a>
     2cc:	86 30       	cpi	r24, 0x06	; 6
     2ce:	08 f4       	brcc	.+2      	; 0x2d2 <_Z11ApplyConfigv+0x1b6>
     2d0:	86 e0       	ldi	r24, 0x06	; 6
     2d2:	e2 e0       	ldi	r30, 0x02	; 2
     2d4:	f0 e2       	ldi	r31, 0x20	; 32
     2d6:	84 83       	std	Z+4, r24	; 0x04
		_fTime = _onTime + validConf.msenLowTime;
     2d8:	90 91 3f 21 	lds	r25, 0x213F	; 0x80213f <validConf+0x1b>
     2dc:	89 0f       	add	r24, r25
     2de:	85 83       	std	Z+5, r24	; 0x05
	}
	memcpy(&validConf, iobuf, sizeof(systemConfig));
	for (uint8_t i = 0; i < 4; i++)
		links[i].setParams();
	msenCh.setParams();
	if (validConf.groupConf & 0x08) //Bit 3 is set: save config to EEPROM
     2e0:	53 fe       	sbrs	r5, 3
     2e2:	08 c0       	rjmp	.+16     	; 0x2f4 <_Z11ApplyConfigv+0x1d8>
		eeprom_update_block(&validConf, &savedConfig, sizeof(systemConfig));
     2e4:	41 e2       	ldi	r20, 0x21	; 33
     2e6:	50 e0       	ldi	r21, 0x00	; 0
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	70 e0       	ldi	r23, 0x00	; 0
     2ec:	84 e2       	ldi	r24, 0x24	; 36
     2ee:	91 e2       	ldi	r25, 0x21	; 33
     2f0:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <eeprom_update_block>
	RTC.CALIB = validConf.rtcCorrect;
     2f4:	80 91 42 21 	lds	r24, 0x2142	; 0x802142 <validConf+0x1e>
     2f8:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
}
     2fc:	25 96       	adiw	r28, 0x05	; 5
     2fe:	cd bf       	out	0x3d, r28	; 61
     300:	de bf       	out	0x3e, r29	; 62
     302:	df 91       	pop	r29
     304:	cf 91       	pop	r28
     306:	1f 91       	pop	r17
     308:	0f 91       	pop	r16
     30a:	ff 90       	pop	r15
     30c:	ef 90       	pop	r14
     30e:	df 90       	pop	r13
     310:	cf 90       	pop	r12
     312:	bf 90       	pop	r11
     314:	af 90       	pop	r10
     316:	9f 90       	pop	r9
     318:	8f 90       	pop	r8
     31a:	7f 90       	pop	r7
     31c:	6f 90       	pop	r6
     31e:	5f 90       	pop	r5
     320:	4f 90       	pop	r4
     322:	3f 90       	pop	r3
     324:	2f 90       	pop	r2
     326:	08 95       	ret

00000328 <__vector_7>:

ISR(RTC_OVF_vect)
{
     328:	1f 92       	push	r1
     32a:	0f 92       	push	r0
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	0f 92       	push	r0
     330:	11 24       	eor	r1, r1
     332:	2f 92       	push	r2
     334:	3f 92       	push	r3
     336:	4f 92       	push	r4
     338:	5f 92       	push	r5
     33a:	6f 92       	push	r6
     33c:	7f 92       	push	r7
     33e:	8f 92       	push	r8
     340:	9f 92       	push	r9
     342:	af 92       	push	r10
     344:	bf 92       	push	r11
     346:	cf 92       	push	r12
     348:	df 92       	push	r13
     34a:	ef 92       	push	r14
     34c:	ff 92       	push	r15
     34e:	0f 93       	push	r16
     350:	1f 93       	push	r17
     352:	2f 93       	push	r18
     354:	3f 93       	push	r19
     356:	4f 93       	push	r20
     358:	5f 93       	push	r21
     35a:	6f 93       	push	r22
     35c:	7f 93       	push	r23
     35e:	8f 93       	push	r24
     360:	9f 93       	push	r25
     362:	af 93       	push	r26
     364:	bf 93       	push	r27
     366:	ef 93       	push	r30
     368:	ff 93       	push	r31
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	cd b7       	in	r28, 0x3d	; 61
     370:	de b7       	in	r29, 0x3e	; 62
     372:	62 97       	sbiw	r28, 0x12	; 18
     374:	cd bf       	out	0x3d, r28	; 61
     376:	de bf       	out	0x3e, r29	; 62
	sysState.sysTick++;
     378:	ec e0       	ldi	r30, 0x0C	; 12
     37a:	f1 e2       	ldi	r31, 0x21	; 33
     37c:	20 81       	ld	r18, Z
     37e:	31 81       	ldd	r19, Z+1	; 0x01
     380:	42 81       	ldd	r20, Z+2	; 0x02
     382:	53 81       	ldd	r21, Z+3	; 0x03
     384:	64 81       	ldd	r22, Z+4	; 0x04
     386:	75 81       	ldd	r23, Z+5	; 0x05
     388:	86 81       	ldd	r24, Z+6	; 0x06
     38a:	97 81       	ldd	r25, Z+7	; 0x07
     38c:	a1 e0       	ldi	r26, 0x01	; 1
     38e:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__adddi3_s8>
     392:	20 83       	st	Z, r18
     394:	31 83       	std	Z+1, r19	; 0x01
     396:	42 83       	std	Z+2, r20	; 0x02
     398:	53 83       	std	Z+3, r21	; 0x03
     39a:	64 83       	std	Z+4, r22	; 0x04
     39c:	75 83       	std	Z+5, r23	; 0x05
     39e:	86 83       	std	Z+6, r24	; 0x06
     3a0:	97 83       	std	Z+7, r25	; 0x07
     3a2:	0f 2e       	mov	r0, r31
     3a4:	f0 e1       	ldi	r31, 0x10	; 16
     3a6:	2f 2e       	mov	r2, r31
     3a8:	f0 e2       	ldi	r31, 0x20	; 32
     3aa:	3f 2e       	mov	r3, r31
     3ac:	f0 2d       	mov	r31, r0
     3ae:	19 82       	std	Y+1, r1	; 0x01
     3b0:	1a 82       	std	Y+2, r1	; 0x02
					tempLvl += ((-tempLvl > delta) ? delta : -tempLvl) + (int16_t)_lvl[s];
					if (!gLevels[j] && tempLvl > 0) //Lamp has been switched on - remember ticks
						_onTimeStamp = sysState.sysTick;
				}
				gLevels[j] = tempLvl;
				gLevelChg |= 1 << j;
     3b2:	88 24       	eor	r8, r8
     3b4:	83 94       	inc	r8
     3b6:	91 2c       	mov	r9, r1
{
	sysState.sysTick++;
	static uint8_t rs485busy = 0;
	uint8_t i;
	for (i = 0; i < 4; i++)
		links[i].updateLevel();
     3b8:	49 81       	ldd	r20, Y+1	; 0x01
     3ba:	5a 81       	ldd	r21, Y+2	; 0x02
     3bc:	f1 01       	movw	r30, r2
			_tickLastChg = sysState.sysTick;
	}

	void updateLevel()
	{
		int16_t ticksEl = (int16_t)(sysState.sysTick - _tickLastChg); //Elapsed ticks since beginning of dim
     3be:	ac e0       	ldi	r26, 0x0C	; 12
     3c0:	b1 e2       	ldi	r27, 0x21	; 33
     3c2:	ed 90       	ld	r14, X+
     3c4:	fc 90       	ld	r15, X
     3c6:	83 89       	ldd	r24, Z+19	; 0x13
     3c8:	94 89       	ldd	r25, Z+20	; 0x14
     3ca:	e8 1a       	sub	r14, r24
     3cc:	f9 0a       	sbc	r15, r25
		int16_t delta = (((ticksEl + 1) * _fadeRate) >> 5) - ((ticksEl * _fadeRate) >> 5); //Number of steps
     3ce:	27 85       	ldd	r18, Z+15	; 0x0f
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	b7 01       	movw	r22, r14
     3d4:	6f 5f       	subi	r22, 0xFF	; 255
     3d6:	7f 4f       	sbci	r23, 0xFF	; 255
     3d8:	62 9f       	mul	r22, r18
     3da:	c0 01       	movw	r24, r0
     3dc:	63 9f       	mul	r22, r19
     3de:	90 0d       	add	r25, r0
     3e0:	72 9f       	mul	r23, r18
     3e2:	90 0d       	add	r25, r0
     3e4:	11 24       	eor	r1, r1
     3e6:	6c 01       	movw	r12, r24
     3e8:	d5 94       	asr	r13
     3ea:	c7 94       	ror	r12
     3ec:	d5 94       	asr	r13
     3ee:	c7 94       	ror	r12
     3f0:	d5 94       	asr	r13
     3f2:	c7 94       	ror	r12
     3f4:	d5 94       	asr	r13
     3f6:	c7 94       	ror	r12
     3f8:	d5 94       	asr	r13
     3fa:	c7 94       	ror	r12
     3fc:	82 1b       	sub	r24, r18
     3fe:	93 0b       	sbc	r25, r19
     400:	95 95       	asr	r25
     402:	87 95       	ror	r24
     404:	95 95       	asr	r25
     406:	87 95       	ror	r24
     408:	95 95       	asr	r25
     40a:	87 95       	ror	r24
     40c:	95 95       	asr	r25
     40e:	87 95       	ror	r24
     410:	95 95       	asr	r25
     412:	87 95       	ror	r24
     414:	c8 1a       	sub	r12, r24
     416:	d9 0a       	sbc	r13, r25
		PORTC.OUTCLR = _chActMask;
     418:	82 89       	ldd	r24, Z+18	; 0x12
     41a:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
		for (int8_t i = 0; i < _linkCnt; i++)
     41e:	21 81       	ldd	r18, Z+1	; 0x01
     420:	22 23       	and	r18, r18
     422:	09 f4       	brne	.+2      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     424:	cb c0       	rjmp	.+406    	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     426:	60 e0       	ldi	r22, 0x00	; 0
     428:	70 e0       	ldi	r23, 0x00	; 0
     42a:	b1 2c       	mov	r11, r1
		{
			uint8_t s = _dir ? i : _linkCnt - i - 1; //Direction '1' means forward
			uint8_t j = _link[s];
     42c:	83 e2       	ldi	r24, 0x23	; 35
     42e:	84 9f       	mul	r24, r20
     430:	d0 01       	movw	r26, r0
     432:	85 9f       	mul	r24, r21
     434:	b0 0d       	add	r27, r0
     436:	11 24       	eor	r1, r1
     438:	a0 5f       	subi	r26, 0xF0	; 240
     43a:	bf 4d       	sbci	r27, 0xDF	; 223
						channelOT.linkSwCnt[j]++; //Increment switch counter
					}
				}
				else //Level needs to be raised
				{
					tempLvl += ((-tempLvl > delta) ? delta : -tempLvl) + (int16_t)_lvl[s];
     43c:	cb 82       	std	Y+3, r12	; 0x03
     43e:	dc 82       	std	Y+4, r13	; 0x04
     440:	a9 8b       	std	Y+17, r26	; 0x11
     442:	ba 8b       	std	Y+18, r27	; 0x12
		int16_t ticksEl = (int16_t)(sysState.sysTick - _tickLastChg); //Elapsed ticks since beginning of dim
		int16_t delta = (((ticksEl + 1) * _fadeRate) >> 5) - ((ticksEl * _fadeRate) >> 5); //Number of steps
		PORTC.OUTCLR = _chActMask;
		for (int8_t i = 0; i < _linkCnt; i++)
		{
			uint8_t s = _dir ? i : _linkCnt - i - 1; //Direction '1' means forward
     444:	80 81       	ld	r24, Z
     446:	88 23       	and	r24, r24
     448:	11 f0       	breq	.+4      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     44a:	2b 2d       	mov	r18, r11
     44c:	03 c0       	rjmp	.+6      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     44e:	8b 2d       	mov	r24, r11
     450:	80 95       	com	r24
     452:	28 0f       	add	r18, r24
			uint8_t j = _link[s];
     454:	09 89       	ldd	r16, Y+17	; 0x11
     456:	1a 89       	ldd	r17, Y+18	; 0x12
     458:	02 0f       	add	r16, r18
     45a:	11 1d       	adc	r17, r1
			int16_t tempLvl = gLevels[j] - _lvl[s]; //Difference between actual and set levels
     45c:	d8 01       	movw	r26, r16
     45e:	13 96       	adiw	r26, 0x03	; 3
     460:	ac 90       	ld	r10, X
     462:	4a 2d       	mov	r20, r10
     464:	50 e0       	ldi	r21, 0x00	; 0
     466:	ca 01       	movw	r24, r20
     468:	88 0f       	add	r24, r24
     46a:	99 1f       	adc	r25, r25
     46c:	83 5a       	subi	r24, 0xA3	; 163
     46e:	9e 4d       	sbci	r25, 0xDE	; 222
     470:	dc 01       	movw	r26, r24
     472:	2d 91       	ld	r18, X+
     474:	3c 91       	ld	r19, X
     476:	d8 01       	movw	r26, r16
     478:	16 96       	adiw	r26, 0x06	; 6
     47a:	8c 91       	ld	r24, X
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	28 1b       	sub	r18, r24
     480:	39 0b       	sbc	r19, r25
			if (tempLvl && ticksEl >= i * _linkDelay)
     482:	09 f4       	brne	.+2      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     484:	8f c0       	rjmp	.+286    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     486:	00 89       	ldd	r16, Z+16	; 0x10
     488:	11 89       	ldd	r17, Z+17	; 0x11
     48a:	60 9f       	mul	r22, r16
     48c:	30 01       	movw	r6, r0
     48e:	61 9f       	mul	r22, r17
     490:	70 0c       	add	r7, r0
     492:	70 9f       	mul	r23, r16
     494:	70 0c       	add	r7, r0
     496:	11 24       	eor	r1, r1
     498:	e6 14       	cp	r14, r6
     49a:	f7 04       	cpc	r15, r7
     49c:	0c f4       	brge	.+2      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     49e:	82 c0       	rjmp	.+260    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
			{
				if (tempLvl > 0) //Level needs to be lowered
     4a0:	12 16       	cp	r1, r18
     4a2:	13 06       	cpc	r1, r19
     4a4:	0c f0       	brlt	.+2      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     4a6:	4e c0       	rjmp	.+156    	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
				{
					tempLvl -= ((tempLvl > delta) ? delta : tempLvl) - (int16_t)_lvl[s];
     4a8:	6b 81       	ldd	r22, Y+3	; 0x03
     4aa:	7c 81       	ldd	r23, Y+4	; 0x04
     4ac:	2c 15       	cp	r18, r12
     4ae:	3d 05       	cpc	r19, r13
     4b0:	0c f4       	brge	.+2      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     4b2:	b9 01       	movw	r22, r18
     4b4:	68 1b       	sub	r22, r24
     4b6:	79 0b       	sbc	r23, r25
     4b8:	26 1b       	sub	r18, r22
     4ba:	37 0b       	sbc	r19, r23
					if (!tempLvl) //Actual level became zero
     4bc:	09 f0       	breq	.+2      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     4be:	5d c0       	rjmp	.+186    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
					{
						tempLvl -= (int16_t)_fadeRate << 2; //Subtract 4x fade steps, so off/on delay will be 4s
     4c0:	27 85       	ldd	r18, Z+15	; 0x0f
     4c2:	30 e0       	ldi	r19, 0x00	; 0
     4c4:	22 0f       	add	r18, r18
     4c6:	33 1f       	adc	r19, r19
     4c8:	22 0f       	add	r18, r18
     4ca:	33 1f       	adc	r19, r19
     4cc:	31 95       	neg	r19
     4ce:	21 95       	neg	r18
     4d0:	31 09       	sbc	r19, r1
						channelOT.linkOnTime[j] += (uint32_t)(sysState.sysTick - _onTimeStamp) >> 5; //Add seconds
     4d2:	8a 01       	movw	r16, r20
     4d4:	00 0f       	add	r16, r16
     4d6:	11 1f       	adc	r17, r17
     4d8:	00 0f       	add	r16, r16
     4da:	11 1f       	adc	r17, r17
     4dc:	0c 52       	subi	r16, 0x2C	; 44
     4de:	1f 4d       	sbci	r17, 0xDF	; 223
     4e0:	ac e0       	ldi	r26, 0x0C	; 12
     4e2:	b1 e2       	ldi	r27, 0x21	; 33
     4e4:	6d 91       	ld	r22, X+
     4e6:	7d 91       	ld	r23, X+
     4e8:	8d 91       	ld	r24, X+
     4ea:	9c 91       	ld	r25, X
     4ec:	43 8c       	ldd	r4, Z+27	; 0x1b
     4ee:	54 8c       	ldd	r5, Z+28	; 0x1c
     4f0:	65 8c       	ldd	r6, Z+29	; 0x1d
     4f2:	76 8c       	ldd	r7, Z+30	; 0x1e
     4f4:	64 19       	sub	r22, r4
     4f6:	75 09       	sbc	r23, r5
     4f8:	86 09       	sbc	r24, r6
     4fa:	97 09       	sbc	r25, r7
     4fc:	68 94       	set
     4fe:	14 f8       	bld	r1, 4
     500:	96 95       	lsr	r25
     502:	87 95       	ror	r24
     504:	77 95       	ror	r23
     506:	67 95       	ror	r22
     508:	16 94       	lsr	r1
     50a:	d1 f7       	brne	.-12     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     50c:	d8 01       	movw	r26, r16
     50e:	4d 90       	ld	r4, X+
     510:	5d 90       	ld	r5, X+
     512:	6d 90       	ld	r6, X+
     514:	7c 90       	ld	r7, X
     516:	13 97       	sbiw	r26, 0x03	; 3
     518:	46 0e       	add	r4, r22
     51a:	57 1e       	adc	r5, r23
     51c:	68 1e       	adc	r6, r24
     51e:	79 1e       	adc	r7, r25
     520:	4d 92       	st	X+, r4
     522:	5d 92       	st	X+, r5
     524:	6d 92       	st	X+, r6
     526:	7c 92       	st	X, r7
     528:	13 97       	sbiw	r26, 0x03	; 3
						channelOT.linkSwCnt[j]++; //Increment switch counter
     52a:	ba 01       	movw	r22, r20
     52c:	66 0f       	add	r22, r22
     52e:	77 1f       	adc	r23, r23
     530:	68 50       	subi	r22, 0x08	; 8
     532:	7f 4d       	sbci	r23, 0xDF	; 223
     534:	db 01       	movw	r26, r22
     536:	8d 91       	ld	r24, X+
     538:	9c 91       	ld	r25, X
     53a:	11 97       	sbiw	r26, 0x01	; 1
     53c:	01 96       	adiw	r24, 0x01	; 1
     53e:	8d 93       	st	X+, r24
     540:	9c 93       	st	X, r25
     542:	1b c0       	rjmp	.+54     	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
					}
				}
				else //Level needs to be raised
				{
					tempLvl += ((-tempLvl > delta) ? delta : -tempLvl) + (int16_t)_lvl[s];
     544:	66 27       	eor	r22, r22
     546:	77 27       	eor	r23, r23
     548:	62 1b       	sub	r22, r18
     54a:	73 0b       	sbc	r23, r19
     54c:	c6 16       	cp	r12, r22
     54e:	d7 06       	cpc	r13, r23
     550:	14 f4       	brge	.+4      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
     552:	6b 81       	ldd	r22, Y+3	; 0x03
     554:	7c 81       	ldd	r23, Y+4	; 0x04
     556:	86 0f       	add	r24, r22
     558:	97 1f       	adc	r25, r23
     55a:	28 0f       	add	r18, r24
     55c:	39 1f       	adc	r19, r25
					if (!gLevels[j] && tempLvl > 0) //Lamp has been switched on - remember ticks
     55e:	ba 01       	movw	r22, r20
     560:	66 0f       	add	r22, r22
     562:	77 1f       	adc	r23, r23
     564:	63 5a       	subi	r22, 0xA3	; 163
     566:	7e 4d       	sbci	r23, 0xDE	; 222
     568:	db 01       	movw	r26, r22
     56a:	8d 91       	ld	r24, X+
     56c:	9c 91       	ld	r25, X
     56e:	89 2b       	or	r24, r25
     570:	21 f4       	brne	.+8      	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
     572:	12 16       	cp	r1, r18
     574:	13 06       	cpc	r1, r19
     576:	0c f4       	brge	.+2      	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
     578:	8a c2       	rjmp	.+1300   	; 0xa8e <__LOCK_REGION_LENGTH__+0x68e>
						_onTimeStamp = sysState.sysTick;
				}
				gLevels[j] = tempLvl;
     57a:	44 0f       	add	r20, r20
     57c:	55 1f       	adc	r21, r21
     57e:	43 5a       	subi	r20, 0xA3	; 163
     580:	5e 4d       	sbci	r21, 0xDE	; 222
     582:	da 01       	movw	r26, r20
     584:	2d 93       	st	X+, r18
     586:	3c 93       	st	X, r19
				gLevelChg |= 1 << j;
     588:	20 91 5c 21 	lds	r18, 0x215C	; 0x80215c <gLevelChg>
     58c:	c4 01       	movw	r24, r8
     58e:	02 c0       	rjmp	.+4      	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
     590:	88 0f       	add	r24, r24
     592:	99 1f       	adc	r25, r25
     594:	aa 94       	dec	r10
     596:	e2 f7       	brpl	.-8      	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
     598:	82 2b       	or	r24, r18
     59a:	80 93 5c 21 	sts	0x215C, r24	; 0x80215c <gLevelChg>
				PORTC.OUTSET = _chActMask; //Switch on activity LED
     59e:	82 89       	ldd	r24, Z+18	; 0x12
     5a0:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     5a4:	b3 94       	inc	r11
	void updateLevel()
	{
		int16_t ticksEl = (int16_t)(sysState.sysTick - _tickLastChg); //Elapsed ticks since beginning of dim
		int16_t delta = (((ticksEl + 1) * _fadeRate) >> 5) - ((ticksEl * _fadeRate) >> 5); //Number of steps
		PORTC.OUTCLR = _chActMask;
		for (int8_t i = 0; i < _linkCnt; i++)
     5a6:	6b 2d       	mov	r22, r11
     5a8:	0b 2c       	mov	r0, r11
     5aa:	00 0c       	add	r0, r0
     5ac:	77 0b       	sbc	r23, r23
     5ae:	21 81       	ldd	r18, Z+1	; 0x01
     5b0:	82 2f       	mov	r24, r18
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	68 17       	cp	r22, r24
     5b6:	79 07       	cpc	r23, r25
     5b8:	0c f4       	brge	.+2      	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     5ba:	44 cf       	rjmp	.-376    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     5bc:	e9 81       	ldd	r30, Y+1	; 0x01
     5be:	fa 81       	ldd	r31, Y+2	; 0x02
     5c0:	31 96       	adiw	r30, 0x01	; 1
     5c2:	e9 83       	std	Y+1, r30	; 0x01
     5c4:	fa 83       	std	Y+2, r31	; 0x02
     5c6:	f3 e2       	ldi	r31, 0x23	; 35
     5c8:	2f 0e       	add	r2, r31
     5ca:	31 1c       	adc	r3, r1
ISR(RTC_OVF_vect)
{
	sysState.sysTick++;
	static uint8_t rs485busy = 0;
	uint8_t i;
	for (i = 0; i < 4; i++)
     5cc:	69 81       	ldd	r22, Y+1	; 0x01
     5ce:	7a 81       	ldd	r23, Y+2	; 0x02
     5d0:	64 30       	cpi	r22, 0x04	; 4
     5d2:	71 05       	cpc	r23, r1
     5d4:	09 f0       	breq	.+2      	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
     5d6:	f0 ce       	rjmp	.-544    	; 0x3b8 <__vector_7+0x90>
			cntDown = true;
		}
	}
	void updateLevel()
	{
		if (cntDown)
     5d8:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <msenCh>
     5dc:	88 23       	and	r24, r24
     5de:	09 f4       	brne	.+2      	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
     5e0:	70 c2       	rjmp	.+1248   	; 0xac2 <__LOCK_REGION_LENGTH__+0x6c2>
		{
			uint16_t ton = (uint16_t)(sysState.sysTick - _onTimeStamp) >> 5;
     5e2:	2c e0       	ldi	r18, 0x0C	; 12
     5e4:	31 e2       	ldi	r19, 0x21	; 33
     5e6:	d9 01       	movw	r26, r18
     5e8:	bc 91       	ld	r27, X
     5ea:	bd 83       	std	Y+5, r27	; 0x05
     5ec:	f9 01       	movw	r30, r18
     5ee:	f1 81       	ldd	r31, Z+1	; 0x01
     5f0:	fe 83       	std	Y+6, r31	; 0x06
     5f2:	d9 01       	movw	r26, r18
     5f4:	12 96       	adiw	r26, 0x02	; 2
     5f6:	bc 91       	ld	r27, X
     5f8:	bf 83       	std	Y+7, r27	; 0x07
     5fa:	f9 01       	movw	r30, r18
     5fc:	f3 81       	ldd	r31, Z+3	; 0x03
     5fe:	f8 87       	std	Y+8, r31	; 0x08
     600:	d9 01       	movw	r26, r18
     602:	14 96       	adiw	r26, 0x04	; 4
     604:	bc 91       	ld	r27, X
     606:	b9 87       	std	Y+9, r27	; 0x09
     608:	f9 01       	movw	r30, r18
     60a:	f5 81       	ldd	r31, Z+5	; 0x05
     60c:	fa 87       	std	Y+10, r31	; 0x0a
     60e:	d9 01       	movw	r26, r18
     610:	16 96       	adiw	r26, 0x06	; 6
     612:	bc 91       	ld	r27, X
     614:	bb 87       	std	Y+11, r27	; 0x0b
     616:	f9 01       	movw	r30, r18
     618:	f7 81       	ldd	r31, Z+7	; 0x07
     61a:	fc 87       	std	Y+12, r31	; 0x0c
     61c:	22 e0       	ldi	r18, 0x02	; 2
     61e:	30 e2       	ldi	r19, 0x20	; 32
			if (ton > _fTime)
     620:	d9 01       	movw	r26, r18
     622:	16 96       	adiw	r26, 0x06	; 6
     624:	4d 91       	ld	r20, X+
     626:	5c 91       	ld	r21, X
     628:	17 97       	sbiw	r26, 0x07	; 7
     62a:	ed 81       	ldd	r30, Y+5	; 0x05
     62c:	fe 81       	ldd	r31, Y+6	; 0x06
     62e:	e4 1b       	sub	r30, r20
     630:	f5 0b       	sbc	r31, r21
     632:	af 01       	movw	r20, r30
     634:	56 95       	lsr	r21
     636:	47 95       	ror	r20
     638:	52 95       	swap	r21
     63a:	42 95       	swap	r20
     63c:	4f 70       	andi	r20, 0x0F	; 15
     63e:	45 27       	eor	r20, r21
     640:	5f 70       	andi	r21, 0x0F	; 15
     642:	45 27       	eor	r20, r21
     644:	15 96       	adiw	r26, 0x05	; 5
     646:	2c 91       	ld	r18, X
     648:	15 97       	sbiw	r26, 0x05	; 5
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	24 17       	cp	r18, r20
     64e:	35 07       	cpc	r19, r21
     650:	08 f0       	brcs	.+2      	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
     652:	81 c0       	rjmp	.+258    	; 0x756 <__LOCK_REGION_LENGTH__+0x356>
			{
				ltEnt = cntDown = false;
     654:	1c 92       	st	X, r1
     656:	11 96       	adiw	r26, 0x01	; 1
     658:	1c 92       	st	X, r1
     65a:	11 97       	sbiw	r26, 0x01	; 1
				links[_linkNum].setLevel(0); //Both on and low time are expired, shut down the lamp
     65c:	12 96       	adiw	r26, 0x02	; 2
     65e:	4c 91       	ld	r20, X
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		uint8_t oLvl = sysState.linkLevels[_linkNum];
     660:	a4 2e       	mov	r10, r20
     662:	b1 2c       	mov	r11, r1
     664:	b3 e2       	ldi	r27, 0x23	; 35
     666:	4b 9f       	mul	r20, r27
     668:	90 01       	movw	r18, r0
     66a:	11 24       	eor	r1, r1
     66c:	20 5f       	subi	r18, 0xF0	; 240
     66e:	3f 4d       	sbci	r19, 0xDF	; 223
     670:	f9 01       	movw	r30, r18
     672:	22 81       	ldd	r18, Z+2	; 0x02
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	b9 01       	movw	r22, r18
     678:	64 5f       	subi	r22, 0xF4	; 244
     67a:	7e 4d       	sbci	r23, 0xDE	; 222
     67c:	db 01       	movw	r26, r22
     67e:	51 96       	adiw	r26, 0x11	; 17
     680:	5c 91       	ld	r21, X
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
     682:	65 2f       	mov	r22, r21
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	6e 5f       	subi	r22, 0xFE	; 254
     688:	7f 4f       	sbci	r23, 0xFF	; 255
     68a:	65 30       	cpi	r22, 0x05	; 5
     68c:	71 05       	cpc	r23, r1
     68e:	18 f4       	brcc	.+6      	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
     690:	55 23       	and	r21, r21
     692:	09 f4       	brne	.+2      	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
     694:	16 c2       	rjmp	.+1068   	; 0xac2 <__LOCK_REGION_LENGTH__+0x6c2>
			return;
		sysState.linkLevels[_linkNum] = level;
     696:	24 5f       	subi	r18, 0xF4	; 244
     698:	3e 4d       	sbci	r19, 0xDE	; 222
     69a:	f9 01       	movw	r30, r18
     69c:	11 8a       	std	Z+17, r1	; 0x11

		for (uint8_t i = 0; i < _linkCnt; i++)
     69e:	53 e2       	ldi	r21, 0x23	; 35
     6a0:	5a 9d       	mul	r21, r10
     6a2:	90 01       	movw	r18, r0
     6a4:	5b 9d       	mul	r21, r11
     6a6:	30 0d       	add	r19, r0
     6a8:	11 24       	eor	r1, r1
     6aa:	20 5f       	subi	r18, 0xF0	; 240
     6ac:	3f 4d       	sbci	r19, 0xDF	; 223
     6ae:	d9 01       	movw	r26, r18
     6b0:	11 96       	adiw	r26, 0x01	; 1
     6b2:	cc 90       	ld	r12, X
     6b4:	cc 20       	and	r12, r12
     6b6:	19 f1       	breq	.+70     	; 0x6fe <__LOCK_REGION_LENGTH__+0x2fe>
     6b8:	b3 e2       	ldi	r27, 0x23	; 35
     6ba:	4b 9f       	mul	r20, r27
     6bc:	a0 01       	movw	r20, r0
     6be:	11 24       	eor	r1, r1
     6c0:	4d 5e       	subi	r20, 0xED	; 237
     6c2:	5f 4d       	sbci	r21, 0xDF	; 223
     6c4:	d1 2c       	mov	r13, r1
     6c6:	f1 2c       	mov	r15, r1
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     6c8:	fa 01       	movw	r30, r20
     6ca:	20 81       	ld	r18, Z
     6cc:	4f 5f       	subi	r20, 0xFF	; 255
     6ce:	5f 4f       	sbci	r21, 0xFF	; 255
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	22 0f       	add	r18, r18
     6d4:	33 1f       	adc	r19, r19
     6d6:	23 5a       	subi	r18, 0xA3	; 163
     6d8:	3e 4d       	sbci	r19, 0xDE	; 222
     6da:	d9 01       	movw	r26, r18
     6dc:	0d 91       	ld	r16, X+
     6de:	1c 91       	ld	r17, X
     6e0:	23 81       	ldd	r18, Z+3	; 0x03
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	61 e0       	ldi	r22, 0x01	; 1
     6e6:	20 17       	cp	r18, r16
     6e8:	31 07       	cpc	r19, r17
     6ea:	09 f4       	brne	.+2      	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
     6ec:	60 e0       	ldi	r22, 0x00	; 0
     6ee:	d6 2a       	or	r13, r22
			if (!level || !_difLvl[i]) //Set zero level directly
				_lvl[i] = 0;
     6f0:	fa 01       	movw	r30, r20
     6f2:	12 82       	std	Z+2, r1	; 0x02
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
			return;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
     6f4:	f3 94       	inc	r15
     6f6:	fc 10       	cpse	r15, r12
     6f8:	e7 cf       	rjmp	.-50     	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     6fa:	d1 10       	cpse	r13, r1
     6fc:	e2 c1       	rjmp	.+964    	; 0xac2 <__LOCK_REGION_LENGTH__+0x6c2>
			_tickLastChg = sysState.sysTick;
     6fe:	23 e2       	ldi	r18, 0x23	; 35
     700:	2a 9d       	mul	r18, r10
     702:	a0 01       	movw	r20, r0
     704:	2b 9d       	mul	r18, r11
     706:	50 0d       	add	r21, r0
     708:	11 24       	eor	r1, r1
     70a:	40 5f       	subi	r20, 0xF0	; 240
     70c:	5f 4d       	sbci	r21, 0xDF	; 223
     70e:	9a 01       	movw	r18, r20
     710:	2d 5e       	subi	r18, 0xED	; 237
     712:	3f 4f       	sbci	r19, 0xFF	; 255
     714:	ed 81       	ldd	r30, Y+5	; 0x05
     716:	da 01       	movw	r26, r20
     718:	53 96       	adiw	r26, 0x13	; 19
     71a:	ec 93       	st	X, r30
     71c:	ee 81       	ldd	r30, Y+6	; 0x06
     71e:	d9 01       	movw	r26, r18
     720:	11 96       	adiw	r26, 0x01	; 1
     722:	ec 93       	st	X, r30
     724:	11 97       	sbiw	r26, 0x01	; 1
     726:	ff 81       	ldd	r31, Y+7	; 0x07
     728:	12 96       	adiw	r26, 0x02	; 2
     72a:	fc 93       	st	X, r31
     72c:	12 97       	sbiw	r26, 0x02	; 2
     72e:	68 85       	ldd	r22, Y+8	; 0x08
     730:	13 96       	adiw	r26, 0x03	; 3
     732:	6c 93       	st	X, r22
     734:	13 97       	sbiw	r26, 0x03	; 3
     736:	79 85       	ldd	r23, Y+9	; 0x09
     738:	14 96       	adiw	r26, 0x04	; 4
     73a:	7c 93       	st	X, r23
     73c:	14 97       	sbiw	r26, 0x04	; 4
     73e:	8a 85       	ldd	r24, Y+10	; 0x0a
     740:	15 96       	adiw	r26, 0x05	; 5
     742:	8c 93       	st	X, r24
     744:	15 97       	sbiw	r26, 0x05	; 5
     746:	9b 85       	ldd	r25, Y+11	; 0x0b
     748:	16 96       	adiw	r26, 0x06	; 6
     74a:	9c 93       	st	X, r25
     74c:	16 97       	sbiw	r26, 0x06	; 6
     74e:	ec 85       	ldd	r30, Y+12	; 0x0c
     750:	17 96       	adiw	r26, 0x07	; 7
     752:	ec 93       	st	X, r30
     754:	b6 c1       	rjmp	.+876    	; 0xac2 <__LOCK_REGION_LENGTH__+0x6c2>
			if (ton > _fTime)
			{
				ltEnt = cntDown = false;
				links[_linkNum].setLevel(0); //Both on and low time are expired, shut down the lamp
			}
			else if (!ltEnt && _onTime)
     756:	20 91 03 20 	lds	r18, 0x2003	; 0x802003 <msenCh+0x1>
     75a:	21 11       	cpse	r18, r1
     75c:	b2 c1       	rjmp	.+868    	; 0xac2 <__LOCK_REGION_LENGTH__+0x6c2>
     75e:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <msenCh+0x4>
     762:	22 23       	and	r18, r18
     764:	09 f4       	brne	.+2      	; 0x768 <__LOCK_REGION_LENGTH__+0x368>
     766:	ad c1       	rjmp	.+858    	; 0xac2 <__LOCK_REGION_LENGTH__+0x6c2>
			{
				ltEnt = true;
     768:	22 e0       	ldi	r18, 0x02	; 2
     76a:	30 e2       	ldi	r19, 0x20	; 32
     76c:	41 e0       	ldi	r20, 0x01	; 1
     76e:	d9 01       	movw	r26, r18
     770:	11 96       	adiw	r26, 0x01	; 1
     772:	4c 93       	st	X, r20
     774:	11 97       	sbiw	r26, 0x01	; 1
				links[_linkNum].setLevel(validConf.msenLowLvl);
     776:	f0 90 40 21 	lds	r15, 0x2140	; 0x802140 <validConf+0x1c>
     77a:	12 96       	adiw	r26, 0x02	; 2
     77c:	6c 91       	ld	r22, X
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		uint8_t oLvl = sysState.linkLevels[_linkNum];
     77e:	a6 2e       	mov	r10, r22
     780:	b1 2c       	mov	r11, r1
     782:	b3 e2       	ldi	r27, 0x23	; 35
     784:	6b 9f       	mul	r22, r27
     786:	90 01       	movw	r18, r0
     788:	11 24       	eor	r1, r1
     78a:	20 5f       	subi	r18, 0xF0	; 240
     78c:	3f 4d       	sbci	r19, 0xDF	; 223
     78e:	f9 01       	movw	r30, r18
     790:	22 81       	ldd	r18, Z+2	; 0x02
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	a9 01       	movw	r20, r18
     796:	44 5f       	subi	r20, 0xF4	; 244
     798:	5e 4d       	sbci	r21, 0xDE	; 222
     79a:	da 01       	movw	r26, r20
     79c:	51 96       	adiw	r26, 0x11	; 17
     79e:	7c 91       	ld	r23, X
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
     7a0:	47 2f       	mov	r20, r23
     7a2:	50 e0       	ldi	r21, 0x00	; 0
     7a4:	4f 19       	sub	r20, r15
     7a6:	51 09       	sbc	r21, r1
     7a8:	4e 5f       	subi	r20, 0xFE	; 254
     7aa:	5f 4f       	sbci	r21, 0xFF	; 255
     7ac:	45 30       	cpi	r20, 0x05	; 5
     7ae:	51 05       	cpc	r21, r1
     7b0:	48 f4       	brcc	.+18     	; 0x7c4 <__LOCK_REGION_LENGTH__+0x3c4>
     7b2:	51 e0       	ldi	r21, 0x01	; 1
     7b4:	f1 10       	cpse	r15, r1
     7b6:	01 c0       	rjmp	.+2      	; 0x7ba <__LOCK_REGION_LENGTH__+0x3ba>
     7b8:	50 e0       	ldi	r21, 0x00	; 0
     7ba:	41 e0       	ldi	r20, 0x01	; 1
     7bc:	71 11       	cpse	r23, r1
     7be:	40 e0       	ldi	r20, 0x00	; 0
     7c0:	54 13       	cpse	r21, r20
     7c2:	7f c1       	rjmp	.+766    	; 0xac2 <__LOCK_REGION_LENGTH__+0x6c2>
			return;
		sysState.linkLevels[_linkNum] = level;
     7c4:	a9 01       	movw	r20, r18
     7c6:	44 5f       	subi	r20, 0xF4	; 244
     7c8:	5e 4d       	sbci	r21, 0xDE	; 222
     7ca:	fa 01       	movw	r30, r20
     7cc:	f1 8a       	std	Z+17, r15	; 0x11

		for (uint8_t i = 0; i < _linkCnt; i++)
     7ce:	43 e2       	ldi	r20, 0x23	; 35
     7d0:	4a 9d       	mul	r20, r10
     7d2:	90 01       	movw	r18, r0
     7d4:	4b 9d       	mul	r20, r11
     7d6:	30 0d       	add	r19, r0
     7d8:	11 24       	eor	r1, r1
     7da:	20 5f       	subi	r18, 0xF0	; 240
     7dc:	3f 4d       	sbci	r19, 0xDF	; 223
     7de:	d9 01       	movw	r26, r18
     7e0:	11 96       	adiw	r26, 0x01	; 1
     7e2:	ec 90       	ld	r14, X
     7e4:	ee 20       	and	r14, r14
     7e6:	b1 f1       	breq	.+108    	; 0x854 <__LOCK_REGION_LENGTH__+0x454>
     7e8:	b3 e2       	ldi	r27, 0x23	; 35
     7ea:	6b 9f       	mul	r22, r27
     7ec:	90 01       	movw	r18, r0
     7ee:	11 24       	eor	r1, r1
     7f0:	2d 5e       	subi	r18, 0xED	; 237
     7f2:	3f 4d       	sbci	r19, 0xDF	; 223
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	60 e0       	ldi	r22, 0x00	; 0
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
			if (!level || !_difLvl[i]) //Set zero level directly
				_lvl[i] = 0;
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
     7f8:	cf 2c       	mov	r12, r15
     7fa:	d1 2c       	mov	r13, r1
			return;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     7fc:	f9 01       	movw	r30, r18
     7fe:	40 81       	ld	r20, Z
     800:	2f 5f       	subi	r18, 0xFF	; 255
     802:	3f 4f       	sbci	r19, 0xFF	; 255
     804:	50 e0       	ldi	r21, 0x00	; 0
     806:	44 0f       	add	r20, r20
     808:	55 1f       	adc	r21, r21
     80a:	43 5a       	subi	r20, 0xA3	; 163
     80c:	5e 4d       	sbci	r21, 0xDE	; 222
     80e:	da 01       	movw	r26, r20
     810:	8d 90       	ld	r8, X+
     812:	9c 90       	ld	r9, X
     814:	43 81       	ldd	r20, Z+3	; 0x03
     816:	50 e0       	ldi	r21, 0x00	; 0
     818:	11 e0       	ldi	r17, 0x01	; 1
     81a:	48 15       	cp	r20, r8
     81c:	59 05       	cpc	r21, r9
     81e:	09 f4       	brne	.+2      	; 0x822 <__LOCK_REGION_LENGTH__+0x422>
     820:	10 e0       	ldi	r17, 0x00	; 0
     822:	71 2b       	or	r23, r17
			if (!level || !_difLvl[i]) //Set zero level directly
     824:	ff 20       	and	r15, r15
     826:	21 f0       	breq	.+8      	; 0x830 <__LOCK_REGION_LENGTH__+0x430>
     828:	f9 01       	movw	r30, r18
     82a:	40 85       	ldd	r20, Z+8	; 0x08
     82c:	41 11       	cpse	r20, r1
     82e:	04 c0       	rjmp	.+8      	; 0x838 <__LOCK_REGION_LENGTH__+0x438>
				_lvl[i] = 0;
     830:	d9 01       	movw	r26, r18
     832:	12 96       	adiw	r26, 0x02	; 2
     834:	1c 92       	st	X, r1
     836:	09 c0       	rjmp	.+18     	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
     838:	4c 9d       	mul	r20, r12
     83a:	80 01       	movw	r16, r0
     83c:	4d 9d       	mul	r20, r13
     83e:	10 0d       	add	r17, r0
     840:	11 24       	eor	r1, r1
     842:	f9 01       	movw	r30, r18
     844:	45 81       	ldd	r20, Z+5	; 0x05
     846:	41 0f       	add	r20, r17
     848:	42 83       	std	Z+2, r20	; 0x02
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
			return;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
     84a:	6f 5f       	subi	r22, 0xFF	; 255
     84c:	6e 11       	cpse	r22, r14
     84e:	d6 cf       	rjmp	.-84     	; 0x7fc <__LOCK_REGION_LENGTH__+0x3fc>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     850:	71 11       	cpse	r23, r1
     852:	37 c1       	rjmp	.+622    	; 0xac2 <__LOCK_REGION_LENGTH__+0x6c2>
			_tickLastChg = sysState.sysTick;
     854:	23 e2       	ldi	r18, 0x23	; 35
     856:	2a 9d       	mul	r18, r10
     858:	a0 01       	movw	r20, r0
     85a:	2b 9d       	mul	r18, r11
     85c:	50 0d       	add	r21, r0
     85e:	11 24       	eor	r1, r1
     860:	40 5f       	subi	r20, 0xF0	; 240
     862:	5f 4d       	sbci	r21, 0xDF	; 223
     864:	9a 01       	movw	r18, r20
     866:	2d 5e       	subi	r18, 0xED	; 237
     868:	3f 4f       	sbci	r19, 0xFF	; 255
     86a:	ed 81       	ldd	r30, Y+5	; 0x05
     86c:	da 01       	movw	r26, r20
     86e:	53 96       	adiw	r26, 0x13	; 19
     870:	ec 93       	st	X, r30
     872:	ee 81       	ldd	r30, Y+6	; 0x06
     874:	d9 01       	movw	r26, r18
     876:	11 96       	adiw	r26, 0x01	; 1
     878:	ec 93       	st	X, r30
     87a:	11 97       	sbiw	r26, 0x01	; 1
     87c:	ff 81       	ldd	r31, Y+7	; 0x07
     87e:	12 96       	adiw	r26, 0x02	; 2
     880:	fc 93       	st	X, r31
     882:	12 97       	sbiw	r26, 0x02	; 2
     884:	68 85       	ldd	r22, Y+8	; 0x08
     886:	13 96       	adiw	r26, 0x03	; 3
     888:	6c 93       	st	X, r22
     88a:	13 97       	sbiw	r26, 0x03	; 3
     88c:	79 85       	ldd	r23, Y+9	; 0x09
     88e:	14 96       	adiw	r26, 0x04	; 4
     890:	7c 93       	st	X, r23
     892:	14 97       	sbiw	r26, 0x04	; 4
     894:	8a 85       	ldd	r24, Y+10	; 0x0a
     896:	15 96       	adiw	r26, 0x05	; 5
     898:	8c 93       	st	X, r24
     89a:	15 97       	sbiw	r26, 0x05	; 5
     89c:	9b 85       	ldd	r25, Y+11	; 0x0b
     89e:	16 96       	adiw	r26, 0x06	; 6
     8a0:	9c 93       	st	X, r25
     8a2:	16 97       	sbiw	r26, 0x06	; 6
     8a4:	ec 85       	ldd	r30, Y+12	; 0x0c
     8a6:	17 96       	adiw	r26, 0x07	; 7
     8a8:	ec 93       	st	X, r30
     8aa:	0b c1       	rjmp	.+534    	; 0xac2 <__LOCK_REGION_LENGTH__+0x6c2>
	uint8_t i;
	for (i = 0; i < 4; i++)
		links[i].updateLevel();
	msenCh.updateLevel();
	for (i = 0; i < 9; i++)
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
     8ac:	fc 01       	movw	r30, r24
     8ae:	ee 0f       	add	r30, r30
     8b0:	ff 1f       	adc	r31, r31
     8b2:	e3 5a       	subi	r30, 0xA3	; 163
     8b4:	fe 4d       	sbci	r31, 0xDE	; 222
     8b6:	20 81       	ld	r18, Z
     8b8:	31 81       	ldd	r19, Z+1	; 0x01
     8ba:	12 16       	cp	r1, r18
     8bc:	13 06       	cpc	r1, r19
     8be:	44 f4       	brge	.+16     	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     8c0:	fc 01       	movw	r30, r24
     8c2:	ee 0f       	add	r30, r30
     8c4:	ff 1f       	adc	r31, r31
     8c6:	e3 5a       	subi	r30, 0xA3	; 163
     8c8:	fe 4d       	sbci	r31, 0xDE	; 222
     8ca:	20 81       	ld	r18, Z
     8cc:	31 81       	ldd	r19, Z+1	; 0x01
     8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <__LOCK_REGION_LENGTH__+0x4d2>
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	2d 93       	st	X+, r18
     8d4:	01 96       	adiw	r24, 0x01	; 1
	static uint8_t rs485busy = 0;
	uint8_t i;
	for (i = 0; i < 4; i++)
		links[i].updateLevel();
	msenCh.updateLevel();
	for (i = 0; i < 9; i++)
     8d6:	89 30       	cpi	r24, 0x09	; 9
     8d8:	91 05       	cpc	r25, r1
     8da:	41 f7       	brne	.-48     	; 0x8ac <__LOCK_REGION_LENGTH__+0x4ac>
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
	DSI8xFrames[0] = gLevelChg; //DSI start bit
     8dc:	80 91 5c 21 	lds	r24, 0x215C	; 0x80215c <gLevelChg>
     8e0:	80 93 47 21 	sts	0x2147, r24	; 0x802147 <DSI8xFrames>
     8e4:	19 82       	std	Y+1, r1	; 0x01
     8e6:	1a 82       	std	Y+2, r1	; 0x02
     8e8:	68 94       	set
     8ea:	ee 24       	eor	r14, r14
     8ec:	e3 f8       	bld	r14, 3
     8ee:	01 e0       	ldi	r16, 0x01	; 1
     8f0:	10 e0       	ldi	r17, 0x00	; 0
     8f2:	d8 01       	movw	r26, r16
     8f4:	09 80       	ldd	r0, Y+1	; 0x01
     8f6:	02 c0       	rjmp	.+4      	; 0x8fc <__LOCK_REGION_LENGTH__+0x4fc>
     8f8:	aa 0f       	add	r26, r26
     8fa:	bb 1f       	adc	r27, r27
     8fc:	0a 94       	dec	r0
     8fe:	e2 f7       	brpl	.-8      	; 0x8f8 <__LOCK_REGION_LENGTH__+0x4f8>
     900:	ec e0       	ldi	r30, 0x0C	; 12
     902:	f1 e2       	ldi	r31, 0x21	; 33
		{
			tmp1 >>= 1;
			tmp0 >>= 1;
			if (gLevelChg & (1 << j)) //Particular level has been changed
			{
				if (sysState.setLevels[j] & (1 << i)) //Set upper half-bit
     904:	20 e0       	ldi	r18, 0x00	; 0
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	d1 2c       	mov	r13, r1
     90a:	f1 2c       	mov	r15, r1
	for (i = 0; i < 8; i++) //DSI frame bits 0-7
	{
		uint8_t tmp0 = 0, tmp1 = 0, j;
		for (j = 0; j < 8; j++) //Levels
		{
			tmp1 >>= 1;
     90c:	6d 2d       	mov	r22, r13
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	75 95       	asr	r23
     912:	67 95       	ror	r22
     914:	d6 2e       	mov	r13, r22
			tmp0 >>= 1;
     916:	4f 2d       	mov	r20, r15
     918:	50 e0       	ldi	r21, 0x00	; 0
     91a:	55 95       	asr	r21
     91c:	47 95       	ror	r20
     91e:	f4 2e       	mov	r15, r20
			if (gLevelChg & (1 << j)) //Particular level has been changed
     920:	80 91 5c 21 	lds	r24, 0x215C	; 0x80215c <gLevelChg>
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	02 2e       	mov	r0, r18
     928:	02 c0       	rjmp	.+4      	; 0x92e <__LOCK_REGION_LENGTH__+0x52e>
     92a:	95 95       	asr	r25
     92c:	87 95       	ror	r24
     92e:	0a 94       	dec	r0
     930:	e2 f7       	brpl	.-8      	; 0x92a <__LOCK_REGION_LENGTH__+0x52a>
     932:	80 ff       	sbrs	r24, 0
     934:	0d c0       	rjmp	.+26     	; 0x950 <__LOCK_REGION_LENGTH__+0x550>
			{
				if (sysState.setLevels[j] & (1 << i)) //Set upper half-bit
     936:	80 85       	ldd	r24, Z+8	; 0x08
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	8a 23       	and	r24, r26
     93c:	9b 23       	and	r25, r27
     93e:	89 2b       	or	r24, r25
     940:	21 f0       	breq	.+8      	; 0x94a <__LOCK_REGION_LENGTH__+0x54a>
					tmp1 |= 0x80;
     942:	86 2f       	mov	r24, r22
     944:	80 68       	ori	r24, 0x80	; 128
     946:	d8 2e       	mov	r13, r24
     948:	03 c0       	rjmp	.+6      	; 0x950 <__LOCK_REGION_LENGTH__+0x550>
				else
					tmp0 |= 0x80; //Set lower half-bit (one-zero transition)
     94a:	94 2f       	mov	r25, r20
     94c:	90 68       	ori	r25, 0x80	; 128
     94e:	f9 2e       	mov	r15, r25
     950:	2f 5f       	subi	r18, 0xFF	; 255
     952:	3f 4f       	sbci	r19, 0xFF	; 255
     954:	31 96       	adiw	r30, 0x01	; 1
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
	DSI8xFrames[0] = gLevelChg; //DSI start bit
	for (i = 0; i < 8; i++) //DSI frame bits 0-7
	{
		uint8_t tmp0 = 0, tmp1 = 0, j;
		for (j = 0; j < 8; j++) //Levels
     956:	28 30       	cpi	r18, 0x08	; 8
     958:	31 05       	cpc	r19, r1
     95a:	c1 f6       	brne	.-80     	; 0x90c <__LOCK_REGION_LENGTH__+0x50c>
				else
					tmp0 |= 0x80; //Set lower half-bit (one-zero transition)
			}
		}
		j = (8 - i) << 1;
		DSI8xFrames[j - 1] = tmp1;
     95c:	8e 2d       	mov	r24, r14
     95e:	88 0f       	add	r24, r24
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	fc 01       	movw	r30, r24
     964:	ea 5b       	subi	r30, 0xBA	; 186
     966:	fe 4d       	sbci	r31, 0xDE	; 222
     968:	d0 82       	st	Z, r13
		DSI8xFrames[j] = tmp0; //Manchester coded
     96a:	fc 01       	movw	r30, r24
     96c:	e9 5b       	subi	r30, 0xB9	; 185
     96e:	fe 4d       	sbci	r31, 0xDE	; 222
     970:	f0 82       	st	Z, r15
     972:	ea 94       	dec	r14
     974:	a9 81       	ldd	r26, Y+1	; 0x01
     976:	ba 81       	ldd	r27, Y+2	; 0x02
     978:	11 96       	adiw	r26, 0x01	; 1
     97a:	a9 83       	std	Y+1, r26	; 0x01
     97c:	ba 83       	std	Y+2, r27	; 0x02
		links[i].updateLevel();
	msenCh.updateLevel();
	for (i = 0; i < 9; i++)
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
	DSI8xFrames[0] = gLevelChg; //DSI start bit
	for (i = 0; i < 8; i++) //DSI frame bits 0-7
     97e:	e1 10       	cpse	r14, r1
     980:	b8 cf       	rjmp	.-144    	; 0x8f2 <__LOCK_REGION_LENGTH__+0x4f2>
		}
		j = (8 - i) << 1;
		DSI8xFrames[j - 1] = tmp1;
		DSI8xFrames[j] = tmp0; //Manchester coded
	}
	DSI8xFrames[17] = 0; //DSI stop bit
     982:	10 92 58 21 	sts	0x2158, r1	; 0x802158 <DSI8xFrames+0x11>
	gLevelChg = 0; //Clear flags for changed levels
     986:	10 92 5c 21 	sts	0x215C, r1	; 0x80215c <gLevelChg>
	if (sysState.setLevels[8] > 0) //On/off channel processing
     98a:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <sysState+0x10>
     98e:	88 23       	and	r24, r24
     990:	21 f0       	breq	.+8      	; 0x99a <__LOCK_REGION_LENGTH__+0x59a>
		PORTA.OUTSET = PIN7_bm;
     992:	80 e8       	ldi	r24, 0x80	; 128
     994:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
     998:	03 c0       	rjmp	.+6      	; 0x9a0 <__LOCK_REGION_LENGTH__+0x5a0>
	else
		PORTA.OUTCLR = PIN7_bm;
     99a:	80 e8       	ldi	r24, 0x80	; 128
     99c:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>

	if ((char)sysState.sysTick % 4 == 0) //Initialize conversion sequence 8 times per second
     9a0:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <sysState>
     9a4:	83 70       	andi	r24, 0x03	; 3
     9a6:	39 f4       	brne	.+14     	; 0x9b6 <__LOCK_REGION_LENGTH__+0x5b6>
	{
		ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN1_gc;
     9a8:	e0 e0       	ldi	r30, 0x00	; 0
     9aa:	f2 e0       	ldi	r31, 0x02	; 2
     9ac:	88 e0       	ldi	r24, 0x08	; 8
     9ae:	81 a3       	std	Z+33, r24	; 0x21
		ADCA.CTRLA |= ADC_START_bm; //Start conversion from pin 1 (channel 1)
     9b0:	80 81       	ld	r24, Z
     9b2:	84 60       	ori	r24, 0x04	; 4
     9b4:	80 83       	st	Z, r24
	}

	int16_t h = (int8_t)sysState.sysTick;
     9b6:	2c e0       	ldi	r18, 0x0C	; 12
     9b8:	31 e2       	ldi	r19, 0x21	; 33
     9ba:	f9 01       	movw	r30, r18
     9bc:	f0 81       	ld	r31, Z
     9be:	fd 83       	std	Y+5, r31	; 0x05
     9c0:	d9 01       	movw	r26, r18
     9c2:	11 96       	adiw	r26, 0x01	; 1
     9c4:	bc 91       	ld	r27, X
     9c6:	be 83       	std	Y+6, r27	; 0x06
     9c8:	f9 01       	movw	r30, r18
     9ca:	f2 81       	ldd	r31, Z+2	; 0x02
     9cc:	ff 83       	std	Y+7, r31	; 0x07
     9ce:	d9 01       	movw	r26, r18
     9d0:	13 96       	adiw	r26, 0x03	; 3
     9d2:	bc 91       	ld	r27, X
     9d4:	b8 87       	std	Y+8, r27	; 0x08
     9d6:	f9 01       	movw	r30, r18
     9d8:	f4 81       	ldd	r31, Z+4	; 0x04
     9da:	f9 87       	std	Y+9, r31	; 0x09
     9dc:	d9 01       	movw	r26, r18
     9de:	15 96       	adiw	r26, 0x05	; 5
     9e0:	bc 91       	ld	r27, X
     9e2:	ba 87       	std	Y+10, r27	; 0x0a
     9e4:	f9 01       	movw	r30, r18
     9e6:	f6 81       	ldd	r31, Z+6	; 0x06
     9e8:	fb 87       	std	Y+11, r31	; 0x0b
     9ea:	d9 01       	movw	r26, r18
     9ec:	17 96       	adiw	r26, 0x07	; 7
     9ee:	bc 91       	ld	r27, X
     9f0:	bc 87       	std	Y+12, r27	; 0x0c
	TCC4.CCABUF = h * h; //This will produce slow fading of HB LED (4s up/down)
     9f2:	ed 81       	ldd	r30, Y+5	; 0x05
     9f4:	ee 02       	muls	r30, r30
     9f6:	90 01       	movw	r18, r0
     9f8:	11 24       	eor	r1, r1
     9fa:	20 93 38 08 	sts	0x0838, r18	; 0x800838 <__TEXT_REGION_LENGTH__+0x700838>
     9fe:	30 93 39 08 	sts	0x0839, r19	; 0x800839 <__TEXT_REGION_LENGTH__+0x700839>

	if (((uint32_t)sysState.sysTick & 0x7FFFF) == 0) //Save state to EEPROM every 4.5 hrs
     a02:	8d 81       	ldd	r24, Y+5	; 0x05
     a04:	9e 81       	ldd	r25, Y+6	; 0x06
     a06:	af 81       	ldd	r26, Y+7	; 0x07
     a08:	b8 85       	ldd	r27, Y+8	; 0x08
     a0a:	a7 70       	andi	r26, 0x07	; 7
     a0c:	bb 27       	eor	r27, r27
     a0e:	89 2b       	or	r24, r25
     a10:	8a 2b       	or	r24, r26
     a12:	8b 2b       	or	r24, r27
     a14:	41 f4       	brne	.+16     	; 0xa26 <__LOCK_REGION_LENGTH__+0x626>
		eeprom_update_block(&channelOT, &savedCOT, sizeof(channelsOnTime));
     a16:	48 e3       	ldi	r20, 0x38	; 56
     a18:	50 e0       	ldi	r21, 0x00	; 0
     a1a:	61 e2       	ldi	r22, 0x21	; 33
     a1c:	70 e0       	ldi	r23, 0x00	; 0
     a1e:	84 ed       	ldi	r24, 0xD4	; 212
     a20:	90 e2       	ldi	r25, 0x20	; 32
     a22:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <eeprom_update_block>

	if (rxMode == SetConfig) //We are currently receiving data packet
     a26:	80 91 5b 21 	lds	r24, 0x215B	; 0x80215b <rxMode>
     a2a:	83 32       	cpi	r24, 0x23	; 35
     a2c:	e9 f4       	brne	.+58     	; 0xa68 <__LOCK_REGION_LENGTH__+0x668>
	{
		if (rs485busy == rxMark) //Second tick in a row detected
     a2e:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <rxMark>
     a32:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <_ZZ10__vector_7E9rs485busy>
     a36:	98 13       	cpse	r25, r24
     a38:	12 c0       	rjmp	.+36     	; 0xa5e <__LOCK_REGION_LENGTH__+0x65e>
		{
			rxMode = 0; //Packet considered lost
     a3a:	10 92 5b 21 	sts	0x215B, r1	; 0x80215b <rxMode>
			USARTC0.CTRLB |= USART_MPCM_bm; //Set MPCM bit
     a3e:	e0 ec       	ldi	r30, 0xC0	; 192
     a40:	f8 e0       	ldi	r31, 0x08	; 8
     a42:	83 81       	ldd	r24, Z+3	; 0x03
     a44:	82 60       	ori	r24, 0x02	; 2
     a46:	83 83       	std	Z+3, r24	; 0x03
			#ifdef RXC_EDMA
			EDMA.CH0.CTRLA = 0;
     a48:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__TEXT_REGION_LENGTH__+0x700110>
			while (EDMA.CH0.CTRLB & EDMA_CH_CHBUSY_bm);
     a4c:	e0 e0       	ldi	r30, 0x00	; 0
     a4e:	f1 e0       	ldi	r31, 0x01	; 1
     a50:	81 89       	ldd	r24, Z+17	; 0x11
     a52:	88 23       	and	r24, r24
     a54:	ec f3       	brlt	.-6      	; 0xa50 <__LOCK_REGION_LENGTH__+0x650>
			USARTC0.CTRLA = USART_DRIE_bm | USART_RXCINTLVL_HI_gc;
     a56:	80 e7       	ldi	r24, 0x70	; 112
     a58:	80 93 c2 08 	sts	0x08C2, r24	; 0x8008c2 <__TEXT_REGION_LENGTH__+0x7008c2>
     a5c:	0a c0       	rjmp	.+20     	; 0xa72 <__LOCK_REGION_LENGTH__+0x672>
			#endif
		}
		else
			rs485busy = rxMark;
     a5e:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <rxMark>
     a62:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <_ZZ10__vector_7E9rs485busy>
     a66:	05 c0       	rjmp	.+10     	; 0xa72 <__LOCK_REGION_LENGTH__+0x672>
	}
	else
		rs485busy = rxMark - 1;
     a68:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <rxMark>
     a6c:	81 50       	subi	r24, 0x01	; 1
     a6e:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <_ZZ10__vector_7E9rs485busy>
	framePtr = DSI8xFrames;
     a72:	87 e4       	ldi	r24, 0x47	; 71
     a74:	91 e2       	ldi	r25, 0x21	; 33
     a76:	80 93 45 21 	sts	0x2145, r24	; 0x802145 <framePtr>
     a7a:	90 93 46 21 	sts	0x2146, r25	; 0x802146 <framePtr+0x1>
	TCD5.INTFLAGS |= TC5_OVFIF_bm;
     a7e:	e0 e4       	ldi	r30, 0x40	; 64
     a80:	f9 e0       	ldi	r31, 0x09	; 9
     a82:	84 85       	ldd	r24, Z+12	; 0x0c
     a84:	81 60       	ori	r24, 0x01	; 1
     a86:	84 87       	std	Z+12, r24	; 0x0c
	TCD5.INTCTRLA = TC_OVFINTLVL_HI_gc;
     a88:	83 e0       	ldi	r24, 0x03	; 3
     a8a:	86 83       	std	Z+6, r24	; 0x06
}
     a8c:	1f c0       	rjmp	.+62     	; 0xacc <__LOCK_REGION_LENGTH__+0x6cc>
				}
				else //Level needs to be raised
				{
					tempLvl += ((-tempLvl > delta) ? delta : -tempLvl) + (int16_t)_lvl[s];
					if (!gLevels[j] && tempLvl > 0) //Lamp has been switched on - remember ticks
						_onTimeStamp = sysState.sysTick;
     a8e:	ac e0       	ldi	r26, 0x0C	; 12
     a90:	b1 e2       	ldi	r27, 0x21	; 33
     a92:	8c 91       	ld	r24, X
     a94:	83 8f       	std	Z+27, r24	; 0x1b
     a96:	80 91 0d 21 	lds	r24, 0x210D	; 0x80210d <sysState+0x1>
     a9a:	84 8f       	std	Z+28, r24	; 0x1c
     a9c:	80 91 0e 21 	lds	r24, 0x210E	; 0x80210e <sysState+0x2>
     aa0:	85 8f       	std	Z+29, r24	; 0x1d
     aa2:	80 91 0f 21 	lds	r24, 0x210F	; 0x80210f <sysState+0x3>
     aa6:	86 8f       	std	Z+30, r24	; 0x1e
     aa8:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <sysState+0x4>
     aac:	87 8f       	std	Z+31, r24	; 0x1f
     aae:	80 91 11 21 	lds	r24, 0x2111	; 0x802111 <sysState+0x5>
     ab2:	80 a3       	std	Z+32, r24	; 0x20
     ab4:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <sysState+0x6>
     ab8:	81 a3       	std	Z+33, r24	; 0x21
     aba:	80 91 13 21 	lds	r24, 0x2113	; 0x802113 <sysState+0x7>
     abe:	82 a3       	std	Z+34, r24	; 0x22
     ac0:	5c cd       	rjmp	.-1352   	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
     ac2:	a4 e1       	ldi	r26, 0x14	; 20
     ac4:	b1 e2       	ldi	r27, 0x21	; 33
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
			return;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	f0 ce       	rjmp	.-544    	; 0x8ac <__LOCK_REGION_LENGTH__+0x4ac>
	else
		rs485busy = rxMark - 1;
	framePtr = DSI8xFrames;
	TCD5.INTFLAGS |= TC5_OVFIF_bm;
	TCD5.INTCTRLA = TC_OVFINTLVL_HI_gc;
}
     acc:	62 96       	adiw	r28, 0x12	; 18
     ace:	cd bf       	out	0x3d, r28	; 61
     ad0:	de bf       	out	0x3e, r29	; 62
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	ff 91       	pop	r31
     ad8:	ef 91       	pop	r30
     ada:	bf 91       	pop	r27
     adc:	af 91       	pop	r26
     ade:	9f 91       	pop	r25
     ae0:	8f 91       	pop	r24
     ae2:	7f 91       	pop	r23
     ae4:	6f 91       	pop	r22
     ae6:	5f 91       	pop	r21
     ae8:	4f 91       	pop	r20
     aea:	3f 91       	pop	r19
     aec:	2f 91       	pop	r18
     aee:	1f 91       	pop	r17
     af0:	0f 91       	pop	r16
     af2:	ff 90       	pop	r15
     af4:	ef 90       	pop	r14
     af6:	df 90       	pop	r13
     af8:	cf 90       	pop	r12
     afa:	bf 90       	pop	r11
     afc:	af 90       	pop	r10
     afe:	9f 90       	pop	r9
     b00:	8f 90       	pop	r8
     b02:	7f 90       	pop	r7
     b04:	6f 90       	pop	r6
     b06:	5f 90       	pop	r5
     b08:	4f 90       	pop	r4
     b0a:	3f 90       	pop	r3
     b0c:	2f 90       	pop	r2
     b0e:	0f 90       	pop	r0
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	0f 90       	pop	r0
     b14:	1f 90       	pop	r1
     b16:	18 95       	reti

00000b18 <__vector_34>:

ISR(ADCA_CH0_vect)
{
     b18:	1f 92       	push	r1
     b1a:	0f 92       	push	r0
     b1c:	0f b6       	in	r0, 0x3f	; 63
     b1e:	0f 92       	push	r0
     b20:	11 24       	eor	r1, r1
     b22:	af 92       	push	r10
     b24:	bf 92       	push	r11
     b26:	df 92       	push	r13
     b28:	ef 92       	push	r14
     b2a:	ff 92       	push	r15
     b2c:	0f 93       	push	r16
     b2e:	1f 93       	push	r17
     b30:	2f 93       	push	r18
     b32:	3f 93       	push	r19
     b34:	4f 93       	push	r20
     b36:	5f 93       	push	r21
     b38:	6f 93       	push	r22
     b3a:	7f 93       	push	r23
     b3c:	8f 93       	push	r24
     b3e:	9f 93       	push	r25
     b40:	af 93       	push	r26
     b42:	bf 93       	push	r27
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	ef 93       	push	r30
     b4a:	ff 93       	push	r31
	static uint8_t sAdcCnt = 0;
	int16_t result = ADCA.CH0RES;
     b4c:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__TEXT_REGION_LENGTH__+0x700210>
     b50:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__TEXT_REGION_LENGTH__+0x700211>
	if (sAdcCnt < 4 && LINK_VALID_MIN < result && result < LINK_VALID_MAX)
     b54:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <_edata>
     b58:	24 30       	cpi	r18, 0x04	; 4
     b5a:	08 f0       	brcs	.+2      	; 0xb5e <__vector_34+0x46>
     b5c:	5f c1       	rjmp	.+702    	; 0xe1c <__vector_34+0x304>
     b5e:	bc 01       	movw	r22, r24
     b60:	6e 5e       	subi	r22, 0xEE	; 238
     b62:	73 41       	sbci	r23, 0x13	; 19
     b64:	6b 36       	cpi	r22, 0x6B	; 107
     b66:	77 46       	sbci	r23, 0x67	; 103
     b68:	08 f0       	brcs	.+2      	; 0xb6c <__vector_34+0x54>
     b6a:	49 c1       	rjmp	.+658    	; 0xdfe <__vector_34+0x2e6>
	{
		sysState.linksMask |= (1 << sAdcCnt); //Set 'valid' bit
     b6c:	a2 2e       	mov	r10, r18
     b6e:	b1 2c       	mov	r11, r1
     b70:	ec e0       	ldi	r30, 0x0C	; 12
     b72:	f1 e2       	ldi	r31, 0x21	; 33
     b74:	61 e0       	ldi	r22, 0x01	; 1
     b76:	70 e0       	ldi	r23, 0x00	; 0
     b78:	02 2e       	mov	r0, r18
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <__vector_34+0x68>
     b7c:	66 0f       	add	r22, r22
     b7e:	77 1f       	adc	r23, r23
     b80:	0a 94       	dec	r0
     b82:	e2 f7       	brpl	.-8      	; 0xb7c <__vector_34+0x64>
     b84:	35 89       	ldd	r19, Z+21	; 0x15
     b86:	36 2b       	or	r19, r22
     b88:	35 8b       	std	Z+21, r19	; 0x15
		if (result < LINK_ON_BARRIER)
     b8a:	85 34       	cpi	r24, 0x45	; 69
     b8c:	6b e1       	ldi	r22, 0x1B	; 27
     b8e:	96 07       	cpc	r25, r22
     b90:	0c f0       	brlt	.+2      	; 0xb94 <__vector_34+0x7c>
     b92:	88 c0       	rjmp	.+272    	; 0xca4 <__vector_34+0x18c>
		{
			result = 0;
			if (sysState.linksMask & (0x10 << sAdcCnt)) //Previous level was non-zero
     b94:	80 e1       	ldi	r24, 0x10	; 16
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	02 2e       	mov	r0, r18
     b9a:	02 c0       	rjmp	.+4      	; 0xba0 <__vector_34+0x88>
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	0a 94       	dec	r0
     ba2:	e2 f7       	brpl	.-8      	; 0xb9c <__vector_34+0x84>
     ba4:	43 2f       	mov	r20, r19
     ba6:	50 e0       	ldi	r21, 0x00	; 0
     ba8:	48 23       	and	r20, r24
     baa:	59 23       	and	r21, r25
     bac:	45 2b       	or	r20, r21
     bae:	09 f4       	brne	.+2      	; 0xbb2 <__vector_34+0x9a>
     bb0:	74 c0       	rjmp	.+232    	; 0xc9a <__vector_34+0x182>
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		uint8_t oLvl = sysState.linkLevels[_linkNum];
     bb2:	43 e2       	ldi	r20, 0x23	; 35
     bb4:	4a 9d       	mul	r20, r10
     bb6:	f0 01       	movw	r30, r0
     bb8:	4b 9d       	mul	r20, r11
     bba:	f0 0d       	add	r31, r0
     bbc:	11 24       	eor	r1, r1
     bbe:	e0 5f       	subi	r30, 0xF0	; 240
     bc0:	ff 4d       	sbci	r31, 0xDF	; 223
     bc2:	42 81       	ldd	r20, Z+2	; 0x02
     bc4:	50 e0       	ldi	r21, 0x00	; 0
     bc6:	fa 01       	movw	r30, r20
     bc8:	e4 5f       	subi	r30, 0xF4	; 244
     bca:	fe 4d       	sbci	r31, 0xDE	; 222
     bcc:	e1 89       	ldd	r30, Z+17	; 0x11
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
     bce:	6e 2f       	mov	r22, r30
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	6e 5f       	subi	r22, 0xFE	; 254
     bd4:	7f 4f       	sbci	r23, 0xFF	; 255
     bd6:	65 30       	cpi	r22, 0x05	; 5
     bd8:	71 05       	cpc	r23, r1
     bda:	18 f4       	brcc	.+6      	; 0xbe2 <__vector_34+0xca>
     bdc:	ee 23       	and	r30, r30
     bde:	09 f4       	brne	.+2      	; 0xbe2 <__vector_34+0xca>
     be0:	5c c0       	rjmp	.+184    	; 0xc9a <__vector_34+0x182>
			return;
		sysState.linkLevels[_linkNum] = level;
     be2:	fa 01       	movw	r30, r20
     be4:	e4 5f       	subi	r30, 0xF4	; 244
     be6:	fe 4d       	sbci	r31, 0xDE	; 222
     be8:	11 8a       	std	Z+17, r1	; 0x11

		for (uint8_t i = 0; i < _linkCnt; i++)
     bea:	43 e2       	ldi	r20, 0x23	; 35
     bec:	4a 9d       	mul	r20, r10
     bee:	f0 01       	movw	r30, r0
     bf0:	4b 9d       	mul	r20, r11
     bf2:	f0 0d       	add	r31, r0
     bf4:	11 24       	eor	r1, r1
     bf6:	e0 5f       	subi	r30, 0xF0	; 240
     bf8:	ff 4d       	sbci	r31, 0xDF	; 223
     bfa:	d1 80       	ldd	r13, Z+1	; 0x01
     bfc:	dd 20       	and	r13, r13
     bfe:	19 f1       	breq	.+70     	; 0xc46 <__vector_34+0x12e>
     c00:	c3 e2       	ldi	r28, 0x23	; 35
     c02:	2c 9f       	mul	r18, r28
     c04:	a0 01       	movw	r20, r0
     c06:	11 24       	eor	r1, r1
     c08:	4d 5e       	subi	r20, 0xED	; 237
     c0a:	5f 4d       	sbci	r21, 0xDF	; 223
     c0c:	00 e0       	ldi	r16, 0x00	; 0
     c0e:	10 e0       	ldi	r17, 0x00	; 0
     c10:	da 01       	movw	r26, r20
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     c12:	ec 91       	ld	r30, X
     c14:	4f 5f       	subi	r20, 0xFF	; 255
     c16:	5f 4f       	sbci	r21, 0xFF	; 255
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	ee 0f       	add	r30, r30
     c1c:	ff 1f       	adc	r31, r31
     c1e:	e3 5a       	subi	r30, 0xA3	; 163
     c20:	fe 4d       	sbci	r31, 0xDE	; 222
     c22:	e0 80       	ld	r14, Z
     c24:	f1 80       	ldd	r15, Z+1	; 0x01
     c26:	13 96       	adiw	r26, 0x03	; 3
     c28:	6c 91       	ld	r22, X
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	e1 e0       	ldi	r30, 0x01	; 1
     c2e:	6e 15       	cp	r22, r14
     c30:	7f 05       	cpc	r23, r15
     c32:	09 f4       	brne	.+2      	; 0xc36 <__vector_34+0x11e>
     c34:	e0 e0       	ldi	r30, 0x00	; 0
     c36:	0e 2b       	or	r16, r30
			if (!level || !_difLvl[i]) //Set zero level directly
				_lvl[i] = 0;
     c38:	fa 01       	movw	r30, r20
     c3a:	12 82       	std	Z+2, r1	; 0x02
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
			return;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
     c3c:	1f 5f       	subi	r17, 0xFF	; 255
     c3e:	1d 11       	cpse	r17, r13
     c40:	e7 cf       	rjmp	.-50     	; 0xc10 <__vector_34+0xf8>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     c42:	01 11       	cpse	r16, r1
     c44:	2a c0       	rjmp	.+84     	; 0xc9a <__vector_34+0x182>
			_tickLastChg = sysState.sysTick;
     c46:	63 e2       	ldi	r22, 0x23	; 35
     c48:	6a 9d       	mul	r22, r10
     c4a:	a0 01       	movw	r20, r0
     c4c:	6b 9d       	mul	r22, r11
     c4e:	50 0d       	add	r21, r0
     c50:	11 24       	eor	r1, r1
     c52:	ea 01       	movw	r28, r20
     c54:	c0 5f       	subi	r28, 0xF0	; 240
     c56:	df 4d       	sbci	r29, 0xDF	; 223
     c58:	de 01       	movw	r26, r28
     c5a:	53 96       	adiw	r26, 0x13	; 19
     c5c:	ec e0       	ldi	r30, 0x0C	; 12
     c5e:	f1 e2       	ldi	r31, 0x21	; 33
     c60:	40 81       	ld	r20, Z
     c62:	4b 8b       	std	Y+19, r20	; 0x13
     c64:	41 81       	ldd	r20, Z+1	; 0x01
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	4c 93       	st	X, r20
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	42 81       	ldd	r20, Z+2	; 0x02
     c6e:	12 96       	adiw	r26, 0x02	; 2
     c70:	4c 93       	st	X, r20
     c72:	12 97       	sbiw	r26, 0x02	; 2
     c74:	43 81       	ldd	r20, Z+3	; 0x03
     c76:	13 96       	adiw	r26, 0x03	; 3
     c78:	4c 93       	st	X, r20
     c7a:	13 97       	sbiw	r26, 0x03	; 3
     c7c:	44 81       	ldd	r20, Z+4	; 0x04
     c7e:	14 96       	adiw	r26, 0x04	; 4
     c80:	4c 93       	st	X, r20
     c82:	14 97       	sbiw	r26, 0x04	; 4
     c84:	45 81       	ldd	r20, Z+5	; 0x05
     c86:	15 96       	adiw	r26, 0x05	; 5
     c88:	4c 93       	st	X, r20
     c8a:	15 97       	sbiw	r26, 0x05	; 5
     c8c:	46 81       	ldd	r20, Z+6	; 0x06
     c8e:	16 96       	adiw	r26, 0x06	; 6
     c90:	4c 93       	st	X, r20
     c92:	16 97       	sbiw	r26, 0x06	; 6
     c94:	47 81       	ldd	r20, Z+7	; 0x07
     c96:	17 96       	adiw	r26, 0x07	; 7
     c98:	4c 93       	st	X, r20
		if (result < LINK_ON_BARRIER)
		{
			result = 0;
			if (sysState.linksMask & (0x10 << sAdcCnt)) //Previous level was non-zero
				links[sAdcCnt].setLevel(0);
			sysState.linksMask &= ~(0x10 << sAdcCnt); //Clear 'non-zero' bit
     c9a:	80 95       	com	r24
     c9c:	38 23       	and	r19, r24
     c9e:	30 93 21 21 	sts	0x2121, r19	; 0x802121 <sysState+0x15>
     ca2:	a8 c1       	rjmp	.+848    	; 0xff4 <__vector_34+0x4dc>
		}
		else
		{
			result = (result - LINK_1PERC_CODE) / LINK_SCALE;
     ca4:	80 59       	subi	r24, 0x90	; 144
     ca6:	91 42       	sbci	r25, 0x21	; 33
     ca8:	64 e5       	ldi	r22, 0x54	; 84
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	0e 94 26 0a 	call	0x144c	; 0x144c <__divmodhi4>
			if (result < 5)
     cb0:	65 30       	cpi	r22, 0x05	; 5
     cb2:	71 05       	cpc	r23, r1
     cb4:	14 f4       	brge	.+4      	; 0xcba <__vector_34+0x1a2>
				result = 5;
     cb6:	65 e0       	ldi	r22, 0x05	; 5
     cb8:	70 e0       	ldi	r23, 0x00	; 0
     cba:	6f 3f       	cpi	r22, 0xFF	; 255
     cbc:	71 05       	cpc	r23, r1
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__vector_34+0x1ae>
     cc0:	14 f0       	brlt	.+4      	; 0xcc6 <__vector_34+0x1ae>
     cc2:	6f ef       	ldi	r22, 0xFF	; 255
     cc4:	70 e0       	ldi	r23, 0x00	; 0
			if (result > 255)
				result = 255;
			sysState.linksMask |= (0x10 << sAdcCnt); //Set 'non-zero' bit
     cc6:	80 e1       	ldi	r24, 0x10	; 16
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	02 2e       	mov	r0, r18
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <__vector_34+0x1ba>
     cce:	88 0f       	add	r24, r24
     cd0:	99 1f       	adc	r25, r25
     cd2:	0a 94       	dec	r0
     cd4:	e2 f7       	brpl	.-8      	; 0xcce <__vector_34+0x1b6>
     cd6:	38 2b       	or	r19, r24
     cd8:	30 93 21 21 	sts	0x2121, r19	; 0x802121 <sysState+0x15>
			links[sAdcCnt].setLevel((uint8_t)result);
     cdc:	16 2f       	mov	r17, r22
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		uint8_t oLvl = sysState.linkLevels[_linkNum];
     cde:	83 e2       	ldi	r24, 0x23	; 35
     ce0:	8a 9d       	mul	r24, r10
     ce2:	f0 01       	movw	r30, r0
     ce4:	8b 9d       	mul	r24, r11
     ce6:	f0 0d       	add	r31, r0
     ce8:	11 24       	eor	r1, r1
     cea:	e0 5f       	subi	r30, 0xF0	; 240
     cec:	ff 4d       	sbci	r31, 0xDF	; 223
     cee:	42 81       	ldd	r20, Z+2	; 0x02
     cf0:	50 e0       	ldi	r21, 0x00	; 0
     cf2:	fa 01       	movw	r30, r20
     cf4:	e4 5f       	subi	r30, 0xF4	; 244
     cf6:	fe 4d       	sbci	r31, 0xDE	; 222
     cf8:	31 89       	ldd	r19, Z+17	; 0x11
     cfa:	77 27       	eor	r23, r23
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
     cfc:	83 2f       	mov	r24, r19
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	86 1b       	sub	r24, r22
     d02:	97 0b       	sbc	r25, r23
     d04:	02 96       	adiw	r24, 0x02	; 2
     d06:	05 97       	sbiw	r24, 0x05	; 5
     d08:	48 f4       	brcc	.+18     	; 0xd1c <__vector_34+0x204>
     d0a:	91 e0       	ldi	r25, 0x01	; 1
     d0c:	11 11       	cpse	r17, r1
     d0e:	01 c0       	rjmp	.+2      	; 0xd12 <__vector_34+0x1fa>
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	31 11       	cpse	r19, r1
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	98 13       	cpse	r25, r24
     d1a:	6c c1       	rjmp	.+728    	; 0xff4 <__vector_34+0x4dc>
			return;
		sysState.linkLevels[_linkNum] = level;
     d1c:	fa 01       	movw	r30, r20
     d1e:	e4 5f       	subi	r30, 0xF4	; 244
     d20:	fe 4d       	sbci	r31, 0xDE	; 222
     d22:	11 8b       	std	Z+17, r17	; 0x11

		for (uint8_t i = 0; i < _linkCnt; i++)
     d24:	83 e2       	ldi	r24, 0x23	; 35
     d26:	8a 9d       	mul	r24, r10
     d28:	f0 01       	movw	r30, r0
     d2a:	8b 9d       	mul	r24, r11
     d2c:	f0 0d       	add	r31, r0
     d2e:	11 24       	eor	r1, r1
     d30:	e0 5f       	subi	r30, 0xF0	; 240
     d32:	ff 4d       	sbci	r31, 0xDF	; 223
     d34:	01 81       	ldd	r16, Z+1	; 0x01
     d36:	00 23       	and	r16, r16
     d38:	b9 f1       	breq	.+110    	; 0xda8 <__vector_34+0x290>
     d3a:	f3 e2       	ldi	r31, 0x23	; 35
     d3c:	2f 9f       	mul	r18, r31
     d3e:	d0 01       	movw	r26, r0
     d40:	11 24       	eor	r1, r1
     d42:	ad 5e       	subi	r26, 0xED	; 237
     d44:	bf 4d       	sbci	r27, 0xDF	; 223
     d46:	50 e0       	ldi	r21, 0x00	; 0
     d48:	30 e0       	ldi	r19, 0x00	; 0
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     d4a:	ed 01       	movw	r28, r26
     d4c:	e8 81       	ld	r30, Y
     d4e:	11 96       	adiw	r26, 0x01	; 1
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	ee 0f       	add	r30, r30
     d54:	ff 1f       	adc	r31, r31
     d56:	e3 5a       	subi	r30, 0xA3	; 163
     d58:	fe 4d       	sbci	r31, 0xDE	; 222
     d5a:	01 90       	ld	r0, Z+
     d5c:	f0 81       	ld	r31, Z
     d5e:	e0 2d       	mov	r30, r0
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	41 e0       	ldi	r20, 0x01	; 1
     d66:	8e 17       	cp	r24, r30
     d68:	9f 07       	cpc	r25, r31
     d6a:	09 f4       	brne	.+2      	; 0xd6e <__vector_34+0x256>
     d6c:	40 e0       	ldi	r20, 0x00	; 0
     d6e:	54 2b       	or	r21, r20
			if (!level || !_difLvl[i]) //Set zero level directly
     d70:	11 23       	and	r17, r17
     d72:	29 f0       	breq	.+10     	; 0xd7e <__vector_34+0x266>
     d74:	18 96       	adiw	r26, 0x08	; 8
     d76:	8c 91       	ld	r24, X
     d78:	18 97       	sbiw	r26, 0x08	; 8
     d7a:	81 11       	cpse	r24, r1
     d7c:	04 c0       	rjmp	.+8      	; 0xd86 <__vector_34+0x26e>
				_lvl[i] = 0;
     d7e:	12 96       	adiw	r26, 0x02	; 2
     d80:	1c 92       	st	X, r1
     d82:	12 97       	sbiw	r26, 0x02	; 2
     d84:	0c c0       	rjmp	.+24     	; 0xd9e <__vector_34+0x286>
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
     d86:	86 9f       	mul	r24, r22
     d88:	f0 01       	movw	r30, r0
     d8a:	87 9f       	mul	r24, r23
     d8c:	f0 0d       	add	r31, r0
     d8e:	11 24       	eor	r1, r1
     d90:	15 96       	adiw	r26, 0x05	; 5
     d92:	8c 91       	ld	r24, X
     d94:	15 97       	sbiw	r26, 0x05	; 5
     d96:	8f 0f       	add	r24, r31
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	8c 93       	st	X, r24
     d9c:	12 97       	sbiw	r26, 0x02	; 2
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
			return;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
     d9e:	3f 5f       	subi	r19, 0xFF	; 255
     da0:	03 13       	cpse	r16, r19
     da2:	d3 cf       	rjmp	.-90     	; 0xd4a <__vector_34+0x232>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     da4:	51 11       	cpse	r21, r1
     da6:	26 c1       	rjmp	.+588    	; 0xff4 <__vector_34+0x4dc>
			_tickLastChg = sysState.sysTick;
     da8:	33 e2       	ldi	r19, 0x23	; 35
     daa:	3a 9d       	mul	r19, r10
     dac:	c0 01       	movw	r24, r0
     dae:	3b 9d       	mul	r19, r11
     db0:	90 0d       	add	r25, r0
     db2:	11 24       	eor	r1, r1
     db4:	ec 01       	movw	r28, r24
     db6:	c0 5f       	subi	r28, 0xF0	; 240
     db8:	df 4d       	sbci	r29, 0xDF	; 223
     dba:	de 01       	movw	r26, r28
     dbc:	53 96       	adiw	r26, 0x13	; 19
     dbe:	ec e0       	ldi	r30, 0x0C	; 12
     dc0:	f1 e2       	ldi	r31, 0x21	; 33
     dc2:	80 81       	ld	r24, Z
     dc4:	8b 8b       	std	Y+19, r24	; 0x13
     dc6:	81 81       	ldd	r24, Z+1	; 0x01
     dc8:	11 96       	adiw	r26, 0x01	; 1
     dca:	8c 93       	st	X, r24
     dcc:	11 97       	sbiw	r26, 0x01	; 1
     dce:	82 81       	ldd	r24, Z+2	; 0x02
     dd0:	12 96       	adiw	r26, 0x02	; 2
     dd2:	8c 93       	st	X, r24
     dd4:	12 97       	sbiw	r26, 0x02	; 2
     dd6:	83 81       	ldd	r24, Z+3	; 0x03
     dd8:	13 96       	adiw	r26, 0x03	; 3
     dda:	8c 93       	st	X, r24
     ddc:	13 97       	sbiw	r26, 0x03	; 3
     dde:	84 81       	ldd	r24, Z+4	; 0x04
     de0:	14 96       	adiw	r26, 0x04	; 4
     de2:	8c 93       	st	X, r24
     de4:	14 97       	sbiw	r26, 0x04	; 4
     de6:	85 81       	ldd	r24, Z+5	; 0x05
     de8:	15 96       	adiw	r26, 0x05	; 5
     dea:	8c 93       	st	X, r24
     dec:	15 97       	sbiw	r26, 0x05	; 5
     dee:	86 81       	ldd	r24, Z+6	; 0x06
     df0:	16 96       	adiw	r26, 0x06	; 6
     df2:	8c 93       	st	X, r24
     df4:	16 97       	sbiw	r26, 0x06	; 6
     df6:	87 81       	ldd	r24, Z+7	; 0x07
     df8:	17 96       	adiw	r26, 0x07	; 7
     dfa:	8c 93       	st	X, r24
     dfc:	fb c0       	rjmp	.+502    	; 0xff4 <__vector_34+0x4dc>
			sysState.linksMask |= (0x10 << sAdcCnt); //Set 'non-zero' bit
			links[sAdcCnt].setLevel((uint8_t)result);
		}
	}
	else if (sAdcCnt < 4)
		sysState.linksMask &= ~(0x11 << sAdcCnt); //Clear 'valid' and 'non-zero' bits
     dfe:	ec e0       	ldi	r30, 0x0C	; 12
     e00:	f1 e2       	ldi	r31, 0x21	; 33
     e02:	81 e1       	ldi	r24, 0x11	; 17
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	02 2e       	mov	r0, r18
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <__vector_34+0x2f6>
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	0a 94       	dec	r0
     e10:	e2 f7       	brpl	.-8      	; 0xe0a <__vector_34+0x2f2>
     e12:	80 95       	com	r24
     e14:	95 89       	ldd	r25, Z+21	; 0x15
     e16:	89 23       	and	r24, r25
     e18:	85 8b       	std	Z+21, r24	; 0x15
     e1a:	ec c0       	rjmp	.+472    	; 0xff4 <__vector_34+0x4dc>
	else //sAdcCnt == 4: MSEN channel
		msenCh.setLevel((uint8_t)(result >> 6));
     e1c:	08 2e       	mov	r0, r24
     e1e:	89 2f       	mov	r24, r25
     e20:	00 0c       	add	r0, r0
     e22:	88 1f       	adc	r24, r24
     e24:	99 0b       	sbc	r25, r25
     e26:	00 0c       	add	r0, r0
     e28:	88 1f       	adc	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	38 2f       	mov	r19, r24
		_onTime = validConf.msenOnTime > 5 ? validConf.msenOnTime : 6;
		_fTime = _onTime + validConf.msenLowTime;
	}
	void setLevel(uint8_t level)
	{
		if (level < MSEN_VALID_MIN || !validConf.msenOnTime || (sysState.linksMask & (0x10 << _linkNum)))
     e2e:	84 31       	cpi	r24, 0x14	; 20
     e30:	c0 f0       	brcs	.+48     	; 0xe62 <__vector_34+0x34a>
     e32:	40 91 3e 21 	lds	r20, 0x213E	; 0x80213e <validConf+0x1a>
     e36:	44 23       	and	r20, r20
     e38:	a1 f0       	breq	.+40     	; 0xe62 <__vector_34+0x34a>
     e3a:	e0 91 04 20 	lds	r30, 0x2004	; 0x802004 <msenCh+0x2>
     e3e:	ae 2f       	mov	r26, r30
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	40 91 21 21 	lds	r20, 0x2121	; 0x802121 <sysState+0x15>
     e46:	64 2f       	mov	r22, r20
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	40 e1       	ldi	r20, 0x10	; 16
     e4c:	50 e0       	ldi	r21, 0x00	; 0
     e4e:	0e 2e       	mov	r0, r30
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <__vector_34+0x33e>
     e52:	44 0f       	add	r20, r20
     e54:	55 1f       	adc	r21, r21
     e56:	0a 94       	dec	r0
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <__vector_34+0x33a>
     e5a:	46 23       	and	r20, r22
     e5c:	57 23       	and	r21, r23
     e5e:	45 2b       	or	r20, r21
     e60:	29 f0       	breq	.+10     	; 0xe6c <__vector_34+0x354>
		{
			_lvl = 0; //MSEN disconnected, disabled (by zero on time) or there is non-zero level from link
     e62:	e2 e0       	ldi	r30, 0x02	; 2
     e64:	f0 e2       	ldi	r31, 0x20	; 32
     e66:	13 82       	std	Z+3, r1	; 0x03
			cntDown = false;
     e68:	10 82       	st	Z, r1
     e6a:	c4 c0       	rjmp	.+392    	; 0xff4 <__vector_34+0x4dc>
			return;
		}
		if (level > MSEN_SEN1_TRIG && _lvl == MSEN_VALID_MIN) //Off to on transition
     e6c:	8a 33       	cpi	r24, 0x3A	; 58
     e6e:	08 f4       	brcc	.+2      	; 0xe72 <__vector_34+0x35a>
     e70:	96 c0       	rjmp	.+300    	; 0xf9e <__vector_34+0x486>
     e72:	40 91 05 20 	lds	r20, 0x2005	; 0x802005 <msenCh+0x3>
     e76:	44 31       	cpi	r20, 0x14	; 20
     e78:	09 f0       	breq	.+2      	; 0xe7c <__vector_34+0x364>
     e7a:	91 c0       	rjmp	.+290    	; 0xf9e <__vector_34+0x486>
		{
			_lvl = level;
     e7c:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <msenCh+0x3>
		}
	}

	void setLevel(uint8_t level, bool direction) //Accepts level in the range 0…255
	{
		_dir = direction;
     e80:	83 e2       	ldi	r24, 0x23	; 35
     e82:	8a 9f       	mul	r24, r26
     e84:	e0 01       	movw	r28, r0
     e86:	8b 9f       	mul	r24, r27
     e88:	d0 0d       	add	r29, r0
     e8a:	11 24       	eor	r1, r1
     e8c:	c0 5f       	subi	r28, 0xF0	; 240
     e8e:	df 4d       	sbci	r29, 0xDF	; 223
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	37 34       	cpi	r19, 0x47	; 71
     e94:	08 f4       	brcc	.+2      	; 0xe98 <__vector_34+0x380>
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	88 83       	st	Y, r24
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		uint8_t oLvl = sysState.linkLevels[_linkNum];
     e9a:	83 e2       	ldi	r24, 0x23	; 35
     e9c:	8a 9f       	mul	r24, r26
     e9e:	e0 01       	movw	r28, r0
     ea0:	8b 9f       	mul	r24, r27
     ea2:	d0 0d       	add	r29, r0
     ea4:	11 24       	eor	r1, r1
     ea6:	c0 5f       	subi	r28, 0xF0	; 240
     ea8:	df 4d       	sbci	r29, 0xDF	; 223
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	ec 01       	movw	r28, r24
     eb0:	c4 5f       	subi	r28, 0xF4	; 244
     eb2:	de 4d       	sbci	r29, 0xDE	; 222
     eb4:	39 89       	ldd	r19, Y+17	; 0x11
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
     eb6:	43 2f       	mov	r20, r19
     eb8:	50 e0       	ldi	r21, 0x00	; 0
     eba:	4d 5f       	subi	r20, 0xFD	; 253
     ebc:	51 09       	sbc	r21, r1
     ebe:	45 30       	cpi	r20, 0x05	; 5
     ec0:	51 05       	cpc	r21, r1
     ec2:	10 f4       	brcc	.+4      	; 0xec8 <__vector_34+0x3b0>
     ec4:	31 11       	cpse	r19, r1
     ec6:	66 c0       	rjmp	.+204    	; 0xf94 <__vector_34+0x47c>
			return;
		sysState.linkLevels[_linkNum] = level;
     ec8:	ec 01       	movw	r28, r24
     eca:	c4 5f       	subi	r28, 0xF4	; 244
     ecc:	de 4d       	sbci	r29, 0xDE	; 222
     ece:	3f ef       	ldi	r19, 0xFF	; 255
     ed0:	39 8b       	std	Y+17, r19	; 0x11

		for (uint8_t i = 0; i < _linkCnt; i++)
     ed2:	83 e2       	ldi	r24, 0x23	; 35
     ed4:	8a 9f       	mul	r24, r26
     ed6:	e0 01       	movw	r28, r0
     ed8:	8b 9f       	mul	r24, r27
     eda:	d0 0d       	add	r29, r0
     edc:	11 24       	eor	r1, r1
     ede:	c0 5f       	subi	r28, 0xF0	; 240
     ee0:	df 4d       	sbci	r29, 0xDF	; 223
     ee2:	69 81       	ldd	r22, Y+1	; 0x01
     ee4:	66 23       	and	r22, r22
     ee6:	69 f1       	breq	.+90     	; 0xf42 <__vector_34+0x42a>
     ee8:	33 e2       	ldi	r19, 0x23	; 35
     eea:	e3 9f       	mul	r30, r19
     eec:	f0 01       	movw	r30, r0
     eee:	11 24       	eor	r1, r1
     ef0:	ed 5e       	subi	r30, 0xED	; 237
     ef2:	ff 4d       	sbci	r31, 0xDF	; 223
     ef4:	50 e0       	ldi	r21, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
				_lvl[i] = 0;
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
     ef8:	7f ef       	ldi	r23, 0xFF	; 255
     efa:	cf 01       	movw	r24, r30
			return;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     efc:	40 81       	ld	r20, Z
     efe:	31 96       	adiw	r30, 0x01	; 1
     f00:	c4 2f       	mov	r28, r20
     f02:	d0 e0       	ldi	r29, 0x00	; 0
     f04:	cc 0f       	add	r28, r28
     f06:	dd 1f       	adc	r29, r29
     f08:	c3 5a       	subi	r28, 0xA3	; 163
     f0a:	de 4d       	sbci	r29, 0xDE	; 222
     f0c:	08 81       	ld	r16, Y
     f0e:	19 81       	ldd	r17, Y+1	; 0x01
     f10:	ec 01       	movw	r28, r24
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	41 e0       	ldi	r20, 0x01	; 1
     f18:	80 17       	cp	r24, r16
     f1a:	91 07       	cpc	r25, r17
     f1c:	09 f4       	brne	.+2      	; 0xf20 <__vector_34+0x408>
     f1e:	40 e0       	ldi	r20, 0x00	; 0
     f20:	54 2b       	or	r21, r20
			if (!level || !_difLvl[i]) //Set zero level directly
     f22:	80 85       	ldd	r24, Z+8	; 0x08
     f24:	81 11       	cpse	r24, r1
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <__vector_34+0x414>
				_lvl[i] = 0;
     f28:	12 82       	std	Z+2, r1	; 0x02
     f2a:	06 c0       	rjmp	.+12     	; 0xf38 <__vector_34+0x420>
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
     f2c:	78 9f       	mul	r23, r24
     f2e:	c0 01       	movw	r24, r0
     f30:	11 24       	eor	r1, r1
     f32:	85 81       	ldd	r24, Z+5	; 0x05
     f34:	89 0f       	add	r24, r25
     f36:	82 83       	std	Z+2, r24	; 0x02
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
			return;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
     f38:	3f 5f       	subi	r19, 0xFF	; 255
     f3a:	63 13       	cpse	r22, r19
     f3c:	de cf       	rjmp	.-68     	; 0xefa <__vector_34+0x3e2>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     f3e:	51 11       	cpse	r21, r1
     f40:	29 c0       	rjmp	.+82     	; 0xf94 <__vector_34+0x47c>
			_tickLastChg = sysState.sysTick;
     f42:	83 e2       	ldi	r24, 0x23	; 35
     f44:	8a 9f       	mul	r24, r26
     f46:	e0 01       	movw	r28, r0
     f48:	8b 9f       	mul	r24, r27
     f4a:	d0 0d       	add	r29, r0
     f4c:	11 24       	eor	r1, r1
     f4e:	c0 5f       	subi	r28, 0xF0	; 240
     f50:	df 4d       	sbci	r29, 0xDF	; 223
     f52:	de 01       	movw	r26, r28
     f54:	53 96       	adiw	r26, 0x13	; 19
     f56:	ec e0       	ldi	r30, 0x0C	; 12
     f58:	f1 e2       	ldi	r31, 0x21	; 33
     f5a:	80 81       	ld	r24, Z
     f5c:	8b 8b       	std	Y+19, r24	; 0x13
     f5e:	81 81       	ldd	r24, Z+1	; 0x01
     f60:	11 96       	adiw	r26, 0x01	; 1
     f62:	8c 93       	st	X, r24
     f64:	11 97       	sbiw	r26, 0x01	; 1
     f66:	82 81       	ldd	r24, Z+2	; 0x02
     f68:	12 96       	adiw	r26, 0x02	; 2
     f6a:	8c 93       	st	X, r24
     f6c:	12 97       	sbiw	r26, 0x02	; 2
     f6e:	83 81       	ldd	r24, Z+3	; 0x03
     f70:	13 96       	adiw	r26, 0x03	; 3
     f72:	8c 93       	st	X, r24
     f74:	13 97       	sbiw	r26, 0x03	; 3
     f76:	84 81       	ldd	r24, Z+4	; 0x04
     f78:	14 96       	adiw	r26, 0x04	; 4
     f7a:	8c 93       	st	X, r24
     f7c:	14 97       	sbiw	r26, 0x04	; 4
     f7e:	85 81       	ldd	r24, Z+5	; 0x05
     f80:	15 96       	adiw	r26, 0x05	; 5
     f82:	8c 93       	st	X, r24
     f84:	15 97       	sbiw	r26, 0x05	; 5
     f86:	86 81       	ldd	r24, Z+6	; 0x06
     f88:	16 96       	adiw	r26, 0x06	; 6
     f8a:	8c 93       	st	X, r24
     f8c:	16 97       	sbiw	r26, 0x06	; 6
     f8e:	87 81       	ldd	r24, Z+7	; 0x07
     f90:	17 96       	adiw	r26, 0x07	; 7
     f92:	8c 93       	st	X, r24
		}
		if (level > MSEN_SEN1_TRIG && _lvl == MSEN_VALID_MIN) //Off to on transition
		{
			_lvl = level;
			links[_linkNum].setLevel(255, level > MSEN_SEN2_TRIG); //Start from max light level
			ltEnt = cntDown = false;
     f94:	e2 e0       	ldi	r30, 0x02	; 2
     f96:	f0 e2       	ldi	r31, 0x20	; 32
     f98:	10 82       	st	Z, r1
     f9a:	11 82       	std	Z+1, r1	; 0x01
     f9c:	2b c0       	rjmp	.+86     	; 0xff4 <__vector_34+0x4dc>
			return;
		}
		if (level < MSEN_SEN1_TRIG && _lvl > level) //On to off transition
     f9e:	39 33       	cpi	r19, 0x39	; 57
     fa0:	48 f5       	brcc	.+82     	; 0xff4 <__vector_34+0x4dc>
     fa2:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <msenCh+0x3>
     fa6:	38 17       	cp	r19, r24
     fa8:	28 f5       	brcc	.+74     	; 0xff4 <__vector_34+0x4dc>
		{
			_lvl = MSEN_VALID_MIN;
     faa:	e2 e0       	ldi	r30, 0x02	; 2
     fac:	f0 e2       	ldi	r31, 0x20	; 32
     fae:	84 e1       	ldi	r24, 0x14	; 20
     fb0:	83 83       	std	Z+3, r24	; 0x03
			_onTimeStamp = sysState.sysTick;
     fb2:	ac e0       	ldi	r26, 0x0C	; 12
     fb4:	b1 e2       	ldi	r27, 0x21	; 33
     fb6:	8c 91       	ld	r24, X
     fb8:	86 83       	std	Z+6, r24	; 0x06
     fba:	11 96       	adiw	r26, 0x01	; 1
     fbc:	8c 91       	ld	r24, X
     fbe:	11 97       	sbiw	r26, 0x01	; 1
     fc0:	87 83       	std	Z+7, r24	; 0x07
     fc2:	12 96       	adiw	r26, 0x02	; 2
     fc4:	8c 91       	ld	r24, X
     fc6:	12 97       	sbiw	r26, 0x02	; 2
     fc8:	80 87       	std	Z+8, r24	; 0x08
     fca:	13 96       	adiw	r26, 0x03	; 3
     fcc:	8c 91       	ld	r24, X
     fce:	13 97       	sbiw	r26, 0x03	; 3
     fd0:	81 87       	std	Z+9, r24	; 0x09
     fd2:	14 96       	adiw	r26, 0x04	; 4
     fd4:	8c 91       	ld	r24, X
     fd6:	14 97       	sbiw	r26, 0x04	; 4
     fd8:	82 87       	std	Z+10, r24	; 0x0a
     fda:	15 96       	adiw	r26, 0x05	; 5
     fdc:	8c 91       	ld	r24, X
     fde:	15 97       	sbiw	r26, 0x05	; 5
     fe0:	83 87       	std	Z+11, r24	; 0x0b
     fe2:	16 96       	adiw	r26, 0x06	; 6
     fe4:	8c 91       	ld	r24, X
     fe6:	16 97       	sbiw	r26, 0x06	; 6
     fe8:	84 87       	std	Z+12, r24	; 0x0c
     fea:	17 96       	adiw	r26, 0x07	; 7
     fec:	8c 91       	ld	r24, X
     fee:	85 87       	std	Z+13, r24	; 0x0d
			cntDown = true;
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	80 83       	st	Z, r24
	else if (sAdcCnt < 4)
		sysState.linksMask &= ~(0x11 << sAdcCnt); //Clear 'valid' and 'non-zero' bits
	else //sAdcCnt == 4: MSEN channel
		msenCh.setLevel((uint8_t)(result >> 6));

	sAdcCnt++;
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	82 0f       	add	r24, r18
     ff8:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <_edata>
	ADCA.CH0.MUXCTRL = (sAdcCnt + 1) << ADC_CH_MUXPOS_gp;
     ffc:	2e 5f       	subi	r18, 0xFE	; 254
     ffe:	22 0f       	add	r18, r18
    1000:	22 0f       	add	r18, r18
    1002:	22 0f       	add	r18, r18
    1004:	20 93 21 02 	sts	0x0221, r18	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
	if (sAdcCnt < 5)
    1008:	85 30       	cpi	r24, 0x05	; 5
    100a:	30 f4       	brcc	.+12     	; 0x1018 <__vector_34+0x500>
		ADCA.CTRLA |= ADC_START_bm;
    100c:	e0 e0       	ldi	r30, 0x00	; 0
    100e:	f2 e0       	ldi	r31, 0x02	; 2
    1010:	80 81       	ld	r24, Z
    1012:	84 60       	ori	r24, 0x04	; 4
    1014:	80 83       	st	Z, r24
    1016:	02 c0       	rjmp	.+4      	; 0x101c <__vector_34+0x504>
	else
		sAdcCnt = 0;
    1018:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <_edata>
}
    101c:	ff 91       	pop	r31
    101e:	ef 91       	pop	r30
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	bf 91       	pop	r27
    1026:	af 91       	pop	r26
    1028:	9f 91       	pop	r25
    102a:	8f 91       	pop	r24
    102c:	7f 91       	pop	r23
    102e:	6f 91       	pop	r22
    1030:	5f 91       	pop	r21
    1032:	4f 91       	pop	r20
    1034:	3f 91       	pop	r19
    1036:	2f 91       	pop	r18
    1038:	1f 91       	pop	r17
    103a:	0f 91       	pop	r16
    103c:	ff 90       	pop	r15
    103e:	ef 90       	pop	r14
    1040:	df 90       	pop	r13
    1042:	bf 90       	pop	r11
    1044:	af 90       	pop	r10
    1046:	0f 90       	pop	r0
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	0f 90       	pop	r0
    104c:	1f 90       	pop	r1
    104e:	18 95       	reti

00001050 <__vector_23>:

ISR(USARTC0_RXC_vect) //Data received from RS485
{
    1050:	1f 92       	push	r1
    1052:	0f 92       	push	r0
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	0f 92       	push	r0
    1058:	11 24       	eor	r1, r1
    105a:	2f 93       	push	r18
    105c:	3f 93       	push	r19
    105e:	4f 93       	push	r20
    1060:	5f 93       	push	r21
    1062:	6f 93       	push	r22
    1064:	7f 93       	push	r23
    1066:	8f 93       	push	r24
    1068:	9f 93       	push	r25
    106a:	af 93       	push	r26
    106c:	bf 93       	push	r27
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	ef 93       	push	r30
    1074:	ff 93       	push	r31
	#ifndef RXC_EDMA
	static uint8_t uCnt;
	static uint8_t *rxBuf;
	#endif
	uint8_t data = USARTC0.DATA;
    1076:	e0 ec       	ldi	r30, 0xC0	; 192
    1078:	f8 e0       	ldi	r31, 0x08	; 8
    107a:	80 81       	ld	r24, Z
	if (USARTC0.CTRLB & USART_MPCM_bm) //Address listening mode
    107c:	93 81       	ldd	r25, Z+3	; 0x03
    107e:	91 ff       	sbrs	r25, 1
    1080:	70 c0       	rjmp	.+224    	; 0x1162 <__vector_23+0x112>
	{
		if (CmdLC <= data && data <= CmdUC)
    1082:	9f ed       	ldi	r25, 0xDF	; 223
    1084:	98 0f       	add	r25, r24
    1086:	94 30       	cpi	r25, 0x04	; 4
    1088:	08 f0       	brcs	.+2      	; 0x108c <__vector_23+0x3c>
    108a:	69 c0       	rjmp	.+210    	; 0x115e <__vector_23+0x10e>
		{
			USARTC0.CTRLB &= ~USART_MPCM_bm; //Clear MPCM bit
    108c:	93 81       	ldd	r25, Z+3	; 0x03
    108e:	9d 7f       	andi	r25, 0xFD	; 253
    1090:	93 83       	std	Z+3, r25	; 0x03
			rxMode = data;
    1092:	80 93 5b 21 	sts	0x215B, r24	; 0x80215b <rxMode>
			if (data == SetConfig)
    1096:	83 32       	cpi	r24, 0x23	; 35
    1098:	79 f4       	brne	.+30     	; 0x10b8 <__vector_23+0x68>
			{
				rxMark = (uint8_t)sysState.sysTick;
    109a:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <sysState>
    109e:	80 93 5a 21 	sts	0x215A, r24	; 0x80215a <rxMark>
				#ifdef RXC_EDMA
				EDMA.CH0.TRFCNT = sizeof(systemConfig); //Bytes to receive into iobuf
    10a2:	e0 e0       	ldi	r30, 0x00	; 0
    10a4:	f1 e0       	ldi	r31, 0x01	; 1
    10a6:	81 e2       	ldi	r24, 0x21	; 33
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	86 8b       	std	Z+22, r24	; 0x16
    10ac:	97 8b       	std	Z+23, r25	; 0x17
				EDMA.CH0.CTRLA = EDMA_CH_ENABLE_bm | EDMA_CH_SINGLE_bm;
    10ae:	84 e8       	ldi	r24, 0x84	; 132
    10b0:	80 8b       	std	Z+16, r24	; 0x10
				USARTC0.CTRLA = USART_RXCINTLVL_OFF_gc; //Disable interrupt
    10b2:	10 92 c2 08 	sts	0x08C2, r1	; 0x8008c2 <__TEXT_REGION_LENGTH__+0x7008c2>
    10b6:	55 c0       	rjmp	.+170    	; 0x1162 <__vector_23+0x112>
0, 30, 96,	//Motion sensor on time, low time, low level
0, 0, 0};	//ninthLvl, rtcCorrect, CRC16

void inline UCTXen()
{
	PORTC.OUTSET = PIN1_bm;
    10b8:	82 e0       	ldi	r24, 0x02	; 2
    10ba:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10be:	85 e1       	ldi	r24, 0x15	; 21
    10c0:	8a 95       	dec	r24
    10c2:	f1 f7       	brne	.-4      	; 0x10c0 <__vector_23+0x70>
    10c4:	00 00       	nop
				#endif
			}
			else //Data transmit request
			{
				UCTXen();
				if (rxMode == GetConfig)
    10c6:	80 91 5b 21 	lds	r24, 0x215B	; 0x80215b <rxMode>
    10ca:	82 32       	cpi	r24, 0x22	; 34
    10cc:	59 f4       	brne	.+22     	; 0x10e4 <__vector_23+0x94>
				{
					EDMA.CH1.TRFCNT = sizeof(systemConfig);
    10ce:	e0 e0       	ldi	r30, 0x00	; 0
    10d0:	f1 e0       	ldi	r31, 0x01	; 1
    10d2:	81 e2       	ldi	r24, 0x21	; 33
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	86 a3       	std	Z+38, r24	; 0x26
    10d8:	97 a3       	std	Z+39, r25	; 0x27
					EDMA.CH1.ADDR = (uint16_t)&validConf;
    10da:	84 e2       	ldi	r24, 0x24	; 36
    10dc:	91 e2       	ldi	r25, 0x21	; 33
    10de:	80 a7       	std	Z+40, r24	; 0x28
    10e0:	91 a7       	std	Z+41, r25	; 0x29
    10e2:	39 c0       	rjmp	.+114    	; 0x1156 <__vector_23+0x106>
				}
				else if (rxMode == GetStatus) //Get state
    10e4:	80 91 5b 21 	lds	r24, 0x215B	; 0x80215b <rxMode>
    10e8:	81 32       	cpi	r24, 0x21	; 33
    10ea:	c9 f4       	brne	.+50     	; 0x111e <__vector_23+0xce>
				{
					memcpy(iobuf, &sysState, sizeof(systemState));
    10ec:	cc e9       	ldi	r28, 0x9C	; 156
    10ee:	d0 e2       	ldi	r29, 0x20	; 32
    10f0:	88 e1       	ldi	r24, 0x18	; 24
    10f2:	ec e0       	ldi	r30, 0x0C	; 12
    10f4:	f1 e2       	ldi	r31, 0x21	; 33
    10f6:	de 01       	movw	r26, r28
    10f8:	01 90       	ld	r0, Z+
    10fa:	0d 92       	st	X+, r0
    10fc:	8a 95       	dec	r24
    10fe:	e1 f7       	brne	.-8      	; 0x10f8 <__vector_23+0xa8>
					((systemState*)iobuf)->CRC16 = CalculateCRC16(iobuf, sizeof(systemState) - 2);
    1100:	66 e1       	ldi	r22, 0x16	; 22
    1102:	ce 01       	movw	r24, r28
    1104:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pvh>
    1108:	8e 8b       	std	Y+22, r24	; 0x16
    110a:	9f 8b       	std	Y+23, r25	; 0x17
					EDMA.CH1.TRFCNT = sizeof(systemState);
    110c:	e0 e0       	ldi	r30, 0x00	; 0
    110e:	f1 e0       	ldi	r31, 0x01	; 1
    1110:	88 e1       	ldi	r24, 0x18	; 24
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	86 a3       	std	Z+38, r24	; 0x26
    1116:	97 a3       	std	Z+39, r25	; 0x27
					EDMA.CH1.ADDR = (uint16_t)iobuf;
    1118:	c0 a7       	std	Z+40, r28	; 0x28
    111a:	d1 a7       	std	Z+41, r29	; 0x29
    111c:	1c c0       	rjmp	.+56     	; 0x1156 <__vector_23+0x106>
				}
				else //Get on time
				{
					memcpy(iobuf, &channelOT, sizeof(channelsOnTime));
    111e:	88 e3       	ldi	r24, 0x38	; 56
    1120:	e4 ed       	ldi	r30, 0xD4	; 212
    1122:	f0 e2       	ldi	r31, 0x20	; 32
    1124:	ac e9       	ldi	r26, 0x9C	; 156
    1126:	b0 e2       	ldi	r27, 0x20	; 32
    1128:	01 90       	ld	r0, Z+
    112a:	0d 92       	st	X+, r0
    112c:	8a 95       	dec	r24
    112e:	e1 f7       	brne	.-8      	; 0x1128 <__vector_23+0xd8>
					((channelsOnTime*)iobuf)->CRC16 = CalculateCRC16(iobuf, sizeof(channelsOnTime) - 2);
    1130:	66 e3       	ldi	r22, 0x36	; 54
    1132:	8c e9       	ldi	r24, 0x9C	; 156
    1134:	90 e2       	ldi	r25, 0x20	; 32
    1136:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pvh>
    113a:	ac e9       	ldi	r26, 0x9C	; 156
    113c:	b0 e2       	ldi	r27, 0x20	; 32
    113e:	d6 96       	adiw	r26, 0x36	; 54
    1140:	8d 93       	st	X+, r24
    1142:	9c 93       	st	X, r25
    1144:	d7 97       	sbiw	r26, 0x37	; 55
					EDMA.CH1.TRFCNT = sizeof(channelsOnTime);
    1146:	e0 e0       	ldi	r30, 0x00	; 0
    1148:	f1 e0       	ldi	r31, 0x01	; 1
    114a:	88 e3       	ldi	r24, 0x38	; 56
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	86 a3       	std	Z+38, r24	; 0x26
    1150:	97 a3       	std	Z+39, r25	; 0x27
					EDMA.CH1.ADDR = (uint16_t)iobuf;
    1152:	a0 a7       	std	Z+40, r26	; 0x28
    1154:	b1 a7       	std	Z+41, r27	; 0x29
				}
				EDMA.CH1.CTRLA = EDMA_CH_ENABLE_bm | EDMA_CH_SINGLE_bm;
    1156:	84 e8       	ldi	r24, 0x84	; 132
    1158:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <__vector_23+0x112>
			}
		}
		else
			rxMode = 0;
    115e:	10 92 5b 21 	sts	0x215B, r1	; 0x80215b <rxMode>
			if (CalculateCRC16(iobuf, sizeof(systemConfig) - 2) == ((systemConfig*)iobuf)->CRC16)
				ApplyConfig();
		}
	}
	#endif
}
    1162:	ff 91       	pop	r31
    1164:	ef 91       	pop	r30
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	bf 91       	pop	r27
    116c:	af 91       	pop	r26
    116e:	9f 91       	pop	r25
    1170:	8f 91       	pop	r24
    1172:	7f 91       	pop	r23
    1174:	6f 91       	pop	r22
    1176:	5f 91       	pop	r21
    1178:	4f 91       	pop	r20
    117a:	3f 91       	pop	r19
    117c:	2f 91       	pop	r18
    117e:	0f 90       	pop	r0
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	0f 90       	pop	r0
    1184:	1f 90       	pop	r1
    1186:	18 95       	reti

00001188 <__vector_3>:

#ifdef RXC_EDMA
ISR(EDMA_CH0_vect)
{
    1188:	1f 92       	push	r1
    118a:	0f 92       	push	r0
    118c:	0f b6       	in	r0, 0x3f	; 63
    118e:	0f 92       	push	r0
    1190:	11 24       	eor	r1, r1
    1192:	2f 93       	push	r18
    1194:	3f 93       	push	r19
    1196:	4f 93       	push	r20
    1198:	5f 93       	push	r21
    119a:	6f 93       	push	r22
    119c:	7f 93       	push	r23
    119e:	8f 93       	push	r24
    11a0:	9f 93       	push	r25
    11a2:	af 93       	push	r26
    11a4:	bf 93       	push	r27
    11a6:	ef 93       	push	r30
    11a8:	ff 93       	push	r31
	rxMode = 0;
    11aa:	10 92 5b 21 	sts	0x215B, r1	; 0x80215b <rxMode>
	USARTC0.CTRLB |= USART_MPCM_bm; //Set MPCM bit
    11ae:	e0 ec       	ldi	r30, 0xC0	; 192
    11b0:	f8 e0       	ldi	r31, 0x08	; 8
    11b2:	83 81       	ldd	r24, Z+3	; 0x03
    11b4:	82 60       	ori	r24, 0x02	; 2
    11b6:	83 83       	std	Z+3, r24	; 0x03
	USARTC0.CTRLA = USART_DRIE_bm | USART_RXCINTLVL_MED_gc;
    11b8:	80 e6       	ldi	r24, 0x60	; 96
    11ba:	82 83       	std	Z+2, r24	; 0x02
	if (CalculateCRC16(iobuf, sizeof(systemConfig) - 2) == ((systemConfig*)iobuf)->CRC16)
    11bc:	6f e1       	ldi	r22, 0x1F	; 31
    11be:	8c e9       	ldi	r24, 0x9C	; 156
    11c0:	90 e2       	ldi	r25, 0x20	; 32
    11c2:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pvh>
    11c6:	20 91 bb 20 	lds	r18, 0x20BB	; 0x8020bb <iobuf+0x1f>
    11ca:	30 91 bc 20 	lds	r19, 0x20BC	; 0x8020bc <iobuf+0x20>
    11ce:	82 17       	cp	r24, r18
    11d0:	93 07       	cpc	r25, r19
    11d2:	11 f4       	brne	.+4      	; 0x11d8 <__vector_3+0x50>
		ApplyConfig();
    11d4:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z11ApplyConfigv>
	EDMA.CH0.CTRLB = EDMA_CH_TRNIF_bm;
    11d8:	80 e1       	ldi	r24, 0x10	; 16
    11da:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <__TEXT_REGION_LENGTH__+0x700111>
}
    11de:	ff 91       	pop	r31
    11e0:	ef 91       	pop	r30
    11e2:	bf 91       	pop	r27
    11e4:	af 91       	pop	r26
    11e6:	9f 91       	pop	r25
    11e8:	8f 91       	pop	r24
    11ea:	7f 91       	pop	r23
    11ec:	6f 91       	pop	r22
    11ee:	5f 91       	pop	r21
    11f0:	4f 91       	pop	r20
    11f2:	3f 91       	pop	r19
    11f4:	2f 91       	pop	r18
    11f6:	0f 90       	pop	r0
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	0f 90       	pop	r0
    11fc:	1f 90       	pop	r1
    11fe:	18 95       	reti

00001200 <__vector_4>:
#endif

ISR(EDMA_CH1_vect) //Packet has been sent completely over RS485
{
    1200:	1f 92       	push	r1
    1202:	0f 92       	push	r0
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	0f 92       	push	r0
    1208:	11 24       	eor	r1, r1
    120a:	8f 93       	push	r24
	UCRXen(); //Set bus in the idle state
    120c:	82 e0       	ldi	r24, 0x02	; 2
    120e:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	rxMode = 0;
    1212:	10 92 5b 21 	sts	0x215B, r1	; 0x80215b <rxMode>
	EDMA.CH1.CTRLB = EDMA_CH_TRNIF_bm;
    1216:	80 e1       	ldi	r24, 0x10	; 16
    1218:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
}
    121c:	8f 91       	pop	r24
    121e:	0f 90       	pop	r0
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	0f 90       	pop	r0
    1224:	1f 90       	pop	r1
    1226:	18 95       	reti

00001228 <__vector_36>:

ISR(TCD5_OVF_vect)
{
    1228:	1f 92       	push	r1
    122a:	0f 92       	push	r0
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	0f 92       	push	r0
    1230:	11 24       	eor	r1, r1
    1232:	2f 93       	push	r18
    1234:	8f 93       	push	r24
    1236:	9f 93       	push	r25
    1238:	ef 93       	push	r30
    123a:	ff 93       	push	r31
	PORTD.OUT = *framePtr++;
    123c:	e0 91 45 21 	lds	r30, 0x2145	; 0x802145 <framePtr>
    1240:	f0 91 46 21 	lds	r31, 0x2146	; 0x802146 <framePtr+0x1>
    1244:	cf 01       	movw	r24, r30
    1246:	01 96       	adiw	r24, 0x01	; 1
    1248:	80 93 45 21 	sts	0x2145, r24	; 0x802145 <framePtr>
    124c:	90 93 46 21 	sts	0x2146, r25	; 0x802146 <framePtr+0x1>
    1250:	20 81       	ld	r18, Z
    1252:	20 93 64 06 	sts	0x0664, r18	; 0x800664 <__TEXT_REGION_LENGTH__+0x700664>
	if (framePtr == DSI8xFrames + sizeof(DSI8xFrames) - 1)
    1256:	89 55       	subi	r24, 0x59	; 89
    1258:	91 42       	sbci	r25, 0x21	; 33
    125a:	11 f4       	brne	.+4      	; 0x1260 <__vector_36+0x38>
		TCD5.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    125c:	10 92 46 09 	sts	0x0946, r1	; 0x800946 <__TEXT_REGION_LENGTH__+0x700946>
	TCD5.INTFLAGS = TC5_OVFIF_bm;
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <__TEXT_REGION_LENGTH__+0x70094c>
}
    1266:	ff 91       	pop	r31
    1268:	ef 91       	pop	r30
    126a:	9f 91       	pop	r25
    126c:	8f 91       	pop	r24
    126e:	2f 91       	pop	r18
    1270:	0f 90       	pop	r0
    1272:	0f be       	out	0x3f, r0	; 63
    1274:	0f 90       	pop	r0
    1276:	1f 90       	pop	r1
    1278:	18 95       	reti

0000127a <_Z7mcuInitv>:

inline void mcuInit()
{
	//Port A configuration: 0-5 analog inputs, 7 inverted output
	PORTA.DIRSET = PIN7_bm;
    127a:	e0 e0       	ldi	r30, 0x00	; 0
    127c:	f6 e0       	ldi	r31, 0x06	; 6
    127e:	80 e8       	ldi	r24, 0x80	; 128
    1280:	81 83       	std	Z+1, r24	; 0x01
	PORTCFG.MPCMASK = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm;
    1282:	a0 eb       	ldi	r26, 0xB0	; 176
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	8f e3       	ldi	r24, 0x3F	; 63
    1288:	8c 93       	st	X, r24
	PORTA.PIN0CTRL = PORT_OPC_TOTEM_gc | PORT_ISC_INPUT_DISABLE_gc;
    128a:	87 e0       	ldi	r24, 0x07	; 7
    128c:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN7CTRL = PORT_OPC_TOTEM_gc | PORT_INVEN_bm;
    128e:	80 e4       	ldi	r24, 0x40	; 64
    1290:	87 8b       	std	Z+23, r24	; 0x17
	//Port C configuration: 0-1, 3-7 outputs
	PORTC.DIRSET = PIN0_bm | PIN1_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
    1292:	8b ef       	ldi	r24, 0xFB	; 251
    1294:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
	//Port D configuration: 0-7 inverted outputs
	PORTD.DIRSET = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
    1298:	e0 e6       	ldi	r30, 0x60	; 96
    129a:	f6 e0       	ldi	r31, 0x06	; 6
    129c:	8f ef       	ldi	r24, 0xFF	; 255
    129e:	81 83       	std	Z+1, r24	; 0x01
	PORTCFG.MPCMASK = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
    12a0:	8c 93       	st	X, r24
	PORTD.PIN0CTRL = PORT_OPC_TOTEM_gc | PORT_INVEN_bm | PORT_ISC_INPUT_DISABLE_gc;
    12a2:	87 e4       	ldi	r24, 0x47	; 71
    12a4:	80 8b       	std	Z+16, r24	; 0x10
	//Clock configuration: 32MHz RC with DFLL from XOSC 32768Hz
	OSC.XOSCCTRL = OSC_XOSCSEL_32KHz_gc;
    12a6:	e0 e5       	ldi	r30, 0x50	; 80
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	82 e0       	ldi	r24, 0x02	; 2
    12ac:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |= OSC_RC32MEN_bm | OSC_XOSCEN_bm;
    12ae:	80 81       	ld	r24, Z
    12b0:	8a 60       	ori	r24, 0x0A	; 10
    12b2:	80 83       	st	Z, r24
	while (!(OSC.STATUS & OSC_XOSCRDY_bm));
    12b4:	81 81       	ldd	r24, Z+1	; 0x01
    12b6:	83 ff       	sbrs	r24, 3
    12b8:	fd cf       	rjmp	.-6      	; 0x12b4 <_Z7mcuInitv+0x3a>
	while (!(OSC.STATUS & OSC_RC32MRDY_bm));
    12ba:	e0 e5       	ldi	r30, 0x50	; 80
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	81 81       	ldd	r24, Z+1	; 0x01
    12c0:	81 ff       	sbrs	r24, 1
    12c2:	fd cf       	rjmp	.-6      	; 0x12be <_Z7mcuInitv+0x44>
	OSC.DFLLCTRL = OSC_RC32MCREF_XOSC32K_gc;
    12c4:	a0 e5       	ldi	r26, 0x50	; 80
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	82 e0       	ldi	r24, 0x02	; 2
    12ca:	16 96       	adiw	r26, 0x06	; 6
    12cc:	8c 93       	st	X, r24
    12ce:	16 97       	sbiw	r26, 0x06	; 6
	DFLLRC32M.CTRL = DFLL_ENABLE_bm;
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
	CCP = CCP_IOREG_gc;
    12d6:	98 ed       	ldi	r25, 0xD8	; 216
    12d8:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
    12da:	e0 e4       	ldi	r30, 0x40	; 64
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 83       	st	Z, r24
	OSC.CTRL = OSC_RC32MEN_bm | OSC_XOSCEN_bm; //Disable unused clock sources
    12e0:	8a e0       	ldi	r24, 0x0A	; 10
    12e2:	8c 93       	st	X, r24
	CLK.RTCCTRL = CLK_RTCSRC_TOSC_gc | CLK_RTCEN_bm; //1024Hz RTC clock source
    12e4:	83 e0       	ldi	r24, 0x03	; 3
    12e6:	83 83       	std	Z+3, r24	; 0x03
	while (RTC.STATUS & RTC_SYNCBUSY_bm);
    12e8:	e0 e0       	ldi	r30, 0x00	; 0
    12ea:	f4 e0       	ldi	r31, 0x04	; 4
    12ec:	81 81       	ldd	r24, Z+1	; 0x01
    12ee:	80 fd       	sbrc	r24, 0
    12f0:	fd cf       	rjmp	.-6      	; 0x12ec <_Z7mcuInitv+0x72>
	CCP = CCP_IOREG_gc;
    12f2:	88 ed       	ldi	r24, 0xD8	; 216
    12f4:	84 bf       	out	0x34, r24	; 52
	CLK.LOCK = CLK_LOCK_bm; //Disable further changes in clock system
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	80 93 42 00 	sts	0x0042, r24	; 0x800042 <__TEXT_REGION_LENGTH__+0x700042>
	//PMIC: enable interrupts
	PMIC.CTRL = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
    12fc:	47 e0       	ldi	r20, 0x07	; 7
    12fe:	40 93 a2 00 	sts	0x00A2, r20	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	//RTC configuration: 1024 / 2 = 512Hz clock, medium level interrupt
	RTC.PER = 16; //32 overflows per second
    1302:	e0 e0       	ldi	r30, 0x00	; 0
    1304:	f4 e0       	ldi	r31, 0x04	; 4
    1306:	20 e1       	ldi	r18, 0x10	; 16
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	22 87       	std	Z+10, r18	; 0x0a
    130c:	33 87       	std	Z+11, r19	; 0x0b
	RTC.INTCTRL = RTC_OVFINTLVL_MED_gc;
    130e:	92 e0       	ldi	r25, 0x02	; 2
    1310:	92 83       	std	Z+2, r25	; 0x02
	RTC.CTRL = RTC_PRESCALER_DIV2_gc;
    1312:	90 83       	st	Z, r25
	RTC.CNT = 0;
    1314:	10 86       	std	Z+8, r1	; 0x08
    1316:	11 86       	std	Z+9, r1	; 0x09
	//USARTC configuration: start / 9 data / 2 stop; 76.8kbps baud, multi-processor communication
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm | USART_MPCM_bm;
    1318:	e0 ec       	ldi	r30, 0xC0	; 192
    131a:	f8 e0       	ldi	r31, 0x08	; 8
    131c:	9a e1       	ldi	r25, 0x1A	; 26
    131e:	93 83       	std	Z+3, r25	; 0x03
	USARTC0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_SBMODE_bm | USART_CHSIZE_9BIT_gc;
    1320:	9f e0       	ldi	r25, 0x0F	; 15
    1322:	94 83       	std	Z+4, r25	; 0x04
	USARTC0.BAUDCTRLA = 12 << USART_BSEL_gp;
    1324:	9c e0       	ldi	r25, 0x0C	; 12
    1326:	96 83       	std	Z+6, r25	; 0x06
	USARTC0.BAUDCTRLB = 1 << USART_BSCALE_gp;
    1328:	30 e1       	ldi	r19, 0x10	; 16
    132a:	37 83       	std	Z+7, r19	; 0x07
	USARTC0.CTRLA = USART_DRIE_bm | USART_RXCINTLVL_MED_gc;
    132c:	90 e6       	ldi	r25, 0x60	; 96
    132e:	92 83       	std	Z+2, r25	; 0x02
	//ADC configuration: 1MHz, 15bit oversampling
	ADCA.CTRLA = ADC_ENABLE_bm;
    1330:	e0 e0       	ldi	r30, 0x00	; 0
    1332:	f2 e0       	ldi	r31, 0x02	; 2
    1334:	80 83       	st	Z, r24
	ADCA.CTRLB = ADC_CONMODE_bm | ADC_RESOLUTION_MT12BIT_gc; //Signed mode
    1336:	92 e1       	ldi	r25, 0x12	; 18
    1338:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;
    133a:	90 e2       	ldi	r25, 0x20	; 32
    133c:	92 83       	std	Z+2, r25	; 0x02
	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc;
    133e:	23 e0       	ldi	r18, 0x03	; 3
    1340:	24 83       	std	Z+4, r18	; 0x04
	ADCA.SAMPCTRL = 7 << ADC_SAMPVAL_gp;
    1342:	40 87       	std	Z+8, r20	; 0x08
	ADCA.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc | ADC_CH_GAIN_1X_gc;
    1344:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.CH0.INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc;
    1346:	82 a3       	std	Z+34, r24	; 0x22
	ADCA.CH0.AVGCTRL = ADC_CH_SAMPNUM_16X_gc; //This will produce 15 bit result
    1348:	44 e0       	ldi	r20, 0x04	; 4
    134a:	44 a7       	std	Z+44, r20	; 0x2c
	//TCC4 configuration: 8MHz, dual slope 244Hz (heartbeat LED)
	TCC4.CTRLA = TC_CLKSEL_DIV4_gc;
    134c:	e0 e0       	ldi	r30, 0x00	; 0
    134e:	f8 e0       	ldi	r31, 0x08	; 8
    1350:	20 83       	st	Z, r18
	TCC4.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_DSTOP_gc;
    1352:	25 e0       	ldi	r18, 0x05	; 5
    1354:	21 83       	std	Z+1, r18	; 0x01
	TCC4.CTRLC = TC4_POLA_bm;
    1356:	32 83       	std	Z+2, r19	; 0x02
	TCC4.CTRLE = TC_CCAMODE_COMP_gc;
    1358:	84 83       	std	Z+4, r24	; 0x04
	TCC4.PERBUF = 16384;
    135a:	40 e0       	ldi	r20, 0x00	; 0
    135c:	50 e4       	ldi	r21, 0x40	; 64
    135e:	46 ab       	std	Z+54, r20	; 0x36
    1360:	57 ab       	std	Z+55, r21	; 0x37
	TCC4.CCABUF = 0;
    1362:	10 ae       	std	Z+56, r1	; 0x38
    1364:	11 ae       	std	Z+57, r1	; 0x39
	TCC4.CTRLGCLR = TC4_STOP_bm;
    1366:	90 87       	std	Z+8, r25	; 0x08
	//TCD5 configuration: 500kHz, 1199Hz overflow rate
	TCD5.CTRLA = TC_CLKSEL_DIV64_gc;
    1368:	e0 e4       	ldi	r30, 0x40	; 64
    136a:	f9 e0       	ldi	r31, 0x09	; 9
    136c:	20 83       	st	Z, r18
	TCD5.CTRLB = TC_WGMODE_NORMAL_gc;
    136e:	11 82       	std	Z+1, r1	; 0x01
	TCD5.PERBUF = 417;
    1370:	21 ea       	ldi	r18, 0xA1	; 161
    1372:	31 e0       	ldi	r19, 0x01	; 1
    1374:	26 ab       	std	Z+54, r18	; 0x36
    1376:	37 ab       	std	Z+55, r19	; 0x37
	TCD5.CTRLGCLR = TC5_STOP_bm;
    1378:	90 87       	std	Z+8, r25	; 0x08
	//EDMA peripheral channel 0: USARTC read transfer
	EDMA.CH0.CTRLB = EDMA_CH_TRNINTLVL_LO_gc;
    137a:	e0 e0       	ldi	r30, 0x00	; 0
    137c:	f1 e0       	ldi	r31, 0x01	; 1
    137e:	81 8b       	std	Z+17, r24	; 0x11
	EDMA.CH0.ADDRCTRL = EDMA_CH_RELOAD_BLOCK_gc | EDMA_CH_DIR_INC_gc;
    1380:	91 e1       	ldi	r25, 0x11	; 17
    1382:	92 8b       	std	Z+18, r25	; 0x12
	EDMA.CH0.ADDR = (register16_t)iobuf;
    1384:	2c e9       	ldi	r18, 0x9C	; 156
    1386:	30 e2       	ldi	r19, 0x20	; 32
    1388:	20 8f       	std	Z+24, r18	; 0x18
    138a:	31 8f       	std	Z+25, r19	; 0x19
	EDMA.CH0.TRIGSRC = EDMA_CH_TRIGSRC_USARTC0_RXC_gc;
    138c:	2c e4       	ldi	r18, 0x4C	; 76
    138e:	24 8b       	std	Z+20, r18	; 0x14
	//EDMA peripheral channel 1: USARTC write transfer
	EDMA.CH1.CTRLB = EDMA_CH_TRNINTLVL_LO_gc; //Low-level interrupt
    1390:	81 a3       	std	Z+33, r24	; 0x21
	EDMA.CH1.ADDRCTRL = EDMA_CH_RELOAD_BLOCK_gc | EDMA_CH_DIR_INC_gc;
    1392:	92 a3       	std	Z+34, r25	; 0x22
	EDMA.CH1.TRIGSRC = EDMA_CH_TRIGSRC_USARTC0_DRE_gc;
    1394:	9d e4       	ldi	r25, 0x4D	; 77
    1396:	94 a3       	std	Z+36, r25	; 0x24
	//EDMA: 1 standard and 2 peripheral channels
	EDMA.CTRL = EDMA_ENABLE_bm | EDMA_CHMODE_STD2_gc | EDMA_DBUFMODE_DISABLE_gc | EDMA_PRIMODE_RR0123_gc;
    1398:	90 ea       	ldi	r25, 0xA0	; 160
    139a:	90 83       	st	Z, r25
	//CRC: CRC16 mode, source IO interface
	CRC.CTRL = CRC_SOURCE_IO_gc;
    139c:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
	sei();
    13a0:	78 94       	sei
    13a2:	08 95       	ret

000013a4 <main>:
}

int main(void)
{
	mcuInit();
    13a4:	0e 94 3d 09 	call	0x127a	; 0x127a <_Z7mcuInitv>
	eeprom_read_block(&channelOT, &savedCOT, sizeof(channelsOnTime));
    13a8:	48 e3       	ldi	r20, 0x38	; 56
    13aa:	50 e0       	ldi	r21, 0x00	; 0
    13ac:	61 e2       	ldi	r22, 0x21	; 33
    13ae:	70 e0       	ldi	r23, 0x00	; 0
    13b0:	84 ed       	ldi	r24, 0xD4	; 212
    13b2:	90 e2       	ldi	r25, 0x20	; 32
    13b4:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <eeprom_read_block>
	eeprom_read_block(iobuf, &savedConfig, sizeof(systemConfig) - 2);
    13b8:	4f e1       	ldi	r20, 0x1F	; 31
    13ba:	50 e0       	ldi	r21, 0x00	; 0
    13bc:	60 e0       	ldi	r22, 0x00	; 0
    13be:	70 e0       	ldi	r23, 0x00	; 0
    13c0:	8c e9       	ldi	r24, 0x9C	; 156
    13c2:	90 e2       	ldi	r25, 0x20	; 32
    13c4:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <eeprom_read_block>
	((systemConfig*)iobuf)->overrideCfg = ((systemConfig*)iobuf)->groupConf = 0; //Ignore saved overrides
    13c8:	cc e9       	ldi	r28, 0x9C	; 156
    13ca:	d0 e2       	ldi	r29, 0x20	; 32
    13cc:	1d 8e       	std	Y+29, r1	; 0x1d
    13ce:	19 8a       	std	Y+17, r1	; 0x11
	((systemConfig*)iobuf)->CRC16 = CalculateCRC16(iobuf, sizeof(systemConfig) - 2);
    13d0:	6f e1       	ldi	r22, 0x1F	; 31
    13d2:	ce 01       	movw	r24, r28
    13d4:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pvh>
    13d8:	8f 8f       	std	Y+31, r24	; 0x1f
    13da:	98 a3       	std	Y+32, r25	; 0x20
	ApplyConfig();
    13dc:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z11ApplyConfigv>
    13e0:	ff cf       	rjmp	.-2      	; 0x13e0 <main+0x3c>

000013e2 <_GLOBAL__sub_I_gLevels>:
	uint64_t _tickLastChg, _onTimeStamp;

public:
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    13e2:	e0 e1       	ldi	r30, 0x10	; 16
    13e4:	f0 e2       	ldi	r31, 0x20	; 32
    13e6:	93 e0       	ldi	r25, 0x03	; 3
    13e8:	91 83       	std	Z+1, r25	; 0x01
		_link[0] = posA;
    13ea:	87 e0       	ldi	r24, 0x07	; 7
    13ec:	83 83       	std	Z+3, r24	; 0x03
		_link[1] = posB;
    13ee:	86 e0       	ldi	r24, 0x06	; 6
    13f0:	84 83       	std	Z+4, r24	; 0x04
		_link[2] = posC;
    13f2:	85 e0       	ldi	r24, 0x05	; 5
    13f4:	85 83       	std	Z+5, r24	; 0x05
		_linkNum = num;
    13f6:	12 82       	std	Z+2, r1	; 0x02
		_chActMask = 0x10 << num;
    13f8:	80 e1       	ldi	r24, 0x10	; 16
    13fa:	82 8b       	std	Z+18, r24	; 0x12
	uint64_t _tickLastChg, _onTimeStamp;

public:
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    13fc:	94 a3       	std	Z+36, r25	; 0x24
		_link[0] = posA;
    13fe:	84 e0       	ldi	r24, 0x04	; 4
    1400:	86 a3       	std	Z+38, r24	; 0x26
		_link[1] = posB;
    1402:	97 a3       	std	Z+39, r25	; 0x27
		_link[2] = posC;
    1404:	82 e0       	ldi	r24, 0x02	; 2
    1406:	80 a7       	std	Z+40, r24	; 0x28
		_linkNum = num;
    1408:	21 e0       	ldi	r18, 0x01	; 1
    140a:	25 a3       	std	Z+37, r18	; 0x25
		_chActMask = 0x10 << num;
    140c:	30 e2       	ldi	r19, 0x20	; 32
    140e:	35 ab       	std	Z+53, r19	; 0x35
	uint64_t _tickLastChg, _onTimeStamp;

public:
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    1410:	80 93 57 20 	sts	0x2057, r24	; 0x802057 <links+0x47>
		_link[0] = posA;
    1414:	20 93 59 20 	sts	0x2059, r18	; 0x802059 <links+0x49>
		_link[1] = posB;
    1418:	10 92 5a 20 	sts	0x205A, r1	; 0x80205a <links+0x4a>
		_link[2] = posC;
    141c:	10 92 5b 20 	sts	0x205B, r1	; 0x80205b <links+0x4b>
		_linkNum = num;
    1420:	80 93 58 20 	sts	0x2058, r24	; 0x802058 <links+0x48>
		_chActMask = 0x10 << num;
    1424:	30 e4       	ldi	r19, 0x40	; 64
    1426:	30 93 68 20 	sts	0x2068, r19	; 0x802068 <links+0x58>
	uint64_t _tickLastChg, _onTimeStamp;

public:
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    142a:	20 93 7a 20 	sts	0x207A, r18	; 0x80207a <links+0x6a>
		_link[0] = posA;
    142e:	28 e0       	ldi	r18, 0x08	; 8
    1430:	20 93 7c 20 	sts	0x207C, r18	; 0x80207c <links+0x6c>
		_link[1] = posB;
    1434:	10 92 7d 20 	sts	0x207D, r1	; 0x80207d <links+0x6d>
		_link[2] = posC;
    1438:	10 92 7e 20 	sts	0x207E, r1	; 0x80207e <links+0x6e>
		_linkNum = num;
    143c:	90 93 7b 20 	sts	0x207B, r25	; 0x80207b <links+0x6b>
		_chActMask = 0x10 << num;
    1440:	90 e8       	ldi	r25, 0x80	; 128
    1442:	90 93 8b 20 	sts	0x208B, r25	; 0x80208b <links+0x7b>
	uint8_t _onTime, _fTime;
	uint64_t _onTimeStamp;
public:
	Msen(uint8_t actLink)
	{
		_linkNum = actLink;
    1446:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <msenCh+0x2>
    144a:	08 95       	ret

0000144c <__divmodhi4>:
    144c:	97 fb       	bst	r25, 7
    144e:	07 2e       	mov	r0, r23
    1450:	16 f4       	brtc	.+4      	; 0x1456 <__divmodhi4+0xa>
    1452:	00 94       	com	r0
    1454:	07 d0       	rcall	.+14     	; 0x1464 <__divmodhi4_neg1>
    1456:	77 fd       	sbrc	r23, 7
    1458:	09 d0       	rcall	.+18     	; 0x146c <__divmodhi4_neg2>
    145a:	0e 94 46 0a 	call	0x148c	; 0x148c <__udivmodhi4>
    145e:	07 fc       	sbrc	r0, 7
    1460:	05 d0       	rcall	.+10     	; 0x146c <__divmodhi4_neg2>
    1462:	3e f4       	brtc	.+14     	; 0x1472 <__divmodhi4_exit>

00001464 <__divmodhi4_neg1>:
    1464:	90 95       	com	r25
    1466:	81 95       	neg	r24
    1468:	9f 4f       	sbci	r25, 0xFF	; 255
    146a:	08 95       	ret

0000146c <__divmodhi4_neg2>:
    146c:	70 95       	com	r23
    146e:	61 95       	neg	r22
    1470:	7f 4f       	sbci	r23, 0xFF	; 255

00001472 <__divmodhi4_exit>:
    1472:	08 95       	ret

00001474 <__adddi3_s8>:
    1474:	00 24       	eor	r0, r0
    1476:	a7 fd       	sbrc	r26, 7
    1478:	00 94       	com	r0
    147a:	2a 0f       	add	r18, r26
    147c:	30 1d       	adc	r19, r0
    147e:	40 1d       	adc	r20, r0
    1480:	50 1d       	adc	r21, r0
    1482:	60 1d       	adc	r22, r0
    1484:	70 1d       	adc	r23, r0
    1486:	80 1d       	adc	r24, r0
    1488:	90 1d       	adc	r25, r0
    148a:	08 95       	ret

0000148c <__udivmodhi4>:
    148c:	aa 1b       	sub	r26, r26
    148e:	bb 1b       	sub	r27, r27
    1490:	51 e1       	ldi	r21, 0x11	; 17
    1492:	07 c0       	rjmp	.+14     	; 0x14a2 <__udivmodhi4_ep>

00001494 <__udivmodhi4_loop>:
    1494:	aa 1f       	adc	r26, r26
    1496:	bb 1f       	adc	r27, r27
    1498:	a6 17       	cp	r26, r22
    149a:	b7 07       	cpc	r27, r23
    149c:	10 f0       	brcs	.+4      	; 0x14a2 <__udivmodhi4_ep>
    149e:	a6 1b       	sub	r26, r22
    14a0:	b7 0b       	sbc	r27, r23

000014a2 <__udivmodhi4_ep>:
    14a2:	88 1f       	adc	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	5a 95       	dec	r21
    14a8:	a9 f7       	brne	.-22     	; 0x1494 <__udivmodhi4_loop>
    14aa:	80 95       	com	r24
    14ac:	90 95       	com	r25
    14ae:	bc 01       	movw	r22, r24
    14b0:	cd 01       	movw	r24, r26
    14b2:	08 95       	ret

000014b4 <__tablejump2__>:
    14b4:	ee 0f       	add	r30, r30
    14b6:	ff 1f       	adc	r31, r31
    14b8:	05 90       	lpm	r0, Z+
    14ba:	f4 91       	lpm	r31, Z
    14bc:	e0 2d       	mov	r30, r0
    14be:	09 94       	ijmp

000014c0 <eeprom_read_block>:
    14c0:	60 50       	subi	r22, 0x00	; 0
    14c2:	70 4f       	sbci	r23, 0xF0	; 240
    14c4:	0c 94 9d 0a 	jmp	0x153a	; 0x153a <memcpy>

000014c8 <eeprom_update_block>:
    14c8:	dc 01       	movw	r26, r24
    14ca:	a4 0f       	add	r26, r20
    14cc:	b5 1f       	adc	r27, r21
    14ce:	41 50       	subi	r20, 0x01	; 1
    14d0:	50 40       	sbci	r21, 0x00	; 0
    14d2:	48 f0       	brcs	.+18     	; 0x14e6 <eeprom_update_block+0x1e>
    14d4:	cb 01       	movw	r24, r22
    14d6:	84 0f       	add	r24, r20
    14d8:	95 1f       	adc	r25, r21
    14da:	2e 91       	ld	r18, -X
    14dc:	0e 94 75 0a 	call	0x14ea	; 0x14ea <eeprom_update_r18>
    14e0:	41 50       	subi	r20, 0x01	; 1
    14e2:	50 40       	sbci	r21, 0x00	; 0
    14e4:	d0 f7       	brcc	.-12     	; 0x14da <eeprom_update_block+0x12>
    14e6:	08 95       	ret

000014e8 <eeprom_update_byte>:
    14e8:	26 2f       	mov	r18, r22

000014ea <eeprom_update_r18>:
    14ea:	0e 94 99 0a 	call	0x1532	; 0x1532 <eeprom_mapen>
    14ee:	00 80       	ld	r0, Z
    14f0:	02 16       	cp	r0, r18
    14f2:	19 f0       	breq	.+6      	; 0x14fa <eeprom_update_r18+0x10>
    14f4:	0e 94 80 0a 	call	0x1500	; 0x1500 <eeprom_write_r18>
    14f8:	01 97       	sbiw	r24, 0x01	; 1
    14fa:	01 97       	sbiw	r24, 0x01	; 1
    14fc:	08 95       	ret

000014fe <eeprom_write_byte>:
    14fe:	26 2f       	mov	r18, r22

00001500 <eeprom_write_r18>:
    1500:	af 93       	push	r26
    1502:	bf 93       	push	r27
    1504:	e0 ec       	ldi	r30, 0xC0	; 192
    1506:	f1 e0       	ldi	r31, 0x01	; 1
    1508:	37 85       	ldd	r19, Z+15	; 0x0f
    150a:	37 fd       	sbrc	r19, 7
    150c:	fd cf       	rjmp	.-6      	; 0x1508 <eeprom_write_r18+0x8>
    150e:	dc 01       	movw	r26, r24
    1510:	a0 50       	subi	r26, 0x00	; 0
    1512:	b0 4f       	sbci	r27, 0xF0	; 240
    1514:	2c 93       	st	X, r18
    1516:	25 e3       	ldi	r18, 0x35	; 53
    1518:	22 87       	std	Z+10, r18	; 0x0a
    151a:	28 ed       	ldi	r18, 0xD8	; 216
    151c:	31 e0       	ldi	r19, 0x01	; 1
    151e:	24 bf       	out	0x34, r18	; 52
    1520:	33 87       	std	Z+11, r19	; 0x0b
    1522:	01 96       	adiw	r24, 0x01	; 1
    1524:	bf 91       	pop	r27
    1526:	af 91       	pop	r26
    1528:	08 95       	ret

0000152a <eeprom_read_byte>:
    152a:	03 d0       	rcall	.+6      	; 0x1532 <eeprom_mapen>
    152c:	80 81       	ld	r24, Z
    152e:	99 27       	eor	r25, r25
    1530:	08 95       	ret

00001532 <eeprom_mapen>:
    1532:	fc 01       	movw	r30, r24
    1534:	e0 50       	subi	r30, 0x00	; 0
    1536:	f0 4f       	sbci	r31, 0xF0	; 240
    1538:	08 95       	ret

0000153a <memcpy>:
    153a:	fb 01       	movw	r30, r22
    153c:	dc 01       	movw	r26, r24
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <memcpy+0xa>
    1540:	01 90       	ld	r0, Z+
    1542:	0d 92       	st	X+, r0
    1544:	41 50       	subi	r20, 0x01	; 1
    1546:	50 40       	sbci	r21, 0x00	; 0
    1548:	d8 f7       	brcc	.-10     	; 0x1540 <memcpy+0x6>
    154a:	08 95       	ret

0000154c <_exit>:
    154c:	f8 94       	cli

0000154e <__stop_program>:
    154e:	ff cf       	rjmp	.-2      	; 0x154e <__stop_program>
