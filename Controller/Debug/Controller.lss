
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000015ad  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000016f  00802000  00802000  00001554  2**0
                  ALLOC
  3 .eeprom       00000059  00810000  00810000  00001554  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000015ad  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015e0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000110  00000000  00000000  00001620  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005122  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001f3b  00000000  00000000  00006852  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f1d  00000000  00000000  0000878d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000318  00000000  00000000  000096ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003577  00000000  00000000  000099c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000011f4  00000000  00000000  0000cf3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001d0  00000000  00000000  0000e12f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 57 00 	jmp	0xae	; 0xae <__ctors_end>
       4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       c:	0c 94 79 08 	jmp	0x10f2	; 0x10f2 <__vector_3>
      10:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <__vector_4>
      14:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      18:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      1c:	0c 94 be 01 	jmp	0x37c	; 0x37c <__vector_7>
      20:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      24:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      28:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      2c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      30:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      34:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      38:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      3c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      40:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      44:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      48:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      4c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      50:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      54:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      58:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      5c:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__vector_23>
      60:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      68:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      6c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      70:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      74:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      78:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      7c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      80:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      84:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      88:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__vector_34>
      8c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      90:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <__vector_36>
      94:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      98:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      9c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      a0:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      a4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      a8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>

000000ac <__ctors_start>:
      ac:	a9 09       	sbc	r26, r9

000000ae <__ctors_end>:
      ae:	11 24       	eor	r1, r1
      b0:	1f be       	out	0x3f, r1	; 63
      b2:	cf ef       	ldi	r28, 0xFF	; 255
      b4:	cd bf       	out	0x3d, r28	; 61
      b6:	d7 e2       	ldi	r29, 0x27	; 39
      b8:	de bf       	out	0x3e, r29	; 62

000000ba <__do_clear_bss>:
      ba:	21 e2       	ldi	r18, 0x21	; 33
      bc:	a0 e0       	ldi	r26, 0x00	; 0
      be:	b0 e2       	ldi	r27, 0x20	; 32
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	af 36       	cpi	r26, 0x6F	; 111
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>

000000ca <__do_global_ctors>:
      ca:	10 e0       	ldi	r17, 0x00	; 0
      cc:	c7 e5       	ldi	r28, 0x57	; 87
      ce:	d0 e0       	ldi	r29, 0x00	; 0
      d0:	04 c0       	rjmp	.+8      	; 0xda <__do_global_ctors+0x10>
      d2:	21 97       	sbiw	r28, 0x01	; 1
      d4:	fe 01       	movw	r30, r28
      d6:	0e 94 12 0a 	call	0x1424	; 0x1424 <__tablejump2__>
      da:	c6 35       	cpi	r28, 0x56	; 86
      dc:	d1 07       	cpc	r29, r17
      de:	c9 f7       	brne	.-14     	; 0xd2 <__do_global_ctors+0x8>
      e0:	0e 94 8a 09 	call	0x1314	; 0x1314 <main>
      e4:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <_exit>

000000e8 <__bad_interrupt>:
      e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ec <_Z14CalculateCRC16Pvh>:
}

uint16_t CalculateCRC16(void *arr, uint8_t count)
{
	uint8_t *ptr = (uint8_t*)arr;
	CRC.CTRL |= CRC_RESET_RESET0_gc;
      ec:	e0 ed       	ldi	r30, 0xD0	; 208
      ee:	f0 e0       	ldi	r31, 0x00	; 0
      f0:	20 81       	ld	r18, Z
      f2:	20 68       	ori	r18, 0x80	; 128
      f4:	20 83       	st	Z, r18
	while (--count)
      f6:	61 50       	subi	r22, 0x01	; 1
      f8:	51 f0       	breq	.+20     	; 0x10e <_Z14CalculateCRC16Pvh+0x22>
      fa:	e8 2f       	mov	r30, r24
      fc:	f9 2f       	mov	r31, r25
		CRC.DATAIN = *ptr++;
      fe:	a0 ed       	ldi	r26, 0xD0	; 208
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	81 91       	ld	r24, Z+
     104:	13 96       	adiw	r26, 0x03	; 3
     106:	8c 93       	st	X, r24
     108:	13 97       	sbiw	r26, 0x03	; 3

uint16_t CalculateCRC16(void *arr, uint8_t count)
{
	uint8_t *ptr = (uint8_t*)arr;
	CRC.CTRL |= CRC_RESET_RESET0_gc;
	while (--count)
     10a:	61 50       	subi	r22, 0x01	; 1
     10c:	d1 f7       	brne	.-12     	; 0x102 <_Z14CalculateCRC16Pvh+0x16>
		CRC.DATAIN = *ptr++;
	return ((uint16_t)CRC.CHECKSUM1 << 8) | CRC.CHECKSUM0;
     10e:	e0 ed       	ldi	r30, 0xD0	; 208
     110:	f0 e0       	ldi	r31, 0x00	; 0
     112:	25 81       	ldd	r18, Z+5	; 0x05
     114:	84 81       	ldd	r24, Z+4	; 0x04
     116:	90 e0       	ldi	r25, 0x00	; 0
}
     118:	92 2b       	or	r25, r18
     11a:	08 95       	ret

0000011c <_Z11ApplyConfigv>:

void ApplyConfig()
{
     11c:	2f 92       	push	r2
     11e:	3f 92       	push	r3
     120:	4f 92       	push	r4
     122:	5f 92       	push	r5
     124:	6f 92       	push	r6
     126:	7f 92       	push	r7
     128:	8f 92       	push	r8
     12a:	9f 92       	push	r9
     12c:	af 92       	push	r10
     12e:	bf 92       	push	r11
     130:	cf 92       	push	r12
     132:	df 92       	push	r13
     134:	ef 92       	push	r14
     136:	ff 92       	push	r15
     138:	0f 93       	push	r16
     13a:	1f 93       	push	r17
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
     140:	cd b7       	in	r28, 0x3d	; 61
     142:	de b7       	in	r29, 0x3e	; 62
     144:	25 97       	sbiw	r28, 0x05	; 5
     146:	cd bf       	out	0x3d, r28	; 61
     148:	de bf       	out	0x3e, r29	; 62
	systemConfig *temp = (systemConfig*)iobuf;
	//Both bits 7 are set: one of the on-time counters must be rewritten
	if ((temp->groupConf & 0x80) && (temp->overrideCfg & 0x80))
     14a:	00 91 b9 20 	lds	r16, 0x20B9	; 0x8020b9 <iobuf+0x1d>
     14e:	00 23       	and	r16, r16
     150:	24 f5       	brge	.+72     	; 0x19a <_Z11ApplyConfigv+0x7e>
     152:	80 91 ad 20 	lds	r24, 0x20AD	; 0x8020ad <iobuf+0x11>
     156:	88 23       	and	r24, r24
     158:	04 f5       	brge	.+64     	; 0x19a <_Z11ApplyConfigv+0x7e>
	{
		uint8_t j = temp->overrideCfg & 0xF; //Update on-time of link
		channelOT.linkOnTime[j] = *((uint32_t*)temp->minLvl);
     15a:	8f 70       	andi	r24, 0x0F	; 15
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	fc 01       	movw	r30, r24
     160:	ee 0f       	add	r30, r30
     162:	ff 1f       	adc	r31, r31
     164:	ee 0f       	add	r30, r30
     166:	ff 1f       	adc	r31, r31
     168:	ec 52       	subi	r30, 0x2C	; 44
     16a:	ff 4d       	sbci	r31, 0xDF	; 223
     16c:	ac e9       	ldi	r26, 0x9C	; 156
     16e:	b0 e2       	ldi	r27, 0x20	; 32
     170:	4d 91       	ld	r20, X+
     172:	5d 91       	ld	r21, X+
     174:	6d 91       	ld	r22, X+
     176:	7c 91       	ld	r23, X
     178:	13 97       	sbiw	r26, 0x03	; 3
     17a:	40 83       	st	Z, r20
     17c:	51 83       	std	Z+1, r21	; 0x01
     17e:	62 83       	std	Z+2, r22	; 0x02
     180:	73 83       	std	Z+3, r23	; 0x03
		channelOT.linkSwCnt[j] = *((uint16_t*)temp->maxLvl);
     182:	88 0f       	add	r24, r24
     184:	99 1f       	adc	r25, r25
     186:	fc 01       	movw	r30, r24
     188:	e8 50       	subi	r30, 0x08	; 8
     18a:	ff 4d       	sbci	r31, 0xDF	; 223
     18c:	18 96       	adiw	r26, 0x08	; 8
     18e:	8d 91       	ld	r24, X+
     190:	9c 91       	ld	r25, X
     192:	19 97       	sbiw	r26, 0x09	; 9
     194:	80 83       	st	Z, r24
     196:	91 83       	std	Z+1, r25	; 0x01
		return;
     198:	db c0       	rjmp	.+438    	; 0x350 <_Z11ApplyConfigv+0x234>
	}
	memcpy(&validConf, iobuf, sizeof(systemConfig));
     19a:	81 e2       	ldi	r24, 0x21	; 33
     19c:	ec e9       	ldi	r30, 0x9C	; 156
     19e:	f0 e2       	ldi	r31, 0x20	; 32
     1a0:	a4 e2       	ldi	r26, 0x24	; 36
     1a2:	b1 e2       	ldi	r27, 0x21	; 33
     1a4:	01 90       	ld	r0, Z+
     1a6:	0d 92       	st	X+, r0
     1a8:	8a 95       	dec	r24
     1aa:	e1 f7       	brne	.-8      	; 0x1a4 <_Z11ApplyConfigv+0x88>
		bool dimInProcess = false;
		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			uint8_t j = _link[i];
			dimInProcess |= (_lvl[i] != gLevels[j]);
			_lvl[i] = validConf.overrideLvl;
     1ac:	90 91 34 21 	lds	r25, 0x2134	; 0x802134 <validConf+0x10>
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
			_tickLastChg = sysState.sysTick;
     1b0:	ec e0       	ldi	r30, 0x0C	; 12
     1b2:	f1 e2       	ldi	r31, 0x21	; 33
     1b4:	a0 80       	ld	r10, Z
     1b6:	b1 80       	ldd	r11, Z+1	; 0x01
     1b8:	c2 80       	ldd	r12, Z+2	; 0x02
     1ba:	d3 80       	ldd	r13, Z+3	; 0x03
     1bc:	e4 80       	ldd	r14, Z+4	; 0x04
     1be:	75 80       	ldd	r7, Z+5	; 0x05
     1c0:	66 80       	ldd	r6, Z+6	; 0x06
     1c2:	27 80       	ldd	r2, Z+7	; 0x07
     1c4:	40 e1       	ldi	r20, 0x10	; 16
     1c6:	50 e2       	ldi	r21, 0x20	; 32
     1c8:	23 e1       	ldi	r18, 0x13	; 19
     1ca:	30 e2       	ldi	r19, 0x20	; 32
     1cc:	0f 2e       	mov	r0, r31
     1ce:	fc e9       	ldi	r31, 0x9C	; 156
     1d0:	4f 2e       	mov	r4, r31
     1d2:	f0 e2       	ldi	r31, 0x20	; 32
     1d4:	5f 2e       	mov	r5, r31
     1d6:	f0 2d       	mov	r31, r0
	void setParams()
	{
		uint8_t pos, min = validConf.fadeRate[_linkNum], max = validConf.linkDelay[_linkNum];
		if (min < 32)
			min = 32;
		_fadeRate = (min > 160) ? 160 : min;
     1d8:	0f 2e       	mov	r0, r31
     1da:	f0 ea       	ldi	r31, 0xA0	; 160
     1dc:	3f 2e       	mov	r3, r31
     1de:	f0 2d       	mov	r31, r0
		_linkDelay = (max > 63) ? 64 : max + 1;
     1e0:	70 e0       	ldi	r23, 0x00	; 0
		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			pos = _link[i];
			min = pos > 7 ? 4 : validConf.minLvl[pos];
			max = pos > 7 ? 63 : validConf.maxLvl[pos];
			_minLvl[i] = (min < 222) ? min + 1 : 223;
     1e2:	0f 2e       	mov	r0, r31
     1e4:	ff ed       	ldi	r31, 0xDF	; 223
     1e6:	ff 2e       	mov	r15, r31
     1e8:	f0 2d       	mov	r31, r0
     1ea:	49 83       	std	Y+1, r20	; 0x01
     1ec:	5a 83       	std	Y+2, r21	; 0x02
     1ee:	9a 2c       	mov	r9, r10
     1f0:	ab 2c       	mov	r10, r11
     1f2:	bc 2c       	mov	r11, r12
     1f4:	82 2c       	mov	r8, r2
     1f6:	3b 82       	std	Y+3, r3	; 0x03
     1f8:	19 01       	movw	r2, r18
     1fa:	29 81       	ldd	r18, Y+1	; 0x01
     1fc:	3a 81       	ldd	r19, Y+2	; 0x02
     1fe:	2c 83       	std	Y+4, r18	; 0x04
     200:	3d 83       	std	Y+5, r19	; 0x05
		_chActMask = 0x10 << num;
	};

	void setParams()
	{
		uint8_t pos, min = validConf.fadeRate[_linkNum], max = validConf.linkDelay[_linkNum];
     202:	d9 01       	movw	r26, r18
     204:	12 96       	adiw	r26, 0x02	; 2
     206:	ec 91       	ld	r30, X
     208:	f0 e0       	ldi	r31, 0x00	; 0
     20a:	ec 5d       	subi	r30, 0xDC	; 220
     20c:	fe 4d       	sbci	r31, 0xDE	; 222
     20e:	82 89       	ldd	r24, Z+18	; 0x12
     210:	26 89       	ldd	r18, Z+22	; 0x16
		if (min < 32)
     212:	80 32       	cpi	r24, 0x20	; 32
     214:	08 f4       	brcc	.+2      	; 0x218 <_Z11ApplyConfigv+0xfc>
			min = 32;
     216:	80 e2       	ldi	r24, 0x20	; 32
		_fadeRate = (min > 160) ? 160 : min;
     218:	81 3a       	cpi	r24, 0xA1	; 161
     21a:	08 f0       	brcs	.+2      	; 0x21e <_Z11ApplyConfigv+0x102>
     21c:	8b 81       	ldd	r24, Y+3	; 0x03
     21e:	ec 81       	ldd	r30, Y+4	; 0x04
     220:	fd 81       	ldd	r31, Y+5	; 0x05
     222:	87 87       	std	Z+15, r24	; 0x0f
		_linkDelay = (max > 63) ? 64 : max + 1;
     224:	20 34       	cpi	r18, 0x40	; 64
     226:	20 f4       	brcc	.+8      	; 0x230 <_Z11ApplyConfigv+0x114>
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	2f 5f       	subi	r18, 0xFF	; 255
     22c:	3f 4f       	sbci	r19, 0xFF	; 255
     22e:	02 c0       	rjmp	.+4      	; 0x234 <_Z11ApplyConfigv+0x118>
     230:	20 e4       	ldi	r18, 0x40	; 64
     232:	37 2f       	mov	r19, r23
     234:	ac 81       	ldd	r26, Y+4	; 0x04
     236:	bd 81       	ldd	r27, Y+5	; 0x05
     238:	50 96       	adiw	r26, 0x10	; 16
     23a:	2d 93       	st	X+, r18
     23c:	3c 93       	st	X, r19
     23e:	51 97       	sbiw	r26, 0x11	; 17
		for (uint8_t i = 0; i < _linkCnt; i++)
     240:	11 96       	adiw	r26, 0x01	; 1
     242:	8c 91       	ld	r24, X
     244:	88 23       	and	r24, r24
     246:	09 f4       	brne	.+2      	; 0x24a <_Z11ApplyConfigv+0x12e>
     248:	42 c0       	rjmp	.+132    	; 0x2ce <_Z11ApplyConfigv+0x1b2>
     24a:	d1 01       	movw	r26, r2
     24c:	30 e0       	ldi	r19, 0x00	; 0
		{
			pos = _link[i];
     24e:	ed 91       	ld	r30, X+
			min = pos > 7 ? 4 : validConf.minLvl[pos];
     250:	e8 30       	cpi	r30, 0x08	; 8
     252:	40 f4       	brcc	.+16     	; 0x264 <_Z11ApplyConfigv+0x148>
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	ec 5d       	subi	r30, 0xDC	; 220
     258:	fe 4d       	sbci	r31, 0xDE	; 222
     25a:	20 81       	ld	r18, Z
			max = pos > 7 ? 63 : validConf.maxLvl[pos];
     25c:	40 85       	ldd	r20, Z+8	; 0x08
			_minLvl[i] = (min < 222) ? min + 1 : 223;
     25e:	2e 3d       	cpi	r18, 0xDE	; 222
     260:	28 f4       	brcc	.+10     	; 0x26c <_Z11ApplyConfigv+0x150>
     262:	02 c0       	rjmp	.+4      	; 0x268 <_Z11ApplyConfigv+0x14c>
		_fadeRate = (min > 160) ? 160 : min;
		_linkDelay = (max > 63) ? 64 : max + 1;
		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			pos = _link[i];
			min = pos > 7 ? 4 : validConf.minLvl[pos];
     264:	24 e0       	ldi	r18, 0x04	; 4
			max = pos > 7 ? 63 : validConf.maxLvl[pos];
     266:	4f e3       	ldi	r20, 0x3F	; 63
			_minLvl[i] = (min < 222) ? min + 1 : 223;
     268:	2f 5f       	subi	r18, 0xFF	; 255
     26a:	01 c0       	rjmp	.+2      	; 0x26e <_Z11ApplyConfigv+0x152>
     26c:	2f 2d       	mov	r18, r15
     26e:	fd 01       	movw	r30, r26
     270:	15 96       	adiw	r26, 0x05	; 5
     272:	2c 93       	st	X, r18
     274:	15 97       	sbiw	r26, 0x05	; 5
			_difLvl[i] = max;
			if (max > _minLvl[i])
     276:	24 17       	cp	r18, r20
     278:	20 f0       	brcs	.+8      	; 0x282 <_Z11ApplyConfigv+0x166>
		{
			pos = _link[i];
			min = pos > 7 ? 4 : validConf.minLvl[pos];
			max = pos > 7 ? 63 : validConf.maxLvl[pos];
			_minLvl[i] = (min < 222) ? min + 1 : 223;
			_difLvl[i] = max;
     27a:	18 96       	adiw	r26, 0x08	; 8
     27c:	4c 93       	st	X, r20
     27e:	18 97       	sbiw	r26, 0x08	; 8
     280:	05 c0       	rjmp	.+10     	; 0x28c <_Z11ApplyConfigv+0x170>
			if (max > _minLvl[i])
			{
				max -= _minLvl[i];
				_difLvl[i] = (max >= 32) ? max : 32;
     282:	42 1b       	sub	r20, r18
     284:	40 32       	cpi	r20, 0x20	; 32
     286:	08 f4       	brcc	.+2      	; 0x28a <_Z11ApplyConfigv+0x16e>
     288:	40 e2       	ldi	r20, 0x20	; 32
     28a:	40 87       	std	Z+8, r20	; 0x08
		uint8_t pos, min = validConf.fadeRate[_linkNum], max = validConf.linkDelay[_linkNum];
		if (min < 32)
			min = 32;
		_fadeRate = (min > 160) ? 160 : min;
		_linkDelay = (max > 63) ? 64 : max + 1;
		for (uint8_t i = 0; i < _linkCnt; i++)
     28c:	3f 5f       	subi	r19, 0xFF	; 255
     28e:	38 13       	cpse	r19, r24
     290:	de cf       	rjmp	.-68     	; 0x24e <_Z11ApplyConfigv+0x132>
     292:	d1 01       	movw	r26, r2
     294:	c1 2c       	mov	r12, r1
     296:	60 e0       	ldi	r22, 0x00	; 0
	void overrideCheck()
	{
		bool dimInProcess = false;
		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			uint8_t j = _link[i];
     298:	ed 91       	ld	r30, X+
     29a:	ad 01       	movw	r20, r26
			dimInProcess |= (_lvl[i] != gLevels[j]);
     29c:	f0 e0       	ldi	r31, 0x00	; 0
     29e:	ee 0f       	add	r30, r30
     2a0:	ff 1f       	adc	r31, r31
     2a2:	e3 5a       	subi	r30, 0xA3	; 163
     2a4:	fe 4d       	sbci	r31, 0xDE	; 222
     2a6:	01 90       	ld	r0, Z+
     2a8:	f0 81       	ld	r31, Z
     2aa:	e0 2d       	mov	r30, r0
     2ac:	12 96       	adiw	r26, 0x02	; 2
     2ae:	2c 91       	ld	r18, X
     2b0:	12 97       	sbiw	r26, 0x02	; 2
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	11 e0       	ldi	r17, 0x01	; 1
     2b6:	2e 17       	cp	r18, r30
     2b8:	3f 07       	cpc	r19, r31
     2ba:	09 f4       	brne	.+2      	; 0x2be <_Z11ApplyConfigv+0x1a2>
     2bc:	10 e0       	ldi	r17, 0x00	; 0
     2be:	c1 2a       	or	r12, r17
			_lvl[i] = validConf.overrideLvl;
     2c0:	fa 01       	movw	r30, r20
     2c2:	92 83       	std	Z+2, r25	; 0x02
	}

	void overrideCheck()
	{
		bool dimInProcess = false;
		for (uint8_t i = 0; i < _linkCnt; i++)
     2c4:	6f 5f       	subi	r22, 0xFF	; 255
     2c6:	68 13       	cpse	r22, r24
     2c8:	e7 cf       	rjmp	.-50     	; 0x298 <_Z11ApplyConfigv+0x17c>
		{
			uint8_t j = _link[i];
			dimInProcess |= (_lvl[i] != gLevels[j]);
			_lvl[i] = validConf.overrideLvl;
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     2ca:	c1 10       	cpse	r12, r1
     2cc:	19 c0       	rjmp	.+50     	; 0x300 <_Z11ApplyConfigv+0x1e4>
			_tickLastChg = sysState.sysTick;
     2ce:	ac 81       	ldd	r26, Y+4	; 0x04
     2d0:	bd 81       	ldd	r27, Y+5	; 0x05
     2d2:	53 96       	adiw	r26, 0x13	; 19
     2d4:	9c 92       	st	X, r9
     2d6:	53 97       	sbiw	r26, 0x13	; 19
     2d8:	54 96       	adiw	r26, 0x14	; 20
     2da:	ac 92       	st	X, r10
     2dc:	54 97       	sbiw	r26, 0x14	; 20
     2de:	55 96       	adiw	r26, 0x15	; 21
     2e0:	bc 92       	st	X, r11
     2e2:	55 97       	sbiw	r26, 0x15	; 21
     2e4:	56 96       	adiw	r26, 0x16	; 22
     2e6:	dc 92       	st	X, r13
     2e8:	56 97       	sbiw	r26, 0x16	; 22
     2ea:	57 96       	adiw	r26, 0x17	; 23
     2ec:	ec 92       	st	X, r14
     2ee:	57 97       	sbiw	r26, 0x17	; 23
     2f0:	58 96       	adiw	r26, 0x18	; 24
     2f2:	7c 92       	st	X, r7
     2f4:	58 97       	sbiw	r26, 0x18	; 24
     2f6:	59 96       	adiw	r26, 0x19	; 25
     2f8:	6c 92       	st	X, r6
     2fa:	59 97       	sbiw	r26, 0x19	; 25
     2fc:	5a 96       	adiw	r26, 0x1a	; 26
     2fe:	8c 92       	st	X, r8
     300:	e9 81       	ldd	r30, Y+1	; 0x01
     302:	fa 81       	ldd	r31, Y+2	; 0x02
     304:	b3 96       	adiw	r30, 0x23	; 35
     306:	e9 83       	std	Y+1, r30	; 0x01
     308:	fa 83       	std	Y+2, r31	; 0x02
     30a:	f3 e2       	ldi	r31, 0x23	; 35
     30c:	2f 0e       	add	r2, r31
     30e:	31 1c       	adc	r3, r1
		channelOT.linkOnTime[j] = *((uint32_t*)temp->minLvl);
		channelOT.linkSwCnt[j] = *((uint16_t*)temp->maxLvl);
		return;
	}
	memcpy(&validConf, iobuf, sizeof(systemConfig));
	for (uint8_t i = 0; i < 4; i++)
     310:	29 81       	ldd	r18, Y+1	; 0x01
     312:	3a 81       	ldd	r19, Y+2	; 0x02
     314:	24 15       	cp	r18, r4
     316:	35 05       	cpc	r19, r5
     318:	09 f0       	breq	.+2      	; 0x31c <_Z11ApplyConfigv+0x200>
     31a:	6f cf       	rjmp	.-290    	; 0x1fa <_Z11ApplyConfigv+0xde>
	{
		_linkNum = actLink;
	};
	void setParams()
	{
		_onTime = validConf.msenOnTime > 5 ? validConf.msenOnTime : 6;
     31c:	80 91 3e 21 	lds	r24, 0x213E	; 0x80213e <validConf+0x1a>
     320:	86 30       	cpi	r24, 0x06	; 6
     322:	08 f4       	brcc	.+2      	; 0x326 <_Z11ApplyConfigv+0x20a>
     324:	86 e0       	ldi	r24, 0x06	; 6
     326:	e2 e0       	ldi	r30, 0x02	; 2
     328:	f0 e2       	ldi	r31, 0x20	; 32
     32a:	84 83       	std	Z+4, r24	; 0x04
		_fTime = _onTime + validConf.msenLowTime;
     32c:	90 91 3f 21 	lds	r25, 0x213F	; 0x80213f <validConf+0x1b>
     330:	89 0f       	add	r24, r25
     332:	85 83       	std	Z+5, r24	; 0x05
	{
		links[i].setParams();
		links[i].overrideCheck();
	}
	msenCh.setParams();
	if (validConf.groupConf & 0x08) //Bit 3 is set: save config to EEPROM
     334:	03 ff       	sbrs	r16, 3
     336:	08 c0       	rjmp	.+16     	; 0x348 <_Z11ApplyConfigv+0x22c>
		eeprom_update_block(&validConf, &savedConfig, sizeof(systemConfig));
     338:	41 e2       	ldi	r20, 0x21	; 33
     33a:	50 e0       	ldi	r21, 0x00	; 0
     33c:	60 e0       	ldi	r22, 0x00	; 0
     33e:	70 e0       	ldi	r23, 0x00	; 0
     340:	84 e2       	ldi	r24, 0x24	; 36
     342:	91 e2       	ldi	r25, 0x21	; 33
     344:	0e 94 1c 0a 	call	0x1438	; 0x1438 <eeprom_update_block>
	RTC.CALIB = validConf.rtcCorrect;
     348:	80 91 42 21 	lds	r24, 0x2142	; 0x802142 <validConf+0x1e>
     34c:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
}
     350:	25 96       	adiw	r28, 0x05	; 5
     352:	cd bf       	out	0x3d, r28	; 61
     354:	de bf       	out	0x3e, r29	; 62
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	1f 91       	pop	r17
     35c:	0f 91       	pop	r16
     35e:	ff 90       	pop	r15
     360:	ef 90       	pop	r14
     362:	df 90       	pop	r13
     364:	cf 90       	pop	r12
     366:	bf 90       	pop	r11
     368:	af 90       	pop	r10
     36a:	9f 90       	pop	r9
     36c:	8f 90       	pop	r8
     36e:	7f 90       	pop	r7
     370:	6f 90       	pop	r6
     372:	5f 90       	pop	r5
     374:	4f 90       	pop	r4
     376:	3f 90       	pop	r3
     378:	2f 90       	pop	r2
     37a:	08 95       	ret

0000037c <__vector_7>:

ISR(RTC_OVF_vect)
{
     37c:	1f 92       	push	r1
     37e:	0f 92       	push	r0
     380:	0f b6       	in	r0, 0x3f	; 63
     382:	0f 92       	push	r0
     384:	11 24       	eor	r1, r1
     386:	2f 92       	push	r2
     388:	3f 92       	push	r3
     38a:	4f 92       	push	r4
     38c:	5f 92       	push	r5
     38e:	6f 92       	push	r6
     390:	7f 92       	push	r7
     392:	8f 92       	push	r8
     394:	9f 92       	push	r9
     396:	af 92       	push	r10
     398:	bf 92       	push	r11
     39a:	cf 92       	push	r12
     39c:	df 92       	push	r13
     39e:	ef 92       	push	r14
     3a0:	ff 92       	push	r15
     3a2:	0f 93       	push	r16
     3a4:	1f 93       	push	r17
     3a6:	2f 93       	push	r18
     3a8:	3f 93       	push	r19
     3aa:	4f 93       	push	r20
     3ac:	5f 93       	push	r21
     3ae:	6f 93       	push	r22
     3b0:	7f 93       	push	r23
     3b2:	8f 93       	push	r24
     3b4:	9f 93       	push	r25
     3b6:	af 93       	push	r26
     3b8:	bf 93       	push	r27
     3ba:	ef 93       	push	r30
     3bc:	ff 93       	push	r31
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	cd b7       	in	r28, 0x3d	; 61
     3c4:	de b7       	in	r29, 0x3e	; 62
     3c6:	2c 97       	sbiw	r28, 0x0c	; 12
     3c8:	cd bf       	out	0x3d, r28	; 61
     3ca:	de bf       	out	0x3e, r29	; 62
	sysState.sysTick++;
     3cc:	ec e0       	ldi	r30, 0x0C	; 12
     3ce:	f1 e2       	ldi	r31, 0x21	; 33
     3d0:	20 81       	ld	r18, Z
     3d2:	31 81       	ldd	r19, Z+1	; 0x01
     3d4:	42 81       	ldd	r20, Z+2	; 0x02
     3d6:	53 81       	ldd	r21, Z+3	; 0x03
     3d8:	64 81       	ldd	r22, Z+4	; 0x04
     3da:	75 81       	ldd	r23, Z+5	; 0x05
     3dc:	86 81       	ldd	r24, Z+6	; 0x06
     3de:	97 81       	ldd	r25, Z+7	; 0x07
     3e0:	a1 e0       	ldi	r26, 0x01	; 1
     3e2:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__adddi3_s8>
     3e6:	20 83       	st	Z, r18
     3e8:	31 83       	std	Z+1, r19	; 0x01
     3ea:	42 83       	std	Z+2, r20	; 0x02
     3ec:	53 83       	std	Z+3, r21	; 0x03
     3ee:	64 83       	std	Z+4, r22	; 0x04
     3f0:	75 83       	std	Z+5, r23	; 0x05
     3f2:	86 83       	std	Z+6, r24	; 0x06
     3f4:	97 83       	std	Z+7, r25	; 0x07
     3f6:	0f 2e       	mov	r0, r31
     3f8:	f0 e1       	ldi	r31, 0x10	; 16
     3fa:	2f 2e       	mov	r2, r31
     3fc:	f0 e2       	ldi	r31, 0x20	; 32
     3fe:	3f 2e       	mov	r3, r31
     400:	f0 2d       	mov	r31, r0
     402:	81 2c       	mov	r8, r1
     404:	91 2c       	mov	r9, r1
     406:	f1 01       	movw	r30, r2
			_tickLastChg = sysState.sysTick;
	}

	void updateLevel()
	{
		int16_t ticksEl = (int16_t)(sysState.sysTick - _tickLastChg); //Elapsed ticks since beginning of dim
     408:	ac e0       	ldi	r26, 0x0C	; 12
     40a:	b1 e2       	ldi	r27, 0x21	; 33
     40c:	ed 90       	ld	r14, X+
     40e:	fc 90       	ld	r15, X
     410:	83 89       	ldd	r24, Z+19	; 0x13
     412:	94 89       	ldd	r25, Z+20	; 0x14
     414:	e8 1a       	sub	r14, r24
     416:	f9 0a       	sbc	r15, r25
		int16_t delta = (((ticksEl + 1) * _fadeRate) >> 5) - ((ticksEl * _fadeRate) >> 5); //Number of steps
     418:	47 85       	ldd	r20, Z+15	; 0x0f
     41a:	50 e0       	ldi	r21, 0x00	; 0
     41c:	b7 01       	movw	r22, r14
     41e:	6f 5f       	subi	r22, 0xFF	; 255
     420:	7f 4f       	sbci	r23, 0xFF	; 255
     422:	64 9f       	mul	r22, r20
     424:	c0 01       	movw	r24, r0
     426:	65 9f       	mul	r22, r21
     428:	90 0d       	add	r25, r0
     42a:	74 9f       	mul	r23, r20
     42c:	90 0d       	add	r25, r0
     42e:	11 24       	eor	r1, r1
     430:	6c 01       	movw	r12, r24
     432:	d5 94       	asr	r13
     434:	c7 94       	ror	r12
     436:	d5 94       	asr	r13
     438:	c7 94       	ror	r12
     43a:	d5 94       	asr	r13
     43c:	c7 94       	ror	r12
     43e:	d5 94       	asr	r13
     440:	c7 94       	ror	r12
     442:	d5 94       	asr	r13
     444:	c7 94       	ror	r12
     446:	84 1b       	sub	r24, r20
     448:	95 0b       	sbc	r25, r21
     44a:	95 95       	asr	r25
     44c:	87 95       	ror	r24
     44e:	95 95       	asr	r25
     450:	87 95       	ror	r24
     452:	95 95       	asr	r25
     454:	87 95       	ror	r24
     456:	95 95       	asr	r25
     458:	87 95       	ror	r24
     45a:	95 95       	asr	r25
     45c:	87 95       	ror	r24
     45e:	c8 1a       	sub	r12, r24
     460:	d9 0a       	sbc	r13, r25
		PORTC.OUTCLR = _chActMask;
     462:	82 89       	ldd	r24, Z+18	; 0x12
     464:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
		for (int8_t i = 0; i < _linkCnt; i++)
     468:	81 81       	ldd	r24, Z+1	; 0x01
     46a:	88 23       	and	r24, r24
     46c:	09 f4       	brne	.+2      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     46e:	d4 c0       	rjmp	.+424    	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	70 e0       	ldi	r23, 0x00	; 0
     474:	b1 2c       	mov	r11, r1
		{
			uint8_t s = _dir ? i : _linkCnt - i - 1; //Direction '1' means forward
			uint8_t j = _link[s];
     476:	93 e2       	ldi	r25, 0x23	; 35
     478:	98 9d       	mul	r25, r8
     47a:	d0 01       	movw	r26, r0
     47c:	99 9d       	mul	r25, r9
     47e:	b0 0d       	add	r27, r0
     480:	11 24       	eor	r1, r1
     482:	a0 5f       	subi	r26, 0xF0	; 240
     484:	bf 4d       	sbci	r27, 0xDF	; 223
						trfReq = true;
					}
				}
				else //Level needs to be raised
				{
					tempLvl += ((-tempLvl > delta) ? delta : -tempLvl) + (int16_t)_lvl[s];
     486:	c9 82       	std	Y+1, r12	; 0x01
     488:	da 82       	std	Y+2, r13	; 0x02
     48a:	ad 83       	std	Y+5, r26	; 0x05
     48c:	be 83       	std	Y+6, r27	; 0x06
		int16_t ticksEl = (int16_t)(sysState.sysTick - _tickLastChg); //Elapsed ticks since beginning of dim
		int16_t delta = (((ticksEl + 1) * _fadeRate) >> 5) - ((ticksEl * _fadeRate) >> 5); //Number of steps
		PORTC.OUTCLR = _chActMask;
		for (int8_t i = 0; i < _linkCnt; i++)
		{
			uint8_t s = _dir ? i : _linkCnt - i - 1; //Direction '1' means forward
     48e:	90 81       	ld	r25, Z
     490:	99 23       	and	r25, r25
     492:	11 f0       	breq	.+4      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     494:	8b 2d       	mov	r24, r11
     496:	03 c0       	rjmp	.+6      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     498:	9b 2d       	mov	r25, r11
     49a:	90 95       	com	r25
     49c:	89 0f       	add	r24, r25
			uint8_t j = _link[s];
     49e:	0d 81       	ldd	r16, Y+5	; 0x05
     4a0:	1e 81       	ldd	r17, Y+6	; 0x06
     4a2:	08 0f       	add	r16, r24
     4a4:	11 1d       	adc	r17, r1
			int16_t tempLvl = gLevels[j] - _lvl[s]; //Difference between actual and set levels
     4a6:	d8 01       	movw	r26, r16
     4a8:	13 96       	adiw	r26, 0x03	; 3
     4aa:	ac 90       	ld	r10, X
     4ac:	4a 2d       	mov	r20, r10
     4ae:	50 e0       	ldi	r21, 0x00	; 0
     4b0:	ca 01       	movw	r24, r20
     4b2:	88 0f       	add	r24, r24
     4b4:	99 1f       	adc	r25, r25
     4b6:	83 5a       	subi	r24, 0xA3	; 163
     4b8:	9e 4d       	sbci	r25, 0xDE	; 222
     4ba:	dc 01       	movw	r26, r24
     4bc:	2d 91       	ld	r18, X+
     4be:	3c 91       	ld	r19, X
     4c0:	d8 01       	movw	r26, r16
     4c2:	16 96       	adiw	r26, 0x06	; 6
     4c4:	8c 91       	ld	r24, X
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	28 1b       	sub	r18, r24
     4ca:	39 0b       	sbc	r19, r25
			if (tempLvl && ticksEl >= i * _linkDelay)
     4cc:	09 f4       	brne	.+2      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4ce:	98 c0       	rjmp	.+304    	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
     4d0:	00 89       	ldd	r16, Z+16	; 0x10
     4d2:	11 89       	ldd	r17, Z+17	; 0x11
     4d4:	60 9f       	mul	r22, r16
     4d6:	30 01       	movw	r6, r0
     4d8:	61 9f       	mul	r22, r17
     4da:	70 0c       	add	r7, r0
     4dc:	70 9f       	mul	r23, r16
     4de:	70 0c       	add	r7, r0
     4e0:	11 24       	eor	r1, r1
     4e2:	e6 14       	cp	r14, r6
     4e4:	f7 04       	cpc	r15, r7
     4e6:	0c f4       	brge	.+2      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     4e8:	8b c0       	rjmp	.+278    	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
			{
				bool trfReq = -2 > tempLvl || tempLvl > 2;
				if (tempLvl > 0) //Level needs to be lowered
     4ea:	12 16       	cp	r1, r18
     4ec:	13 06       	cpc	r1, r19
     4ee:	0c f0       	brlt	.+2      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     4f0:	50 c0       	rjmp	.+160    	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
				{
					tempLvl -= ((tempLvl > delta) ? delta : tempLvl) - (int16_t)_lvl[s];
     4f2:	69 81       	ldd	r22, Y+1	; 0x01
     4f4:	7a 81       	ldd	r23, Y+2	; 0x02
     4f6:	2c 15       	cp	r18, r12
     4f8:	3d 05       	cpc	r19, r13
     4fa:	0c f4       	brge	.+2      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     4fc:	b9 01       	movw	r22, r18
     4fe:	68 1b       	sub	r22, r24
     500:	79 0b       	sbc	r23, r25
     502:	c9 01       	movw	r24, r18
     504:	86 1b       	sub	r24, r22
     506:	97 0b       	sbc	r25, r23
					if (!tempLvl) //Actual level became zero
     508:	09 f0       	breq	.+2      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     50a:	5f c0       	rjmp	.+190    	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
					{
						tempLvl -= (int16_t)_fadeRate << 2; //Subtract 4x fade steps, so off/on delay will be 4s
     50c:	87 85       	ldd	r24, Z+15	; 0x0f
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	88 0f       	add	r24, r24
     512:	99 1f       	adc	r25, r25
     514:	88 0f       	add	r24, r24
     516:	99 1f       	adc	r25, r25
     518:	91 95       	neg	r25
     51a:	81 95       	neg	r24
     51c:	91 09       	sbc	r25, r1
						channelOT.linkOnTime[j] += (uint32_t)(sysState.sysTick - _onTimeStamp) >> 5; //Add seconds
     51e:	ba 01       	movw	r22, r20
     520:	66 0f       	add	r22, r22
     522:	77 1f       	adc	r23, r23
     524:	66 0f       	add	r22, r22
     526:	77 1f       	adc	r23, r23
     528:	6c 52       	subi	r22, 0x2C	; 44
     52a:	7f 4d       	sbci	r23, 0xDF	; 223
     52c:	ac e0       	ldi	r26, 0x0C	; 12
     52e:	b1 e2       	ldi	r27, 0x21	; 33
     530:	0d 91       	ld	r16, X+
     532:	1d 91       	ld	r17, X+
     534:	2d 91       	ld	r18, X+
     536:	3c 91       	ld	r19, X
     538:	43 8c       	ldd	r4, Z+27	; 0x1b
     53a:	54 8c       	ldd	r5, Z+28	; 0x1c
     53c:	65 8c       	ldd	r6, Z+29	; 0x1d
     53e:	76 8c       	ldd	r7, Z+30	; 0x1e
     540:	04 19       	sub	r16, r4
     542:	15 09       	sbc	r17, r5
     544:	26 09       	sbc	r18, r6
     546:	37 09       	sbc	r19, r7
     548:	68 94       	set
     54a:	14 f8       	bld	r1, 4
     54c:	36 95       	lsr	r19
     54e:	27 95       	ror	r18
     550:	17 95       	ror	r17
     552:	07 95       	ror	r16
     554:	16 94       	lsr	r1
     556:	d1 f7       	brne	.-12     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
     558:	db 01       	movw	r26, r22
     55a:	4d 90       	ld	r4, X+
     55c:	5d 90       	ld	r5, X+
     55e:	6d 90       	ld	r6, X+
     560:	7c 90       	ld	r7, X
     562:	13 97       	sbiw	r26, 0x03	; 3
     564:	04 0d       	add	r16, r4
     566:	15 1d       	adc	r17, r5
     568:	26 1d       	adc	r18, r6
     56a:	37 1d       	adc	r19, r7
     56c:	0d 93       	st	X+, r16
     56e:	1d 93       	st	X+, r17
     570:	2d 93       	st	X+, r18
     572:	3c 93       	st	X, r19
     574:	13 97       	sbiw	r26, 0x03	; 3
						channelOT.linkSwCnt[j]++; //Increment switch counter
     576:	ba 01       	movw	r22, r20
     578:	66 0f       	add	r22, r22
     57a:	77 1f       	adc	r23, r23
     57c:	68 50       	subi	r22, 0x08	; 8
     57e:	7f 4d       	sbci	r23, 0xDF	; 223
     580:	db 01       	movw	r26, r22
     582:	2d 91       	ld	r18, X+
     584:	3c 91       	ld	r19, X
     586:	11 97       	sbiw	r26, 0x01	; 1
     588:	2f 5f       	subi	r18, 0xFF	; 255
     58a:	3f 4f       	sbci	r19, 0xFF	; 255
     58c:	2d 93       	st	X+, r18
     58e:	3c 93       	st	X, r19
     590:	87 c2       	rjmp	.+1294   	; 0xaa0 <__LOCK_REGION_LENGTH__+0x6a0>
						trfReq = true;
					}
				}
				else //Level needs to be raised
				{
					tempLvl += ((-tempLvl > delta) ? delta : -tempLvl) + (int16_t)_lvl[s];
     592:	66 27       	eor	r22, r22
     594:	77 27       	eor	r23, r23
     596:	62 1b       	sub	r22, r18
     598:	73 0b       	sbc	r23, r19
     59a:	c6 16       	cp	r12, r22
     59c:	d7 06       	cpc	r13, r23
     59e:	14 f4       	brge	.+4      	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     5a0:	69 81       	ldd	r22, Y+1	; 0x01
     5a2:	7a 81       	ldd	r23, Y+2	; 0x02
     5a4:	86 0f       	add	r24, r22
     5a6:	97 1f       	adc	r25, r23
     5a8:	82 0f       	add	r24, r18
     5aa:	93 1f       	adc	r25, r19
					if (!gLevels[j] && tempLvl > 0) //Lamp has been switched on - remember ticks
     5ac:	da 01       	movw	r26, r20
     5ae:	aa 0f       	add	r26, r26
     5b0:	bb 1f       	adc	r27, r27
     5b2:	8d 01       	movw	r16, r26
     5b4:	03 5a       	subi	r16, 0xA3	; 163
     5b6:	1e 4d       	sbci	r17, 0xDE	; 222
     5b8:	d8 01       	movw	r26, r16
     5ba:	6d 91       	ld	r22, X+
     5bc:	7c 91       	ld	r23, X
     5be:	67 2b       	or	r22, r23
     5c0:	21 f4       	brne	.+8      	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
     5c2:	18 16       	cp	r1, r24
     5c4:	19 06       	cpc	r1, r25
     5c6:	0c f4       	brge	.+2      	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
     5c8:	52 c2       	rjmp	.+1188   	; 0xa6e <__LOCK_REGION_LENGTH__+0x66e>
					{
						_onTimeStamp = sysState.sysTick;
						trfReq = true;
					}
				}
				gLevels[j] = tempLvl;
     5ca:	44 0f       	add	r20, r20
     5cc:	55 1f       	adc	r21, r21
     5ce:	43 5a       	subi	r20, 0xA3	; 163
     5d0:	5e 4d       	sbci	r21, 0xDE	; 222
     5d2:	da 01       	movw	r26, r20
     5d4:	8d 93       	st	X+, r24
     5d6:	9c 93       	st	X, r25
				if (trfReq)
     5d8:	2e 5f       	subi	r18, 0xFE	; 254
     5da:	3f 4f       	sbci	r19, 0xFF	; 255
     5dc:	25 30       	cpi	r18, 0x05	; 5
     5de:	31 05       	cpc	r19, r1
     5e0:	78 f0       	brcs	.+30     	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
				{
					gLevelChg |= 1 << j;
     5e2:	20 91 5c 21 	lds	r18, 0x215C	; 0x80215c <gLevelChg>
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
     5ec:	88 0f       	add	r24, r24
     5ee:	99 1f       	adc	r25, r25
     5f0:	aa 94       	dec	r10
     5f2:	e2 f7       	brpl	.-8      	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
     5f4:	82 2b       	or	r24, r18
     5f6:	80 93 5c 21 	sts	0x215C, r24	; 0x80215c <gLevelChg>
					PORTC.OUTSET = _chActMask; //Switch on activity LED
     5fa:	82 89       	ldd	r24, Z+18	; 0x12
     5fc:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     600:	b3 94       	inc	r11
	void updateLevel()
	{
		int16_t ticksEl = (int16_t)(sysState.sysTick - _tickLastChg); //Elapsed ticks since beginning of dim
		int16_t delta = (((ticksEl + 1) * _fadeRate) >> 5) - ((ticksEl * _fadeRate) >> 5); //Number of steps
		PORTC.OUTCLR = _chActMask;
		for (int8_t i = 0; i < _linkCnt; i++)
     602:	6b 2d       	mov	r22, r11
     604:	0b 2c       	mov	r0, r11
     606:	00 0c       	add	r0, r0
     608:	77 0b       	sbc	r23, r23
     60a:	81 81       	ldd	r24, Z+1	; 0x01
     60c:	28 2f       	mov	r18, r24
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	62 17       	cp	r22, r18
     612:	73 07       	cpc	r23, r19
     614:	0c f4       	brge	.+2      	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
     616:	3b cf       	rjmp	.-394    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     618:	bf ef       	ldi	r27, 0xFF	; 255
     61a:	8b 1a       	sub	r8, r27
     61c:	9b 0a       	sbc	r9, r27
     61e:	e3 e2       	ldi	r30, 0x23	; 35
     620:	2e 0e       	add	r2, r30
     622:	31 1c       	adc	r3, r1
ISR(RTC_OVF_vect)
{
	sysState.sysTick++;
	static uint8_t rs485busy = 0;
	uint8_t i;
	for (i = 0; i < 4; i++)
     624:	f4 e0       	ldi	r31, 0x04	; 4
     626:	8f 16       	cp	r8, r31
     628:	91 04       	cpc	r9, r1
     62a:	09 f0       	breq	.+2      	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
     62c:	ec ce       	rjmp	.-552    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
			cntDown = true;
		}
	}
	void updateLevel()
	{
		if (cntDown)
     62e:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <msenCh>
     632:	88 23       	and	r24, r24
     634:	09 f4       	brne	.+2      	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
     636:	3c c2       	rjmp	.+1144   	; 0xab0 <__LOCK_REGION_LENGTH__+0x6b0>
		{
			uint16_t ton = (uint16_t)(sysState.sysTick - _onTimeStamp) >> 5;
     638:	2c e0       	ldi	r18, 0x0C	; 12
     63a:	31 e2       	ldi	r19, 0x21	; 33
     63c:	d9 01       	movw	r26, r18
     63e:	bc 91       	ld	r27, X
     640:	bd 83       	std	Y+5, r27	; 0x05
     642:	f9 01       	movw	r30, r18
     644:	f1 81       	ldd	r31, Z+1	; 0x01
     646:	fe 83       	std	Y+6, r31	; 0x06
     648:	d9 01       	movw	r26, r18
     64a:	12 96       	adiw	r26, 0x02	; 2
     64c:	bc 91       	ld	r27, X
     64e:	bf 83       	std	Y+7, r27	; 0x07
     650:	f9 01       	movw	r30, r18
     652:	f3 81       	ldd	r31, Z+3	; 0x03
     654:	f8 87       	std	Y+8, r31	; 0x08
     656:	d9 01       	movw	r26, r18
     658:	14 96       	adiw	r26, 0x04	; 4
     65a:	bc 91       	ld	r27, X
     65c:	b9 87       	std	Y+9, r27	; 0x09
     65e:	f9 01       	movw	r30, r18
     660:	f5 81       	ldd	r31, Z+5	; 0x05
     662:	fa 87       	std	Y+10, r31	; 0x0a
     664:	d9 01       	movw	r26, r18
     666:	16 96       	adiw	r26, 0x06	; 6
     668:	bc 91       	ld	r27, X
     66a:	bb 87       	std	Y+11, r27	; 0x0b
     66c:	f9 01       	movw	r30, r18
     66e:	f7 81       	ldd	r31, Z+7	; 0x07
     670:	fc 87       	std	Y+12, r31	; 0x0c
     672:	22 e0       	ldi	r18, 0x02	; 2
     674:	30 e2       	ldi	r19, 0x20	; 32
			if (ton > _fTime)
     676:	d9 01       	movw	r26, r18
     678:	16 96       	adiw	r26, 0x06	; 6
     67a:	4d 91       	ld	r20, X+
     67c:	5c 91       	ld	r21, X
     67e:	17 97       	sbiw	r26, 0x07	; 7
     680:	ed 81       	ldd	r30, Y+5	; 0x05
     682:	fe 81       	ldd	r31, Y+6	; 0x06
     684:	e4 1b       	sub	r30, r20
     686:	f5 0b       	sbc	r31, r21
     688:	af 01       	movw	r20, r30
     68a:	56 95       	lsr	r21
     68c:	47 95       	ror	r20
     68e:	52 95       	swap	r21
     690:	42 95       	swap	r20
     692:	4f 70       	andi	r20, 0x0F	; 15
     694:	45 27       	eor	r20, r21
     696:	5f 70       	andi	r21, 0x0F	; 15
     698:	45 27       	eor	r20, r21
     69a:	15 96       	adiw	r26, 0x05	; 5
     69c:	2c 91       	ld	r18, X
     69e:	15 97       	sbiw	r26, 0x05	; 5
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	24 17       	cp	r18, r20
     6a4:	35 07       	cpc	r19, r21
     6a6:	08 f0       	brcs	.+2      	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
     6a8:	68 c0       	rjmp	.+208    	; 0x77a <__LOCK_REGION_LENGTH__+0x37a>
			{
				ltEnt = cntDown = false;
     6aa:	1c 92       	st	X, r1
     6ac:	11 96       	adiw	r26, 0x01	; 1
     6ae:	1c 92       	st	X, r1
     6b0:	11 97       	sbiw	r26, 0x01	; 1
				links[_linkNum].setLevel(0); //Both on and low time are expired, shut down the lamp
     6b2:	12 96       	adiw	r26, 0x02	; 2
     6b4:	4c 91       	ld	r20, X
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
     6b6:	a4 2e       	mov	r10, r20
     6b8:	b1 2c       	mov	r11, r1
     6ba:	b3 e2       	ldi	r27, 0x23	; 35
     6bc:	4b 9f       	mul	r20, r27
     6be:	b0 01       	movw	r22, r0
     6c0:	11 24       	eor	r1, r1
     6c2:	60 5f       	subi	r22, 0xF0	; 240
     6c4:	7f 4d       	sbci	r23, 0xDF	; 223
     6c6:	fb 01       	movw	r30, r22
     6c8:	22 81       	ldd	r18, Z+2	; 0x02
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	24 5f       	subi	r18, 0xF4	; 244
     6ce:	3e 4d       	sbci	r19, 0xDE	; 222
     6d0:	d9 01       	movw	r26, r18
     6d2:	51 96       	adiw	r26, 0x11	; 17
     6d4:	1c 92       	st	X, r1
		
		for (uint8_t i = 0; i < _linkCnt; i++)
     6d6:	c1 80       	ldd	r12, Z+1	; 0x01
     6d8:	cc 20       	and	r12, r12
     6da:	19 f1       	breq	.+70     	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
     6dc:	b3 e2       	ldi	r27, 0x23	; 35
     6de:	4b 9f       	mul	r20, r27
     6e0:	a0 01       	movw	r20, r0
     6e2:	11 24       	eor	r1, r1
     6e4:	4d 5e       	subi	r20, 0xED	; 237
     6e6:	5f 4d       	sbci	r21, 0xDF	; 223
     6e8:	d1 2c       	mov	r13, r1
     6ea:	f1 2c       	mov	r15, r1
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     6ec:	fa 01       	movw	r30, r20
     6ee:	20 81       	ld	r18, Z
     6f0:	4f 5f       	subi	r20, 0xFF	; 255
     6f2:	5f 4f       	sbci	r21, 0xFF	; 255
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	22 0f       	add	r18, r18
     6f8:	33 1f       	adc	r19, r19
     6fa:	23 5a       	subi	r18, 0xA3	; 163
     6fc:	3e 4d       	sbci	r19, 0xDE	; 222
     6fe:	d9 01       	movw	r26, r18
     700:	0d 91       	ld	r16, X+
     702:	1c 91       	ld	r17, X
     704:	23 81       	ldd	r18, Z+3	; 0x03
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	61 e0       	ldi	r22, 0x01	; 1
     70a:	20 17       	cp	r18, r16
     70c:	31 07       	cpc	r19, r17
     70e:	09 f4       	brne	.+2      	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	d6 2a       	or	r13, r22
			if (!level || !_difLvl[i]) //Set zero level directly
				_lvl[i] = 0;
     714:	fa 01       	movw	r30, r20
     716:	12 82       	std	Z+2, r1	; 0x02
	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
		
		for (uint8_t i = 0; i < _linkCnt; i++)
     718:	f3 94       	inc	r15
     71a:	fc 10       	cpse	r15, r12
     71c:	e7 cf       	rjmp	.-50     	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     71e:	d1 10       	cpse	r13, r1
     720:	c7 c1       	rjmp	.+910    	; 0xab0 <__LOCK_REGION_LENGTH__+0x6b0>
			_tickLastChg = sysState.sysTick;
     722:	23 e2       	ldi	r18, 0x23	; 35
     724:	2a 9d       	mul	r18, r10
     726:	a0 01       	movw	r20, r0
     728:	2b 9d       	mul	r18, r11
     72a:	50 0d       	add	r21, r0
     72c:	11 24       	eor	r1, r1
     72e:	40 5f       	subi	r20, 0xF0	; 240
     730:	5f 4d       	sbci	r21, 0xDF	; 223
     732:	9a 01       	movw	r18, r20
     734:	2d 5e       	subi	r18, 0xED	; 237
     736:	3f 4f       	sbci	r19, 0xFF	; 255
     738:	ed 81       	ldd	r30, Y+5	; 0x05
     73a:	da 01       	movw	r26, r20
     73c:	53 96       	adiw	r26, 0x13	; 19
     73e:	ec 93       	st	X, r30
     740:	ee 81       	ldd	r30, Y+6	; 0x06
     742:	d9 01       	movw	r26, r18
     744:	11 96       	adiw	r26, 0x01	; 1
     746:	ec 93       	st	X, r30
     748:	11 97       	sbiw	r26, 0x01	; 1
     74a:	ff 81       	ldd	r31, Y+7	; 0x07
     74c:	12 96       	adiw	r26, 0x02	; 2
     74e:	fc 93       	st	X, r31
     750:	12 97       	sbiw	r26, 0x02	; 2
     752:	68 85       	ldd	r22, Y+8	; 0x08
     754:	13 96       	adiw	r26, 0x03	; 3
     756:	6c 93       	st	X, r22
     758:	13 97       	sbiw	r26, 0x03	; 3
     75a:	79 85       	ldd	r23, Y+9	; 0x09
     75c:	14 96       	adiw	r26, 0x04	; 4
     75e:	7c 93       	st	X, r23
     760:	14 97       	sbiw	r26, 0x04	; 4
     762:	8a 85       	ldd	r24, Y+10	; 0x0a
     764:	15 96       	adiw	r26, 0x05	; 5
     766:	8c 93       	st	X, r24
     768:	15 97       	sbiw	r26, 0x05	; 5
     76a:	9b 85       	ldd	r25, Y+11	; 0x0b
     76c:	16 96       	adiw	r26, 0x06	; 6
     76e:	9c 93       	st	X, r25
     770:	16 97       	sbiw	r26, 0x06	; 6
     772:	ec 85       	ldd	r30, Y+12	; 0x0c
     774:	17 96       	adiw	r26, 0x07	; 7
     776:	ec 93       	st	X, r30
     778:	9b c1       	rjmp	.+822    	; 0xab0 <__LOCK_REGION_LENGTH__+0x6b0>
			if (ton > _fTime)
			{
				ltEnt = cntDown = false;
				links[_linkNum].setLevel(0); //Both on and low time are expired, shut down the lamp
			}
			else if (!ltEnt && _onTime)
     77a:	20 91 03 20 	lds	r18, 0x2003	; 0x802003 <msenCh+0x1>
     77e:	21 11       	cpse	r18, r1
     780:	97 c1       	rjmp	.+814    	; 0xab0 <__LOCK_REGION_LENGTH__+0x6b0>
     782:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <msenCh+0x4>
     786:	22 23       	and	r18, r18
     788:	09 f4       	brne	.+2      	; 0x78c <__LOCK_REGION_LENGTH__+0x38c>
     78a:	92 c1       	rjmp	.+804    	; 0xab0 <__LOCK_REGION_LENGTH__+0x6b0>
			{
				ltEnt = true;
     78c:	22 e0       	ldi	r18, 0x02	; 2
     78e:	30 e2       	ldi	r19, 0x20	; 32
     790:	41 e0       	ldi	r20, 0x01	; 1
     792:	d9 01       	movw	r26, r18
     794:	11 96       	adiw	r26, 0x01	; 1
     796:	4c 93       	st	X, r20
     798:	11 97       	sbiw	r26, 0x01	; 1
				links[_linkNum].setLevel(validConf.msenLowLvl);
     79a:	f0 90 40 21 	lds	r15, 0x2140	; 0x802140 <validConf+0x1c>
     79e:	12 96       	adiw	r26, 0x02	; 2
     7a0:	2c 91       	ld	r18, X
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
     7a2:	a2 2e       	mov	r10, r18
     7a4:	b1 2c       	mov	r11, r1
     7a6:	b3 e2       	ldi	r27, 0x23	; 35
     7a8:	2b 9f       	mul	r18, r27
     7aa:	b0 01       	movw	r22, r0
     7ac:	11 24       	eor	r1, r1
     7ae:	60 5f       	subi	r22, 0xF0	; 240
     7b0:	7f 4d       	sbci	r23, 0xDF	; 223
     7b2:	fb 01       	movw	r30, r22
     7b4:	42 81       	ldd	r20, Z+2	; 0x02
     7b6:	50 e0       	ldi	r21, 0x00	; 0
     7b8:	44 5f       	subi	r20, 0xF4	; 244
     7ba:	5e 4d       	sbci	r21, 0xDE	; 222
     7bc:	da 01       	movw	r26, r20
     7be:	51 96       	adiw	r26, 0x11	; 17
     7c0:	fc 92       	st	X, r15
		
		for (uint8_t i = 0; i < _linkCnt; i++)
     7c2:	e1 80       	ldd	r14, Z+1	; 0x01
     7c4:	ee 20       	and	r14, r14
     7c6:	b1 f1       	breq	.+108    	; 0x834 <__LOCK_REGION_LENGTH__+0x434>
     7c8:	b3 e2       	ldi	r27, 0x23	; 35
     7ca:	2b 9f       	mul	r18, r27
     7cc:	90 01       	movw	r18, r0
     7ce:	11 24       	eor	r1, r1
     7d0:	2d 5e       	subi	r18, 0xED	; 237
     7d2:	3f 4d       	sbci	r19, 0xDF	; 223
     7d4:	70 e0       	ldi	r23, 0x00	; 0
     7d6:	60 e0       	ldi	r22, 0x00	; 0
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
			if (!level || !_difLvl[i]) //Set zero level directly
				_lvl[i] = 0;
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
     7d8:	cf 2c       	mov	r12, r15
     7da:	d1 2c       	mov	r13, r1
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
		
		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     7dc:	f9 01       	movw	r30, r18
     7de:	40 81       	ld	r20, Z
     7e0:	2f 5f       	subi	r18, 0xFF	; 255
     7e2:	3f 4f       	sbci	r19, 0xFF	; 255
     7e4:	50 e0       	ldi	r21, 0x00	; 0
     7e6:	44 0f       	add	r20, r20
     7e8:	55 1f       	adc	r21, r21
     7ea:	43 5a       	subi	r20, 0xA3	; 163
     7ec:	5e 4d       	sbci	r21, 0xDE	; 222
     7ee:	da 01       	movw	r26, r20
     7f0:	8d 90       	ld	r8, X+
     7f2:	9c 90       	ld	r9, X
     7f4:	43 81       	ldd	r20, Z+3	; 0x03
     7f6:	50 e0       	ldi	r21, 0x00	; 0
     7f8:	11 e0       	ldi	r17, 0x01	; 1
     7fa:	48 15       	cp	r20, r8
     7fc:	59 05       	cpc	r21, r9
     7fe:	09 f4       	brne	.+2      	; 0x802 <__LOCK_REGION_LENGTH__+0x402>
     800:	10 e0       	ldi	r17, 0x00	; 0
     802:	71 2b       	or	r23, r17
			if (!level || !_difLvl[i]) //Set zero level directly
     804:	ff 20       	and	r15, r15
     806:	21 f0       	breq	.+8      	; 0x810 <__LOCK_REGION_LENGTH__+0x410>
     808:	f9 01       	movw	r30, r18
     80a:	40 85       	ldd	r20, Z+8	; 0x08
     80c:	41 11       	cpse	r20, r1
     80e:	04 c0       	rjmp	.+8      	; 0x818 <__LOCK_REGION_LENGTH__+0x418>
				_lvl[i] = 0;
     810:	d9 01       	movw	r26, r18
     812:	12 96       	adiw	r26, 0x02	; 2
     814:	1c 92       	st	X, r1
     816:	09 c0       	rjmp	.+18     	; 0x82a <__LOCK_REGION_LENGTH__+0x42a>
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
     818:	4c 9d       	mul	r20, r12
     81a:	80 01       	movw	r16, r0
     81c:	4d 9d       	mul	r20, r13
     81e:	10 0d       	add	r17, r0
     820:	11 24       	eor	r1, r1
     822:	f9 01       	movw	r30, r18
     824:	45 81       	ldd	r20, Z+5	; 0x05
     826:	41 0f       	add	r20, r17
     828:	42 83       	std	Z+2, r20	; 0x02
	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
		
		for (uint8_t i = 0; i < _linkCnt; i++)
     82a:	6f 5f       	subi	r22, 0xFF	; 255
     82c:	6e 11       	cpse	r22, r14
     82e:	d6 cf       	rjmp	.-84     	; 0x7dc <__LOCK_REGION_LENGTH__+0x3dc>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     830:	71 11       	cpse	r23, r1
     832:	3e c1       	rjmp	.+636    	; 0xab0 <__LOCK_REGION_LENGTH__+0x6b0>
			_tickLastChg = sysState.sysTick;
     834:	23 e2       	ldi	r18, 0x23	; 35
     836:	2a 9d       	mul	r18, r10
     838:	a0 01       	movw	r20, r0
     83a:	2b 9d       	mul	r18, r11
     83c:	50 0d       	add	r21, r0
     83e:	11 24       	eor	r1, r1
     840:	40 5f       	subi	r20, 0xF0	; 240
     842:	5f 4d       	sbci	r21, 0xDF	; 223
     844:	9a 01       	movw	r18, r20
     846:	2d 5e       	subi	r18, 0xED	; 237
     848:	3f 4f       	sbci	r19, 0xFF	; 255
     84a:	ed 81       	ldd	r30, Y+5	; 0x05
     84c:	da 01       	movw	r26, r20
     84e:	53 96       	adiw	r26, 0x13	; 19
     850:	ec 93       	st	X, r30
     852:	ee 81       	ldd	r30, Y+6	; 0x06
     854:	d9 01       	movw	r26, r18
     856:	11 96       	adiw	r26, 0x01	; 1
     858:	ec 93       	st	X, r30
     85a:	11 97       	sbiw	r26, 0x01	; 1
     85c:	ff 81       	ldd	r31, Y+7	; 0x07
     85e:	12 96       	adiw	r26, 0x02	; 2
     860:	fc 93       	st	X, r31
     862:	12 97       	sbiw	r26, 0x02	; 2
     864:	68 85       	ldd	r22, Y+8	; 0x08
     866:	13 96       	adiw	r26, 0x03	; 3
     868:	6c 93       	st	X, r22
     86a:	13 97       	sbiw	r26, 0x03	; 3
     86c:	79 85       	ldd	r23, Y+9	; 0x09
     86e:	14 96       	adiw	r26, 0x04	; 4
     870:	7c 93       	st	X, r23
     872:	14 97       	sbiw	r26, 0x04	; 4
     874:	8a 85       	ldd	r24, Y+10	; 0x0a
     876:	15 96       	adiw	r26, 0x05	; 5
     878:	8c 93       	st	X, r24
     87a:	15 97       	sbiw	r26, 0x05	; 5
     87c:	9b 85       	ldd	r25, Y+11	; 0x0b
     87e:	16 96       	adiw	r26, 0x06	; 6
     880:	9c 93       	st	X, r25
     882:	16 97       	sbiw	r26, 0x06	; 6
     884:	ec 85       	ldd	r30, Y+12	; 0x0c
     886:	17 96       	adiw	r26, 0x07	; 7
     888:	ec 93       	st	X, r30
     88a:	12 c1       	rjmp	.+548    	; 0xab0 <__LOCK_REGION_LENGTH__+0x6b0>
	uint8_t i;
	for (i = 0; i < 4; i++)
		links[i].updateLevel();
	msenCh.updateLevel();
	for (i = 0; i < 9; i++)
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
     88c:	fc 01       	movw	r30, r24
     88e:	ee 0f       	add	r30, r30
     890:	ff 1f       	adc	r31, r31
     892:	e3 5a       	subi	r30, 0xA3	; 163
     894:	fe 4d       	sbci	r31, 0xDE	; 222
     896:	20 81       	ld	r18, Z
     898:	31 81       	ldd	r19, Z+1	; 0x01
     89a:	12 16       	cp	r1, r18
     89c:	13 06       	cpc	r1, r19
     89e:	44 f4       	brge	.+16     	; 0x8b0 <__LOCK_REGION_LENGTH__+0x4b0>
     8a0:	fc 01       	movw	r30, r24
     8a2:	ee 0f       	add	r30, r30
     8a4:	ff 1f       	adc	r31, r31
     8a6:	e3 5a       	subi	r30, 0xA3	; 163
     8a8:	fe 4d       	sbci	r31, 0xDE	; 222
     8aa:	20 81       	ld	r18, Z
     8ac:	31 81       	ldd	r19, Z+1	; 0x01
     8ae:	01 c0       	rjmp	.+2      	; 0x8b2 <__LOCK_REGION_LENGTH__+0x4b2>
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	2d 93       	st	X+, r18
     8b4:	01 96       	adiw	r24, 0x01	; 1
	static uint8_t rs485busy = 0;
	uint8_t i;
	for (i = 0; i < 4; i++)
		links[i].updateLevel();
	msenCh.updateLevel();
	for (i = 0; i < 9; i++)
     8b6:	89 30       	cpi	r24, 0x09	; 9
     8b8:	91 05       	cpc	r25, r1
     8ba:	41 f7       	brne	.-48     	; 0x88c <__LOCK_REGION_LENGTH__+0x48c>
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
	DSI8xFrames[0] = gLevelChg; //DSI start bit
     8bc:	80 91 5c 21 	lds	r24, 0x215C	; 0x80215c <gLevelChg>
     8c0:	80 93 47 21 	sts	0x2147, r24	; 0x802147 <DSI8xFrames>
     8c4:	1b 82       	std	Y+3, r1	; 0x03
     8c6:	1c 82       	std	Y+4, r1	; 0x04
     8c8:	68 94       	set
     8ca:	ee 24       	eor	r14, r14
     8cc:	e3 f8       	bld	r14, 3
     8ce:	01 e0       	ldi	r16, 0x01	; 1
     8d0:	10 e0       	ldi	r17, 0x00	; 0
     8d2:	d8 01       	movw	r26, r16
     8d4:	0b 80       	ldd	r0, Y+3	; 0x03
     8d6:	02 c0       	rjmp	.+4      	; 0x8dc <__LOCK_REGION_LENGTH__+0x4dc>
     8d8:	aa 0f       	add	r26, r26
     8da:	bb 1f       	adc	r27, r27
     8dc:	0a 94       	dec	r0
     8de:	e2 f7       	brpl	.-8      	; 0x8d8 <__LOCK_REGION_LENGTH__+0x4d8>
     8e0:	ec e0       	ldi	r30, 0x0C	; 12
     8e2:	f1 e2       	ldi	r31, 0x21	; 33
		{
			tmp1 >>= 1;
			tmp0 >>= 1;
			if (gLevelChg & (1 << j)) //Particular level has been changed
			{
				if (sysState.setLevels[j] & (1 << i)) //Set upper half-bit
     8e4:	20 e0       	ldi	r18, 0x00	; 0
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	d1 2c       	mov	r13, r1
     8ea:	f1 2c       	mov	r15, r1
	for (i = 0; i < 8; i++) //DSI frame bits 0-7
	{
		uint8_t tmp0 = 0, tmp1 = 0, j;
		for (j = 0; j < 8; j++) //Levels
		{
			tmp1 >>= 1;
     8ec:	6d 2d       	mov	r22, r13
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	75 95       	asr	r23
     8f2:	67 95       	ror	r22
     8f4:	d6 2e       	mov	r13, r22
			tmp0 >>= 1;
     8f6:	4f 2d       	mov	r20, r15
     8f8:	50 e0       	ldi	r21, 0x00	; 0
     8fa:	55 95       	asr	r21
     8fc:	47 95       	ror	r20
     8fe:	f4 2e       	mov	r15, r20
			if (gLevelChg & (1 << j)) //Particular level has been changed
     900:	80 91 5c 21 	lds	r24, 0x215C	; 0x80215c <gLevelChg>
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	02 2e       	mov	r0, r18
     908:	02 c0       	rjmp	.+4      	; 0x90e <__LOCK_REGION_LENGTH__+0x50e>
     90a:	95 95       	asr	r25
     90c:	87 95       	ror	r24
     90e:	0a 94       	dec	r0
     910:	e2 f7       	brpl	.-8      	; 0x90a <__LOCK_REGION_LENGTH__+0x50a>
     912:	80 ff       	sbrs	r24, 0
     914:	0d c0       	rjmp	.+26     	; 0x930 <__LOCK_REGION_LENGTH__+0x530>
			{
				if (sysState.setLevels[j] & (1 << i)) //Set upper half-bit
     916:	80 85       	ldd	r24, Z+8	; 0x08
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	8a 23       	and	r24, r26
     91c:	9b 23       	and	r25, r27
     91e:	89 2b       	or	r24, r25
     920:	21 f0       	breq	.+8      	; 0x92a <__LOCK_REGION_LENGTH__+0x52a>
					tmp1 |= 0x80;
     922:	86 2f       	mov	r24, r22
     924:	80 68       	ori	r24, 0x80	; 128
     926:	d8 2e       	mov	r13, r24
     928:	03 c0       	rjmp	.+6      	; 0x930 <__LOCK_REGION_LENGTH__+0x530>
				else
					tmp0 |= 0x80; //Set lower half-bit (one-zero transition)
     92a:	94 2f       	mov	r25, r20
     92c:	90 68       	ori	r25, 0x80	; 128
     92e:	f9 2e       	mov	r15, r25
     930:	2f 5f       	subi	r18, 0xFF	; 255
     932:	3f 4f       	sbci	r19, 0xFF	; 255
     934:	31 96       	adiw	r30, 0x01	; 1
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
	DSI8xFrames[0] = gLevelChg; //DSI start bit
	for (i = 0; i < 8; i++) //DSI frame bits 0-7
	{
		uint8_t tmp0 = 0, tmp1 = 0, j;
		for (j = 0; j < 8; j++) //Levels
     936:	28 30       	cpi	r18, 0x08	; 8
     938:	31 05       	cpc	r19, r1
     93a:	c1 f6       	brne	.-80     	; 0x8ec <__LOCK_REGION_LENGTH__+0x4ec>
				else
					tmp0 |= 0x80; //Set lower half-bit (one-zero transition)
			}
		}
		j = (8 - i) << 1;
		DSI8xFrames[j - 1] = tmp1;
     93c:	8e 2d       	mov	r24, r14
     93e:	88 0f       	add	r24, r24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	fc 01       	movw	r30, r24
     944:	ea 5b       	subi	r30, 0xBA	; 186
     946:	fe 4d       	sbci	r31, 0xDE	; 222
     948:	d0 82       	st	Z, r13
		DSI8xFrames[j] = tmp0; //Manchester coded
     94a:	fc 01       	movw	r30, r24
     94c:	e9 5b       	subi	r30, 0xB9	; 185
     94e:	fe 4d       	sbci	r31, 0xDE	; 222
     950:	f0 82       	st	Z, r15
     952:	ea 94       	dec	r14
     954:	ab 81       	ldd	r26, Y+3	; 0x03
     956:	bc 81       	ldd	r27, Y+4	; 0x04
     958:	11 96       	adiw	r26, 0x01	; 1
     95a:	ab 83       	std	Y+3, r26	; 0x03
     95c:	bc 83       	std	Y+4, r27	; 0x04
		links[i].updateLevel();
	msenCh.updateLevel();
	for (i = 0; i < 9; i++)
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
	DSI8xFrames[0] = gLevelChg; //DSI start bit
	for (i = 0; i < 8; i++) //DSI frame bits 0-7
     95e:	e1 10       	cpse	r14, r1
     960:	b8 cf       	rjmp	.-144    	; 0x8d2 <__LOCK_REGION_LENGTH__+0x4d2>
		}
		j = (8 - i) << 1;
		DSI8xFrames[j - 1] = tmp1;
		DSI8xFrames[j] = tmp0; //Manchester coded
	}
	DSI8xFrames[17] = 0; //DSI stop bit
     962:	10 92 58 21 	sts	0x2158, r1	; 0x802158 <DSI8xFrames+0x11>
	gLevelChg = 0; //Clear flags for changed levels
     966:	10 92 5c 21 	sts	0x215C, r1	; 0x80215c <gLevelChg>
	if (sysState.setLevels[8] > 0) //On/off channel processing
     96a:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <sysState+0x10>
     96e:	88 23       	and	r24, r24
     970:	21 f0       	breq	.+8      	; 0x97a <__LOCK_REGION_LENGTH__+0x57a>
		PORTA.OUTSET = PIN7_bm;
     972:	80 e8       	ldi	r24, 0x80	; 128
     974:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
     978:	03 c0       	rjmp	.+6      	; 0x980 <__LOCK_REGION_LENGTH__+0x580>
	else
		PORTA.OUTCLR = PIN7_bm;
     97a:	80 e8       	ldi	r24, 0x80	; 128
     97c:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>

	if ((char)sysState.sysTick % 4 == 0) //Initialize conversion sequence 8 times per second
     980:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <sysState>
     984:	83 70       	andi	r24, 0x03	; 3
     986:	39 f4       	brne	.+14     	; 0x996 <__LOCK_REGION_LENGTH__+0x596>
	{
		ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN1_gc;
     988:	e0 e0       	ldi	r30, 0x00	; 0
     98a:	f2 e0       	ldi	r31, 0x02	; 2
     98c:	88 e0       	ldi	r24, 0x08	; 8
     98e:	81 a3       	std	Z+33, r24	; 0x21
		ADCA.CTRLA |= ADC_START_bm; //Start conversion from pin 1 (channel 1)
     990:	80 81       	ld	r24, Z
     992:	84 60       	ori	r24, 0x04	; 4
     994:	80 83       	st	Z, r24
	}

	int16_t h = (int8_t)sysState.sysTick;
     996:	2c e0       	ldi	r18, 0x0C	; 12
     998:	31 e2       	ldi	r19, 0x21	; 33
     99a:	f9 01       	movw	r30, r18
     99c:	f0 81       	ld	r31, Z
     99e:	fd 83       	std	Y+5, r31	; 0x05
     9a0:	d9 01       	movw	r26, r18
     9a2:	11 96       	adiw	r26, 0x01	; 1
     9a4:	bc 91       	ld	r27, X
     9a6:	be 83       	std	Y+6, r27	; 0x06
     9a8:	f9 01       	movw	r30, r18
     9aa:	f2 81       	ldd	r31, Z+2	; 0x02
     9ac:	ff 83       	std	Y+7, r31	; 0x07
     9ae:	d9 01       	movw	r26, r18
     9b0:	13 96       	adiw	r26, 0x03	; 3
     9b2:	bc 91       	ld	r27, X
     9b4:	b8 87       	std	Y+8, r27	; 0x08
     9b6:	f9 01       	movw	r30, r18
     9b8:	f4 81       	ldd	r31, Z+4	; 0x04
     9ba:	f9 87       	std	Y+9, r31	; 0x09
     9bc:	d9 01       	movw	r26, r18
     9be:	15 96       	adiw	r26, 0x05	; 5
     9c0:	bc 91       	ld	r27, X
     9c2:	ba 87       	std	Y+10, r27	; 0x0a
     9c4:	f9 01       	movw	r30, r18
     9c6:	f6 81       	ldd	r31, Z+6	; 0x06
     9c8:	fb 87       	std	Y+11, r31	; 0x0b
     9ca:	d9 01       	movw	r26, r18
     9cc:	17 96       	adiw	r26, 0x07	; 7
     9ce:	bc 91       	ld	r27, X
     9d0:	bc 87       	std	Y+12, r27	; 0x0c
	TCC4.CCABUF = h * h; //This will produce slow fading of HB LED (4s up/down)
     9d2:	ed 81       	ldd	r30, Y+5	; 0x05
     9d4:	ee 02       	muls	r30, r30
     9d6:	90 01       	movw	r18, r0
     9d8:	11 24       	eor	r1, r1
     9da:	20 93 38 08 	sts	0x0838, r18	; 0x800838 <__TEXT_REGION_LENGTH__+0x700838>
     9de:	30 93 39 08 	sts	0x0839, r19	; 0x800839 <__TEXT_REGION_LENGTH__+0x700839>

	if (((uint32_t)sysState.sysTick & 0x7FFFF) == 0) //Save state to EEPROM every 4.5 hrs
     9e2:	8d 81       	ldd	r24, Y+5	; 0x05
     9e4:	9e 81       	ldd	r25, Y+6	; 0x06
     9e6:	af 81       	ldd	r26, Y+7	; 0x07
     9e8:	b8 85       	ldd	r27, Y+8	; 0x08
     9ea:	a7 70       	andi	r26, 0x07	; 7
     9ec:	bb 27       	eor	r27, r27
     9ee:	89 2b       	or	r24, r25
     9f0:	8a 2b       	or	r24, r26
     9f2:	8b 2b       	or	r24, r27
     9f4:	41 f4       	brne	.+16     	; 0xa06 <__LOCK_REGION_LENGTH__+0x606>
		eeprom_update_block(&channelOT, &savedCOT, sizeof(channelsOnTime));
     9f6:	48 e3       	ldi	r20, 0x38	; 56
     9f8:	50 e0       	ldi	r21, 0x00	; 0
     9fa:	61 e2       	ldi	r22, 0x21	; 33
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	84 ed       	ldi	r24, 0xD4	; 212
     a00:	90 e2       	ldi	r25, 0x20	; 32
     a02:	0e 94 1c 0a 	call	0x1438	; 0x1438 <eeprom_update_block>

	if (rxMode == SetConfig) //We are currently receiving data packet
     a06:	80 91 5b 21 	lds	r24, 0x215B	; 0x80215b <rxMode>
     a0a:	83 32       	cpi	r24, 0x23	; 35
     a0c:	e9 f4       	brne	.+58     	; 0xa48 <__LOCK_REGION_LENGTH__+0x648>
	{
		if (rs485busy == rxMark) //Second tick in a row detected
     a0e:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <rxMark>
     a12:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <_ZZ10__vector_7E9rs485busy>
     a16:	98 13       	cpse	r25, r24
     a18:	12 c0       	rjmp	.+36     	; 0xa3e <__LOCK_REGION_LENGTH__+0x63e>
		{
			rxMode = 0; //Packet considered lost
     a1a:	10 92 5b 21 	sts	0x215B, r1	; 0x80215b <rxMode>
			USARTC0.CTRLB |= USART_MPCM_bm; //Set MPCM bit
     a1e:	e0 ec       	ldi	r30, 0xC0	; 192
     a20:	f8 e0       	ldi	r31, 0x08	; 8
     a22:	83 81       	ldd	r24, Z+3	; 0x03
     a24:	82 60       	ori	r24, 0x02	; 2
     a26:	83 83       	std	Z+3, r24	; 0x03
			#ifdef RXC_EDMA
			EDMA.CH0.CTRLA = 0;
     a28:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__TEXT_REGION_LENGTH__+0x700110>
			while (EDMA.CH0.CTRLB & EDMA_CH_CHBUSY_bm);
     a2c:	e0 e0       	ldi	r30, 0x00	; 0
     a2e:	f1 e0       	ldi	r31, 0x01	; 1
     a30:	81 89       	ldd	r24, Z+17	; 0x11
     a32:	88 23       	and	r24, r24
     a34:	ec f3       	brlt	.-6      	; 0xa30 <__LOCK_REGION_LENGTH__+0x630>
			USARTC0.CTRLA = USART_DRIE_bm | USART_RXCINTLVL_HI_gc;
     a36:	80 e7       	ldi	r24, 0x70	; 112
     a38:	80 93 c2 08 	sts	0x08C2, r24	; 0x8008c2 <__TEXT_REGION_LENGTH__+0x7008c2>
     a3c:	0a c0       	rjmp	.+20     	; 0xa52 <__LOCK_REGION_LENGTH__+0x652>
			#endif
		}
		else
			rs485busy = rxMark;
     a3e:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <rxMark>
     a42:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <_ZZ10__vector_7E9rs485busy>
     a46:	05 c0       	rjmp	.+10     	; 0xa52 <__LOCK_REGION_LENGTH__+0x652>
	}
	else
		rs485busy = rxMark - 1;
     a48:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <rxMark>
     a4c:	81 50       	subi	r24, 0x01	; 1
     a4e:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <_ZZ10__vector_7E9rs485busy>
	framePtr = DSI8xFrames;
     a52:	87 e4       	ldi	r24, 0x47	; 71
     a54:	91 e2       	ldi	r25, 0x21	; 33
     a56:	80 93 45 21 	sts	0x2145, r24	; 0x802145 <framePtr>
     a5a:	90 93 46 21 	sts	0x2146, r25	; 0x802146 <framePtr+0x1>
	TCD5.INTFLAGS |= TC5_OVFIF_bm;
     a5e:	e0 e4       	ldi	r30, 0x40	; 64
     a60:	f9 e0       	ldi	r31, 0x09	; 9
     a62:	84 85       	ldd	r24, Z+12	; 0x0c
     a64:	81 60       	ori	r24, 0x01	; 1
     a66:	84 87       	std	Z+12, r24	; 0x0c
	TCD5.INTCTRLA = TC_OVFINTLVL_HI_gc;
     a68:	83 e0       	ldi	r24, 0x03	; 3
     a6a:	86 83       	std	Z+6, r24	; 0x06
}
     a6c:	26 c0       	rjmp	.+76     	; 0xaba <__LOCK_REGION_LENGTH__+0x6ba>
				else //Level needs to be raised
				{
					tempLvl += ((-tempLvl > delta) ? delta : -tempLvl) + (int16_t)_lvl[s];
					if (!gLevels[j] && tempLvl > 0) //Lamp has been switched on - remember ticks
					{
						_onTimeStamp = sysState.sysTick;
     a6e:	ac e0       	ldi	r26, 0x0C	; 12
     a70:	b1 e2       	ldi	r27, 0x21	; 33
     a72:	2c 91       	ld	r18, X
     a74:	23 8f       	std	Z+27, r18	; 0x1b
     a76:	20 91 0d 21 	lds	r18, 0x210D	; 0x80210d <sysState+0x1>
     a7a:	24 8f       	std	Z+28, r18	; 0x1c
     a7c:	20 91 0e 21 	lds	r18, 0x210E	; 0x80210e <sysState+0x2>
     a80:	25 8f       	std	Z+29, r18	; 0x1d
     a82:	20 91 0f 21 	lds	r18, 0x210F	; 0x80210f <sysState+0x3>
     a86:	26 8f       	std	Z+30, r18	; 0x1e
     a88:	20 91 10 21 	lds	r18, 0x2110	; 0x802110 <sysState+0x4>
     a8c:	27 8f       	std	Z+31, r18	; 0x1f
     a8e:	20 91 11 21 	lds	r18, 0x2111	; 0x802111 <sysState+0x5>
     a92:	20 a3       	std	Z+32, r18	; 0x20
     a94:	20 91 12 21 	lds	r18, 0x2112	; 0x802112 <sysState+0x6>
     a98:	21 a3       	std	Z+33, r18	; 0x21
     a9a:	20 91 13 21 	lds	r18, 0x2113	; 0x802113 <sysState+0x7>
     a9e:	22 a3       	std	Z+34, r18	; 0x22
						trfReq = true;
					}
				}
				gLevels[j] = tempLvl;
     aa0:	44 0f       	add	r20, r20
     aa2:	55 1f       	adc	r21, r21
     aa4:	43 5a       	subi	r20, 0xA3	; 163
     aa6:	5e 4d       	sbci	r21, 0xDE	; 222
     aa8:	da 01       	movw	r26, r20
     aaa:	8d 93       	st	X+, r24
     aac:	9c 93       	st	X, r25
     aae:	99 cd       	rjmp	.-1230   	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
     ab0:	a4 e1       	ldi	r26, 0x14	; 20
     ab2:	b1 e2       	ldi	r27, 0x21	; 33
	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
		
		for (uint8_t i = 0; i < _linkCnt; i++)
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	e9 ce       	rjmp	.-558    	; 0x88c <__LOCK_REGION_LENGTH__+0x48c>
	else
		rs485busy = rxMark - 1;
	framePtr = DSI8xFrames;
	TCD5.INTFLAGS |= TC5_OVFIF_bm;
	TCD5.INTCTRLA = TC_OVFINTLVL_HI_gc;
}
     aba:	2c 96       	adiw	r28, 0x0c	; 12
     abc:	cd bf       	out	0x3d, r28	; 61
     abe:	de bf       	out	0x3e, r29	; 62
     ac0:	df 91       	pop	r29
     ac2:	cf 91       	pop	r28
     ac4:	ff 91       	pop	r31
     ac6:	ef 91       	pop	r30
     ac8:	bf 91       	pop	r27
     aca:	af 91       	pop	r26
     acc:	9f 91       	pop	r25
     ace:	8f 91       	pop	r24
     ad0:	7f 91       	pop	r23
     ad2:	6f 91       	pop	r22
     ad4:	5f 91       	pop	r21
     ad6:	4f 91       	pop	r20
     ad8:	3f 91       	pop	r19
     ada:	2f 91       	pop	r18
     adc:	1f 91       	pop	r17
     ade:	0f 91       	pop	r16
     ae0:	ff 90       	pop	r15
     ae2:	ef 90       	pop	r14
     ae4:	df 90       	pop	r13
     ae6:	cf 90       	pop	r12
     ae8:	bf 90       	pop	r11
     aea:	af 90       	pop	r10
     aec:	9f 90       	pop	r9
     aee:	8f 90       	pop	r8
     af0:	7f 90       	pop	r7
     af2:	6f 90       	pop	r6
     af4:	5f 90       	pop	r5
     af6:	4f 90       	pop	r4
     af8:	3f 90       	pop	r3
     afa:	2f 90       	pop	r2
     afc:	0f 90       	pop	r0
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	0f 90       	pop	r0
     b02:	1f 90       	pop	r1
     b04:	18 95       	reti

00000b06 <__vector_34>:

ISR(ADCA_CH0_vect)
{
     b06:	1f 92       	push	r1
     b08:	0f 92       	push	r0
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	0f 92       	push	r0
     b0e:	11 24       	eor	r1, r1
     b10:	af 92       	push	r10
     b12:	bf 92       	push	r11
     b14:	df 92       	push	r13
     b16:	ef 92       	push	r14
     b18:	ff 92       	push	r15
     b1a:	0f 93       	push	r16
     b1c:	1f 93       	push	r17
     b1e:	2f 93       	push	r18
     b20:	3f 93       	push	r19
     b22:	4f 93       	push	r20
     b24:	5f 93       	push	r21
     b26:	6f 93       	push	r22
     b28:	7f 93       	push	r23
     b2a:	8f 93       	push	r24
     b2c:	9f 93       	push	r25
     b2e:	af 93       	push	r26
     b30:	bf 93       	push	r27
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	ef 93       	push	r30
     b38:	ff 93       	push	r31
	static uint8_t sAdcCnt = 0;
	int16_t result = ADCA.CH0RES;
     b3a:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__TEXT_REGION_LENGTH__+0x700210>
     b3e:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__TEXT_REGION_LENGTH__+0x700211>
	if (sAdcCnt < 4 && LINK_VALID_MIN < result && result < LINK_VALID_MAX)
     b42:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <_edata>
     b46:	24 30       	cpi	r18, 0x04	; 4
     b48:	08 f0       	brcs	.+2      	; 0xb4c <__vector_34+0x46>
     b4a:	30 c1       	rjmp	.+608    	; 0xdac <__vector_34+0x2a6>
     b4c:	bc 01       	movw	r22, r24
     b4e:	6e 5e       	subi	r22, 0xEE	; 238
     b50:	73 41       	sbci	r23, 0x13	; 19
     b52:	6b 36       	cpi	r22, 0x6B	; 107
     b54:	77 46       	sbci	r23, 0x67	; 103
     b56:	08 f0       	brcs	.+2      	; 0xb5a <__vector_34+0x54>
     b58:	1a c1       	rjmp	.+564    	; 0xd8e <__vector_34+0x288>
	{
		sysState.linksMask |= (1 << sAdcCnt); //Set 'valid' bit
     b5a:	a2 2e       	mov	r10, r18
     b5c:	b1 2c       	mov	r11, r1
     b5e:	ec e0       	ldi	r30, 0x0C	; 12
     b60:	f1 e2       	ldi	r31, 0x21	; 33
     b62:	61 e0       	ldi	r22, 0x01	; 1
     b64:	70 e0       	ldi	r23, 0x00	; 0
     b66:	02 2e       	mov	r0, r18
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <__vector_34+0x68>
     b6a:	66 0f       	add	r22, r22
     b6c:	77 1f       	adc	r23, r23
     b6e:	0a 94       	dec	r0
     b70:	e2 f7       	brpl	.-8      	; 0xb6a <__vector_34+0x64>
     b72:	35 89       	ldd	r19, Z+21	; 0x15
     b74:	36 2b       	or	r19, r22
     b76:	35 8b       	std	Z+21, r19	; 0x15
		if (result < LINK_ON_BARRIER)
     b78:	85 34       	cpi	r24, 0x45	; 69
     b7a:	6b e1       	ldi	r22, 0x1B	; 27
     b7c:	96 07       	cpc	r25, r22
     b7e:	0c f0       	brlt	.+2      	; 0xb82 <__vector_34+0x7c>
     b80:	73 c0       	rjmp	.+230    	; 0xc68 <__vector_34+0x162>
		{
			result = 0;
			if (sysState.linksMask & (0x10 << sAdcCnt)) //Previous level was non-zero
     b82:	60 e1       	ldi	r22, 0x10	; 16
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	02 2e       	mov	r0, r18
     b88:	02 c0       	rjmp	.+4      	; 0xb8e <__vector_34+0x88>
     b8a:	66 0f       	add	r22, r22
     b8c:	77 1f       	adc	r23, r23
     b8e:	0a 94       	dec	r0
     b90:	e2 f7       	brpl	.-8      	; 0xb8a <__vector_34+0x84>
     b92:	83 2f       	mov	r24, r19
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	86 23       	and	r24, r22
     b98:	97 23       	and	r25, r23
     b9a:	89 2b       	or	r24, r25
     b9c:	09 f4       	brne	.+2      	; 0xba0 <__vector_34+0x9a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <__vector_34+0x158>
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
     ba0:	83 e2       	ldi	r24, 0x23	; 35
     ba2:	8a 9d       	mul	r24, r10
     ba4:	d0 01       	movw	r26, r0
     ba6:	8b 9d       	mul	r24, r11
     ba8:	b0 0d       	add	r27, r0
     baa:	11 24       	eor	r1, r1
     bac:	a0 5f       	subi	r26, 0xF0	; 240
     bae:	bf 4d       	sbci	r27, 0xDF	; 223
     bb0:	12 96       	adiw	r26, 0x02	; 2
     bb2:	ec 91       	ld	r30, X
     bb4:	12 97       	sbiw	r26, 0x02	; 2
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	e4 5f       	subi	r30, 0xF4	; 244
     bba:	fe 4d       	sbci	r31, 0xDE	; 222
     bbc:	11 8a       	std	Z+17, r1	; 0x11
		
		for (uint8_t i = 0; i < _linkCnt; i++)
     bbe:	11 96       	adiw	r26, 0x01	; 1
     bc0:	dc 90       	ld	r13, X
     bc2:	dd 20       	and	r13, r13
     bc4:	11 f1       	breq	.+68     	; 0xc0a <__vector_34+0x104>
     bc6:	c3 e2       	ldi	r28, 0x23	; 35
     bc8:	2c 9f       	mul	r18, r28
     bca:	c0 01       	movw	r24, r0
     bcc:	11 24       	eor	r1, r1
     bce:	8d 5e       	subi	r24, 0xED	; 237
     bd0:	9f 4d       	sbci	r25, 0xDF	; 223
     bd2:	00 e0       	ldi	r16, 0x00	; 0
     bd4:	10 e0       	ldi	r17, 0x00	; 0
     bd6:	dc 01       	movw	r26, r24
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     bd8:	ec 91       	ld	r30, X
     bda:	01 96       	adiw	r24, 0x01	; 1
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	ee 0f       	add	r30, r30
     be0:	ff 1f       	adc	r31, r31
     be2:	e3 5a       	subi	r30, 0xA3	; 163
     be4:	fe 4d       	sbci	r31, 0xDE	; 222
     be6:	e0 80       	ld	r14, Z
     be8:	f1 80       	ldd	r15, Z+1	; 0x01
     bea:	13 96       	adiw	r26, 0x03	; 3
     bec:	4c 91       	ld	r20, X
     bee:	50 e0       	ldi	r21, 0x00	; 0
     bf0:	e1 e0       	ldi	r30, 0x01	; 1
     bf2:	4e 15       	cp	r20, r14
     bf4:	5f 05       	cpc	r21, r15
     bf6:	09 f4       	brne	.+2      	; 0xbfa <__vector_34+0xf4>
     bf8:	e0 e0       	ldi	r30, 0x00	; 0
     bfa:	0e 2b       	or	r16, r30
			if (!level || !_difLvl[i]) //Set zero level directly
				_lvl[i] = 0;
     bfc:	fc 01       	movw	r30, r24
     bfe:	12 82       	std	Z+2, r1	; 0x02
	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
		
		for (uint8_t i = 0; i < _linkCnt; i++)
     c00:	1f 5f       	subi	r17, 0xFF	; 255
     c02:	d1 12       	cpse	r13, r17
     c04:	e8 cf       	rjmp	.-48     	; 0xbd6 <__vector_34+0xd0>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     c06:	01 11       	cpse	r16, r1
     c08:	2a c0       	rjmp	.+84     	; 0xc5e <__vector_34+0x158>
			_tickLastChg = sysState.sysTick;
     c0a:	43 e2       	ldi	r20, 0x23	; 35
     c0c:	4a 9d       	mul	r20, r10
     c0e:	c0 01       	movw	r24, r0
     c10:	4b 9d       	mul	r20, r11
     c12:	90 0d       	add	r25, r0
     c14:	11 24       	eor	r1, r1
     c16:	ec 01       	movw	r28, r24
     c18:	c0 5f       	subi	r28, 0xF0	; 240
     c1a:	df 4d       	sbci	r29, 0xDF	; 223
     c1c:	de 01       	movw	r26, r28
     c1e:	53 96       	adiw	r26, 0x13	; 19
     c20:	ec e0       	ldi	r30, 0x0C	; 12
     c22:	f1 e2       	ldi	r31, 0x21	; 33
     c24:	80 81       	ld	r24, Z
     c26:	8b 8b       	std	Y+19, r24	; 0x13
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	11 96       	adiw	r26, 0x01	; 1
     c2c:	8c 93       	st	X, r24
     c2e:	11 97       	sbiw	r26, 0x01	; 1
     c30:	82 81       	ldd	r24, Z+2	; 0x02
     c32:	12 96       	adiw	r26, 0x02	; 2
     c34:	8c 93       	st	X, r24
     c36:	12 97       	sbiw	r26, 0x02	; 2
     c38:	83 81       	ldd	r24, Z+3	; 0x03
     c3a:	13 96       	adiw	r26, 0x03	; 3
     c3c:	8c 93       	st	X, r24
     c3e:	13 97       	sbiw	r26, 0x03	; 3
     c40:	84 81       	ldd	r24, Z+4	; 0x04
     c42:	14 96       	adiw	r26, 0x04	; 4
     c44:	8c 93       	st	X, r24
     c46:	14 97       	sbiw	r26, 0x04	; 4
     c48:	85 81       	ldd	r24, Z+5	; 0x05
     c4a:	15 96       	adiw	r26, 0x05	; 5
     c4c:	8c 93       	st	X, r24
     c4e:	15 97       	sbiw	r26, 0x05	; 5
     c50:	86 81       	ldd	r24, Z+6	; 0x06
     c52:	16 96       	adiw	r26, 0x06	; 6
     c54:	8c 93       	st	X, r24
     c56:	16 97       	sbiw	r26, 0x06	; 6
     c58:	87 81       	ldd	r24, Z+7	; 0x07
     c5a:	17 96       	adiw	r26, 0x07	; 7
     c5c:	8c 93       	st	X, r24
		if (result < LINK_ON_BARRIER)
		{
			result = 0;
			if (sysState.linksMask & (0x10 << sAdcCnt)) //Previous level was non-zero
				links[sAdcCnt].setLevel(0);
			sysState.linksMask &= ~(0x10 << sAdcCnt); //Clear 'non-zero' bit
     c5e:	60 95       	com	r22
     c60:	36 23       	and	r19, r22
     c62:	30 93 21 21 	sts	0x2121, r19	; 0x802121 <sysState+0x15>
     c66:	7b c1       	rjmp	.+758    	; 0xf5e <__vector_34+0x458>
		}
		else
		{
			result = (result - LINK_1PERC_CODE) / LINK_SCALE;
     c68:	80 59       	subi	r24, 0x90	; 144
     c6a:	91 42       	sbci	r25, 0x21	; 33
     c6c:	64 e5       	ldi	r22, 0x54	; 84
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	0e 94 de 09 	call	0x13bc	; 0x13bc <__divmodhi4>
			if (result < 5)
     c74:	65 30       	cpi	r22, 0x05	; 5
     c76:	71 05       	cpc	r23, r1
     c78:	14 f4       	brge	.+4      	; 0xc7e <__vector_34+0x178>
				result = 5;
     c7a:	65 e0       	ldi	r22, 0x05	; 5
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	6f 3f       	cpi	r22, 0xFF	; 255
     c80:	71 05       	cpc	r23, r1
     c82:	19 f0       	breq	.+6      	; 0xc8a <__vector_34+0x184>
     c84:	14 f0       	brlt	.+4      	; 0xc8a <__vector_34+0x184>
     c86:	6f ef       	ldi	r22, 0xFF	; 255
     c88:	70 e0       	ldi	r23, 0x00	; 0
			if (result > 255)
				result = 255;
			sysState.linksMask |= (0x10 << sAdcCnt); //Set 'non-zero' bit
     c8a:	80 e1       	ldi	r24, 0x10	; 16
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	02 2e       	mov	r0, r18
     c90:	02 c0       	rjmp	.+4      	; 0xc96 <__vector_34+0x190>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	0a 94       	dec	r0
     c98:	e2 f7       	brpl	.-8      	; 0xc92 <__vector_34+0x18c>
     c9a:	38 2b       	or	r19, r24
     c9c:	30 93 21 21 	sts	0x2121, r19	; 0x802121 <sysState+0x15>
			links[sAdcCnt].setLevel((uint8_t)result);
     ca0:	06 2f       	mov	r16, r22
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
     ca2:	83 e2       	ldi	r24, 0x23	; 35
     ca4:	8a 9d       	mul	r24, r10
     ca6:	d0 01       	movw	r26, r0
     ca8:	8b 9d       	mul	r24, r11
     caa:	b0 0d       	add	r27, r0
     cac:	11 24       	eor	r1, r1
     cae:	a0 5f       	subi	r26, 0xF0	; 240
     cb0:	bf 4d       	sbci	r27, 0xDF	; 223
     cb2:	12 96       	adiw	r26, 0x02	; 2
     cb4:	ec 91       	ld	r30, X
     cb6:	12 97       	sbiw	r26, 0x02	; 2
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	e4 5f       	subi	r30, 0xF4	; 244
     cbc:	fe 4d       	sbci	r31, 0xDE	; 222
     cbe:	61 8b       	std	Z+17, r22	; 0x11
		
		for (uint8_t i = 0; i < _linkCnt; i++)
     cc0:	11 96       	adiw	r26, 0x01	; 1
     cc2:	1c 91       	ld	r17, X
     cc4:	11 23       	and	r17, r17
     cc6:	c1 f1       	breq	.+112    	; 0xd38 <__vector_34+0x232>
     cc8:	f3 e2       	ldi	r31, 0x23	; 35
     cca:	2f 9f       	mul	r18, r31
     ccc:	d0 01       	movw	r26, r0
     cce:	11 24       	eor	r1, r1
     cd0:	ad 5e       	subi	r26, 0xED	; 237
     cd2:	bf 4d       	sbci	r27, 0xDF	; 223
     cd4:	50 e0       	ldi	r21, 0x00	; 0
     cd6:	30 e0       	ldi	r19, 0x00	; 0
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
			if (!level || !_difLvl[i]) //Set zero level directly
				_lvl[i] = 0;
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
     cd8:	77 27       	eor	r23, r23
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
		
		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     cda:	ed 01       	movw	r28, r26
     cdc:	e8 81       	ld	r30, Y
     cde:	11 96       	adiw	r26, 0x01	; 1
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	ee 0f       	add	r30, r30
     ce4:	ff 1f       	adc	r31, r31
     ce6:	e3 5a       	subi	r30, 0xA3	; 163
     ce8:	fe 4d       	sbci	r31, 0xDE	; 222
     cea:	01 90       	ld	r0, Z+
     cec:	f0 81       	ld	r31, Z
     cee:	e0 2d       	mov	r30, r0
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	41 e0       	ldi	r20, 0x01	; 1
     cf6:	8e 17       	cp	r24, r30
     cf8:	9f 07       	cpc	r25, r31
     cfa:	09 f4       	brne	.+2      	; 0xcfe <__vector_34+0x1f8>
     cfc:	40 e0       	ldi	r20, 0x00	; 0
     cfe:	54 2b       	or	r21, r20
			if (!level || !_difLvl[i]) //Set zero level directly
     d00:	00 23       	and	r16, r16
     d02:	29 f0       	breq	.+10     	; 0xd0e <__vector_34+0x208>
     d04:	18 96       	adiw	r26, 0x08	; 8
     d06:	8c 91       	ld	r24, X
     d08:	18 97       	sbiw	r26, 0x08	; 8
     d0a:	81 11       	cpse	r24, r1
     d0c:	04 c0       	rjmp	.+8      	; 0xd16 <__vector_34+0x210>
				_lvl[i] = 0;
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	1c 92       	st	X, r1
     d12:	12 97       	sbiw	r26, 0x02	; 2
     d14:	0c c0       	rjmp	.+24     	; 0xd2e <__vector_34+0x228>
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
     d16:	86 9f       	mul	r24, r22
     d18:	f0 01       	movw	r30, r0
     d1a:	87 9f       	mul	r24, r23
     d1c:	f0 0d       	add	r31, r0
     d1e:	11 24       	eor	r1, r1
     d20:	15 96       	adiw	r26, 0x05	; 5
     d22:	8c 91       	ld	r24, X
     d24:	15 97       	sbiw	r26, 0x05	; 5
     d26:	8f 0f       	add	r24, r31
     d28:	12 96       	adiw	r26, 0x02	; 2
     d2a:	8c 93       	st	X, r24
     d2c:	12 97       	sbiw	r26, 0x02	; 2
	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
		
		for (uint8_t i = 0; i < _linkCnt; i++)
     d2e:	3f 5f       	subi	r19, 0xFF	; 255
     d30:	13 13       	cpse	r17, r19
     d32:	d3 cf       	rjmp	.-90     	; 0xcda <__vector_34+0x1d4>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     d34:	51 11       	cpse	r21, r1
     d36:	13 c1       	rjmp	.+550    	; 0xf5e <__vector_34+0x458>
			_tickLastChg = sysState.sysTick;
     d38:	33 e2       	ldi	r19, 0x23	; 35
     d3a:	3a 9d       	mul	r19, r10
     d3c:	c0 01       	movw	r24, r0
     d3e:	3b 9d       	mul	r19, r11
     d40:	90 0d       	add	r25, r0
     d42:	11 24       	eor	r1, r1
     d44:	ec 01       	movw	r28, r24
     d46:	c0 5f       	subi	r28, 0xF0	; 240
     d48:	df 4d       	sbci	r29, 0xDF	; 223
     d4a:	de 01       	movw	r26, r28
     d4c:	53 96       	adiw	r26, 0x13	; 19
     d4e:	ec e0       	ldi	r30, 0x0C	; 12
     d50:	f1 e2       	ldi	r31, 0x21	; 33
     d52:	80 81       	ld	r24, Z
     d54:	8b 8b       	std	Y+19, r24	; 0x13
     d56:	81 81       	ldd	r24, Z+1	; 0x01
     d58:	11 96       	adiw	r26, 0x01	; 1
     d5a:	8c 93       	st	X, r24
     d5c:	11 97       	sbiw	r26, 0x01	; 1
     d5e:	82 81       	ldd	r24, Z+2	; 0x02
     d60:	12 96       	adiw	r26, 0x02	; 2
     d62:	8c 93       	st	X, r24
     d64:	12 97       	sbiw	r26, 0x02	; 2
     d66:	83 81       	ldd	r24, Z+3	; 0x03
     d68:	13 96       	adiw	r26, 0x03	; 3
     d6a:	8c 93       	st	X, r24
     d6c:	13 97       	sbiw	r26, 0x03	; 3
     d6e:	84 81       	ldd	r24, Z+4	; 0x04
     d70:	14 96       	adiw	r26, 0x04	; 4
     d72:	8c 93       	st	X, r24
     d74:	14 97       	sbiw	r26, 0x04	; 4
     d76:	85 81       	ldd	r24, Z+5	; 0x05
     d78:	15 96       	adiw	r26, 0x05	; 5
     d7a:	8c 93       	st	X, r24
     d7c:	15 97       	sbiw	r26, 0x05	; 5
     d7e:	86 81       	ldd	r24, Z+6	; 0x06
     d80:	16 96       	adiw	r26, 0x06	; 6
     d82:	8c 93       	st	X, r24
     d84:	16 97       	sbiw	r26, 0x06	; 6
     d86:	87 81       	ldd	r24, Z+7	; 0x07
     d88:	17 96       	adiw	r26, 0x07	; 7
     d8a:	8c 93       	st	X, r24
     d8c:	e8 c0       	rjmp	.+464    	; 0xf5e <__vector_34+0x458>
			links[sAdcCnt].setLevel((uint8_t)result);
		}

	}
	else if (sAdcCnt < 4)
		sysState.linksMask &= ~(0x11 << sAdcCnt); //Clear 'valid' and 'non-zero' bits
     d8e:	ec e0       	ldi	r30, 0x0C	; 12
     d90:	f1 e2       	ldi	r31, 0x21	; 33
     d92:	81 e1       	ldi	r24, 0x11	; 17
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	02 2e       	mov	r0, r18
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <__vector_34+0x298>
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	0a 94       	dec	r0
     da0:	e2 f7       	brpl	.-8      	; 0xd9a <__vector_34+0x294>
     da2:	80 95       	com	r24
     da4:	95 89       	ldd	r25, Z+21	; 0x15
     da6:	89 23       	and	r24, r25
     da8:	85 8b       	std	Z+21, r24	; 0x15
     daa:	d9 c0       	rjmp	.+434    	; 0xf5e <__vector_34+0x458>
	else //sAdcCnt == 4: MSEN channel
		msenCh.setLevel((uint8_t)(result >> 6));
     dac:	08 2e       	mov	r0, r24
     dae:	89 2f       	mov	r24, r25
     db0:	00 0c       	add	r0, r0
     db2:	88 1f       	adc	r24, r24
     db4:	99 0b       	sbc	r25, r25
     db6:	00 0c       	add	r0, r0
     db8:	88 1f       	adc	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	38 2f       	mov	r19, r24
		_onTime = validConf.msenOnTime > 5 ? validConf.msenOnTime : 6;
		_fTime = _onTime + validConf.msenLowTime;
	}
	void setLevel(uint8_t level)
	{
		if (level < MSEN_VALID_MIN || !validConf.msenOnTime || (sysState.linksMask & (0x10 << _linkNum)))
     dbe:	84 31       	cpi	r24, 0x14	; 20
     dc0:	c0 f0       	brcs	.+48     	; 0xdf2 <__vector_34+0x2ec>
     dc2:	40 91 3e 21 	lds	r20, 0x213E	; 0x80213e <validConf+0x1a>
     dc6:	44 23       	and	r20, r20
     dc8:	a1 f0       	breq	.+40     	; 0xdf2 <__vector_34+0x2ec>
     dca:	e0 91 04 20 	lds	r30, 0x2004	; 0x802004 <msenCh+0x2>
     dce:	ae 2f       	mov	r26, r30
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	40 91 21 21 	lds	r20, 0x2121	; 0x802121 <sysState+0x15>
     dd6:	64 2f       	mov	r22, r20
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	40 e1       	ldi	r20, 0x10	; 16
     ddc:	50 e0       	ldi	r21, 0x00	; 0
     dde:	0e 2e       	mov	r0, r30
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <__vector_34+0x2e0>
     de2:	44 0f       	add	r20, r20
     de4:	55 1f       	adc	r21, r21
     de6:	0a 94       	dec	r0
     de8:	e2 f7       	brpl	.-8      	; 0xde2 <__vector_34+0x2dc>
     dea:	46 23       	and	r20, r22
     dec:	57 23       	and	r21, r23
     dee:	45 2b       	or	r20, r21
     df0:	29 f0       	breq	.+10     	; 0xdfc <__vector_34+0x2f6>
		{
			_lvl = 0; //MSEN disconnected, disabled (by zero on time) or there is non-zero level from link
     df2:	e2 e0       	ldi	r30, 0x02	; 2
     df4:	f0 e2       	ldi	r31, 0x20	; 32
     df6:	13 82       	std	Z+3, r1	; 0x03
			cntDown = false;
     df8:	10 82       	st	Z, r1
     dfa:	b1 c0       	rjmp	.+354    	; 0xf5e <__vector_34+0x458>
			return;
		}
		if (level > MSEN_SEN1_TRIG && _lvl == MSEN_VALID_MIN) //Off to on transition
     dfc:	8a 33       	cpi	r24, 0x3A	; 58
     dfe:	08 f4       	brcc	.+2      	; 0xe02 <__vector_34+0x2fc>
     e00:	83 c0       	rjmp	.+262    	; 0xf08 <__vector_34+0x402>
     e02:	40 91 05 20 	lds	r20, 0x2005	; 0x802005 <msenCh+0x3>
     e06:	44 31       	cpi	r20, 0x14	; 20
     e08:	09 f0       	breq	.+2      	; 0xe0c <__vector_34+0x306>
     e0a:	7e c0       	rjmp	.+252    	; 0xf08 <__vector_34+0x402>
		{
			_lvl = level;
     e0c:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <msenCh+0x3>
		}
	}

	void setLevel(uint8_t level, bool direction) //Accepts level in the range 0…255
	{
		_dir = direction;
     e10:	83 e2       	ldi	r24, 0x23	; 35
     e12:	8a 9f       	mul	r24, r26
     e14:	e0 01       	movw	r28, r0
     e16:	8b 9f       	mul	r24, r27
     e18:	d0 0d       	add	r29, r0
     e1a:	11 24       	eor	r1, r1
     e1c:	c0 5f       	subi	r28, 0xF0	; 240
     e1e:	df 4d       	sbci	r29, 0xDF	; 223
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	37 34       	cpi	r19, 0x47	; 71
     e24:	08 f4       	brcc	.+2      	; 0xe28 <__vector_34+0x322>
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	88 83       	st	Y, r24
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
     e2a:	33 e2       	ldi	r19, 0x23	; 35
     e2c:	3a 9f       	mul	r19, r26
     e2e:	c0 01       	movw	r24, r0
     e30:	3b 9f       	mul	r19, r27
     e32:	90 0d       	add	r25, r0
     e34:	11 24       	eor	r1, r1
     e36:	80 5f       	subi	r24, 0xF0	; 240
     e38:	9f 4d       	sbci	r25, 0xDF	; 223
     e3a:	ec 01       	movw	r28, r24
     e3c:	3a 81       	ldd	r19, Y+2	; 0x02
     e3e:	c3 2f       	mov	r28, r19
     e40:	d0 e0       	ldi	r29, 0x00	; 0
     e42:	c4 5f       	subi	r28, 0xF4	; 244
     e44:	de 4d       	sbci	r29, 0xDE	; 222
     e46:	3f ef       	ldi	r19, 0xFF	; 255
     e48:	39 8b       	std	Y+17, r19	; 0x11
		
		for (uint8_t i = 0; i < _linkCnt; i++)
     e4a:	ec 01       	movw	r28, r24
     e4c:	69 81       	ldd	r22, Y+1	; 0x01
     e4e:	66 23       	and	r22, r22
     e50:	69 f1       	breq	.+90     	; 0xeac <__vector_34+0x3a6>
     e52:	d3 e2       	ldi	r29, 0x23	; 35
     e54:	ed 9f       	mul	r30, r29
     e56:	f0 01       	movw	r30, r0
     e58:	11 24       	eor	r1, r1
     e5a:	ed 5e       	subi	r30, 0xED	; 237
     e5c:	ff 4d       	sbci	r31, 0xDF	; 223
     e5e:	50 e0       	ldi	r21, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
				_lvl[i] = 0;
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
     e62:	7f ef       	ldi	r23, 0xFF	; 255
     e64:	cf 01       	movw	r24, r30
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
		
		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     e66:	40 81       	ld	r20, Z
     e68:	31 96       	adiw	r30, 0x01	; 1
     e6a:	c4 2f       	mov	r28, r20
     e6c:	d0 e0       	ldi	r29, 0x00	; 0
     e6e:	cc 0f       	add	r28, r28
     e70:	dd 1f       	adc	r29, r29
     e72:	c3 5a       	subi	r28, 0xA3	; 163
     e74:	de 4d       	sbci	r29, 0xDE	; 222
     e76:	08 81       	ld	r16, Y
     e78:	19 81       	ldd	r17, Y+1	; 0x01
     e7a:	ec 01       	movw	r28, r24
     e7c:	8b 81       	ldd	r24, Y+3	; 0x03
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	41 e0       	ldi	r20, 0x01	; 1
     e82:	80 17       	cp	r24, r16
     e84:	91 07       	cpc	r25, r17
     e86:	09 f4       	brne	.+2      	; 0xe8a <__vector_34+0x384>
     e88:	40 e0       	ldi	r20, 0x00	; 0
     e8a:	54 2b       	or	r21, r20
			if (!level || !_difLvl[i]) //Set zero level directly
     e8c:	80 85       	ldd	r24, Z+8	; 0x08
     e8e:	81 11       	cpse	r24, r1
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <__vector_34+0x390>
				_lvl[i] = 0;
     e92:	12 82       	std	Z+2, r1	; 0x02
     e94:	06 c0       	rjmp	.+12     	; 0xea2 <__vector_34+0x39c>
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
     e96:	78 9f       	mul	r23, r24
     e98:	c0 01       	movw	r24, r0
     e9a:	11 24       	eor	r1, r1
     e9c:	85 81       	ldd	r24, Z+5	; 0x05
     e9e:	89 0f       	add	r24, r25
     ea0:	82 83       	std	Z+2, r24	; 0x02
	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
		
		for (uint8_t i = 0; i < _linkCnt; i++)
     ea2:	3f 5f       	subi	r19, 0xFF	; 255
     ea4:	36 13       	cpse	r19, r22
     ea6:	de cf       	rjmp	.-68     	; 0xe64 <__vector_34+0x35e>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     ea8:	51 11       	cpse	r21, r1
     eaa:	29 c0       	rjmp	.+82     	; 0xefe <__vector_34+0x3f8>
			_tickLastChg = sysState.sysTick;
     eac:	83 e2       	ldi	r24, 0x23	; 35
     eae:	8a 9f       	mul	r24, r26
     eb0:	e0 01       	movw	r28, r0
     eb2:	8b 9f       	mul	r24, r27
     eb4:	d0 0d       	add	r29, r0
     eb6:	11 24       	eor	r1, r1
     eb8:	c0 5f       	subi	r28, 0xF0	; 240
     eba:	df 4d       	sbci	r29, 0xDF	; 223
     ebc:	de 01       	movw	r26, r28
     ebe:	53 96       	adiw	r26, 0x13	; 19
     ec0:	ec e0       	ldi	r30, 0x0C	; 12
     ec2:	f1 e2       	ldi	r31, 0x21	; 33
     ec4:	80 81       	ld	r24, Z
     ec6:	8b 8b       	std	Y+19, r24	; 0x13
     ec8:	81 81       	ldd	r24, Z+1	; 0x01
     eca:	11 96       	adiw	r26, 0x01	; 1
     ecc:	8c 93       	st	X, r24
     ece:	11 97       	sbiw	r26, 0x01	; 1
     ed0:	82 81       	ldd	r24, Z+2	; 0x02
     ed2:	12 96       	adiw	r26, 0x02	; 2
     ed4:	8c 93       	st	X, r24
     ed6:	12 97       	sbiw	r26, 0x02	; 2
     ed8:	83 81       	ldd	r24, Z+3	; 0x03
     eda:	13 96       	adiw	r26, 0x03	; 3
     edc:	8c 93       	st	X, r24
     ede:	13 97       	sbiw	r26, 0x03	; 3
     ee0:	84 81       	ldd	r24, Z+4	; 0x04
     ee2:	14 96       	adiw	r26, 0x04	; 4
     ee4:	8c 93       	st	X, r24
     ee6:	14 97       	sbiw	r26, 0x04	; 4
     ee8:	85 81       	ldd	r24, Z+5	; 0x05
     eea:	15 96       	adiw	r26, 0x05	; 5
     eec:	8c 93       	st	X, r24
     eee:	15 97       	sbiw	r26, 0x05	; 5
     ef0:	86 81       	ldd	r24, Z+6	; 0x06
     ef2:	16 96       	adiw	r26, 0x06	; 6
     ef4:	8c 93       	st	X, r24
     ef6:	16 97       	sbiw	r26, 0x06	; 6
     ef8:	87 81       	ldd	r24, Z+7	; 0x07
     efa:	17 96       	adiw	r26, 0x07	; 7
     efc:	8c 93       	st	X, r24
		}
		if (level > MSEN_SEN1_TRIG && _lvl == MSEN_VALID_MIN) //Off to on transition
		{
			_lvl = level;
			links[_linkNum].setLevel(255, level > MSEN_SEN2_TRIG); //Start from max light level
			ltEnt = cntDown = false;
     efe:	e2 e0       	ldi	r30, 0x02	; 2
     f00:	f0 e2       	ldi	r31, 0x20	; 32
     f02:	10 82       	st	Z, r1
     f04:	11 82       	std	Z+1, r1	; 0x01
     f06:	2b c0       	rjmp	.+86     	; 0xf5e <__vector_34+0x458>
			return;
		}
		if (level < MSEN_SEN1_TRIG && _lvl > level) //On to off transition
     f08:	39 33       	cpi	r19, 0x39	; 57
     f0a:	48 f5       	brcc	.+82     	; 0xf5e <__vector_34+0x458>
     f0c:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <msenCh+0x3>
     f10:	38 17       	cp	r19, r24
     f12:	28 f5       	brcc	.+74     	; 0xf5e <__vector_34+0x458>
		{
			_lvl = MSEN_VALID_MIN;
     f14:	e2 e0       	ldi	r30, 0x02	; 2
     f16:	f0 e2       	ldi	r31, 0x20	; 32
     f18:	84 e1       	ldi	r24, 0x14	; 20
     f1a:	83 83       	std	Z+3, r24	; 0x03
			_onTimeStamp = sysState.sysTick;
     f1c:	ac e0       	ldi	r26, 0x0C	; 12
     f1e:	b1 e2       	ldi	r27, 0x21	; 33
     f20:	8c 91       	ld	r24, X
     f22:	86 83       	std	Z+6, r24	; 0x06
     f24:	11 96       	adiw	r26, 0x01	; 1
     f26:	8c 91       	ld	r24, X
     f28:	11 97       	sbiw	r26, 0x01	; 1
     f2a:	87 83       	std	Z+7, r24	; 0x07
     f2c:	12 96       	adiw	r26, 0x02	; 2
     f2e:	8c 91       	ld	r24, X
     f30:	12 97       	sbiw	r26, 0x02	; 2
     f32:	80 87       	std	Z+8, r24	; 0x08
     f34:	13 96       	adiw	r26, 0x03	; 3
     f36:	8c 91       	ld	r24, X
     f38:	13 97       	sbiw	r26, 0x03	; 3
     f3a:	81 87       	std	Z+9, r24	; 0x09
     f3c:	14 96       	adiw	r26, 0x04	; 4
     f3e:	8c 91       	ld	r24, X
     f40:	14 97       	sbiw	r26, 0x04	; 4
     f42:	82 87       	std	Z+10, r24	; 0x0a
     f44:	15 96       	adiw	r26, 0x05	; 5
     f46:	8c 91       	ld	r24, X
     f48:	15 97       	sbiw	r26, 0x05	; 5
     f4a:	83 87       	std	Z+11, r24	; 0x0b
     f4c:	16 96       	adiw	r26, 0x06	; 6
     f4e:	8c 91       	ld	r24, X
     f50:	16 97       	sbiw	r26, 0x06	; 6
     f52:	84 87       	std	Z+12, r24	; 0x0c
     f54:	17 96       	adiw	r26, 0x07	; 7
     f56:	8c 91       	ld	r24, X
     f58:	85 87       	std	Z+13, r24	; 0x0d
			cntDown = true;
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	80 83       	st	Z, r24
	else if (sAdcCnt < 4)
		sysState.linksMask &= ~(0x11 << sAdcCnt); //Clear 'valid' and 'non-zero' bits
	else //sAdcCnt == 4: MSEN channel
		msenCh.setLevel((uint8_t)(result >> 6));

	sAdcCnt++;
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	82 0f       	add	r24, r18
     f62:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <_edata>
	ADCA.CH0.MUXCTRL = (sAdcCnt + 1) << ADC_CH_MUXPOS_gp;
     f66:	2e 5f       	subi	r18, 0xFE	; 254
     f68:	22 0f       	add	r18, r18
     f6a:	22 0f       	add	r18, r18
     f6c:	22 0f       	add	r18, r18
     f6e:	20 93 21 02 	sts	0x0221, r18	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
	if (sAdcCnt < 5)
     f72:	85 30       	cpi	r24, 0x05	; 5
     f74:	30 f4       	brcc	.+12     	; 0xf82 <__vector_34+0x47c>
		ADCA.CTRLA |= ADC_START_bm;
     f76:	e0 e0       	ldi	r30, 0x00	; 0
     f78:	f2 e0       	ldi	r31, 0x02	; 2
     f7a:	80 81       	ld	r24, Z
     f7c:	84 60       	ori	r24, 0x04	; 4
     f7e:	80 83       	st	Z, r24
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <__vector_34+0x480>
	else
		sAdcCnt = 0;
     f82:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <_edata>
}
     f86:	ff 91       	pop	r31
     f88:	ef 91       	pop	r30
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	bf 91       	pop	r27
     f90:	af 91       	pop	r26
     f92:	9f 91       	pop	r25
     f94:	8f 91       	pop	r24
     f96:	7f 91       	pop	r23
     f98:	6f 91       	pop	r22
     f9a:	5f 91       	pop	r21
     f9c:	4f 91       	pop	r20
     f9e:	3f 91       	pop	r19
     fa0:	2f 91       	pop	r18
     fa2:	1f 91       	pop	r17
     fa4:	0f 91       	pop	r16
     fa6:	ff 90       	pop	r15
     fa8:	ef 90       	pop	r14
     faa:	df 90       	pop	r13
     fac:	bf 90       	pop	r11
     fae:	af 90       	pop	r10
     fb0:	0f 90       	pop	r0
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	0f 90       	pop	r0
     fb6:	1f 90       	pop	r1
     fb8:	18 95       	reti

00000fba <__vector_23>:

ISR(USARTC0_RXC_vect) //Data received from RS485
{
     fba:	1f 92       	push	r1
     fbc:	0f 92       	push	r0
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	0f 92       	push	r0
     fc2:	11 24       	eor	r1, r1
     fc4:	2f 93       	push	r18
     fc6:	3f 93       	push	r19
     fc8:	4f 93       	push	r20
     fca:	5f 93       	push	r21
     fcc:	6f 93       	push	r22
     fce:	7f 93       	push	r23
     fd0:	8f 93       	push	r24
     fd2:	9f 93       	push	r25
     fd4:	af 93       	push	r26
     fd6:	bf 93       	push	r27
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	ef 93       	push	r30
     fde:	ff 93       	push	r31
	#ifndef RXC_EDMA
	static uint8_t uCnt;
	static uint8_t *rxBuf;
	#endif
	uint8_t data = USARTC0.DATA;
     fe0:	e0 ec       	ldi	r30, 0xC0	; 192
     fe2:	f8 e0       	ldi	r31, 0x08	; 8
     fe4:	80 81       	ld	r24, Z
	if (USARTC0.CTRLB & USART_MPCM_bm) //Address listening mode
     fe6:	93 81       	ldd	r25, Z+3	; 0x03
     fe8:	91 ff       	sbrs	r25, 1
     fea:	70 c0       	rjmp	.+224    	; 0x10cc <__vector_23+0x112>
	{
		if (CmdLC <= data && data <= CmdUC)
     fec:	9f ed       	ldi	r25, 0xDF	; 223
     fee:	98 0f       	add	r25, r24
     ff0:	94 30       	cpi	r25, 0x04	; 4
     ff2:	08 f0       	brcs	.+2      	; 0xff6 <__vector_23+0x3c>
     ff4:	69 c0       	rjmp	.+210    	; 0x10c8 <__vector_23+0x10e>
		{
			USARTC0.CTRLB &= ~USART_MPCM_bm; //Clear MPCM bit
     ff6:	93 81       	ldd	r25, Z+3	; 0x03
     ff8:	9d 7f       	andi	r25, 0xFD	; 253
     ffa:	93 83       	std	Z+3, r25	; 0x03
			rxMode = data;
     ffc:	80 93 5b 21 	sts	0x215B, r24	; 0x80215b <rxMode>
			if (data == SetConfig)
    1000:	83 32       	cpi	r24, 0x23	; 35
    1002:	79 f4       	brne	.+30     	; 0x1022 <__vector_23+0x68>
			{
				rxMark = (uint8_t)sysState.sysTick;
    1004:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <sysState>
    1008:	80 93 5a 21 	sts	0x215A, r24	; 0x80215a <rxMark>
				#ifdef RXC_EDMA
				EDMA.CH0.TRFCNT = sizeof(systemConfig); //Bytes to receive into iobuf
    100c:	e0 e0       	ldi	r30, 0x00	; 0
    100e:	f1 e0       	ldi	r31, 0x01	; 1
    1010:	81 e2       	ldi	r24, 0x21	; 33
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	86 8b       	std	Z+22, r24	; 0x16
    1016:	97 8b       	std	Z+23, r25	; 0x17
				EDMA.CH0.CTRLA = EDMA_CH_ENABLE_bm | EDMA_CH_SINGLE_bm;
    1018:	84 e8       	ldi	r24, 0x84	; 132
    101a:	80 8b       	std	Z+16, r24	; 0x10
				USARTC0.CTRLA = USART_RXCINTLVL_OFF_gc; //Disable interrupt
    101c:	10 92 c2 08 	sts	0x08C2, r1	; 0x8008c2 <__TEXT_REGION_LENGTH__+0x7008c2>
    1020:	55 c0       	rjmp	.+170    	; 0x10cc <__vector_23+0x112>
0, 30, 96,	//Motion sensor on time, low time, low level
0, 0, 0};	//ninthLvl, rtcCorrect, CRC16

void inline UCTXen()
{
	PORTC.OUTSET = PIN1_bm;
    1022:	82 e0       	ldi	r24, 0x02	; 2
    1024:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1028:	85 e1       	ldi	r24, 0x15	; 21
    102a:	8a 95       	dec	r24
    102c:	f1 f7       	brne	.-4      	; 0x102a <__vector_23+0x70>
    102e:	00 00       	nop
				#endif
			}
			else //Data transmit request
			{
				UCTXen();
				if (rxMode == GetConfig)
    1030:	80 91 5b 21 	lds	r24, 0x215B	; 0x80215b <rxMode>
    1034:	82 32       	cpi	r24, 0x22	; 34
    1036:	59 f4       	brne	.+22     	; 0x104e <__vector_23+0x94>
				{
					EDMA.CH1.TRFCNT = sizeof(systemConfig);
    1038:	e0 e0       	ldi	r30, 0x00	; 0
    103a:	f1 e0       	ldi	r31, 0x01	; 1
    103c:	81 e2       	ldi	r24, 0x21	; 33
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	86 a3       	std	Z+38, r24	; 0x26
    1042:	97 a3       	std	Z+39, r25	; 0x27
					EDMA.CH1.ADDR = (uint16_t)&validConf;
    1044:	84 e2       	ldi	r24, 0x24	; 36
    1046:	91 e2       	ldi	r25, 0x21	; 33
    1048:	80 a7       	std	Z+40, r24	; 0x28
    104a:	91 a7       	std	Z+41, r25	; 0x29
    104c:	39 c0       	rjmp	.+114    	; 0x10c0 <__vector_23+0x106>
				}
				else if (rxMode == GetStatus) //Get state
    104e:	80 91 5b 21 	lds	r24, 0x215B	; 0x80215b <rxMode>
    1052:	81 32       	cpi	r24, 0x21	; 33
    1054:	c9 f4       	brne	.+50     	; 0x1088 <__vector_23+0xce>
				{
					memcpy(iobuf, &sysState, sizeof(systemState));
    1056:	cc e9       	ldi	r28, 0x9C	; 156
    1058:	d0 e2       	ldi	r29, 0x20	; 32
    105a:	88 e1       	ldi	r24, 0x18	; 24
    105c:	ec e0       	ldi	r30, 0x0C	; 12
    105e:	f1 e2       	ldi	r31, 0x21	; 33
    1060:	de 01       	movw	r26, r28
    1062:	01 90       	ld	r0, Z+
    1064:	0d 92       	st	X+, r0
    1066:	8a 95       	dec	r24
    1068:	e1 f7       	brne	.-8      	; 0x1062 <__vector_23+0xa8>
					((systemState*)iobuf)->CRC16 = CalculateCRC16(iobuf, sizeof(systemState) - 2);
    106a:	66 e1       	ldi	r22, 0x16	; 22
    106c:	ce 01       	movw	r24, r28
    106e:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pvh>
    1072:	8e 8b       	std	Y+22, r24	; 0x16
    1074:	9f 8b       	std	Y+23, r25	; 0x17
					EDMA.CH1.TRFCNT = sizeof(systemState);
    1076:	e0 e0       	ldi	r30, 0x00	; 0
    1078:	f1 e0       	ldi	r31, 0x01	; 1
    107a:	88 e1       	ldi	r24, 0x18	; 24
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	86 a3       	std	Z+38, r24	; 0x26
    1080:	97 a3       	std	Z+39, r25	; 0x27
					EDMA.CH1.ADDR = (uint16_t)iobuf;
    1082:	c0 a7       	std	Z+40, r28	; 0x28
    1084:	d1 a7       	std	Z+41, r29	; 0x29
    1086:	1c c0       	rjmp	.+56     	; 0x10c0 <__vector_23+0x106>
				}
				else //Get on time
				{
					memcpy(iobuf, &channelOT, sizeof(channelsOnTime));
    1088:	88 e3       	ldi	r24, 0x38	; 56
    108a:	e4 ed       	ldi	r30, 0xD4	; 212
    108c:	f0 e2       	ldi	r31, 0x20	; 32
    108e:	ac e9       	ldi	r26, 0x9C	; 156
    1090:	b0 e2       	ldi	r27, 0x20	; 32
    1092:	01 90       	ld	r0, Z+
    1094:	0d 92       	st	X+, r0
    1096:	8a 95       	dec	r24
    1098:	e1 f7       	brne	.-8      	; 0x1092 <__vector_23+0xd8>
					((channelsOnTime*)iobuf)->CRC16 = CalculateCRC16(iobuf, sizeof(channelsOnTime) - 2);
    109a:	66 e3       	ldi	r22, 0x36	; 54
    109c:	8c e9       	ldi	r24, 0x9C	; 156
    109e:	90 e2       	ldi	r25, 0x20	; 32
    10a0:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pvh>
    10a4:	ac e9       	ldi	r26, 0x9C	; 156
    10a6:	b0 e2       	ldi	r27, 0x20	; 32
    10a8:	d6 96       	adiw	r26, 0x36	; 54
    10aa:	8d 93       	st	X+, r24
    10ac:	9c 93       	st	X, r25
    10ae:	d7 97       	sbiw	r26, 0x37	; 55
					EDMA.CH1.TRFCNT = sizeof(channelsOnTime);
    10b0:	e0 e0       	ldi	r30, 0x00	; 0
    10b2:	f1 e0       	ldi	r31, 0x01	; 1
    10b4:	88 e3       	ldi	r24, 0x38	; 56
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	86 a3       	std	Z+38, r24	; 0x26
    10ba:	97 a3       	std	Z+39, r25	; 0x27
					EDMA.CH1.ADDR = (uint16_t)iobuf;
    10bc:	a0 a7       	std	Z+40, r26	; 0x28
    10be:	b1 a7       	std	Z+41, r27	; 0x29
				}
				EDMA.CH1.CTRLA = EDMA_CH_ENABLE_bm | EDMA_CH_SINGLE_bm;
    10c0:	84 e8       	ldi	r24, 0x84	; 132
    10c2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <__vector_23+0x112>
			}
		}
		else
			rxMode = 0;
    10c8:	10 92 5b 21 	sts	0x215B, r1	; 0x80215b <rxMode>
			if (CalculateCRC16(iobuf, sizeof(systemConfig) - 2) == ((systemConfig*)iobuf)->CRC16)
				ApplyConfig();
		}
	}
	#endif
}
    10cc:	ff 91       	pop	r31
    10ce:	ef 91       	pop	r30
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	bf 91       	pop	r27
    10d6:	af 91       	pop	r26
    10d8:	9f 91       	pop	r25
    10da:	8f 91       	pop	r24
    10dc:	7f 91       	pop	r23
    10de:	6f 91       	pop	r22
    10e0:	5f 91       	pop	r21
    10e2:	4f 91       	pop	r20
    10e4:	3f 91       	pop	r19
    10e6:	2f 91       	pop	r18
    10e8:	0f 90       	pop	r0
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	0f 90       	pop	r0
    10ee:	1f 90       	pop	r1
    10f0:	18 95       	reti

000010f2 <__vector_3>:

#ifdef RXC_EDMA
ISR(EDMA_CH0_vect)
{
    10f2:	1f 92       	push	r1
    10f4:	0f 92       	push	r0
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	0f 92       	push	r0
    10fa:	11 24       	eor	r1, r1
    10fc:	2f 93       	push	r18
    10fe:	3f 93       	push	r19
    1100:	4f 93       	push	r20
    1102:	5f 93       	push	r21
    1104:	6f 93       	push	r22
    1106:	7f 93       	push	r23
    1108:	8f 93       	push	r24
    110a:	9f 93       	push	r25
    110c:	af 93       	push	r26
    110e:	bf 93       	push	r27
    1110:	ef 93       	push	r30
    1112:	ff 93       	push	r31
	rxMode = 0;
    1114:	10 92 5b 21 	sts	0x215B, r1	; 0x80215b <rxMode>
	USARTC0.CTRLB |= USART_MPCM_bm; //Set MPCM bit
    1118:	e0 ec       	ldi	r30, 0xC0	; 192
    111a:	f8 e0       	ldi	r31, 0x08	; 8
    111c:	83 81       	ldd	r24, Z+3	; 0x03
    111e:	82 60       	ori	r24, 0x02	; 2
    1120:	83 83       	std	Z+3, r24	; 0x03
	USARTC0.CTRLA = USART_DRIE_bm | USART_RXCINTLVL_HI_gc;
    1122:	80 e7       	ldi	r24, 0x70	; 112
    1124:	82 83       	std	Z+2, r24	; 0x02
	if (CalculateCRC16(iobuf, sizeof(systemConfig) - 2) == ((systemConfig*)iobuf)->CRC16)
    1126:	6f e1       	ldi	r22, 0x1F	; 31
    1128:	8c e9       	ldi	r24, 0x9C	; 156
    112a:	90 e2       	ldi	r25, 0x20	; 32
    112c:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pvh>
    1130:	20 91 bb 20 	lds	r18, 0x20BB	; 0x8020bb <iobuf+0x1f>
    1134:	30 91 bc 20 	lds	r19, 0x20BC	; 0x8020bc <iobuf+0x20>
    1138:	82 17       	cp	r24, r18
    113a:	93 07       	cpc	r25, r19
    113c:	11 f4       	brne	.+4      	; 0x1142 <__vector_3+0x50>
		ApplyConfig();
    113e:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z11ApplyConfigv>
}
    1142:	ff 91       	pop	r31
    1144:	ef 91       	pop	r30
    1146:	bf 91       	pop	r27
    1148:	af 91       	pop	r26
    114a:	9f 91       	pop	r25
    114c:	8f 91       	pop	r24
    114e:	7f 91       	pop	r23
    1150:	6f 91       	pop	r22
    1152:	5f 91       	pop	r21
    1154:	4f 91       	pop	r20
    1156:	3f 91       	pop	r19
    1158:	2f 91       	pop	r18
    115a:	0f 90       	pop	r0
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	0f 90       	pop	r0
    1160:	1f 90       	pop	r1
    1162:	18 95       	reti

00001164 <__vector_4>:
#endif

ISR(EDMA_CH1_vect) //Packet has been sent completely over RS485
{
    1164:	1f 92       	push	r1
    1166:	0f 92       	push	r0
    1168:	0f b6       	in	r0, 0x3f	; 63
    116a:	0f 92       	push	r0
    116c:	11 24       	eor	r1, r1
    116e:	8f 93       	push	r24
    1170:	ef 93       	push	r30
    1172:	ff 93       	push	r31
	UCRXen(); //Set bus in the idle state
    1174:	84 e0       	ldi	r24, 0x04	; 4
    1176:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	rxMode = 0;
    117a:	10 92 5b 21 	sts	0x215B, r1	; 0x80215b <rxMode>
	EDMA.CH1.CTRLB |= EDMA_CH_TRNIF_bm;
    117e:	e0 e0       	ldi	r30, 0x00	; 0
    1180:	f1 e0       	ldi	r31, 0x01	; 1
    1182:	81 a1       	ldd	r24, Z+33	; 0x21
    1184:	80 61       	ori	r24, 0x10	; 16
    1186:	81 a3       	std	Z+33, r24	; 0x21
}
    1188:	ff 91       	pop	r31
    118a:	ef 91       	pop	r30
    118c:	8f 91       	pop	r24
    118e:	0f 90       	pop	r0
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	0f 90       	pop	r0
    1194:	1f 90       	pop	r1
    1196:	18 95       	reti

00001198 <__vector_36>:

ISR(TCD5_OVF_vect)
{
    1198:	1f 92       	push	r1
    119a:	0f 92       	push	r0
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	0f 92       	push	r0
    11a0:	11 24       	eor	r1, r1
    11a2:	2f 93       	push	r18
    11a4:	8f 93       	push	r24
    11a6:	9f 93       	push	r25
    11a8:	ef 93       	push	r30
    11aa:	ff 93       	push	r31
	PORTD.OUT = *framePtr++;
    11ac:	e0 91 45 21 	lds	r30, 0x2145	; 0x802145 <framePtr>
    11b0:	f0 91 46 21 	lds	r31, 0x2146	; 0x802146 <framePtr+0x1>
    11b4:	cf 01       	movw	r24, r30
    11b6:	01 96       	adiw	r24, 0x01	; 1
    11b8:	80 93 45 21 	sts	0x2145, r24	; 0x802145 <framePtr>
    11bc:	90 93 46 21 	sts	0x2146, r25	; 0x802146 <framePtr+0x1>
    11c0:	20 81       	ld	r18, Z
    11c2:	20 93 64 06 	sts	0x0664, r18	; 0x800664 <__TEXT_REGION_LENGTH__+0x700664>
	if (framePtr == DSI8xFrames + sizeof(DSI8xFrames) - 1)
    11c6:	89 55       	subi	r24, 0x59	; 89
    11c8:	91 42       	sbci	r25, 0x21	; 33
    11ca:	11 f4       	brne	.+4      	; 0x11d0 <__vector_36+0x38>
		TCD5.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    11cc:	10 92 46 09 	sts	0x0946, r1	; 0x800946 <__TEXT_REGION_LENGTH__+0x700946>
	TCD5.INTFLAGS = TC5_OVFIF_bm;
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <__TEXT_REGION_LENGTH__+0x70094c>
}
    11d6:	ff 91       	pop	r31
    11d8:	ef 91       	pop	r30
    11da:	9f 91       	pop	r25
    11dc:	8f 91       	pop	r24
    11de:	2f 91       	pop	r18
    11e0:	0f 90       	pop	r0
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	0f 90       	pop	r0
    11e6:	1f 90       	pop	r1
    11e8:	18 95       	reti

000011ea <_Z7mcuInitv>:

inline void mcuInit()
{
	//Port A configuration: 0-5 analog inputs, 7 inverted output
	PORTA.DIRSET = PIN7_bm;
    11ea:	e0 e0       	ldi	r30, 0x00	; 0
    11ec:	f6 e0       	ldi	r31, 0x06	; 6
    11ee:	80 e8       	ldi	r24, 0x80	; 128
    11f0:	81 83       	std	Z+1, r24	; 0x01
	PORTCFG.MPCMASK = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm;
    11f2:	a0 eb       	ldi	r26, 0xB0	; 176
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	8f e3       	ldi	r24, 0x3F	; 63
    11f8:	8c 93       	st	X, r24
	PORTA.PIN0CTRL = PORT_OPC_TOTEM_gc | PORT_ISC_INPUT_DISABLE_gc;
    11fa:	87 e0       	ldi	r24, 0x07	; 7
    11fc:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN7CTRL = PORT_OPC_TOTEM_gc | PORT_INVEN_bm;
    11fe:	80 e4       	ldi	r24, 0x40	; 64
    1200:	87 8b       	std	Z+23, r24	; 0x17
	//Port C configuration: 0-1, 3-7 outputs
	PORTC.DIRSET = PIN0_bm | PIN1_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
    1202:	8b ef       	ldi	r24, 0xFB	; 251
    1204:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
	//Port D configuration: 0-7 inverted outputs
	PORTD.DIRSET = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
    1208:	e0 e6       	ldi	r30, 0x60	; 96
    120a:	f6 e0       	ldi	r31, 0x06	; 6
    120c:	8f ef       	ldi	r24, 0xFF	; 255
    120e:	81 83       	std	Z+1, r24	; 0x01
	PORTCFG.MPCMASK = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
    1210:	8c 93       	st	X, r24
	PORTD.PIN0CTRL = PORT_OPC_TOTEM_gc | PORT_INVEN_bm | PORT_ISC_INPUT_DISABLE_gc;
    1212:	87 e4       	ldi	r24, 0x47	; 71
    1214:	80 8b       	std	Z+16, r24	; 0x10
	//Clock configuration: 32MHz RC with DFLL from XOSC 32768Hz
	OSC.XOSCCTRL = OSC_XOSCSEL_32KHz_gc;
    1216:	e0 e5       	ldi	r30, 0x50	; 80
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	82 e0       	ldi	r24, 0x02	; 2
    121c:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |= OSC_RC32MEN_bm | OSC_XOSCEN_bm;
    121e:	80 81       	ld	r24, Z
    1220:	8a 60       	ori	r24, 0x0A	; 10
    1222:	80 83       	st	Z, r24
	while (!(OSC.STATUS & OSC_XOSCRDY_bm));
    1224:	81 81       	ldd	r24, Z+1	; 0x01
    1226:	83 ff       	sbrs	r24, 3
    1228:	fd cf       	rjmp	.-6      	; 0x1224 <_Z7mcuInitv+0x3a>
	while (!(OSC.STATUS & OSC_RC32MRDY_bm));
    122a:	e0 e5       	ldi	r30, 0x50	; 80
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	81 81       	ldd	r24, Z+1	; 0x01
    1230:	81 ff       	sbrs	r24, 1
    1232:	fd cf       	rjmp	.-6      	; 0x122e <_Z7mcuInitv+0x44>
	OSC.DFLLCTRL = OSC_RC32MCREF_XOSC32K_gc;
    1234:	a0 e5       	ldi	r26, 0x50	; 80
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	82 e0       	ldi	r24, 0x02	; 2
    123a:	16 96       	adiw	r26, 0x06	; 6
    123c:	8c 93       	st	X, r24
    123e:	16 97       	sbiw	r26, 0x06	; 6
	DFLLRC32M.CTRL = DFLL_ENABLE_bm;
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
	CCP = CCP_IOREG_gc;
    1246:	98 ed       	ldi	r25, 0xD8	; 216
    1248:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
    124a:	e0 e4       	ldi	r30, 0x40	; 64
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 83       	st	Z, r24
	OSC.CTRL = OSC_RC32MEN_bm | OSC_XOSCEN_bm; //Disable unused clock sources
    1250:	8a e0       	ldi	r24, 0x0A	; 10
    1252:	8c 93       	st	X, r24
	CLK.RTCCTRL = CLK_RTCSRC_TOSC_gc | CLK_RTCEN_bm; //1024Hz RTC clock source
    1254:	83 e0       	ldi	r24, 0x03	; 3
    1256:	83 83       	std	Z+3, r24	; 0x03
	while (RTC.STATUS & RTC_SYNCBUSY_bm);
    1258:	e0 e0       	ldi	r30, 0x00	; 0
    125a:	f4 e0       	ldi	r31, 0x04	; 4
    125c:	81 81       	ldd	r24, Z+1	; 0x01
    125e:	80 fd       	sbrc	r24, 0
    1260:	fd cf       	rjmp	.-6      	; 0x125c <_Z7mcuInitv+0x72>
	CCP = CCP_IOREG_gc;
    1262:	88 ed       	ldi	r24, 0xD8	; 216
    1264:	84 bf       	out	0x34, r24	; 52
	CLK.LOCK = CLK_LOCK_bm; //Disable further changes in clock system
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	80 93 42 00 	sts	0x0042, r24	; 0x800042 <__TEXT_REGION_LENGTH__+0x700042>
	//PMIC: enable interrupts
	PMIC.CTRL = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
    126c:	47 e0       	ldi	r20, 0x07	; 7
    126e:	40 93 a2 00 	sts	0x00A2, r20	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	//RTC configuration: 1024 / 2 = 512Hz clock, medium level interrupt
	RTC.PER = 16; //32 overflows per second
    1272:	e0 e0       	ldi	r30, 0x00	; 0
    1274:	f4 e0       	ldi	r31, 0x04	; 4
    1276:	20 e1       	ldi	r18, 0x10	; 16
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	22 87       	std	Z+10, r18	; 0x0a
    127c:	33 87       	std	Z+11, r19	; 0x0b
	RTC.INTCTRL = RTC_OVFINTLVL_MED_gc;
    127e:	92 e0       	ldi	r25, 0x02	; 2
    1280:	92 83       	std	Z+2, r25	; 0x02
	RTC.CTRL = RTC_PRESCALER_DIV2_gc;
    1282:	90 83       	st	Z, r25
	RTC.CNT = 0;
    1284:	10 86       	std	Z+8, r1	; 0x08
    1286:	11 86       	std	Z+9, r1	; 0x09
	//USARTC configuration: start / 9 data / 2 stop; 76.8kbps baud, multi-processor communication
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm | USART_MPCM_bm;
    1288:	e0 ec       	ldi	r30, 0xC0	; 192
    128a:	f8 e0       	ldi	r31, 0x08	; 8
    128c:	9a e1       	ldi	r25, 0x1A	; 26
    128e:	93 83       	std	Z+3, r25	; 0x03
	USARTC0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_SBMODE_bm | USART_CHSIZE_9BIT_gc;
    1290:	9f e0       	ldi	r25, 0x0F	; 15
    1292:	94 83       	std	Z+4, r25	; 0x04
	USARTC0.BAUDCTRLA = 12;
    1294:	9c e0       	ldi	r25, 0x0C	; 12
    1296:	96 83       	std	Z+6, r25	; 0x06
	USARTC0.BAUDCTRLB = 1 << USART_BSCALE_gp;
    1298:	30 e1       	ldi	r19, 0x10	; 16
    129a:	37 83       	std	Z+7, r19	; 0x07
	USARTC0.CTRLA = USART_DRIE_bm | USART_RXCINTLVL_MED_gc;
    129c:	90 e6       	ldi	r25, 0x60	; 96
    129e:	92 83       	std	Z+2, r25	; 0x02
	//ADC configuration: 1MHz, 15bit oversampling
	ADCA.CTRLA = ADC_ENABLE_bm;
    12a0:	e0 e0       	ldi	r30, 0x00	; 0
    12a2:	f2 e0       	ldi	r31, 0x02	; 2
    12a4:	80 83       	st	Z, r24
	ADCA.CTRLB = ADC_CONMODE_bm | ADC_RESOLUTION_MT12BIT_gc; //Signed mode
    12a6:	92 e1       	ldi	r25, 0x12	; 18
    12a8:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;
    12aa:	90 e2       	ldi	r25, 0x20	; 32
    12ac:	92 83       	std	Z+2, r25	; 0x02
	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc;
    12ae:	23 e0       	ldi	r18, 0x03	; 3
    12b0:	24 83       	std	Z+4, r18	; 0x04
	ADCA.SAMPCTRL = 7 << ADC_SAMPVAL_gp;
    12b2:	40 87       	std	Z+8, r20	; 0x08
	ADCA.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc | ADC_CH_GAIN_1X_gc;
    12b4:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.CH0.INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc;
    12b6:	82 a3       	std	Z+34, r24	; 0x22
	ADCA.CH0.AVGCTRL = ADC_CH_SAMPNUM_16X_gc; //This will produce 15 bit result
    12b8:	44 e0       	ldi	r20, 0x04	; 4
    12ba:	44 a7       	std	Z+44, r20	; 0x2c
	//TCC4 configuration: 8MHz, dual slope 244Hz (heartbeat LED)
	TCC4.CTRLA = TC_CLKSEL_DIV4_gc;
    12bc:	e0 e0       	ldi	r30, 0x00	; 0
    12be:	f8 e0       	ldi	r31, 0x08	; 8
    12c0:	20 83       	st	Z, r18
	TCC4.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_DSTOP_gc;
    12c2:	25 e0       	ldi	r18, 0x05	; 5
    12c4:	21 83       	std	Z+1, r18	; 0x01
	TCC4.CTRLC = TC4_POLA_bm;
    12c6:	32 83       	std	Z+2, r19	; 0x02
	TCC4.CTRLE = TC_CCAMODE_COMP_gc;
    12c8:	84 83       	std	Z+4, r24	; 0x04
	TCC4.PERBUF = 16384;
    12ca:	40 e0       	ldi	r20, 0x00	; 0
    12cc:	50 e4       	ldi	r21, 0x40	; 64
    12ce:	46 ab       	std	Z+54, r20	; 0x36
    12d0:	57 ab       	std	Z+55, r21	; 0x37
	TCC4.CCABUF = 0;
    12d2:	10 ae       	std	Z+56, r1	; 0x38
    12d4:	11 ae       	std	Z+57, r1	; 0x39
	TCC4.CTRLGCLR = TC4_STOP_bm;
    12d6:	90 87       	std	Z+8, r25	; 0x08
	//TCD5 configuration: 500kHz, 1199Hz overflow rate
	TCD5.CTRLA = TC_CLKSEL_DIV64_gc;
    12d8:	e0 e4       	ldi	r30, 0x40	; 64
    12da:	f9 e0       	ldi	r31, 0x09	; 9
    12dc:	20 83       	st	Z, r18
	TCD5.CTRLB = TC_WGMODE_NORMAL_gc;
    12de:	11 82       	std	Z+1, r1	; 0x01
	TCD5.PERBUF = 417;
    12e0:	21 ea       	ldi	r18, 0xA1	; 161
    12e2:	31 e0       	ldi	r19, 0x01	; 1
    12e4:	26 ab       	std	Z+54, r18	; 0x36
    12e6:	37 ab       	std	Z+55, r19	; 0x37
	TCD5.CTRLGCLR = TC5_STOP_bm;
    12e8:	90 87       	std	Z+8, r25	; 0x08
	//EDMA peripheral channel 0: USARTC read transfer
	EDMA.CH0.CTRLB = EDMA_CH_TRNINTLVL_LO_gc;
    12ea:	e0 e0       	ldi	r30, 0x00	; 0
    12ec:	f1 e0       	ldi	r31, 0x01	; 1
    12ee:	81 8b       	std	Z+17, r24	; 0x11
	EDMA.CH0.ADDRCTRL = EDMA_CH_RELOAD_BLOCK_gc | EDMA_CH_DIR_INC_gc;
    12f0:	91 e1       	ldi	r25, 0x11	; 17
    12f2:	92 8b       	std	Z+18, r25	; 0x12
	EDMA.CH0.ADDR = (register16_t)iobuf;
    12f4:	2c e9       	ldi	r18, 0x9C	; 156
    12f6:	30 e2       	ldi	r19, 0x20	; 32
    12f8:	20 8f       	std	Z+24, r18	; 0x18
    12fa:	31 8f       	std	Z+25, r19	; 0x19
	EDMA.CH0.TRIGSRC = EDMA_CH_TRIGSRC_USARTC0_RXC_gc;
    12fc:	2c e4       	ldi	r18, 0x4C	; 76
    12fe:	24 8b       	std	Z+20, r18	; 0x14
	//EDMA peripheral channel 1: USARTC write transfer
	EDMA.CH1.CTRLB = EDMA_CH_TRNINTLVL_LO_gc; //Low-level interrupt
    1300:	81 a3       	std	Z+33, r24	; 0x21
	EDMA.CH1.ADDRCTRL = EDMA_CH_RELOAD_BLOCK_gc | EDMA_CH_DIR_INC_gc;
    1302:	92 a3       	std	Z+34, r25	; 0x22
	EDMA.CH1.TRIGSRC = EDMA_CH_TRIGSRC_USARTC0_DRE_gc;
    1304:	9d e4       	ldi	r25, 0x4D	; 77
    1306:	94 a3       	std	Z+36, r25	; 0x24
	//EDMA: 1 standard and 2 peripheral channels
	EDMA.CTRL = EDMA_ENABLE_bm | EDMA_CHMODE_STD2_gc | EDMA_DBUFMODE_DISABLE_gc | EDMA_PRIMODE_RR0123_gc;
    1308:	90 ea       	ldi	r25, 0xA0	; 160
    130a:	90 83       	st	Z, r25
	//CRC: CRC16 mode, source IO interface
	CRC.CTRL = CRC_SOURCE_IO_gc;
    130c:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
	sei();
    1310:	78 94       	sei
    1312:	08 95       	ret

00001314 <main>:
}

int main(void)
{
	mcuInit();
    1314:	0e 94 f5 08 	call	0x11ea	; 0x11ea <_Z7mcuInitv>
	eeprom_read_block(&channelOT, &savedCOT, sizeof(channelsOnTime));
    1318:	48 e3       	ldi	r20, 0x38	; 56
    131a:	50 e0       	ldi	r21, 0x00	; 0
    131c:	61 e2       	ldi	r22, 0x21	; 33
    131e:	70 e0       	ldi	r23, 0x00	; 0
    1320:	84 ed       	ldi	r24, 0xD4	; 212
    1322:	90 e2       	ldi	r25, 0x20	; 32
    1324:	0e 94 18 0a 	call	0x1430	; 0x1430 <eeprom_read_block>
	eeprom_read_block(iobuf, &savedConfig, sizeof(systemConfig) - 2);
    1328:	4f e1       	ldi	r20, 0x1F	; 31
    132a:	50 e0       	ldi	r21, 0x00	; 0
    132c:	60 e0       	ldi	r22, 0x00	; 0
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	8c e9       	ldi	r24, 0x9C	; 156
    1332:	90 e2       	ldi	r25, 0x20	; 32
    1334:	0e 94 18 0a 	call	0x1430	; 0x1430 <eeprom_read_block>
	((systemConfig*)iobuf)->overrideCfg = ((systemConfig*)iobuf)->groupConf = 0; //Ignore saved overrides
    1338:	cc e9       	ldi	r28, 0x9C	; 156
    133a:	d0 e2       	ldi	r29, 0x20	; 32
    133c:	1d 8e       	std	Y+29, r1	; 0x1d
    133e:	19 8a       	std	Y+17, r1	; 0x11
	((systemConfig*)iobuf)->CRC16 = CalculateCRC16(iobuf, sizeof(systemConfig) - 2);
    1340:	6f e1       	ldi	r22, 0x1F	; 31
    1342:	ce 01       	movw	r24, r28
    1344:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pvh>
    1348:	8f 8f       	std	Y+31, r24	; 0x1f
    134a:	98 a3       	std	Y+32, r25	; 0x20
	ApplyConfig();
    134c:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z11ApplyConfigv>
    1350:	ff cf       	rjmp	.-2      	; 0x1350 <main+0x3c>

00001352 <_GLOBAL__sub_I_gLevels>:
	uint64_t _tickLastChg, _onTimeStamp;

public:
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    1352:	e0 e1       	ldi	r30, 0x10	; 16
    1354:	f0 e2       	ldi	r31, 0x20	; 32
    1356:	93 e0       	ldi	r25, 0x03	; 3
    1358:	91 83       	std	Z+1, r25	; 0x01
		_link[0] = posA;
    135a:	87 e0       	ldi	r24, 0x07	; 7
    135c:	83 83       	std	Z+3, r24	; 0x03
		_link[1] = posB;
    135e:	86 e0       	ldi	r24, 0x06	; 6
    1360:	84 83       	std	Z+4, r24	; 0x04
		_link[2] = posC;
    1362:	85 e0       	ldi	r24, 0x05	; 5
    1364:	85 83       	std	Z+5, r24	; 0x05
		_linkNum = num;
    1366:	12 82       	std	Z+2, r1	; 0x02
		_chActMask = 0x10 << num;
    1368:	80 e1       	ldi	r24, 0x10	; 16
    136a:	82 8b       	std	Z+18, r24	; 0x12
	uint64_t _tickLastChg, _onTimeStamp;

public:
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    136c:	94 a3       	std	Z+36, r25	; 0x24
		_link[0] = posA;
    136e:	84 e0       	ldi	r24, 0x04	; 4
    1370:	86 a3       	std	Z+38, r24	; 0x26
		_link[1] = posB;
    1372:	97 a3       	std	Z+39, r25	; 0x27
		_link[2] = posC;
    1374:	82 e0       	ldi	r24, 0x02	; 2
    1376:	80 a7       	std	Z+40, r24	; 0x28
		_linkNum = num;
    1378:	21 e0       	ldi	r18, 0x01	; 1
    137a:	25 a3       	std	Z+37, r18	; 0x25
		_chActMask = 0x10 << num;
    137c:	30 e2       	ldi	r19, 0x20	; 32
    137e:	35 ab       	std	Z+53, r19	; 0x35
	uint64_t _tickLastChg, _onTimeStamp;

public:
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    1380:	80 93 57 20 	sts	0x2057, r24	; 0x802057 <links+0x47>
		_link[0] = posA;
    1384:	20 93 59 20 	sts	0x2059, r18	; 0x802059 <links+0x49>
		_link[1] = posB;
    1388:	10 92 5a 20 	sts	0x205A, r1	; 0x80205a <links+0x4a>
		_link[2] = posC;
    138c:	10 92 5b 20 	sts	0x205B, r1	; 0x80205b <links+0x4b>
		_linkNum = num;
    1390:	80 93 58 20 	sts	0x2058, r24	; 0x802058 <links+0x48>
		_chActMask = 0x10 << num;
    1394:	30 e4       	ldi	r19, 0x40	; 64
    1396:	30 93 68 20 	sts	0x2068, r19	; 0x802068 <links+0x58>
	uint64_t _tickLastChg, _onTimeStamp;

public:
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    139a:	20 93 7a 20 	sts	0x207A, r18	; 0x80207a <links+0x6a>
		_link[0] = posA;
    139e:	28 e0       	ldi	r18, 0x08	; 8
    13a0:	20 93 7c 20 	sts	0x207C, r18	; 0x80207c <links+0x6c>
		_link[1] = posB;
    13a4:	10 92 7d 20 	sts	0x207D, r1	; 0x80207d <links+0x6d>
		_link[2] = posC;
    13a8:	10 92 7e 20 	sts	0x207E, r1	; 0x80207e <links+0x6e>
		_linkNum = num;
    13ac:	90 93 7b 20 	sts	0x207B, r25	; 0x80207b <links+0x6b>
		_chActMask = 0x10 << num;
    13b0:	90 e8       	ldi	r25, 0x80	; 128
    13b2:	90 93 8b 20 	sts	0x208B, r25	; 0x80208b <links+0x7b>
	uint8_t _onTime, _fTime;
	uint64_t _onTimeStamp;
public:
	Msen(uint8_t actLink)
	{
		_linkNum = actLink;
    13b6:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <msenCh+0x2>
    13ba:	08 95       	ret

000013bc <__divmodhi4>:
    13bc:	97 fb       	bst	r25, 7
    13be:	07 2e       	mov	r0, r23
    13c0:	16 f4       	brtc	.+4      	; 0x13c6 <__divmodhi4+0xa>
    13c2:	00 94       	com	r0
    13c4:	07 d0       	rcall	.+14     	; 0x13d4 <__divmodhi4_neg1>
    13c6:	77 fd       	sbrc	r23, 7
    13c8:	09 d0       	rcall	.+18     	; 0x13dc <__divmodhi4_neg2>
    13ca:	0e 94 fe 09 	call	0x13fc	; 0x13fc <__udivmodhi4>
    13ce:	07 fc       	sbrc	r0, 7
    13d0:	05 d0       	rcall	.+10     	; 0x13dc <__divmodhi4_neg2>
    13d2:	3e f4       	brtc	.+14     	; 0x13e2 <__divmodhi4_exit>

000013d4 <__divmodhi4_neg1>:
    13d4:	90 95       	com	r25
    13d6:	81 95       	neg	r24
    13d8:	9f 4f       	sbci	r25, 0xFF	; 255
    13da:	08 95       	ret

000013dc <__divmodhi4_neg2>:
    13dc:	70 95       	com	r23
    13de:	61 95       	neg	r22
    13e0:	7f 4f       	sbci	r23, 0xFF	; 255

000013e2 <__divmodhi4_exit>:
    13e2:	08 95       	ret

000013e4 <__adddi3_s8>:
    13e4:	00 24       	eor	r0, r0
    13e6:	a7 fd       	sbrc	r26, 7
    13e8:	00 94       	com	r0
    13ea:	2a 0f       	add	r18, r26
    13ec:	30 1d       	adc	r19, r0
    13ee:	40 1d       	adc	r20, r0
    13f0:	50 1d       	adc	r21, r0
    13f2:	60 1d       	adc	r22, r0
    13f4:	70 1d       	adc	r23, r0
    13f6:	80 1d       	adc	r24, r0
    13f8:	90 1d       	adc	r25, r0
    13fa:	08 95       	ret

000013fc <__udivmodhi4>:
    13fc:	aa 1b       	sub	r26, r26
    13fe:	bb 1b       	sub	r27, r27
    1400:	51 e1       	ldi	r21, 0x11	; 17
    1402:	07 c0       	rjmp	.+14     	; 0x1412 <__udivmodhi4_ep>

00001404 <__udivmodhi4_loop>:
    1404:	aa 1f       	adc	r26, r26
    1406:	bb 1f       	adc	r27, r27
    1408:	a6 17       	cp	r26, r22
    140a:	b7 07       	cpc	r27, r23
    140c:	10 f0       	brcs	.+4      	; 0x1412 <__udivmodhi4_ep>
    140e:	a6 1b       	sub	r26, r22
    1410:	b7 0b       	sbc	r27, r23

00001412 <__udivmodhi4_ep>:
    1412:	88 1f       	adc	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	5a 95       	dec	r21
    1418:	a9 f7       	brne	.-22     	; 0x1404 <__udivmodhi4_loop>
    141a:	80 95       	com	r24
    141c:	90 95       	com	r25
    141e:	bc 01       	movw	r22, r24
    1420:	cd 01       	movw	r24, r26
    1422:	08 95       	ret

00001424 <__tablejump2__>:
    1424:	ee 0f       	add	r30, r30
    1426:	ff 1f       	adc	r31, r31
    1428:	05 90       	lpm	r0, Z+
    142a:	f4 91       	lpm	r31, Z
    142c:	e0 2d       	mov	r30, r0
    142e:	09 94       	ijmp

00001430 <eeprom_read_block>:
    1430:	60 50       	subi	r22, 0x00	; 0
    1432:	70 4f       	sbci	r23, 0xF0	; 240
    1434:	0c 94 55 0a 	jmp	0x14aa	; 0x14aa <memcpy>

00001438 <eeprom_update_block>:
    1438:	dc 01       	movw	r26, r24
    143a:	a4 0f       	add	r26, r20
    143c:	b5 1f       	adc	r27, r21
    143e:	41 50       	subi	r20, 0x01	; 1
    1440:	50 40       	sbci	r21, 0x00	; 0
    1442:	48 f0       	brcs	.+18     	; 0x1456 <eeprom_update_block+0x1e>
    1444:	cb 01       	movw	r24, r22
    1446:	84 0f       	add	r24, r20
    1448:	95 1f       	adc	r25, r21
    144a:	2e 91       	ld	r18, -X
    144c:	0e 94 2d 0a 	call	0x145a	; 0x145a <eeprom_update_r18>
    1450:	41 50       	subi	r20, 0x01	; 1
    1452:	50 40       	sbci	r21, 0x00	; 0
    1454:	d0 f7       	brcc	.-12     	; 0x144a <eeprom_update_block+0x12>
    1456:	08 95       	ret

00001458 <eeprom_update_byte>:
    1458:	26 2f       	mov	r18, r22

0000145a <eeprom_update_r18>:
    145a:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <eeprom_mapen>
    145e:	00 80       	ld	r0, Z
    1460:	02 16       	cp	r0, r18
    1462:	19 f0       	breq	.+6      	; 0x146a <eeprom_update_r18+0x10>
    1464:	0e 94 38 0a 	call	0x1470	; 0x1470 <eeprom_write_r18>
    1468:	01 97       	sbiw	r24, 0x01	; 1
    146a:	01 97       	sbiw	r24, 0x01	; 1
    146c:	08 95       	ret

0000146e <eeprom_write_byte>:
    146e:	26 2f       	mov	r18, r22

00001470 <eeprom_write_r18>:
    1470:	af 93       	push	r26
    1472:	bf 93       	push	r27
    1474:	e0 ec       	ldi	r30, 0xC0	; 192
    1476:	f1 e0       	ldi	r31, 0x01	; 1
    1478:	37 85       	ldd	r19, Z+15	; 0x0f
    147a:	37 fd       	sbrc	r19, 7
    147c:	fd cf       	rjmp	.-6      	; 0x1478 <eeprom_write_r18+0x8>
    147e:	dc 01       	movw	r26, r24
    1480:	a0 50       	subi	r26, 0x00	; 0
    1482:	b0 4f       	sbci	r27, 0xF0	; 240
    1484:	2c 93       	st	X, r18
    1486:	25 e3       	ldi	r18, 0x35	; 53
    1488:	22 87       	std	Z+10, r18	; 0x0a
    148a:	28 ed       	ldi	r18, 0xD8	; 216
    148c:	31 e0       	ldi	r19, 0x01	; 1
    148e:	24 bf       	out	0x34, r18	; 52
    1490:	33 87       	std	Z+11, r19	; 0x0b
    1492:	01 96       	adiw	r24, 0x01	; 1
    1494:	bf 91       	pop	r27
    1496:	af 91       	pop	r26
    1498:	08 95       	ret

0000149a <eeprom_read_byte>:
    149a:	03 d0       	rcall	.+6      	; 0x14a2 <eeprom_mapen>
    149c:	80 81       	ld	r24, Z
    149e:	99 27       	eor	r25, r25
    14a0:	08 95       	ret

000014a2 <eeprom_mapen>:
    14a2:	fc 01       	movw	r30, r24
    14a4:	e0 50       	subi	r30, 0x00	; 0
    14a6:	f0 4f       	sbci	r31, 0xF0	; 240
    14a8:	08 95       	ret

000014aa <memcpy>:
    14aa:	fb 01       	movw	r30, r22
    14ac:	dc 01       	movw	r26, r24
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <memcpy+0xa>
    14b0:	01 90       	ld	r0, Z+
    14b2:	0d 92       	st	X+, r0
    14b4:	41 50       	subi	r20, 0x01	; 1
    14b6:	50 40       	sbci	r21, 0x00	; 0
    14b8:	d8 f7       	brcc	.-10     	; 0x14b0 <memcpy+0x6>
    14ba:	08 95       	ret

000014bc <_exit>:
    14bc:	f8 94       	cli

000014be <__stop_program>:
    14be:	ff cf       	rjmp	.-2      	; 0x14be <__stop_program>
