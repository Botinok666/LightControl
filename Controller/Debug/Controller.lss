
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000158a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00001670  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000158  00802000  00802000  0000161e  2**0
                  ALLOC
  3 .eeprom       00000052  00810000  00810000  0000161e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00001670  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016a0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000110  00000000  00000000  000016e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004bc3  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001f59  00000000  00000000  000063b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001023  00000000  00000000  0000830c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000318  00000000  00000000  00009330  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000343b  00000000  00000000  00009648  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001359  00000000  00000000  0000ca83  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001b8  00000000  00000000  0000dddc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 57 00 	jmp	0xae	; 0xae <__ctors_end>
       4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       c:	0c 94 e1 08 	jmp	0x11c2	; 0x11c2 <__vector_3>
      10:	0c 94 1e 09 	jmp	0x123c	; 0x123c <__vector_4>
      14:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      18:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      1c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__vector_7>
      20:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      24:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      28:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      2c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      30:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      34:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      38:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      3c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      40:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      44:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      48:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      4c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      50:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      54:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      58:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      5c:	0c 94 41 08 	jmp	0x1082	; 0x1082 <__vector_23>
      60:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      68:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      6c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      70:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      74:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      78:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      7c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      80:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      84:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      88:	0c 94 57 05 	jmp	0xaae	; 0xaae <__vector_34>
      8c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      90:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <__vector_36>
      94:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      98:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      9c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      a0:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      a4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      a8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>

000000ac <__ctors_start>:
      ac:	0d 0a       	sbc	r0, r29

000000ae <__ctors_end>:
      ae:	11 24       	eor	r1, r1
      b0:	1f be       	out	0x3f, r1	; 63
      b2:	cf ef       	ldi	r28, 0xFF	; 255
      b4:	cd bf       	out	0x3d, r28	; 61
      b6:	d7 e2       	ldi	r29, 0x27	; 39
      b8:	de bf       	out	0x3e, r29	; 62

000000ba <__do_clear_bss>:
      ba:	21 e2       	ldi	r18, 0x21	; 33
      bc:	a0 e0       	ldi	r26, 0x00	; 0
      be:	b0 e2       	ldi	r27, 0x20	; 32
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a8 35       	cpi	r26, 0x58	; 88
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>

000000ca <__do_global_ctors>:
      ca:	10 e0       	ldi	r17, 0x00	; 0
      cc:	c7 e5       	ldi	r28, 0x57	; 87
      ce:	d0 e0       	ldi	r29, 0x00	; 0
      d0:	04 c0       	rjmp	.+8      	; 0xda <__do_global_ctors+0x10>
      d2:	21 97       	sbiw	r28, 0x01	; 1
      d4:	fe 01       	movw	r30, r28
      d6:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__tablejump2__>
      da:	c6 35       	cpi	r28, 0x56	; 86
      dc:	d1 07       	cpc	r29, r17
      de:	c9 f7       	brne	.-14     	; 0xd2 <__do_global_ctors+0x8>
      e0:	0e 94 ee 09 	call	0x13dc	; 0x13dc <main>
      e4:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <_exit>

000000e8 <__bad_interrupt>:
      e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ec <_Z14CalculateCRC16Pva>:
}

uint16_t CalculateCRC16(void *arr, int8_t count)
{
	uint8_t *ptr = (uint8_t*)arr;
	CRC.CTRL = CRC_RESET_RESET1_gc;
      ec:	e0 ed       	ldi	r30, 0xD0	; 208
      ee:	f0 e0       	ldi	r31, 0x00	; 0
      f0:	20 ec       	ldi	r18, 0xC0	; 192
      f2:	20 83       	st	Z, r18
	CRC.CTRL = CRC_SOURCE_IO_gc;
      f4:	21 e0       	ldi	r18, 0x01	; 1
      f6:	20 83       	st	Z, r18
	while (--count >= 0)
      f8:	61 50       	subi	r22, 0x01	; 1
      fa:	52 f0       	brmi	.+20     	; 0x110 <_Z14CalculateCRC16Pva+0x24>
      fc:	e8 2f       	mov	r30, r24
      fe:	f9 2f       	mov	r31, r25
		CRC.DATAIN = *ptr++;
     100:	a0 ed       	ldi	r26, 0xD0	; 208
     102:	b0 e0       	ldi	r27, 0x00	; 0
     104:	81 91       	ld	r24, Z+
     106:	13 96       	adiw	r26, 0x03	; 3
     108:	8c 93       	st	X, r24
     10a:	13 97       	sbiw	r26, 0x03	; 3
     10c:	61 50       	subi	r22, 0x01	; 1
uint16_t CalculateCRC16(void *arr, int8_t count)
{
	uint8_t *ptr = (uint8_t*)arr;
	CRC.CTRL = CRC_RESET_RESET1_gc;
	CRC.CTRL = CRC_SOURCE_IO_gc;
	while (--count >= 0)
     10e:	d2 f7       	brpl	.-12     	; 0x104 <_Z14CalculateCRC16Pva+0x18>
		CRC.DATAIN = *ptr++;
	i16i8 result;
	CRC.STATUS = CRC_BUSY_bm;
     110:	e0 ed       	ldi	r30, 0xD0	; 208
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	81 e0       	ldi	r24, 0x01	; 1
     116:	81 83       	std	Z+1, r24	; 0x01
	result.ui8[0] = CRC.CHECKSUM0;
     118:	84 81       	ldd	r24, Z+4	; 0x04
	result.ui8[1] = CRC.CHECKSUM1;
     11a:	95 81       	ldd	r25, Z+5	; 0x05
	CRC.CTRL = CRC_SOURCE_DISABLE_gc;
     11c:	10 82       	st	Z, r1
	return result.ui16;
}
     11e:	08 95       	ret

00000120 <_Z11ApplyConfigv>:

void ApplyConfig()
{
     120:	2f 92       	push	r2
     122:	3f 92       	push	r3
     124:	4f 92       	push	r4
     126:	5f 92       	push	r5
     128:	6f 92       	push	r6
     12a:	7f 92       	push	r7
     12c:	8f 92       	push	r8
     12e:	9f 92       	push	r9
     130:	af 92       	push	r10
     132:	bf 92       	push	r11
     134:	cf 92       	push	r12
     136:	df 92       	push	r13
     138:	ef 92       	push	r14
     13a:	ff 92       	push	r15
     13c:	0f 93       	push	r16
     13e:	1f 93       	push	r17
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
	systemConfig *temp = (systemConfig*)iobuf;
	//Both bits 7 are set: one of the on-time counters must be rewritten
	if ((temp->groupConf & 0x80) && (temp->overrideCfg & 0x80))
     144:	50 90 a1 20 	lds	r5, 0x20A1	; 0x8020a1 <iobuf+0x16>
     148:	55 20       	and	r5, r5
     14a:	24 f5       	brge	.+72     	; 0x194 <_Z11ApplyConfigv+0x74>
     14c:	80 91 94 20 	lds	r24, 0x2094	; 0x802094 <iobuf+0x9>
     150:	88 23       	and	r24, r24
     152:	04 f5       	brge	.+64     	; 0x194 <_Z11ApplyConfigv+0x74>
	{
		uint8_t j = temp->overrideCfg & 0xF; //Update on-time of link
		channelOT.linkOnTime[j] = *((uint32_t*)temp->minLvl);
     154:	8f 70       	andi	r24, 0x0F	; 15
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	fc 01       	movw	r30, r24
     15a:	ee 0f       	add	r30, r30
     15c:	ff 1f       	adc	r31, r31
     15e:	ee 0f       	add	r30, r30
     160:	ff 1f       	adc	r31, r31
     162:	ed 53       	subi	r30, 0x3D	; 61
     164:	ff 4d       	sbci	r31, 0xDF	; 223
     166:	ab e8       	ldi	r26, 0x8B	; 139
     168:	b0 e2       	ldi	r27, 0x20	; 32
     16a:	4d 91       	ld	r20, X+
     16c:	5d 91       	ld	r21, X+
     16e:	6d 91       	ld	r22, X+
     170:	7c 91       	ld	r23, X
     172:	13 97       	sbiw	r26, 0x03	; 3
     174:	40 83       	st	Z, r20
     176:	51 83       	std	Z+1, r21	; 0x01
     178:	62 83       	std	Z+2, r22	; 0x02
     17a:	73 83       	std	Z+3, r23	; 0x03
		channelOT.linkSwCnt[j] = *((uint16_t*)temp->fadeRate);
     17c:	88 0f       	add	r24, r24
     17e:	99 1f       	adc	r25, r25
     180:	fc 01       	movw	r30, r24
     182:	e9 51       	subi	r30, 0x19	; 25
     184:	ff 4d       	sbci	r31, 0xDF	; 223
     186:	1a 96       	adiw	r26, 0x0a	; 10
     188:	8d 91       	ld	r24, X+
     18a:	9c 91       	ld	r25, X
     18c:	1b 97       	sbiw	r26, 0x0b	; 11
     18e:	80 83       	st	Z, r24
     190:	91 83       	std	Z+1, r25	; 0x01
		return;
     192:	92 c0       	rjmp	.+292    	; 0x2b8 <_Z11ApplyConfigv+0x198>
	}
	memcpy(&validConf, iobuf, sizeof(systemConfig));
     194:	c4 e1       	ldi	r28, 0x14	; 20
     196:	d1 e2       	ldi	r29, 0x21	; 33
     198:	8a e1       	ldi	r24, 0x1A	; 26
     19a:	eb e8       	ldi	r30, 0x8B	; 139
     19c:	f0 e2       	ldi	r31, 0x20	; 32
     19e:	de 01       	movw	r26, r28
     1a0:	01 90       	ld	r0, Z+
     1a2:	0d 92       	st	X+, r0
     1a4:	8a 95       	dec	r24
     1a6:	e1 f7       	brne	.-8      	; 0x1a0 <_Z11ApplyConfigv+0x80>
		_fadeRate = (min > 160) ? 160 : min;
		_linkDelay = (max > 63) ? 64 : max + 1;
		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			pos = _link[i];
			if ((pos < 8 && (validConf.overrideCfg & (1 << pos))) || (pos >= 8 && (validConf.groupConf & (1 << 4))))
     1a8:	69 85       	ldd	r22, Y+9	; 0x09
     1aa:	70 e0       	ldi	r23, 0x00	; 0
			{
				if (_lvl[i] == gLevels[pos]) //Refresh saved ticks value only if no dimming in the process right now
					_tickLastChg = sysState.sysTick;
     1ac:	eb ef       	ldi	r30, 0xFB	; 251
     1ae:	f0 e2       	ldi	r31, 0x20	; 32
     1b0:	a0 80       	ld	r10, Z
     1b2:	b1 80       	ldd	r11, Z+1	; 0x01
     1b4:	c2 80       	ldd	r12, Z+2	; 0x02
     1b6:	d3 80       	ldd	r13, Z+3	; 0x03
     1b8:	94 80       	ldd	r9, Z+4	; 0x04
     1ba:	85 80       	ldd	r8, Z+5	; 0x05
     1bc:	76 80       	ldd	r7, Z+6	; 0x06
     1be:	67 80       	ldd	r6, Z+7	; 0x07
				_lvl[i] = validConf.overrideLvl;
     1c0:	f8 84       	ldd	r15, Y+8	; 0x08
     1c2:	43 e1       	ldi	r20, 0x13	; 19
     1c4:	50 e2       	ldi	r21, 0x20	; 32
     1c6:	0f 2e       	mov	r0, r31
     1c8:	fb e8       	ldi	r31, 0x8B	; 139
     1ca:	2f 2e       	mov	r2, r31
     1cc:	f0 e2       	ldi	r31, 0x20	; 32
     1ce:	3f 2e       	mov	r3, r31
     1d0:	f0 2d       	mov	r31, r0
	{
		uint8_t pos, min = validConf.fadeRate[_linkNum], max = validConf.linkDelay[_linkNum];
		if (min < 32)
			min = 32;
		_fadeRate = (min > 160) ? 160 : min;
		_linkDelay = (max > 63) ? 64 : max + 1;
     1d2:	41 2c       	mov	r4, r1
		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			pos = _link[i];
			if ((pos < 8 && (validConf.overrideCfg & (1 << pos))) || (pos >= 8 && (validConf.groupConf & (1 << 4))))
     1d4:	85 2d       	mov	r24, r5
     1d6:	80 71       	andi	r24, 0x10	; 16
     1d8:	e8 2e       	mov	r14, r24
     1da:	ea 01       	movw	r28, r20
		_chActMask = 0x10 << num;
	};

	void setParams()
	{
		uint8_t pos, min = validConf.fadeRate[_linkNum], max = validConf.linkDelay[_linkNum];
     1dc:	e9 81       	ldd	r30, Y+1	; 0x01
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	ec 5e       	subi	r30, 0xEC	; 236
     1e2:	fe 4d       	sbci	r31, 0xDE	; 222
     1e4:	92 85       	ldd	r25, Z+10	; 0x0a
     1e6:	86 85       	ldd	r24, Z+14	; 0x0e
		if (min < 32)
     1e8:	90 32       	cpi	r25, 0x20	; 32
     1ea:	08 f4       	brcc	.+2      	; 0x1ee <_Z11ApplyConfigv+0xce>
			min = 32;
     1ec:	90 e2       	ldi	r25, 0x20	; 32
		_fadeRate = (min > 160) ? 160 : min;
     1ee:	91 3a       	cpi	r25, 0xA1	; 161
     1f0:	08 f0       	brcs	.+2      	; 0x1f4 <_Z11ApplyConfigv+0xd4>
     1f2:	90 ea       	ldi	r25, 0xA0	; 160
     1f4:	98 87       	std	Y+8, r25	; 0x08
		_linkDelay = (max > 63) ? 64 : max + 1;
     1f6:	80 34       	cpi	r24, 0x40	; 64
     1f8:	18 f4       	brcc	.+6      	; 0x200 <_Z11ApplyConfigv+0xe0>
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	01 96       	adiw	r24, 0x01	; 1
     1fe:	02 c0       	rjmp	.+4      	; 0x204 <_Z11ApplyConfigv+0xe4>
     200:	80 e4       	ldi	r24, 0x40	; 64
     202:	94 2d       	mov	r25, r4
     204:	89 87       	std	Y+9, r24	; 0x09
     206:	9a 87       	std	Y+10, r25	; 0x0a
		for (uint8_t i = 0; i < _linkCnt; i++)
     208:	98 81       	ld	r25, Y
     20a:	99 23       	and	r25, r25
     20c:	79 f1       	breq	.+94     	; 0x26c <_Z11ApplyConfigv+0x14c>
     20e:	da 01       	movw	r26, r20
     210:	12 96       	adiw	r26, 0x02	; 2
     212:	80 e0       	ldi	r24, 0x00	; 0
		{
			pos = _link[i];
     214:	ed 91       	ld	r30, X+
			if ((pos < 8 && (validConf.overrideCfg & (1 << pos))) || (pos >= 8 && (validConf.groupConf & (1 << 4))))
     216:	e8 30       	cpi	r30, 0x08	; 8
     218:	50 f4       	brcc	.+20     	; 0x22e <_Z11ApplyConfigv+0x10e>
     21a:	9b 01       	movw	r18, r22
     21c:	0e 2e       	mov	r0, r30
     21e:	02 c0       	rjmp	.+4      	; 0x224 <_Z11ApplyConfigv+0x104>
     220:	35 95       	asr	r19
     222:	27 95       	ror	r18
     224:	0a 94       	dec	r0
     226:	e2 f7       	brpl	.-8      	; 0x220 <_Z11ApplyConfigv+0x100>
     228:	20 fd       	sbrc	r18, 0
     22a:	03 c0       	rjmp	.+6      	; 0x232 <_Z11ApplyConfigv+0x112>
     22c:	1c c0       	rjmp	.+56     	; 0x266 <_Z11ApplyConfigv+0x146>
     22e:	ee 20       	and	r14, r14
     230:	d1 f0       	breq	.+52     	; 0x266 <_Z11ApplyConfigv+0x146>
     232:	8d 01       	movw	r16, r26
			{
				if (_lvl[i] == gLevels[pos]) //Refresh saved ticks value only if no dimming in the process right now
     234:	f0 e0       	ldi	r31, 0x00	; 0
     236:	ee 0f       	add	r30, r30
     238:	ff 1f       	adc	r31, r31
     23a:	ea 5b       	subi	r30, 0xBA	; 186
     23c:	fe 4d       	sbci	r31, 0xDE	; 222
     23e:	01 90       	ld	r0, Z+
     240:	f0 81       	ld	r31, Z
     242:	e0 2d       	mov	r30, r0
     244:	12 96       	adiw	r26, 0x02	; 2
     246:	2c 91       	ld	r18, X
     248:	12 97       	sbiw	r26, 0x02	; 2
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	2e 17       	cp	r18, r30
     24e:	3f 07       	cpc	r19, r31
     250:	41 f4       	brne	.+16     	; 0x262 <_Z11ApplyConfigv+0x142>
					_tickLastChg = sysState.sysTick;
     252:	ac 86       	std	Y+12, r10	; 0x0c
     254:	bd 86       	std	Y+13, r11	; 0x0d
     256:	ce 86       	std	Y+14, r12	; 0x0e
     258:	df 86       	std	Y+15, r13	; 0x0f
     25a:	98 8a       	std	Y+16, r9	; 0x10
     25c:	89 8a       	std	Y+17, r8	; 0x11
     25e:	7a 8a       	std	Y+18, r7	; 0x12
     260:	6b 8a       	std	Y+19, r6	; 0x13
				_lvl[i] = validConf.overrideLvl;
     262:	f8 01       	movw	r30, r16
     264:	f2 82       	std	Z+2, r15	; 0x02
		uint8_t pos, min = validConf.fadeRate[_linkNum], max = validConf.linkDelay[_linkNum];
		if (min < 32)
			min = 32;
		_fadeRate = (min > 160) ? 160 : min;
		_linkDelay = (max > 63) ? 64 : max + 1;
		for (uint8_t i = 0; i < _linkCnt; i++)
     266:	8f 5f       	subi	r24, 0xFF	; 255
     268:	89 13       	cpse	r24, r25
     26a:	d4 cf       	rjmp	.-88     	; 0x214 <_Z11ApplyConfigv+0xf4>
     26c:	42 5e       	subi	r20, 0xE2	; 226
     26e:	5f 4f       	sbci	r21, 0xFF	; 255
		channelOT.linkOnTime[j] = *((uint32_t*)temp->minLvl);
		channelOT.linkSwCnt[j] = *((uint16_t*)temp->fadeRate);
		return;
	}
	memcpy(&validConf, iobuf, sizeof(systemConfig));
	for (uint8_t i = 0; i < 4; i++)
     270:	42 15       	cp	r20, r2
     272:	53 05       	cpc	r21, r3
     274:	09 f0       	breq	.+2      	; 0x278 <_Z11ApplyConfigv+0x158>
     276:	b1 cf       	rjmp	.-158    	; 0x1da <_Z11ApplyConfigv+0xba>
		_linkMask = 0x10 << actLink;
		_linkAddr = &links[actLink];
	};
	void setParams()
	{
		_onTime = validConf.msenOnTime > 5 ? validConf.msenOnTime : 6;
     278:	80 91 26 21 	lds	r24, 0x2126	; 0x802126 <validConf+0x12>
     27c:	86 30       	cpi	r24, 0x06	; 6
     27e:	10 f0       	brcs	.+4      	; 0x284 <_Z11ApplyConfigv+0x164>
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	02 c0       	rjmp	.+4      	; 0x288 <_Z11ApplyConfigv+0x168>
     284:	86 e0       	ldi	r24, 0x06	; 6
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	e1 e0       	ldi	r30, 0x01	; 1
     28a:	f0 e2       	ldi	r31, 0x20	; 32
     28c:	86 83       	std	Z+6, r24	; 0x06
     28e:	97 83       	std	Z+7, r25	; 0x07
		_fTime = _onTime + validConf.msenLowTime;
     290:	20 91 28 21 	lds	r18, 0x2128	; 0x802128 <validConf+0x14>
     294:	82 0f       	add	r24, r18
     296:	91 1d       	adc	r25, r1
     298:	80 87       	std	Z+8, r24	; 0x08
     29a:	91 87       	std	Z+9, r25	; 0x09
	}
	memcpy(&validConf, iobuf, sizeof(systemConfig));
	for (uint8_t i = 0; i < 4; i++)
		links[i].setParams();
	msenCh.setParams();
	if (validConf.groupConf & (1 << 3)) //Bit 3 is set: save config to EEPROM
     29c:	53 fe       	sbrs	r5, 3
     29e:	08 c0       	rjmp	.+16     	; 0x2b0 <_Z11ApplyConfigv+0x190>
		eeprom_update_block(&validConf, &savedConfig, sizeof(systemConfig));
     2a0:	4a e1       	ldi	r20, 0x1A	; 26
     2a2:	50 e0       	ldi	r21, 0x00	; 0
     2a4:	60 e0       	ldi	r22, 0x00	; 0
     2a6:	70 e0       	ldi	r23, 0x00	; 0
     2a8:	84 e1       	ldi	r24, 0x14	; 20
     2aa:	91 e2       	ldi	r25, 0x21	; 33
     2ac:	0e 94 81 0a 	call	0x1502	; 0x1502 <eeprom_update_block>
	RTC.CALIB = validConf.rtcCorrect;
     2b0:	80 91 2b 21 	lds	r24, 0x212B	; 0x80212b <validConf+0x17>
     2b4:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
}
     2b8:	df 91       	pop	r29
     2ba:	cf 91       	pop	r28
     2bc:	1f 91       	pop	r17
     2be:	0f 91       	pop	r16
     2c0:	ff 90       	pop	r15
     2c2:	ef 90       	pop	r14
     2c4:	df 90       	pop	r13
     2c6:	cf 90       	pop	r12
     2c8:	bf 90       	pop	r11
     2ca:	af 90       	pop	r10
     2cc:	9f 90       	pop	r9
     2ce:	8f 90       	pop	r8
     2d0:	7f 90       	pop	r7
     2d2:	6f 90       	pop	r6
     2d4:	5f 90       	pop	r5
     2d6:	4f 90       	pop	r4
     2d8:	3f 90       	pop	r3
     2da:	2f 90       	pop	r2
     2dc:	08 95       	ret

000002de <__vector_7>:

ISR(RTC_OVF_vect)
{
     2de:	1f 92       	push	r1
     2e0:	0f 92       	push	r0
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	0f 92       	push	r0
     2e6:	11 24       	eor	r1, r1
     2e8:	2f 92       	push	r2
     2ea:	3f 92       	push	r3
     2ec:	4f 92       	push	r4
     2ee:	5f 92       	push	r5
     2f0:	6f 92       	push	r6
     2f2:	7f 92       	push	r7
     2f4:	8f 92       	push	r8
     2f6:	9f 92       	push	r9
     2f8:	af 92       	push	r10
     2fa:	bf 92       	push	r11
     2fc:	cf 92       	push	r12
     2fe:	df 92       	push	r13
     300:	ef 92       	push	r14
     302:	ff 92       	push	r15
     304:	0f 93       	push	r16
     306:	1f 93       	push	r17
     308:	2f 93       	push	r18
     30a:	3f 93       	push	r19
     30c:	4f 93       	push	r20
     30e:	5f 93       	push	r21
     310:	6f 93       	push	r22
     312:	7f 93       	push	r23
     314:	8f 93       	push	r24
     316:	9f 93       	push	r25
     318:	af 93       	push	r26
     31a:	bf 93       	push	r27
     31c:	ef 93       	push	r30
     31e:	ff 93       	push	r31
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
     328:	27 97       	sbiw	r28, 0x07	; 7
     32a:	cd bf       	out	0x3d, r28	; 61
     32c:	de bf       	out	0x3e, r29	; 62
	sysState.sysTick++;
     32e:	eb ef       	ldi	r30, 0xFB	; 251
     330:	f0 e2       	ldi	r31, 0x20	; 32
     332:	20 81       	ld	r18, Z
     334:	31 81       	ldd	r19, Z+1	; 0x01
     336:	42 81       	ldd	r20, Z+2	; 0x02
     338:	53 81       	ldd	r21, Z+3	; 0x03
     33a:	64 81       	ldd	r22, Z+4	; 0x04
     33c:	75 81       	ldd	r23, Z+5	; 0x05
     33e:	86 81       	ldd	r24, Z+6	; 0x06
     340:	97 81       	ldd	r25, Z+7	; 0x07
     342:	a1 e0       	ldi	r26, 0x01	; 1
     344:	0e 94 57 0a 	call	0x14ae	; 0x14ae <__adddi3_s8>
     348:	20 83       	st	Z, r18
     34a:	31 83       	std	Z+1, r19	; 0x01
     34c:	42 83       	std	Z+2, r20	; 0x02
     34e:	53 83       	std	Z+3, r21	; 0x03
     350:	64 83       	std	Z+4, r22	; 0x04
     352:	75 83       	std	Z+5, r23	; 0x05
     354:	86 83       	std	Z+6, r24	; 0x06
     356:	97 83       	std	Z+7, r25	; 0x07
     358:	0f 2e       	mov	r0, r31
     35a:	f3 e1       	ldi	r31, 0x13	; 19
     35c:	6f 2e       	mov	r6, r31
     35e:	f0 e2       	ldi	r31, 0x20	; 32
     360:	7f 2e       	mov	r7, r31
     362:	f0 2d       	mov	r31, r0
     364:	1b 82       	std	Y+3, r1	; 0x03
     366:	1c 82       	std	Y+4, r1	; 0x04
		int16_t delta = (((ticksEl + 1) * _fadeRate) >> 5) - ((ticksEl * _fadeRate) >> 5); //Number of steps
		PORTC.OUTCLR = _chActMask;
		for (int8_t i = 0; i < _linkCnt; i++)
		{
			uint8_t s = direction ? i : _linkCnt - i - 1; //Direction '1' means forward
			uint8_t j = _link[s];
     368:	0f 2e       	mov	r0, r31
     36a:	fe e1       	ldi	r31, 0x1E	; 30
     36c:	af 2e       	mov	r10, r31
     36e:	f0 2d       	mov	r31, r0
ISR(RTC_OVF_vect)
{
	sysState.sysTick++;
	uint8_t i;
	for (i = 0; i < 4; i++)
		links[i].updateLevel();
     370:	2b 81       	ldd	r18, Y+3	; 0x03
     372:	3c 81       	ldd	r19, Y+4	; 0x04
     374:	f3 01       	movw	r30, r6
			_tickLastChg = sysState.sysTick;
	}

	void updateLevel()
	{
		int16_t ticksEl = (int16_t)(sysState.sysTick - _tickLastChg); //Elapsed ticks since beginning of dim
     376:	ab ef       	ldi	r26, 0xFB	; 251
     378:	b0 e2       	ldi	r27, 0x20	; 32
     37a:	0d 90       	ld	r0, X+
     37c:	bc 91       	ld	r27, X
     37e:	a0 2d       	mov	r26, r0
     380:	84 85       	ldd	r24, Z+12	; 0x0c
     382:	95 85       	ldd	r25, Z+13	; 0x0d
     384:	a8 1b       	sub	r26, r24
     386:	b9 0b       	sbc	r27, r25
     388:	a9 83       	std	Y+1, r26	; 0x01
     38a:	ba 83       	std	Y+2, r27	; 0x02
		int16_t delta = (((ticksEl + 1) * _fadeRate) >> 5) - ((ticksEl * _fadeRate) >> 5); //Number of steps
     38c:	40 85       	ldd	r20, Z+8	; 0x08
     38e:	50 e0       	ldi	r21, 0x00	; 0
     390:	bd 01       	movw	r22, r26
     392:	6f 5f       	subi	r22, 0xFF	; 255
     394:	7f 4f       	sbci	r23, 0xFF	; 255
     396:	64 9f       	mul	r22, r20
     398:	c0 01       	movw	r24, r0
     39a:	65 9f       	mul	r22, r21
     39c:	90 0d       	add	r25, r0
     39e:	74 9f       	mul	r23, r20
     3a0:	90 0d       	add	r25, r0
     3a2:	11 24       	eor	r1, r1
     3a4:	4c 01       	movw	r8, r24
     3a6:	95 94       	asr	r9
     3a8:	87 94       	ror	r8
     3aa:	95 94       	asr	r9
     3ac:	87 94       	ror	r8
     3ae:	95 94       	asr	r9
     3b0:	87 94       	ror	r8
     3b2:	95 94       	asr	r9
     3b4:	87 94       	ror	r8
     3b6:	95 94       	asr	r9
     3b8:	87 94       	ror	r8
     3ba:	84 1b       	sub	r24, r20
     3bc:	95 0b       	sbc	r25, r21
     3be:	95 95       	asr	r25
     3c0:	87 95       	ror	r24
     3c2:	95 95       	asr	r25
     3c4:	87 95       	ror	r24
     3c6:	95 95       	asr	r25
     3c8:	87 95       	ror	r24
     3ca:	95 95       	asr	r25
     3cc:	87 95       	ror	r24
     3ce:	95 95       	asr	r25
     3d0:	87 95       	ror	r24
     3d2:	88 1a       	sub	r8, r24
     3d4:	99 0a       	sbc	r9, r25
		PORTC.OUTCLR = _chActMask;
     3d6:	83 85       	ldd	r24, Z+11	; 0x0b
     3d8:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
		for (int8_t i = 0; i < _linkCnt; i++)
     3dc:	80 81       	ld	r24, Z
     3de:	88 23       	and	r24, r24
     3e0:	09 f4       	brne	.+2      	; 0x3e4 <__vector_7+0x106>
     3e2:	fa c0       	rjmp	.+500    	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
     3e4:	a0 e0       	ldi	r26, 0x00	; 0
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	d1 2c       	mov	r13, r1
		{
			uint8_t s = direction ? i : _linkCnt - i - 1; //Direction '1' means forward
			uint8_t j = _link[s];
     3ea:	a2 9e       	mul	r10, r18
     3ec:	a0 01       	movw	r20, r0
     3ee:	a3 9e       	mul	r10, r19
     3f0:	50 0d       	add	r21, r0
     3f2:	11 24       	eor	r1, r1
     3f4:	4d 5e       	subi	r20, 0xED	; 237
     3f6:	5f 4d       	sbci	r21, 0xDF	; 223
						channelOT.linkSwCnt[j]++; //Increment switch counter
					}
				}
				else //Level needs to be raised
				{
					tempLvl += ((-tempLvl > delta) ? delta : -tempLvl) + _lvl[s];
     3f8:	c8 2c       	mov	r12, r8
     3fa:	39 2c       	mov	r3, r9
     3fc:	6d 82       	std	Y+5, r6	; 0x05
     3fe:	7e 82       	std	Y+6, r7	; 0x06
     400:	3d 01       	movw	r6, r26
		int16_t ticksEl = (int16_t)(sysState.sysTick - _tickLastChg); //Elapsed ticks since beginning of dim
		int16_t delta = (((ticksEl + 1) * _fadeRate) >> 5) - ((ticksEl * _fadeRate) >> 5); //Number of steps
		PORTC.OUTCLR = _chActMask;
		for (int8_t i = 0; i < _linkCnt; i++)
		{
			uint8_t s = direction ? i : _linkCnt - i - 1; //Direction '1' means forward
     402:	94 8d       	ldd	r25, Z+28	; 0x1c
     404:	99 23       	and	r25, r25
     406:	11 f0       	breq	.+4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     408:	8d 2d       	mov	r24, r13
     40a:	03 c0       	rjmp	.+6      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     40c:	9d 2d       	mov	r25, r13
     40e:	90 95       	com	r25
     410:	89 0f       	add	r24, r25
			uint8_t j = _link[s];
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	9a 01       	movw	r18, r20
     416:	28 0f       	add	r18, r24
     418:	39 1f       	adc	r19, r25
     41a:	d9 01       	movw	r26, r18
     41c:	12 96       	adiw	r26, 0x02	; 2
     41e:	2c 90       	ld	r2, X
			uint8_t min = j < 8 ? validConf.minLvl[j] : 0x05;
     420:	b7 e0       	ldi	r27, 0x07	; 7
     422:	b2 15       	cp	r27, r2
     424:	38 f0       	brcs	.+14     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     426:	22 2d       	mov	r18, r2
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	2c 5e       	subi	r18, 0xEC	; 236
     42c:	3e 4d       	sbci	r19, 0xDE	; 222
     42e:	d9 01       	movw	r26, r18
     430:	bc 90       	ld	r11, X
     432:	04 c0       	rjmp	.+8      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     434:	0f 2e       	mov	r0, r31
     436:	f5 e0       	ldi	r31, 0x05	; 5
     438:	bf 2e       	mov	r11, r31
     43a:	f0 2d       	mov	r31, r0
			if (_lvl[s] < min)
     43c:	9a 01       	movw	r18, r20
     43e:	28 0f       	add	r18, r24
     440:	39 1f       	adc	r19, r25
     442:	d9 01       	movw	r26, r18
     444:	15 96       	adiw	r26, 0x05	; 5
     446:	2c 91       	ld	r18, X
     448:	15 97       	sbiw	r26, 0x05	; 5
     44a:	2b 15       	cp	r18, r11
     44c:	10 f4       	brcc	.+4      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
				_lvl[s] = 0;
     44e:	15 96       	adiw	r26, 0x05	; 5
     450:	1c 92       	st	X, r1
			int16_t tempLvl = gLevels[j] - _lvl[s]; //Difference between actual and set levels
     452:	62 2d       	mov	r22, r2
     454:	70 e0       	ldi	r23, 0x00	; 0
     456:	9b 01       	movw	r18, r22
     458:	22 0f       	add	r18, r18
     45a:	33 1f       	adc	r19, r19
     45c:	2a 5b       	subi	r18, 0xBA	; 186
     45e:	3e 4d       	sbci	r19, 0xDE	; 222
     460:	d9 01       	movw	r26, r18
     462:	2d 91       	ld	r18, X+
     464:	3c 91       	ld	r19, X
     466:	84 0f       	add	r24, r20
     468:	95 1f       	adc	r25, r21
     46a:	dc 01       	movw	r26, r24
     46c:	15 96       	adiw	r26, 0x05	; 5
     46e:	8c 91       	ld	r24, X
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	28 1b       	sub	r18, r24
     474:	39 0b       	sbc	r19, r25
			bool changed = false;
			if (tempLvl && ticksEl >= i * _linkDelay)
     476:	09 f4       	brne	.+2      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     478:	a1 c0       	rjmp	.+322    	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     47a:	e1 84       	ldd	r14, Z+9	; 0x09
     47c:	f2 84       	ldd	r15, Z+10	; 0x0a
     47e:	6e 9c       	mul	r6, r14
     480:	80 01       	movw	r16, r0
     482:	6f 9c       	mul	r6, r15
     484:	10 0d       	add	r17, r0
     486:	7e 9c       	mul	r7, r14
     488:	10 0d       	add	r17, r0
     48a:	11 24       	eor	r1, r1
     48c:	a9 81       	ldd	r26, Y+1	; 0x01
     48e:	ba 81       	ldd	r27, Y+2	; 0x02
     490:	a0 17       	cp	r26, r16
     492:	b1 07       	cpc	r27, r17
     494:	0c f4       	brge	.+2      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     496:	92 c0       	rjmp	.+292    	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
			{
				if (tempLvl > 0) //Level needs to be lowered
     498:	12 16       	cp	r1, r18
     49a:	13 06       	cpc	r1, r19
     49c:	0c f0       	brlt	.+2      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     49e:	5c c0       	rjmp	.+184    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
				{
					tempLvl -= ((tempLvl > delta) ? delta : tempLvl) - _lvl[s];
     4a0:	ac 2d       	mov	r26, r12
     4a2:	b3 2d       	mov	r27, r3
     4a4:	28 15       	cp	r18, r8
     4a6:	39 05       	cpc	r19, r9
     4a8:	0c f4       	brge	.+2      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     4aa:	d9 01       	movw	r26, r18
     4ac:	a8 1b       	sub	r26, r24
     4ae:	b9 0b       	sbc	r27, r25
     4b0:	2a 1b       	sub	r18, r26
     4b2:	3b 0b       	sbc	r19, r27
					if (tempLvl < min) //Actual level became zero
     4b4:	8b 2d       	mov	r24, r11
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	28 17       	cp	r18, r24
     4ba:	39 07       	cpc	r19, r25
     4bc:	0c f0       	brlt	.+2      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     4be:	c1 c2       	rjmp	.+1410   	; 0xa42 <__LOCK_REGION_LENGTH__+0x642>
					{
						changed = true;
						msenCtrl = false;
     4c0:	15 8e       	std	Z+29, r1	; 0x1d
						tempLvl = -((int16_t)_fadeRate << 2); //Subtract 4x fade steps, so off/on delay will be 4s
     4c2:	80 85       	ldd	r24, Z+8	; 0x08
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	88 0f       	add	r24, r24
     4c8:	99 1f       	adc	r25, r25
     4ca:	88 0f       	add	r24, r24
     4cc:	99 1f       	adc	r25, r25
     4ce:	91 95       	neg	r25
     4d0:	81 95       	neg	r24
     4d2:	91 09       	sbc	r25, r1
						channelOT.linkOnTime[j] += (uint32_t)(sysState.sysTick - _onTimeStamp) >> 5; //Add seconds
     4d4:	db 01       	movw	r26, r22
     4d6:	aa 0f       	add	r26, r26
     4d8:	bb 1f       	adc	r27, r27
     4da:	aa 0f       	add	r26, r26
     4dc:	bb 1f       	adc	r27, r27
     4de:	8d 01       	movw	r16, r26
     4e0:	0d 53       	subi	r16, 0x3D	; 61
     4e2:	1f 4d       	sbci	r17, 0xDF	; 223
     4e4:	78 01       	movw	r14, r16
     4e6:	ab ef       	ldi	r26, 0xFB	; 251
     4e8:	b0 e2       	ldi	r27, 0x20	; 32
     4ea:	0d 91       	ld	r16, X+
     4ec:	1d 91       	ld	r17, X+
     4ee:	2d 91       	ld	r18, X+
     4f0:	3c 91       	ld	r19, X
     4f2:	44 88       	ldd	r4, Z+20	; 0x14
     4f4:	55 88       	ldd	r5, Z+21	; 0x15
     4f6:	66 88       	ldd	r6, Z+22	; 0x16
     4f8:	77 88       	ldd	r7, Z+23	; 0x17
     4fa:	04 19       	sub	r16, r4
     4fc:	15 09       	sbc	r17, r5
     4fe:	26 09       	sbc	r18, r6
     500:	37 09       	sbc	r19, r7
     502:	68 94       	set
     504:	14 f8       	bld	r1, 4
     506:	36 95       	lsr	r19
     508:	27 95       	ror	r18
     50a:	17 95       	ror	r17
     50c:	07 95       	ror	r16
     50e:	16 94       	lsr	r1
     510:	d1 f7       	brne	.-12     	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
     512:	d7 01       	movw	r26, r14
     514:	4d 90       	ld	r4, X+
     516:	5d 90       	ld	r5, X+
     518:	6d 90       	ld	r6, X+
     51a:	7c 90       	ld	r7, X
     51c:	13 97       	sbiw	r26, 0x03	; 3
     51e:	04 0d       	add	r16, r4
     520:	15 1d       	adc	r17, r5
     522:	26 1d       	adc	r18, r6
     524:	37 1d       	adc	r19, r7
     526:	0d 93       	st	X+, r16
     528:	1d 93       	st	X+, r17
     52a:	2d 93       	st	X+, r18
     52c:	3c 93       	st	X, r19
     52e:	13 97       	sbiw	r26, 0x03	; 3
						channelOT.linkSwCnt[j]++; //Increment switch counter
     530:	db 01       	movw	r26, r22
     532:	aa 0f       	add	r26, r26
     534:	bb 1f       	adc	r27, r27
     536:	a9 51       	subi	r26, 0x19	; 25
     538:	bf 4d       	sbci	r27, 0xDF	; 223
     53a:	2d 91       	ld	r18, X+
     53c:	3c 91       	ld	r19, X
     53e:	11 97       	sbiw	r26, 0x01	; 1
     540:	2f 5f       	subi	r18, 0xFF	; 255
     542:	3f 4f       	sbci	r19, 0xFF	; 255
     544:	2d 93       	st	X+, r18
     546:	3c 93       	st	X, r19
						if (tempLvl < min)
							tempLvl = min;
						_onTimeStamp = sysState.sysTick;
					}
				}
				gLevels[j] = tempLvl;
     548:	66 0f       	add	r22, r22
     54a:	77 1f       	adc	r23, r23
     54c:	db 01       	movw	r26, r22
     54e:	aa 5b       	subi	r26, 0xBA	; 186
     550:	be 4d       	sbci	r27, 0xDE	; 222
     552:	8d 93       	st	X+, r24
     554:	9c 93       	st	X, r25
     556:	23 c0       	rjmp	.+70     	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
						channelOT.linkSwCnt[j]++; //Increment switch counter
					}
				}
				else //Level needs to be raised
				{
					tempLvl += ((-tempLvl > delta) ? delta : -tempLvl) + _lvl[s];
     558:	aa 27       	eor	r26, r26
     55a:	bb 27       	eor	r27, r27
     55c:	a2 1b       	sub	r26, r18
     55e:	b3 0b       	sbc	r27, r19
     560:	8a 16       	cp	r8, r26
     562:	9b 06       	cpc	r9, r27
     564:	14 f4       	brge	.+4      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
     566:	ac 2d       	mov	r26, r12
     568:	b3 2d       	mov	r27, r3
     56a:	8a 0f       	add	r24, r26
     56c:	9b 1f       	adc	r25, r27
     56e:	28 0f       	add	r18, r24
     570:	39 1f       	adc	r19, r25
					if (!gLevels[j] && tempLvl > 0) //Lamp has been switched on - remember ticks
     572:	db 01       	movw	r26, r22
     574:	aa 0f       	add	r26, r26
     576:	bb 1f       	adc	r27, r27
     578:	aa 5b       	subi	r26, 0xBA	; 186
     57a:	be 4d       	sbci	r27, 0xDE	; 222
     57c:	8d 91       	ld	r24, X+
     57e:	9c 91       	ld	r25, X
     580:	89 2b       	or	r24, r25
     582:	21 f4       	brne	.+8      	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
     584:	12 16       	cp	r1, r18
     586:	13 06       	cpc	r1, r19
     588:	0c f4       	brge	.+2      	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
     58a:	3c c2       	rjmp	.+1144   	; 0xa04 <__LOCK_REGION_LENGTH__+0x604>
						if (tempLvl < min)
							tempLvl = min;
						_onTimeStamp = sysState.sysTick;
					}
				}
				gLevels[j] = tempLvl;
     58c:	66 0f       	add	r22, r22
     58e:	77 1f       	adc	r23, r23
     590:	db 01       	movw	r26, r22
     592:	aa 5b       	subi	r26, 0xBA	; 186
     594:	be 4d       	sbci	r27, 0xDE	; 222
     596:	2d 93       	st	X+, r18
     598:	3c 93       	st	X, r19
				if (tempLvl >= 0 || changed)
     59a:	33 23       	and	r19, r19
     59c:	7c f0       	brlt	.+30     	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
				{
					gLevelChg |= 1 << j;
     59e:	20 91 45 21 	lds	r18, 0x2145	; 0x802145 <gLevelChg>
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	02 c0       	rjmp	.+4      	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
     5a8:	88 0f       	add	r24, r24
     5aa:	99 1f       	adc	r25, r25
     5ac:	2a 94       	dec	r2
     5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
     5b0:	82 2b       	or	r24, r18
     5b2:	80 93 45 21 	sts	0x2145, r24	; 0x802145 <gLevelChg>
					PORTC.OUTSET = _chActMask; //Switch on activity LED
     5b6:	83 85       	ldd	r24, Z+11	; 0x0b
     5b8:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     5bc:	d3 94       	inc	r13
	void updateLevel()
	{
		int16_t ticksEl = (int16_t)(sysState.sysTick - _tickLastChg); //Elapsed ticks since beginning of dim
		int16_t delta = (((ticksEl + 1) * _fadeRate) >> 5) - ((ticksEl * _fadeRate) >> 5); //Number of steps
		PORTC.OUTCLR = _chActMask;
		for (int8_t i = 0; i < _linkCnt; i++)
     5be:	6d 2c       	mov	r6, r13
     5c0:	0d 2c       	mov	r0, r13
     5c2:	00 0c       	add	r0, r0
     5c4:	77 08       	sbc	r7, r7
     5c6:	80 81       	ld	r24, Z
     5c8:	28 2f       	mov	r18, r24
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	62 16       	cp	r6, r18
     5ce:	73 06       	cpc	r7, r19
     5d0:	0c f4       	brge	.+2      	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
     5d2:	17 cf       	rjmp	.-466    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     5d4:	6d 80       	ldd	r6, Y+5	; 0x05
     5d6:	7e 80       	ldd	r7, Y+6	; 0x06
     5d8:	eb 81       	ldd	r30, Y+3	; 0x03
     5da:	fc 81       	ldd	r31, Y+4	; 0x04
     5dc:	31 96       	adiw	r30, 0x01	; 1
     5de:	eb 83       	std	Y+3, r30	; 0x03
     5e0:	fc 83       	std	Y+4, r31	; 0x04
     5e2:	fe e1       	ldi	r31, 0x1E	; 30
     5e4:	6f 0e       	add	r6, r31
     5e6:	71 1c       	adc	r7, r1

ISR(RTC_OVF_vect)
{
	sysState.sysTick++;
	uint8_t i;
	for (i = 0; i < 4; i++)
     5e8:	0b 81       	ldd	r16, Y+3	; 0x03
     5ea:	1c 81       	ldd	r17, Y+4	; 0x04
     5ec:	04 30       	cpi	r16, 0x04	; 4
     5ee:	11 05       	cpc	r17, r1
     5f0:	09 f0       	breq	.+2      	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
     5f2:	be ce       	rjmp	.-644    	; 0x370 <__vector_7+0x92>
			_lvl = MSEN_VALID_MIN;
		}
	}
	void updateLevel()
	{
		if (cntDown)
     5f4:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <msenCh>
     5f8:	88 23       	and	r24, r24
     5fa:	09 f4       	brne	.+2      	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
     5fc:	2d c2       	rjmp	.+1114   	; 0xa58 <__LOCK_REGION_LENGTH__+0x658>
		{
			uint16_t ton = (uint16_t)(sysState.sysTick - _onTimeStamp) >> 5;
     5fe:	e1 e0       	ldi	r30, 0x01	; 1
     600:	f0 e2       	ldi	r31, 0x20	; 32
     602:	80 91 fb 20 	lds	r24, 0x20FB	; 0x8020fb <sysState>
     606:	90 91 fc 20 	lds	r25, 0x20FC	; 0x8020fc <sysState+0x1>
     60a:	22 85       	ldd	r18, Z+10	; 0x0a
     60c:	33 85       	ldd	r19, Z+11	; 0x0b
     60e:	82 1b       	sub	r24, r18
     610:	93 0b       	sbc	r25, r19
     612:	96 95       	lsr	r25
     614:	87 95       	ror	r24
     616:	92 95       	swap	r25
     618:	82 95       	swap	r24
     61a:	8f 70       	andi	r24, 0x0F	; 15
     61c:	89 27       	eor	r24, r25
     61e:	9f 70       	andi	r25, 0x0F	; 15
     620:	89 27       	eor	r24, r25
			if (ton > _fTime)
     622:	20 85       	ldd	r18, Z+8	; 0x08
     624:	31 85       	ldd	r19, Z+9	; 0x09
     626:	28 17       	cp	r18, r24
     628:	39 07       	cpc	r19, r25
     62a:	08 f0       	brcs	.+2      	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
     62c:	73 c0       	rjmp	.+230    	; 0x714 <__LOCK_REGION_LENGTH__+0x314>
			{
				ltEnt = cntDown = false;
     62e:	10 82       	st	Z, r1
     630:	11 82       	std	Z+1, r1	; 0x01
				_linkAddr->setLevel(0); //Both on and low time are expired, turn off the lamp
     632:	63 81       	ldd	r22, Z+3	; 0x03
     634:	74 81       	ldd	r23, Z+4	; 0x04
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		uint8_t oLvl = sysState.linkLevels[_linkNum];
     636:	db 01       	movw	r26, r22
     638:	11 96       	adiw	r26, 0x01	; 1
     63a:	8c 91       	ld	r24, X
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	fc 01       	movw	r30, r24
     640:	e5 50       	subi	r30, 0x05	; 5
     642:	ff 4d       	sbci	r31, 0xDF	; 223
     644:	21 89       	ldd	r18, Z+17	; 0x11
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
     646:	42 2f       	mov	r20, r18
     648:	50 e0       	ldi	r21, 0x00	; 0
     64a:	4e 5f       	subi	r20, 0xFE	; 254
     64c:	5f 4f       	sbci	r21, 0xFF	; 255
     64e:	45 30       	cpi	r20, 0x05	; 5
     650:	51 05       	cpc	r21, r1
     652:	18 f4       	brcc	.+6      	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
     654:	22 23       	and	r18, r18
     656:	09 f4       	brne	.+2      	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
     658:	ff c1       	rjmp	.+1022   	; 0xa58 <__LOCK_REGION_LENGTH__+0x658>
			return;
		if (!msenCtrl)
     65a:	fb 01       	movw	r30, r22
     65c:	35 8d       	ldd	r19, Z+29	; 0x1d
     65e:	31 11       	cpse	r19, r1
     660:	07 c0       	rjmp	.+14     	; 0x670 <__LOCK_REGION_LENGTH__+0x270>
			direction = oLvl > level;
     662:	31 e0       	ldi	r19, 0x01	; 1
     664:	21 11       	cpse	r18, r1
     666:	01 c0       	rjmp	.+2      	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	db 01       	movw	r26, r22
     66c:	5c 96       	adiw	r26, 0x1c	; 28
     66e:	3c 93       	st	X, r19
		sysState.linkLevels[_linkNum] = level;
     670:	fc 01       	movw	r30, r24
     672:	e5 50       	subi	r30, 0x05	; 5
     674:	ff 4d       	sbci	r31, 0xDF	; 223
     676:	11 8a       	std	Z+17, r1	; 0x11

		for (uint8_t i = 0; i < _linkCnt; i++)
     678:	fb 01       	movw	r30, r22
     67a:	80 81       	ld	r24, Z
     67c:	88 23       	and	r24, r24
     67e:	39 f1       	breq	.+78     	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
     680:	db 01       	movw	r26, r22
     682:	12 96       	adiw	r26, 0x02	; 2
     684:	4f ef       	ldi	r20, 0xFF	; 255
     686:	48 0f       	add	r20, r24
     688:	50 e0       	ldi	r21, 0x00	; 0
     68a:	4d 5f       	subi	r20, 0xFD	; 253
     68c:	5f 4f       	sbci	r21, 0xFF	; 255
     68e:	46 0f       	add	r20, r22
     690:	57 1f       	adc	r21, r23
     692:	30 e0       	ldi	r19, 0x00	; 0
		{
			uint8_t j = _link[i];
     694:	ed 91       	ld	r30, X+
     696:	a9 83       	std	Y+1, r26	; 0x01
     698:	ba 83       	std	Y+2, r27	; 0x02
			uint8_t min = j < 8 ? validConf.minLvl[j] : 0x05;
			dimInProcess |= (_lvl[i] != gLevels[j]);
     69a:	f0 e0       	ldi	r31, 0x00	; 0
     69c:	ee 0f       	add	r30, r30
     69e:	ff 1f       	adc	r31, r31
     6a0:	ea 5b       	subi	r30, 0xBA	; 186
     6a2:	fe 4d       	sbci	r31, 0xDE	; 222
     6a4:	01 90       	ld	r0, Z+
     6a6:	f0 81       	ld	r31, Z
     6a8:	e0 2d       	mov	r30, r0
     6aa:	12 96       	adiw	r26, 0x02	; 2
     6ac:	8c 91       	ld	r24, X
     6ae:	12 97       	sbiw	r26, 0x02	; 2
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	21 e0       	ldi	r18, 0x01	; 1
     6b4:	8e 17       	cp	r24, r30
     6b6:	9f 07       	cpc	r25, r31
     6b8:	09 f4       	brne	.+2      	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	32 2b       	or	r19, r18
			if (!level) //Set zero level directly
				_lvl[i] = 0;
     6be:	e9 81       	ldd	r30, Y+1	; 0x01
     6c0:	fa 81       	ldd	r31, Y+2	; 0x02
     6c2:	12 82       	std	Z+2, r1	; 0x02
			return;
		if (!msenCtrl)
			direction = oLvl > level;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
     6c4:	a4 17       	cp	r26, r20
     6c6:	b5 07       	cpc	r27, r21
     6c8:	29 f7       	brne	.-54     	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
				uint16_t temp = level;
				temp *= 0xFF - min;
				_lvl[i] = (uint8_t)(temp >> 8) + min;
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     6ca:	31 11       	cpse	r19, r1
     6cc:	c5 c1       	rjmp	.+906    	; 0xa58 <__LOCK_REGION_LENGTH__+0x658>
			_tickLastChg = sysState.sysTick;
     6ce:	eb ef       	ldi	r30, 0xFB	; 251
     6d0:	f0 e2       	ldi	r31, 0x20	; 32
     6d2:	80 81       	ld	r24, Z
     6d4:	db 01       	movw	r26, r22
     6d6:	1c 96       	adiw	r26, 0x0c	; 12
     6d8:	8c 93       	st	X, r24
     6da:	1c 97       	sbiw	r26, 0x0c	; 12
     6dc:	81 81       	ldd	r24, Z+1	; 0x01
     6de:	1d 96       	adiw	r26, 0x0d	; 13
     6e0:	8c 93       	st	X, r24
     6e2:	1d 97       	sbiw	r26, 0x0d	; 13
     6e4:	82 81       	ldd	r24, Z+2	; 0x02
     6e6:	1e 96       	adiw	r26, 0x0e	; 14
     6e8:	8c 93       	st	X, r24
     6ea:	1e 97       	sbiw	r26, 0x0e	; 14
     6ec:	83 81       	ldd	r24, Z+3	; 0x03
     6ee:	1f 96       	adiw	r26, 0x0f	; 15
     6f0:	8c 93       	st	X, r24
     6f2:	1f 97       	sbiw	r26, 0x0f	; 15
     6f4:	84 81       	ldd	r24, Z+4	; 0x04
     6f6:	50 96       	adiw	r26, 0x10	; 16
     6f8:	8c 93       	st	X, r24
     6fa:	50 97       	sbiw	r26, 0x10	; 16
     6fc:	85 81       	ldd	r24, Z+5	; 0x05
     6fe:	51 96       	adiw	r26, 0x11	; 17
     700:	8c 93       	st	X, r24
     702:	51 97       	sbiw	r26, 0x11	; 17
     704:	86 81       	ldd	r24, Z+6	; 0x06
     706:	52 96       	adiw	r26, 0x12	; 18
     708:	8c 93       	st	X, r24
     70a:	52 97       	sbiw	r26, 0x12	; 18
     70c:	87 81       	ldd	r24, Z+7	; 0x07
     70e:	53 96       	adiw	r26, 0x13	; 19
     710:	8c 93       	st	X, r24
     712:	a2 c1       	rjmp	.+836    	; 0xa58 <__LOCK_REGION_LENGTH__+0x658>
			if (ton > _fTime)
			{
				ltEnt = cntDown = false;
				_linkAddr->setLevel(0); //Both on and low time are expired, turn off the lamp
			}
			else if (!ltEnt && ton > _onTime)
     714:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <msenCh+0x1>
     718:	21 11       	cpse	r18, r1
     71a:	9e c1       	rjmp	.+828    	; 0xa58 <__LOCK_REGION_LENGTH__+0x658>
     71c:	20 91 07 20 	lds	r18, 0x2007	; 0x802007 <msenCh+0x6>
     720:	30 91 08 20 	lds	r19, 0x2008	; 0x802008 <msenCh+0x7>
     724:	28 17       	cp	r18, r24
     726:	39 07       	cpc	r19, r25
     728:	08 f0       	brcs	.+2      	; 0x72c <__LOCK_REGION_LENGTH__+0x32c>
     72a:	96 c1       	rjmp	.+812    	; 0xa58 <__LOCK_REGION_LENGTH__+0x658>
			{
				ltEnt = true;
     72c:	e1 e0       	ldi	r30, 0x01	; 1
     72e:	f0 e2       	ldi	r31, 0x20	; 32
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	81 83       	std	Z+1, r24	; 0x01
				_linkAddr->direction ^= true;
     734:	23 81       	ldd	r18, Z+3	; 0x03
     736:	34 81       	ldd	r19, Z+4	; 0x04
     738:	f9 01       	movw	r30, r18
     73a:	94 8d       	ldd	r25, Z+28	; 0x1c
     73c:	89 27       	eor	r24, r25
     73e:	84 8f       	std	Z+28, r24	; 0x1c
				_linkAddr->setLevel(validConf.msenLowLvl);
     740:	e0 90 29 21 	lds	r14, 0x2129	; 0x802129 <validConf+0x15>
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		uint8_t oLvl = sysState.linkLevels[_linkNum];
     744:	81 81       	ldd	r24, Z+1	; 0x01
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	fc 01       	movw	r30, r24
     74a:	e5 50       	subi	r30, 0x05	; 5
     74c:	ff 4d       	sbci	r31, 0xDF	; 223
     74e:	61 89       	ldd	r22, Z+17	; 0x11
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
     750:	46 2f       	mov	r20, r22
     752:	50 e0       	ldi	r21, 0x00	; 0
     754:	4e 19       	sub	r20, r14
     756:	51 09       	sbc	r21, r1
     758:	4e 5f       	subi	r20, 0xFE	; 254
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	45 30       	cpi	r20, 0x05	; 5
     75e:	51 05       	cpc	r21, r1
     760:	48 f4       	brcc	.+18     	; 0x774 <__LOCK_REGION_LENGTH__+0x374>
     762:	51 e0       	ldi	r21, 0x01	; 1
     764:	e1 10       	cpse	r14, r1
     766:	01 c0       	rjmp	.+2      	; 0x76a <__LOCK_REGION_LENGTH__+0x36a>
     768:	50 e0       	ldi	r21, 0x00	; 0
     76a:	41 e0       	ldi	r20, 0x01	; 1
     76c:	61 11       	cpse	r22, r1
     76e:	40 e0       	ldi	r20, 0x00	; 0
     770:	54 13       	cpse	r21, r20
     772:	72 c1       	rjmp	.+740    	; 0xa58 <__LOCK_REGION_LENGTH__+0x658>
			return;
		if (!msenCtrl)
     774:	d9 01       	movw	r26, r18
     776:	5d 96       	adiw	r26, 0x1d	; 29
     778:	4c 91       	ld	r20, X
     77a:	41 11       	cpse	r20, r1
     77c:	06 c0       	rjmp	.+12     	; 0x78a <__LOCK_REGION_LENGTH__+0x38a>
			direction = oLvl > level;
     77e:	41 e0       	ldi	r20, 0x01	; 1
     780:	e6 16       	cp	r14, r22
     782:	08 f0       	brcs	.+2      	; 0x786 <__LOCK_REGION_LENGTH__+0x386>
     784:	40 e0       	ldi	r20, 0x00	; 0
     786:	f9 01       	movw	r30, r18
     788:	44 8f       	std	Z+28, r20	; 0x1c
		sysState.linkLevels[_linkNum] = level;
     78a:	fc 01       	movw	r30, r24
     78c:	e5 50       	subi	r30, 0x05	; 5
     78e:	ff 4d       	sbci	r31, 0xDF	; 223
     790:	e1 8a       	std	Z+17, r14	; 0x11

		for (uint8_t i = 0; i < _linkCnt; i++)
     792:	d9 01       	movw	r26, r18
     794:	8c 91       	ld	r24, X
     796:	88 23       	and	r24, r24
     798:	09 f4       	brne	.+2      	; 0x79c <__LOCK_REGION_LENGTH__+0x39c>
     79a:	46 c0       	rjmp	.+140    	; 0x828 <__LOCK_REGION_LENGTH__+0x428>
     79c:	12 96       	adiw	r26, 0x02	; 2
     79e:	81 50       	subi	r24, 0x01	; 1
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	03 96       	adiw	r24, 0x03	; 3
     7a4:	82 0f       	add	r24, r18
     7a6:	93 1f       	adc	r25, r19
     7a8:	f1 2c       	mov	r15, r1
			dimInProcess |= (_lvl[i] != gLevels[j]);
			if (!level) //Set zero level directly
				_lvl[i] = 0;
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
     7aa:	6e 2d       	mov	r22, r14
     7ac:	70 e0       	ldi	r23, 0x00	; 0
				temp *= 0xFF - min;
				_lvl[i] = (uint8_t)(temp >> 8) + min;
     7ae:	4f ef       	ldi	r20, 0xFF	; 255
     7b0:	50 e0       	ldi	r21, 0x00	; 0
     7b2:	39 01       	movw	r6, r18
			direction = oLvl > level;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			uint8_t j = _link[i];
     7b4:	2d 91       	ld	r18, X+
			uint8_t min = j < 8 ? validConf.minLvl[j] : 0x05;
     7b6:	28 30       	cpi	r18, 0x08	; 8
     7b8:	40 f4       	brcc	.+16     	; 0x7ca <__LOCK_REGION_LENGTH__+0x3ca>
     7ba:	e2 2f       	mov	r30, r18
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	8f 01       	movw	r16, r30
     7c0:	0c 5e       	subi	r16, 0xEC	; 236
     7c2:	1e 4d       	sbci	r17, 0xDE	; 222
     7c4:	f8 01       	movw	r30, r16
     7c6:	b0 80       	ld	r11, Z
     7c8:	04 c0       	rjmp	.+8      	; 0x7d2 <__LOCK_REGION_LENGTH__+0x3d2>
     7ca:	0f 2e       	mov	r0, r31
     7cc:	f5 e0       	ldi	r31, 0x05	; 5
     7ce:	bf 2e       	mov	r11, r31
     7d0:	f0 2d       	mov	r31, r0
     7d2:	8d 01       	movw	r16, r26
			dimInProcess |= (_lvl[i] != gLevels[j]);
     7d4:	e2 2f       	mov	r30, r18
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
     7d8:	ee 0f       	add	r30, r30
     7da:	ff 1f       	adc	r31, r31
     7dc:	ea 5b       	subi	r30, 0xBA	; 186
     7de:	fe 4d       	sbci	r31, 0xDE	; 222
     7e0:	c0 80       	ld	r12, Z
     7e2:	d1 80       	ldd	r13, Z+1	; 0x01
     7e4:	12 96       	adiw	r26, 0x02	; 2
     7e6:	ec 91       	ld	r30, X
     7e8:	12 97       	sbiw	r26, 0x02	; 2
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	31 e0       	ldi	r19, 0x01	; 1
     7ee:	ec 15       	cp	r30, r12
     7f0:	fd 05       	cpc	r31, r13
     7f2:	09 f4       	brne	.+2      	; 0x7f6 <__LOCK_REGION_LENGTH__+0x3f6>
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	f3 2a       	or	r15, r19
			if (!level) //Set zero level directly
     7f8:	e1 10       	cpse	r14, r1
     7fa:	03 c0       	rjmp	.+6      	; 0x802 <__LOCK_REGION_LENGTH__+0x402>
				_lvl[i] = 0;
     7fc:	f8 01       	movw	r30, r16
     7fe:	12 82       	std	Z+2, r1	; 0x02
     800:	0d c0       	rjmp	.+26     	; 0x81c <__LOCK_REGION_LENGTH__+0x41c>
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= 0xFF - min;
				_lvl[i] = (uint8_t)(temp >> 8) + min;
     802:	6a 01       	movw	r12, r20
     804:	cb 18       	sub	r12, r11
     806:	d1 08       	sbc	r13, r1
     808:	c6 9e       	mul	r12, r22
     80a:	40 01       	movw	r8, r0
     80c:	c7 9e       	mul	r12, r23
     80e:	90 0c       	add	r9, r0
     810:	d6 9e       	mul	r13, r22
     812:	90 0c       	add	r9, r0
     814:	11 24       	eor	r1, r1
     816:	b9 0c       	add	r11, r9
     818:	f8 01       	movw	r30, r16
     81a:	b2 82       	std	Z+2, r11	; 0x02
			return;
		if (!msenCtrl)
			direction = oLvl > level;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
     81c:	a8 17       	cp	r26, r24
     81e:	b9 07       	cpc	r27, r25
     820:	49 f6       	brne	.-110    	; 0x7b4 <__LOCK_REGION_LENGTH__+0x3b4>
     822:	93 01       	movw	r18, r6
				uint16_t temp = level;
				temp *= 0xFF - min;
				_lvl[i] = (uint8_t)(temp >> 8) + min;
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     824:	f1 10       	cpse	r15, r1
     826:	18 c1       	rjmp	.+560    	; 0xa58 <__LOCK_REGION_LENGTH__+0x658>
			_tickLastChg = sysState.sysTick;
     828:	eb ef       	ldi	r30, 0xFB	; 251
     82a:	f0 e2       	ldi	r31, 0x20	; 32
     82c:	80 81       	ld	r24, Z
     82e:	d9 01       	movw	r26, r18
     830:	1c 96       	adiw	r26, 0x0c	; 12
     832:	8c 93       	st	X, r24
     834:	1c 97       	sbiw	r26, 0x0c	; 12
     836:	81 81       	ldd	r24, Z+1	; 0x01
     838:	1d 96       	adiw	r26, 0x0d	; 13
     83a:	8c 93       	st	X, r24
     83c:	1d 97       	sbiw	r26, 0x0d	; 13
     83e:	82 81       	ldd	r24, Z+2	; 0x02
     840:	1e 96       	adiw	r26, 0x0e	; 14
     842:	8c 93       	st	X, r24
     844:	1e 97       	sbiw	r26, 0x0e	; 14
     846:	83 81       	ldd	r24, Z+3	; 0x03
     848:	1f 96       	adiw	r26, 0x0f	; 15
     84a:	8c 93       	st	X, r24
     84c:	1f 97       	sbiw	r26, 0x0f	; 15
     84e:	84 81       	ldd	r24, Z+4	; 0x04
     850:	50 96       	adiw	r26, 0x10	; 16
     852:	8c 93       	st	X, r24
     854:	50 97       	sbiw	r26, 0x10	; 16
     856:	85 81       	ldd	r24, Z+5	; 0x05
     858:	51 96       	adiw	r26, 0x11	; 17
     85a:	8c 93       	st	X, r24
     85c:	51 97       	sbiw	r26, 0x11	; 17
     85e:	86 81       	ldd	r24, Z+6	; 0x06
     860:	52 96       	adiw	r26, 0x12	; 18
     862:	8c 93       	st	X, r24
     864:	52 97       	sbiw	r26, 0x12	; 18
     866:	87 81       	ldd	r24, Z+7	; 0x07
     868:	53 96       	adiw	r26, 0x13	; 19
     86a:	8c 93       	st	X, r24
     86c:	f5 c0       	rjmp	.+490    	; 0xa58 <__LOCK_REGION_LENGTH__+0x658>
	uint8_t i;
	for (i = 0; i < 4; i++)
		links[i].updateLevel();
	msenCh.updateLevel();
	for (i = 0; i < 9; i++)
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
     86e:	fc 01       	movw	r30, r24
     870:	ee 0f       	add	r30, r30
     872:	ff 1f       	adc	r31, r31
     874:	ea 5b       	subi	r30, 0xBA	; 186
     876:	fe 4d       	sbci	r31, 0xDE	; 222
     878:	20 81       	ld	r18, Z
     87a:	31 81       	ldd	r19, Z+1	; 0x01
     87c:	12 16       	cp	r1, r18
     87e:	13 06       	cpc	r1, r19
     880:	44 f4       	brge	.+16     	; 0x892 <__LOCK_REGION_LENGTH__+0x492>
     882:	fc 01       	movw	r30, r24
     884:	ee 0f       	add	r30, r30
     886:	ff 1f       	adc	r31, r31
     888:	ea 5b       	subi	r30, 0xBA	; 186
     88a:	fe 4d       	sbci	r31, 0xDE	; 222
     88c:	20 81       	ld	r18, Z
     88e:	31 81       	ldd	r19, Z+1	; 0x01
     890:	01 c0       	rjmp	.+2      	; 0x894 <__LOCK_REGION_LENGTH__+0x494>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	2d 93       	st	X+, r18
     896:	01 96       	adiw	r24, 0x01	; 1
	sysState.sysTick++;
	uint8_t i;
	for (i = 0; i < 4; i++)
		links[i].updateLevel();
	msenCh.updateLevel();
	for (i = 0; i < 9; i++)
     898:	89 30       	cpi	r24, 0x09	; 9
     89a:	91 05       	cpc	r25, r1
     89c:	41 f7       	brne	.-48     	; 0x86e <__LOCK_REGION_LENGTH__+0x46e>
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
	DSI8xFrames[0] = gLevelChg; //DSI start bit
     89e:	80 91 45 21 	lds	r24, 0x2145	; 0x802145 <gLevelChg>
     8a2:	80 93 30 21 	sts	0x2130, r24	; 0x802130 <DSI8xFrames>
     8a6:	19 82       	std	Y+1, r1	; 0x01
     8a8:	1a 82       	std	Y+2, r1	; 0x02
     8aa:	68 94       	set
     8ac:	ee 24       	eor	r14, r14
     8ae:	e3 f8       	bld	r14, 3
     8b0:	01 e0       	ldi	r16, 0x01	; 1
     8b2:	10 e0       	ldi	r17, 0x00	; 0
     8b4:	d8 01       	movw	r26, r16
     8b6:	09 80       	ldd	r0, Y+1	; 0x01
     8b8:	02 c0       	rjmp	.+4      	; 0x8be <__LOCK_REGION_LENGTH__+0x4be>
     8ba:	aa 0f       	add	r26, r26
     8bc:	bb 1f       	adc	r27, r27
     8be:	0a 94       	dec	r0
     8c0:	e2 f7       	brpl	.-8      	; 0x8ba <__LOCK_REGION_LENGTH__+0x4ba>
     8c2:	eb ef       	ldi	r30, 0xFB	; 251
     8c4:	f0 e2       	ldi	r31, 0x20	; 32
		{
			tmp1 >>= 1;
			tmp0 >>= 1;
			if (gLevelChg & (1 << j)) //Particular level has been changed
			{
				if (sysState.setLevels[j] & (1 << i)) //Set upper half-bit
     8c6:	20 e0       	ldi	r18, 0x00	; 0
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	d1 2c       	mov	r13, r1
     8cc:	f1 2c       	mov	r15, r1
	for (i = 0; i < 8; i++) //DSI frame bits 0-7
	{
		uint8_t tmp0 = 0, tmp1 = 0, j;
		for (j = 0; j < 8; j++) //Levels
		{
			tmp1 >>= 1;
     8ce:	6d 2d       	mov	r22, r13
     8d0:	70 e0       	ldi	r23, 0x00	; 0
     8d2:	75 95       	asr	r23
     8d4:	67 95       	ror	r22
     8d6:	d6 2e       	mov	r13, r22
			tmp0 >>= 1;
     8d8:	4f 2d       	mov	r20, r15
     8da:	50 e0       	ldi	r21, 0x00	; 0
     8dc:	55 95       	asr	r21
     8de:	47 95       	ror	r20
     8e0:	f4 2e       	mov	r15, r20
			if (gLevelChg & (1 << j)) //Particular level has been changed
     8e2:	80 91 45 21 	lds	r24, 0x2145	; 0x802145 <gLevelChg>
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	02 2e       	mov	r0, r18
     8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <__LOCK_REGION_LENGTH__+0x4f0>
     8ec:	95 95       	asr	r25
     8ee:	87 95       	ror	r24
     8f0:	0a 94       	dec	r0
     8f2:	e2 f7       	brpl	.-8      	; 0x8ec <__LOCK_REGION_LENGTH__+0x4ec>
     8f4:	80 ff       	sbrs	r24, 0
     8f6:	0d c0       	rjmp	.+26     	; 0x912 <__LOCK_REGION_LENGTH__+0x512>
			{
				if (sysState.setLevels[j] & (1 << i)) //Set upper half-bit
     8f8:	80 85       	ldd	r24, Z+8	; 0x08
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	8a 23       	and	r24, r26
     8fe:	9b 23       	and	r25, r27
     900:	89 2b       	or	r24, r25
     902:	21 f0       	breq	.+8      	; 0x90c <__LOCK_REGION_LENGTH__+0x50c>
					tmp1 |= 0x80;
     904:	46 2f       	mov	r20, r22
     906:	40 68       	ori	r20, 0x80	; 128
     908:	d4 2e       	mov	r13, r20
     90a:	03 c0       	rjmp	.+6      	; 0x912 <__LOCK_REGION_LENGTH__+0x512>
				else
					tmp0 |= 0x80; //Set lower half-bit (one-zero transition)
     90c:	64 2f       	mov	r22, r20
     90e:	60 68       	ori	r22, 0x80	; 128
     910:	f6 2e       	mov	r15, r22
     912:	2f 5f       	subi	r18, 0xFF	; 255
     914:	3f 4f       	sbci	r19, 0xFF	; 255
     916:	31 96       	adiw	r30, 0x01	; 1
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
	DSI8xFrames[0] = gLevelChg; //DSI start bit
	for (i = 0; i < 8; i++) //DSI frame bits 0-7
	{
		uint8_t tmp0 = 0, tmp1 = 0, j;
		for (j = 0; j < 8; j++) //Levels
     918:	28 30       	cpi	r18, 0x08	; 8
     91a:	31 05       	cpc	r19, r1
     91c:	c1 f6       	brne	.-80     	; 0x8ce <__LOCK_REGION_LENGTH__+0x4ce>
				else
					tmp0 |= 0x80; //Set lower half-bit (one-zero transition)
			}
		}
		j = (8 - i) << 1;
		DSI8xFrames[j - 1] = tmp1;
     91e:	8e 2d       	mov	r24, r14
     920:	88 0f       	add	r24, r24
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	fc 01       	movw	r30, r24
     926:	e1 5d       	subi	r30, 0xD1	; 209
     928:	fe 4d       	sbci	r31, 0xDE	; 222
     92a:	d0 82       	st	Z, r13
		DSI8xFrames[j] = tmp0; //Manchester coded
     92c:	fc 01       	movw	r30, r24
     92e:	e0 5d       	subi	r30, 0xD0	; 208
     930:	fe 4d       	sbci	r31, 0xDE	; 222
     932:	f0 82       	st	Z, r15
     934:	ea 94       	dec	r14
     936:	89 81       	ldd	r24, Y+1	; 0x01
     938:	9a 81       	ldd	r25, Y+2	; 0x02
     93a:	01 96       	adiw	r24, 0x01	; 1
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	9a 83       	std	Y+2, r25	; 0x02
		links[i].updateLevel();
	msenCh.updateLevel();
	for (i = 0; i < 9; i++)
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
	DSI8xFrames[0] = gLevelChg; //DSI start bit
	for (i = 0; i < 8; i++) //DSI frame bits 0-7
     940:	e1 10       	cpse	r14, r1
     942:	b8 cf       	rjmp	.-144    	; 0x8b4 <__LOCK_REGION_LENGTH__+0x4b4>
		}
		j = (8 - i) << 1;
		DSI8xFrames[j - 1] = tmp1;
		DSI8xFrames[j] = tmp0; //Manchester coded
	}
	DSI8xFrames[17] = 0; //DSI stop bit
     944:	10 92 41 21 	sts	0x2141, r1	; 0x802141 <DSI8xFrames+0x11>
	gLevelChg = 0; //Clear flags for changed levels
     948:	10 92 45 21 	sts	0x2145, r1	; 0x802145 <gLevelChg>
	if (sysState.setLevels[8] > 0) //On/off channel processing
     94c:	80 91 0b 21 	lds	r24, 0x210B	; 0x80210b <sysState+0x10>
     950:	88 23       	and	r24, r24
     952:	21 f0       	breq	.+8      	; 0x95c <__LOCK_REGION_LENGTH__+0x55c>
		PORTA.OUTSET = PIN7_bm;
     954:	80 e8       	ldi	r24, 0x80	; 128
     956:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
     95a:	03 c0       	rjmp	.+6      	; 0x962 <__LOCK_REGION_LENGTH__+0x562>
	else
		PORTA.OUTCLR = PIN7_bm;
     95c:	80 e8       	ldi	r24, 0x80	; 128
     95e:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>

	if ((char)sysState.sysTick % 4 == 0) //Initialize conversion sequence 8 times per second
     962:	80 91 fb 20 	lds	r24, 0x20FB	; 0x8020fb <sysState>
     966:	83 70       	andi	r24, 0x03	; 3
     968:	39 f4       	brne	.+14     	; 0x978 <__LOCK_REGION_LENGTH__+0x578>
	{
		ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN1_gc;
     96a:	e0 e0       	ldi	r30, 0x00	; 0
     96c:	f2 e0       	ldi	r31, 0x02	; 2
     96e:	88 e0       	ldi	r24, 0x08	; 8
     970:	81 a3       	std	Z+33, r24	; 0x21
		ADCA.CTRLA |= ADC_START_bm; //Start conversion from pin 1 (channel 1)
     972:	80 81       	ld	r24, Z
     974:	84 60       	ori	r24, 0x04	; 4
     976:	80 83       	st	Z, r24
	}

	if (!((uint8_t)sysState.sysTick & 0x1F))
     978:	80 91 fb 20 	lds	r24, 0x20FB	; 0x8020fb <sysState>
     97c:	8f 71       	andi	r24, 0x1F	; 31
     97e:	19 f4       	brne	.+6      	; 0x986 <__LOCK_REGION_LENGTH__+0x586>
		PORTC.OUTTGL = PIN0_bm; //Heartbeat LED
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	80 93 47 06 	sts	0x0647, r24	; 0x800647 <__TEXT_REGION_LENGTH__+0x700647>

	if (((uint32_t)sysState.sysTick & 0x7FFFF) == 0) //Save state to EEPROM every 4.5 hrs
     986:	80 91 fb 20 	lds	r24, 0x20FB	; 0x8020fb <sysState>
     98a:	90 91 fc 20 	lds	r25, 0x20FC	; 0x8020fc <sysState+0x1>
     98e:	a0 91 fd 20 	lds	r26, 0x20FD	; 0x8020fd <sysState+0x2>
     992:	b0 91 fe 20 	lds	r27, 0x20FE	; 0x8020fe <sysState+0x3>
     996:	a7 70       	andi	r26, 0x07	; 7
     998:	bb 27       	eor	r27, r27
     99a:	89 2b       	or	r24, r25
     99c:	8a 2b       	or	r24, r26
     99e:	8b 2b       	or	r24, r27
     9a0:	41 f4       	brne	.+16     	; 0x9b2 <__LOCK_REGION_LENGTH__+0x5b2>
		eeprom_update_block(&channelOT, &savedCOT, sizeof(channelsOnTime));
     9a2:	48 e3       	ldi	r20, 0x38	; 56
     9a4:	50 e0       	ldi	r21, 0x00	; 0
     9a6:	6a e1       	ldi	r22, 0x1A	; 26
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	83 ec       	ldi	r24, 0xC3	; 195
     9ac:	90 e2       	ldi	r25, 0x20	; 32
     9ae:	0e 94 81 0a 	call	0x1502	; 0x1502 <eeprom_update_block>

	if (rxMode == SetConfig && 2 < ++rxMark) //We are currently receiving data packet
     9b2:	80 91 44 21 	lds	r24, 0x2144	; 0x802144 <rxMode>
     9b6:	83 33       	cpi	r24, 0x33	; 51
     9b8:	b9 f4       	brne	.+46     	; 0x9e8 <__LOCK_REGION_LENGTH__+0x5e8>
     9ba:	80 91 43 21 	lds	r24, 0x2143	; 0x802143 <rxMark>
     9be:	8f 5f       	subi	r24, 0xFF	; 255
     9c0:	80 93 43 21 	sts	0x2143, r24	; 0x802143 <rxMark>
     9c4:	83 30       	cpi	r24, 0x03	; 3
     9c6:	80 f0       	brcs	.+32     	; 0x9e8 <__LOCK_REGION_LENGTH__+0x5e8>
	{
		EDMA.CH0.CTRLA = 0;
     9c8:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__TEXT_REGION_LENGTH__+0x700110>
		rxMode = 0; //Packet considered lost
     9cc:	10 92 44 21 	sts	0x2144, r1	; 0x802144 <rxMode>
		USARTC0.CTRLB |= USART_MPCM_bm; //Set MPCM bit
     9d0:	e0 ec       	ldi	r30, 0xC0	; 192
     9d2:	f8 e0       	ldi	r31, 0x08	; 8
     9d4:	83 81       	ldd	r24, Z+3	; 0x03
     9d6:	82 60       	ori	r24, 0x02	; 2
     9d8:	83 83       	std	Z+3, r24	; 0x03
		USARTC0.CTRLA = USART_DRIE_bm | USART_RXCINTLVL_HI_gc;
     9da:	80 e7       	ldi	r24, 0x70	; 112
     9dc:	82 83       	std	Z+2, r24	; 0x02
		while (EDMA.CH0.CTRLB & EDMA_CH_CHBUSY_bm);
     9de:	e0 e0       	ldi	r30, 0x00	; 0
     9e0:	f1 e0       	ldi	r31, 0x01	; 1
     9e2:	81 89       	ldd	r24, Z+17	; 0x11
     9e4:	88 23       	and	r24, r24
     9e6:	ec f3       	brlt	.-6      	; 0x9e2 <__LOCK_REGION_LENGTH__+0x5e2>
	}
	framePtr = DSI8xFrames;
     9e8:	80 e3       	ldi	r24, 0x30	; 48
     9ea:	91 e2       	ldi	r25, 0x21	; 33
     9ec:	80 93 2e 21 	sts	0x212E, r24	; 0x80212e <framePtr>
     9f0:	90 93 2f 21 	sts	0x212F, r25	; 0x80212f <framePtr+0x1>
	TCD5.INTFLAGS |= TC5_OVFIF_bm;
     9f4:	e0 e4       	ldi	r30, 0x40	; 64
     9f6:	f9 e0       	ldi	r31, 0x09	; 9
     9f8:	84 85       	ldd	r24, Z+12	; 0x0c
     9fa:	81 60       	ori	r24, 0x01	; 1
     9fc:	84 87       	std	Z+12, r24	; 0x0c
	TCD5.INTCTRLA = TC_OVFINTLVL_HI_gc;
     9fe:	83 e0       	ldi	r24, 0x03	; 3
     a00:	86 83       	std	Z+6, r24	; 0x06
}
     a02:	2f c0       	rjmp	.+94     	; 0xa62 <__LOCK_REGION_LENGTH__+0x662>
				else //Level needs to be raised
				{
					tempLvl += ((-tempLvl > delta) ? delta : -tempLvl) + _lvl[s];
					if (!gLevels[j] && tempLvl > 0) //Lamp has been switched on - remember ticks
					{
						if (tempLvl < min)
     a04:	8b 2d       	mov	r24, r11
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	28 17       	cp	r18, r24
     a0a:	39 07       	cpc	r19, r25
     a0c:	0c f4       	brge	.+2      	; 0xa10 <__LOCK_REGION_LENGTH__+0x610>
     a0e:	9c 01       	movw	r18, r24
							tempLvl = min;
						_onTimeStamp = sysState.sysTick;
     a10:	ab ef       	ldi	r26, 0xFB	; 251
     a12:	b0 e2       	ldi	r27, 0x20	; 32
     a14:	8c 91       	ld	r24, X
     a16:	84 8b       	std	Z+20, r24	; 0x14
     a18:	80 91 fc 20 	lds	r24, 0x20FC	; 0x8020fc <sysState+0x1>
     a1c:	85 8b       	std	Z+21, r24	; 0x15
     a1e:	80 91 fd 20 	lds	r24, 0x20FD	; 0x8020fd <sysState+0x2>
     a22:	86 8b       	std	Z+22, r24	; 0x16
     a24:	80 91 fe 20 	lds	r24, 0x20FE	; 0x8020fe <sysState+0x3>
     a28:	87 8b       	std	Z+23, r24	; 0x17
     a2a:	80 91 ff 20 	lds	r24, 0x20FF	; 0x8020ff <sysState+0x4>
     a2e:	80 8f       	std	Z+24, r24	; 0x18
     a30:	80 91 00 21 	lds	r24, 0x2100	; 0x802100 <sysState+0x5>
     a34:	81 8f       	std	Z+25, r24	; 0x19
     a36:	80 91 01 21 	lds	r24, 0x2101	; 0x802101 <sysState+0x6>
     a3a:	82 8f       	std	Z+26, r24	; 0x1a
     a3c:	80 91 02 21 	lds	r24, 0x2102	; 0x802102 <sysState+0x7>
     a40:	83 8f       	std	Z+27, r24	; 0x1b
					}
				}
				gLevels[j] = tempLvl;
     a42:	66 0f       	add	r22, r22
     a44:	77 1f       	adc	r23, r23
     a46:	db 01       	movw	r26, r22
     a48:	aa 5b       	subi	r26, 0xBA	; 186
     a4a:	be 4d       	sbci	r27, 0xDE	; 222
     a4c:	2d 93       	st	X+, r18
     a4e:	3c 93       	st	X, r19
				if (tempLvl >= 0 || changed)
     a50:	33 23       	and	r19, r19
     a52:	0c f0       	brlt	.+2      	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     a54:	a4 cd       	rjmp	.-1208   	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
     a56:	b2 cd       	rjmp	.-1180   	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     a58:	a3 e0       	ldi	r26, 0x03	; 3
     a5a:	b1 e2       	ldi	r27, 0x21	; 33
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			uint8_t j = _link[i];
			uint8_t min = j < 8 ? validConf.minLvl[j] : 0x05;
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	06 cf       	rjmp	.-500    	; 0x86e <__LOCK_REGION_LENGTH__+0x46e>
		while (EDMA.CH0.CTRLB & EDMA_CH_CHBUSY_bm);
	}
	framePtr = DSI8xFrames;
	TCD5.INTFLAGS |= TC5_OVFIF_bm;
	TCD5.INTCTRLA = TC_OVFINTLVL_HI_gc;
}
     a62:	27 96       	adiw	r28, 0x07	; 7
     a64:	cd bf       	out	0x3d, r28	; 61
     a66:	de bf       	out	0x3e, r29	; 62
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	ff 91       	pop	r31
     a6e:	ef 91       	pop	r30
     a70:	bf 91       	pop	r27
     a72:	af 91       	pop	r26
     a74:	9f 91       	pop	r25
     a76:	8f 91       	pop	r24
     a78:	7f 91       	pop	r23
     a7a:	6f 91       	pop	r22
     a7c:	5f 91       	pop	r21
     a7e:	4f 91       	pop	r20
     a80:	3f 91       	pop	r19
     a82:	2f 91       	pop	r18
     a84:	1f 91       	pop	r17
     a86:	0f 91       	pop	r16
     a88:	ff 90       	pop	r15
     a8a:	ef 90       	pop	r14
     a8c:	df 90       	pop	r13
     a8e:	cf 90       	pop	r12
     a90:	bf 90       	pop	r11
     a92:	af 90       	pop	r10
     a94:	9f 90       	pop	r9
     a96:	8f 90       	pop	r8
     a98:	7f 90       	pop	r7
     a9a:	6f 90       	pop	r6
     a9c:	5f 90       	pop	r5
     a9e:	4f 90       	pop	r4
     aa0:	3f 90       	pop	r3
     aa2:	2f 90       	pop	r2
     aa4:	0f 90       	pop	r0
     aa6:	0f be       	out	0x3f, r0	; 63
     aa8:	0f 90       	pop	r0
     aaa:	1f 90       	pop	r1
     aac:	18 95       	reti

00000aae <__vector_34>:

ISR(ADCA_CH0_vect)
{
     aae:	1f 92       	push	r1
     ab0:	0f 92       	push	r0
     ab2:	0f b6       	in	r0, 0x3f	; 63
     ab4:	0f 92       	push	r0
     ab6:	11 24       	eor	r1, r1
     ab8:	af 92       	push	r10
     aba:	bf 92       	push	r11
     abc:	cf 92       	push	r12
     abe:	df 92       	push	r13
     ac0:	ef 92       	push	r14
     ac2:	ff 92       	push	r15
     ac4:	0f 93       	push	r16
     ac6:	1f 93       	push	r17
     ac8:	2f 93       	push	r18
     aca:	3f 93       	push	r19
     acc:	4f 93       	push	r20
     ace:	5f 93       	push	r21
     ad0:	6f 93       	push	r22
     ad2:	7f 93       	push	r23
     ad4:	8f 93       	push	r24
     ad6:	9f 93       	push	r25
     ad8:	af 93       	push	r26
     ada:	bf 93       	push	r27
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	ef 93       	push	r30
     ae2:	ff 93       	push	r31
	static uint8_t sAdcCnt = 0;
	int16_t result = ADCA.CH0RES;
     ae4:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__TEXT_REGION_LENGTH__+0x700210>
     ae8:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__TEXT_REGION_LENGTH__+0x700211>
	if (sAdcCnt < 4 && LINK_VALID_MIN < result && result < LINK_VALID_MAX)
     aec:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <_edata>
     af0:	e4 30       	cpi	r30, 0x04	; 4
     af2:	08 f0       	brcs	.+2      	; 0xaf6 <__vector_34+0x48>
     af4:	9e c1       	rjmp	.+828    	; 0xe32 <__vector_34+0x384>
     af6:	9c 01       	movw	r18, r24
     af8:	2a 58       	subi	r18, 0x8A	; 138
     afa:	33 41       	sbci	r19, 0x13	; 19
     afc:	2f 3c       	cpi	r18, 0xCF	; 207
     afe:	37 46       	sbci	r19, 0x67	; 103
     b00:	08 f0       	brcs	.+2      	; 0xb04 <__vector_34+0x56>
     b02:	86 c1       	rjmp	.+780    	; 0xe10 <__vector_34+0x362>
	{
		sysState.linksMask |= (1 << sAdcCnt); //Set 'valid' bit
     b04:	2e 2f       	mov	r18, r30
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	ab ef       	ldi	r26, 0xFB	; 251
     b0a:	b0 e2       	ldi	r27, 0x20	; 32
     b0c:	c1 e0       	ldi	r28, 0x01	; 1
     b0e:	d0 e0       	ldi	r29, 0x00	; 0
     b10:	0e 2e       	mov	r0, r30
     b12:	02 c0       	rjmp	.+4      	; 0xb18 <__vector_34+0x6a>
     b14:	cc 0f       	add	r28, r28
     b16:	dd 1f       	adc	r29, r29
     b18:	0a 94       	dec	r0
     b1a:	e2 f7       	brpl	.-8      	; 0xb14 <__vector_34+0x66>
     b1c:	55 96       	adiw	r26, 0x15	; 21
     b1e:	6c 91       	ld	r22, X
     b20:	55 97       	sbiw	r26, 0x15	; 21
     b22:	c6 2b       	or	r28, r22
     b24:	55 96       	adiw	r26, 0x15	; 21
     b26:	cc 93       	st	X, r28
		if (result < LINK_ON_BARRIER)
     b28:	85 34       	cpi	r24, 0x45	; 69
     b2a:	ab e1       	ldi	r26, 0x1B	; 27
     b2c:	9a 07       	cpc	r25, r26
     b2e:	0c f0       	brlt	.+2      	; 0xb32 <__vector_34+0x84>
     b30:	a8 c0       	rjmp	.+336    	; 0xc82 <__vector_34+0x1d4>
		{
			result = 0;
			if (sysState.linksMask & (0x10 << sAdcCnt)) //Previous level was non-zero
     b32:	80 e1       	ldi	r24, 0x10	; 16
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	0e 2e       	mov	r0, r30
     b38:	02 c0       	rjmp	.+4      	; 0xb3e <__vector_34+0x90>
     b3a:	88 0f       	add	r24, r24
     b3c:	99 1f       	adc	r25, r25
     b3e:	0a 94       	dec	r0
     b40:	e2 f7       	brpl	.-8      	; 0xb3a <__vector_34+0x8c>
     b42:	4c 2f       	mov	r20, r28
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	48 23       	and	r20, r24
     b48:	59 23       	and	r21, r25
     b4a:	45 2b       	or	r20, r21
     b4c:	09 f4       	brne	.+2      	; 0xb50 <__vector_34+0xa2>
     b4e:	94 c0       	rjmp	.+296    	; 0xc78 <__vector_34+0x1ca>
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		uint8_t oLvl = sysState.linkLevels[_linkNum];
     b50:	4e e1       	ldi	r20, 0x1E	; 30
     b52:	42 9f       	mul	r20, r18
     b54:	d0 01       	movw	r26, r0
     b56:	43 9f       	mul	r20, r19
     b58:	b0 0d       	add	r27, r0
     b5a:	11 24       	eor	r1, r1
     b5c:	ad 5e       	subi	r26, 0xED	; 237
     b5e:	bf 4d       	sbci	r27, 0xDF	; 223
     b60:	11 96       	adiw	r26, 0x01	; 1
     b62:	4c 91       	ld	r20, X
     b64:	50 e0       	ldi	r21, 0x00	; 0
     b66:	da 01       	movw	r26, r20
     b68:	a5 50       	subi	r26, 0x05	; 5
     b6a:	bf 4d       	sbci	r27, 0xDF	; 223
     b6c:	51 96       	adiw	r26, 0x11	; 17
     b6e:	fc 91       	ld	r31, X
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
     b70:	6f 2f       	mov	r22, r31
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	6e 5f       	subi	r22, 0xFE	; 254
     b76:	7f 4f       	sbci	r23, 0xFF	; 255
     b78:	65 30       	cpi	r22, 0x05	; 5
     b7a:	71 05       	cpc	r23, r1
     b7c:	18 f4       	brcc	.+6      	; 0xb84 <__vector_34+0xd6>
     b7e:	ff 23       	and	r31, r31
     b80:	09 f4       	brne	.+2      	; 0xb84 <__vector_34+0xd6>
     b82:	7a c0       	rjmp	.+244    	; 0xc78 <__vector_34+0x1ca>
			return;
		if (!msenCtrl)
     b84:	6e e1       	ldi	r22, 0x1E	; 30
     b86:	62 9f       	mul	r22, r18
     b88:	d0 01       	movw	r26, r0
     b8a:	63 9f       	mul	r22, r19
     b8c:	b0 0d       	add	r27, r0
     b8e:	11 24       	eor	r1, r1
     b90:	ad 5e       	subi	r26, 0xED	; 237
     b92:	bf 4d       	sbci	r27, 0xDF	; 223
     b94:	5d 96       	adiw	r26, 0x1d	; 29
     b96:	6c 91       	ld	r22, X
     b98:	61 11       	cpse	r22, r1
     b9a:	0e c0       	rjmp	.+28     	; 0xbb8 <__vector_34+0x10a>
			direction = oLvl > level;
     b9c:	6e e1       	ldi	r22, 0x1E	; 30
     b9e:	62 9f       	mul	r22, r18
     ba0:	d0 01       	movw	r26, r0
     ba2:	63 9f       	mul	r22, r19
     ba4:	b0 0d       	add	r27, r0
     ba6:	11 24       	eor	r1, r1
     ba8:	ad 5e       	subi	r26, 0xED	; 237
     baa:	bf 4d       	sbci	r27, 0xDF	; 223
     bac:	61 e0       	ldi	r22, 0x01	; 1
     bae:	f1 11       	cpse	r31, r1
     bb0:	01 c0       	rjmp	.+2      	; 0xbb4 <__vector_34+0x106>
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	5c 96       	adiw	r26, 0x1c	; 28
     bb6:	6c 93       	st	X, r22
		sysState.linkLevels[_linkNum] = level;
     bb8:	da 01       	movw	r26, r20
     bba:	a5 50       	subi	r26, 0x05	; 5
     bbc:	bf 4d       	sbci	r27, 0xDF	; 223
     bbe:	51 96       	adiw	r26, 0x11	; 17
     bc0:	1c 92       	st	X, r1

		for (uint8_t i = 0; i < _linkCnt; i++)
     bc2:	4e e1       	ldi	r20, 0x1E	; 30
     bc4:	42 9f       	mul	r20, r18
     bc6:	d0 01       	movw	r26, r0
     bc8:	43 9f       	mul	r20, r19
     bca:	b0 0d       	add	r27, r0
     bcc:	11 24       	eor	r1, r1
     bce:	ad 5e       	subi	r26, 0xED	; 237
     bd0:	bf 4d       	sbci	r27, 0xDF	; 223
     bd2:	0c 91       	ld	r16, X
     bd4:	00 23       	and	r16, r16
     bd6:	11 f1       	breq	.+68     	; 0xc1c <__vector_34+0x16e>
     bd8:	fe e1       	ldi	r31, 0x1E	; 30
     bda:	ef 9f       	mul	r30, r31
     bdc:	d0 01       	movw	r26, r0
     bde:	11 24       	eor	r1, r1
     be0:	ab 5e       	subi	r26, 0xEB	; 235
     be2:	bf 4d       	sbci	r27, 0xDF	; 223
     be4:	10 e0       	ldi	r17, 0x00	; 0
     be6:	d0 e0       	ldi	r29, 0x00	; 0
		{
			uint8_t j = _link[i];
     be8:	ed 91       	ld	r30, X+
     bea:	bd 01       	movw	r22, r26
			uint8_t min = j < 8 ? validConf.minLvl[j] : 0x05;
			dimInProcess |= (_lvl[i] != gLevels[j]);
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	ee 0f       	add	r30, r30
     bf0:	ff 1f       	adc	r31, r31
     bf2:	ea 5b       	subi	r30, 0xBA	; 186
     bf4:	fe 4d       	sbci	r31, 0xDE	; 222
     bf6:	e0 80       	ld	r14, Z
     bf8:	f1 80       	ldd	r15, Z+1	; 0x01
     bfa:	12 96       	adiw	r26, 0x02	; 2
     bfc:	4c 91       	ld	r20, X
     bfe:	12 97       	sbiw	r26, 0x02	; 2
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	e1 e0       	ldi	r30, 0x01	; 1
     c04:	4e 15       	cp	r20, r14
     c06:	5f 05       	cpc	r21, r15
     c08:	09 f4       	brne	.+2      	; 0xc0c <__vector_34+0x15e>
     c0a:	e0 e0       	ldi	r30, 0x00	; 0
     c0c:	1e 2b       	or	r17, r30
			if (!level) //Set zero level directly
				_lvl[i] = 0;
     c0e:	fb 01       	movw	r30, r22
     c10:	12 82       	std	Z+2, r1	; 0x02
			return;
		if (!msenCtrl)
			direction = oLvl > level;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
     c12:	df 5f       	subi	r29, 0xFF	; 255
     c14:	0d 13       	cpse	r16, r29
     c16:	e8 cf       	rjmp	.-48     	; 0xbe8 <__vector_34+0x13a>
				uint16_t temp = level;
				temp *= 0xFF - min;
				_lvl[i] = (uint8_t)(temp >> 8) + min;
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     c18:	11 11       	cpse	r17, r1
     c1a:	2e c0       	rjmp	.+92     	; 0xc78 <__vector_34+0x1ca>
			_tickLastChg = sysState.sysTick;
     c1c:	6e e1       	ldi	r22, 0x1E	; 30
     c1e:	62 9f       	mul	r22, r18
     c20:	a0 01       	movw	r20, r0
     c22:	63 9f       	mul	r22, r19
     c24:	50 0d       	add	r21, r0
     c26:	11 24       	eor	r1, r1
     c28:	9a 01       	movw	r18, r20
     c2a:	2d 5e       	subi	r18, 0xED	; 237
     c2c:	3f 4d       	sbci	r19, 0xDF	; 223
     c2e:	b9 01       	movw	r22, r18
     c30:	64 5f       	subi	r22, 0xF4	; 244
     c32:	7f 4f       	sbci	r23, 0xFF	; 255
     c34:	eb ef       	ldi	r30, 0xFB	; 251
     c36:	f0 e2       	ldi	r31, 0x20	; 32
     c38:	40 81       	ld	r20, Z
     c3a:	d9 01       	movw	r26, r18
     c3c:	1c 96       	adiw	r26, 0x0c	; 12
     c3e:	4c 93       	st	X, r20
     c40:	21 81       	ldd	r18, Z+1	; 0x01
     c42:	db 01       	movw	r26, r22
     c44:	11 96       	adiw	r26, 0x01	; 1
     c46:	2c 93       	st	X, r18
     c48:	11 97       	sbiw	r26, 0x01	; 1
     c4a:	22 81       	ldd	r18, Z+2	; 0x02
     c4c:	12 96       	adiw	r26, 0x02	; 2
     c4e:	2c 93       	st	X, r18
     c50:	12 97       	sbiw	r26, 0x02	; 2
     c52:	23 81       	ldd	r18, Z+3	; 0x03
     c54:	13 96       	adiw	r26, 0x03	; 3
     c56:	2c 93       	st	X, r18
     c58:	13 97       	sbiw	r26, 0x03	; 3
     c5a:	24 81       	ldd	r18, Z+4	; 0x04
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	2c 93       	st	X, r18
     c60:	14 97       	sbiw	r26, 0x04	; 4
     c62:	25 81       	ldd	r18, Z+5	; 0x05
     c64:	15 96       	adiw	r26, 0x05	; 5
     c66:	2c 93       	st	X, r18
     c68:	15 97       	sbiw	r26, 0x05	; 5
     c6a:	26 81       	ldd	r18, Z+6	; 0x06
     c6c:	16 96       	adiw	r26, 0x06	; 6
     c6e:	2c 93       	st	X, r18
     c70:	16 97       	sbiw	r26, 0x06	; 6
     c72:	27 81       	ldd	r18, Z+7	; 0x07
     c74:	17 96       	adiw	r26, 0x07	; 7
     c76:	2c 93       	st	X, r18
		if (result < LINK_ON_BARRIER)
		{
			result = 0;
			if (sysState.linksMask & (0x10 << sAdcCnt)) //Previous level was non-zero
				links[sAdcCnt].setLevel(0);
			sysState.linksMask &= ~(0x10 << sAdcCnt); //Clear 'non-zero' bit
     c78:	80 95       	com	r24
     c7a:	c8 23       	and	r28, r24
     c7c:	c0 93 10 21 	sts	0x2110, r28	; 0x802110 <sysState+0x15>
     c80:	cb c1       	rjmp	.+918    	; 0x1018 <__vector_34+0x56a>
		}
		else
		{
			result = (result - LINK_1PERC_CODE) / LINK_SCALE;
     c82:	80 59       	subi	r24, 0x90	; 144
     c84:	91 42       	sbci	r25, 0x21	; 33
     c86:	64 e5       	ldi	r22, 0x54	; 84
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	0e 94 43 0a 	call	0x1486	; 0x1486 <__divmodhi4>
			if (result < 5)
     c8e:	65 30       	cpi	r22, 0x05	; 5
     c90:	71 05       	cpc	r23, r1
     c92:	14 f4       	brge	.+4      	; 0xc98 <__vector_34+0x1ea>
				result = 5;
     c94:	65 e0       	ldi	r22, 0x05	; 5
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	6f 3f       	cpi	r22, 0xFF	; 255
     c9a:	71 05       	cpc	r23, r1
     c9c:	19 f0       	breq	.+6      	; 0xca4 <__vector_34+0x1f6>
     c9e:	14 f0       	brlt	.+4      	; 0xca4 <__vector_34+0x1f6>
     ca0:	6f ef       	ldi	r22, 0xFF	; 255
     ca2:	70 e0       	ldi	r23, 0x00	; 0
			if (result > 255)
				result = 255;
			sysState.linksMask |= (0x10 << sAdcCnt); //Set 'non-zero' bit
     ca4:	80 e1       	ldi	r24, 0x10	; 16
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	0e 2e       	mov	r0, r30
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <__vector_34+0x202>
     cac:	88 0f       	add	r24, r24
     cae:	99 1f       	adc	r25, r25
     cb0:	0a 94       	dec	r0
     cb2:	e2 f7       	brpl	.-8      	; 0xcac <__vector_34+0x1fe>
     cb4:	c8 2b       	or	r28, r24
     cb6:	c0 93 10 21 	sts	0x2110, r28	; 0x802110 <sysState+0x15>
			links[sAdcCnt].setLevel((uint8_t)result);
     cba:	e6 2e       	mov	r14, r22
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		uint8_t oLvl = sysState.linkLevels[_linkNum];
     cbc:	8e e1       	ldi	r24, 0x1E	; 30
     cbe:	82 9f       	mul	r24, r18
     cc0:	d0 01       	movw	r26, r0
     cc2:	83 9f       	mul	r24, r19
     cc4:	b0 0d       	add	r27, r0
     cc6:	11 24       	eor	r1, r1
     cc8:	ad 5e       	subi	r26, 0xED	; 237
     cca:	bf 4d       	sbci	r27, 0xDF	; 223
     ccc:	11 96       	adiw	r26, 0x01	; 1
     cce:	ac 91       	ld	r26, X
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	ed 01       	movw	r28, r26
     cd4:	c5 50       	subi	r28, 0x05	; 5
     cd6:	df 4d       	sbci	r29, 0xDF	; 223
     cd8:	49 89       	ldd	r20, Y+17	; 0x11
     cda:	77 27       	eor	r23, r23
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
     cdc:	84 2f       	mov	r24, r20
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	86 1b       	sub	r24, r22
     ce2:	97 0b       	sbc	r25, r23
     ce4:	02 96       	adiw	r24, 0x02	; 2
     ce6:	05 97       	sbiw	r24, 0x05	; 5
     ce8:	48 f4       	brcc	.+18     	; 0xcfc <__vector_34+0x24e>
     cea:	91 e0       	ldi	r25, 0x01	; 1
     cec:	e1 10       	cpse	r14, r1
     cee:	01 c0       	rjmp	.+2      	; 0xcf2 <__vector_34+0x244>
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	41 11       	cpse	r20, r1
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	98 13       	cpse	r25, r24
     cfa:	8e c1       	rjmp	.+796    	; 0x1018 <__vector_34+0x56a>
			return;
		if (!msenCtrl)
     cfc:	8e e1       	ldi	r24, 0x1E	; 30
     cfe:	82 9f       	mul	r24, r18
     d00:	e0 01       	movw	r28, r0
     d02:	83 9f       	mul	r24, r19
     d04:	d0 0d       	add	r29, r0
     d06:	11 24       	eor	r1, r1
     d08:	cd 5e       	subi	r28, 0xED	; 237
     d0a:	df 4d       	sbci	r29, 0xDF	; 223
     d0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d0e:	81 11       	cpse	r24, r1
     d10:	0d c0       	rjmp	.+26     	; 0xd2c <__vector_34+0x27e>
			direction = oLvl > level;
     d12:	8e e1       	ldi	r24, 0x1E	; 30
     d14:	82 9f       	mul	r24, r18
     d16:	e0 01       	movw	r28, r0
     d18:	83 9f       	mul	r24, r19
     d1a:	d0 0d       	add	r29, r0
     d1c:	11 24       	eor	r1, r1
     d1e:	cd 5e       	subi	r28, 0xED	; 237
     d20:	df 4d       	sbci	r29, 0xDF	; 223
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	e4 16       	cp	r14, r20
     d26:	08 f0       	brcs	.+2      	; 0xd2a <__vector_34+0x27c>
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	8c 8f       	std	Y+28, r24	; 0x1c
		sysState.linkLevels[_linkNum] = level;
     d2c:	a5 50       	subi	r26, 0x05	; 5
     d2e:	bf 4d       	sbci	r27, 0xDF	; 223
     d30:	51 96       	adiw	r26, 0x11	; 17
     d32:	ec 92       	st	X, r14

		for (uint8_t i = 0; i < _linkCnt; i++)
     d34:	8e e1       	ldi	r24, 0x1E	; 30
     d36:	82 9f       	mul	r24, r18
     d38:	d0 01       	movw	r26, r0
     d3a:	83 9f       	mul	r24, r19
     d3c:	b0 0d       	add	r27, r0
     d3e:	11 24       	eor	r1, r1
     d40:	ad 5e       	subi	r26, 0xED	; 237
     d42:	bf 4d       	sbci	r27, 0xDF	; 223
     d44:	bc 90       	ld	r11, X
     d46:	bb 20       	and	r11, r11
     d48:	c9 f1       	breq	.+114    	; 0xdbc <__vector_34+0x30e>
     d4a:	be e1       	ldi	r27, 0x1E	; 30
     d4c:	eb 9f       	mul	r30, r27
     d4e:	f0 01       	movw	r30, r0
     d50:	11 24       	eor	r1, r1
     d52:	eb 5e       	subi	r30, 0xEB	; 235
     d54:	ff 4d       	sbci	r31, 0xDF	; 223
     d56:	f1 2c       	mov	r15, r1
     d58:	40 e0       	ldi	r20, 0x00	; 0
				_lvl[i] = 0;
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= 0xFF - min;
				_lvl[i] = (uint8_t)(temp >> 8) + min;
     d5a:	0f ef       	ldi	r16, 0xFF	; 255
     d5c:	10 e0       	ldi	r17, 0x00	; 0
			direction = oLvl > level;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			uint8_t j = _link[i];
     d5e:	a1 91       	ld	r26, Z+
			uint8_t min = j < 8 ? validConf.minLvl[j] : 0x05;
     d60:	a8 30       	cpi	r26, 0x08	; 8
     d62:	30 f4       	brcc	.+12     	; 0xd70 <__vector_34+0x2c2>
     d64:	ca 2f       	mov	r28, r26
     d66:	d0 e0       	ldi	r29, 0x00	; 0
     d68:	cc 5e       	subi	r28, 0xEC	; 236
     d6a:	de 4d       	sbci	r29, 0xDE	; 222
     d6c:	58 81       	ld	r21, Y
     d6e:	01 c0       	rjmp	.+2      	; 0xd72 <__vector_34+0x2c4>
     d70:	55 e0       	ldi	r21, 0x05	; 5
     d72:	ef 01       	movw	r28, r30
			dimInProcess |= (_lvl[i] != gLevels[j]);
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	aa 0f       	add	r26, r26
     d78:	bb 1f       	adc	r27, r27
     d7a:	aa 5b       	subi	r26, 0xBA	; 186
     d7c:	be 4d       	sbci	r27, 0xDE	; 222
     d7e:	cd 90       	ld	r12, X+
     d80:	dc 90       	ld	r13, X
     d82:	82 81       	ldd	r24, Z+2	; 0x02
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	a1 e0       	ldi	r26, 0x01	; 1
     d88:	8c 15       	cp	r24, r12
     d8a:	9d 05       	cpc	r25, r13
     d8c:	09 f4       	brne	.+2      	; 0xd90 <__vector_34+0x2e2>
     d8e:	a0 e0       	ldi	r26, 0x00	; 0
     d90:	fa 2a       	or	r15, r26
			if (!level) //Set zero level directly
     d92:	e1 10       	cpse	r14, r1
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <__vector_34+0x2ec>
				_lvl[i] = 0;
     d96:	1a 82       	std	Y+2, r1	; 0x02
     d98:	0c c0       	rjmp	.+24     	; 0xdb2 <__vector_34+0x304>
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= 0xFF - min;
				_lvl[i] = (uint8_t)(temp >> 8) + min;
     d9a:	d8 01       	movw	r26, r16
     d9c:	a5 1b       	sub	r26, r21
     d9e:	b1 09       	sbc	r27, r1
     da0:	a6 9f       	mul	r26, r22
     da2:	c0 01       	movw	r24, r0
     da4:	a7 9f       	mul	r26, r23
     da6:	90 0d       	add	r25, r0
     da8:	b6 9f       	mul	r27, r22
     daa:	90 0d       	add	r25, r0
     dac:	11 24       	eor	r1, r1
     dae:	59 0f       	add	r21, r25
     db0:	5a 83       	std	Y+2, r21	; 0x02
			return;
		if (!msenCtrl)
			direction = oLvl > level;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
     db2:	4f 5f       	subi	r20, 0xFF	; 255
     db4:	4b 11       	cpse	r20, r11
     db6:	d3 cf       	rjmp	.-90     	; 0xd5e <__vector_34+0x2b0>
				uint16_t temp = level;
				temp *= 0xFF - min;
				_lvl[i] = (uint8_t)(temp >> 8) + min;
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     db8:	f1 10       	cpse	r15, r1
     dba:	2e c1       	rjmp	.+604    	; 0x1018 <__vector_34+0x56a>
			_tickLastChg = sysState.sysTick;
     dbc:	8e e1       	ldi	r24, 0x1E	; 30
     dbe:	82 9f       	mul	r24, r18
     dc0:	e0 01       	movw	r28, r0
     dc2:	83 9f       	mul	r24, r19
     dc4:	d0 0d       	add	r29, r0
     dc6:	11 24       	eor	r1, r1
     dc8:	cd 5e       	subi	r28, 0xED	; 237
     dca:	df 4d       	sbci	r29, 0xDF	; 223
     dcc:	de 01       	movw	r26, r28
     dce:	1c 96       	adiw	r26, 0x0c	; 12
     dd0:	eb ef       	ldi	r30, 0xFB	; 251
     dd2:	f0 e2       	ldi	r31, 0x20	; 32
     dd4:	80 81       	ld	r24, Z
     dd6:	8c 87       	std	Y+12, r24	; 0x0c
     dd8:	81 81       	ldd	r24, Z+1	; 0x01
     dda:	11 96       	adiw	r26, 0x01	; 1
     ddc:	8c 93       	st	X, r24
     dde:	11 97       	sbiw	r26, 0x01	; 1
     de0:	82 81       	ldd	r24, Z+2	; 0x02
     de2:	12 96       	adiw	r26, 0x02	; 2
     de4:	8c 93       	st	X, r24
     de6:	12 97       	sbiw	r26, 0x02	; 2
     de8:	83 81       	ldd	r24, Z+3	; 0x03
     dea:	13 96       	adiw	r26, 0x03	; 3
     dec:	8c 93       	st	X, r24
     dee:	13 97       	sbiw	r26, 0x03	; 3
     df0:	84 81       	ldd	r24, Z+4	; 0x04
     df2:	14 96       	adiw	r26, 0x04	; 4
     df4:	8c 93       	st	X, r24
     df6:	14 97       	sbiw	r26, 0x04	; 4
     df8:	85 81       	ldd	r24, Z+5	; 0x05
     dfa:	15 96       	adiw	r26, 0x05	; 5
     dfc:	8c 93       	st	X, r24
     dfe:	15 97       	sbiw	r26, 0x05	; 5
     e00:	86 81       	ldd	r24, Z+6	; 0x06
     e02:	16 96       	adiw	r26, 0x06	; 6
     e04:	8c 93       	st	X, r24
     e06:	16 97       	sbiw	r26, 0x06	; 6
     e08:	87 81       	ldd	r24, Z+7	; 0x07
     e0a:	17 96       	adiw	r26, 0x07	; 7
     e0c:	8c 93       	st	X, r24
     e0e:	04 c1       	rjmp	.+520    	; 0x1018 <__vector_34+0x56a>
			sysState.linksMask |= (0x10 << sAdcCnt); //Set 'non-zero' bit
			links[sAdcCnt].setLevel((uint8_t)result);
		}
	}
	else if (sAdcCnt < 4)
		sysState.linksMask &= ~(0x11 << sAdcCnt); //Clear 'valid' and 'non-zero' bits
     e10:	ab ef       	ldi	r26, 0xFB	; 251
     e12:	b0 e2       	ldi	r27, 0x20	; 32
     e14:	81 e1       	ldi	r24, 0x11	; 17
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <__vector_34+0x370>
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	ea 95       	dec	r30
     e20:	e2 f7       	brpl	.-8      	; 0xe1a <__vector_34+0x36c>
     e22:	80 95       	com	r24
     e24:	55 96       	adiw	r26, 0x15	; 21
     e26:	9c 91       	ld	r25, X
     e28:	55 97       	sbiw	r26, 0x15	; 21
     e2a:	89 23       	and	r24, r25
     e2c:	55 96       	adiw	r26, 0x15	; 21
     e2e:	8c 93       	st	X, r24
     e30:	f3 c0       	rjmp	.+486    	; 0x1018 <__vector_34+0x56a>
	else //sAdcCnt == 4: MSEN channel
		msenCh.setLevel(result < 0 ? 0 : result >> 6);
     e32:	99 23       	and	r25, r25
     e34:	0c f4       	brge	.+2      	; 0xe38 <__vector_34+0x38a>
     e36:	07 c1       	rjmp	.+526    	; 0x1046 <__vector_34+0x598>
     e38:	08 2e       	mov	r0, r24
     e3a:	89 2f       	mov	r24, r25
     e3c:	00 0c       	add	r0, r0
     e3e:	88 1f       	adc	r24, r24
     e40:	99 0b       	sbc	r25, r25
     e42:	00 0c       	add	r0, r0
     e44:	88 1f       	adc	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	28 2f       	mov	r18, r24
		_onTime = validConf.msenOnTime > 5 ? validConf.msenOnTime : 6;
		_fTime = _onTime + validConf.msenLowTime;
	}
	void setLevel(uint8_t level)
	{
		sysState.msenLevel = level;
     e4a:	80 93 11 21 	sts	0x2111, r24	; 0x802111 <sysState+0x16>
		if (level < MSEN_VALID_MIN || !validConf.msenOnTime || (sysState.linksMask & _linkMask))
     e4e:	84 31       	cpi	r24, 0x14	; 20
     e50:	50 f0       	brcs	.+20     	; 0xe66 <__vector_34+0x3b8>
     e52:	30 91 26 21 	lds	r19, 0x2126	; 0x802126 <validConf+0x12>
     e56:	33 23       	and	r19, r19
     e58:	31 f0       	breq	.+12     	; 0xe66 <__vector_34+0x3b8>
     e5a:	40 91 10 21 	lds	r20, 0x2110	; 0x802110 <sysState+0x15>
     e5e:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <msenCh+0x2>
     e62:	34 23       	and	r19, r20
     e64:	49 f0       	breq	.+18     	; 0xe78 <__vector_34+0x3ca>
		{
			_lvl = 0; //MSEN disconnected, disabled (by zero on time) or there is non-zero level from link
     e66:	e1 e0       	ldi	r30, 0x01	; 1
     e68:	f0 e2       	ldi	r31, 0x20	; 32
     e6a:	15 82       	std	Z+5, r1	; 0x05
			_linkAddr->msenCtrl = cntDown = false;
     e6c:	a3 81       	ldd	r26, Z+3	; 0x03
     e6e:	b4 81       	ldd	r27, Z+4	; 0x04
     e70:	10 82       	st	Z, r1
     e72:	5d 96       	adiw	r26, 0x1d	; 29
     e74:	1c 92       	st	X, r1
     e76:	d0 c0       	rjmp	.+416    	; 0x1018 <__vector_34+0x56a>
			return;
		}
		if (level > MSEN_SEN1_TRIG)
     e78:	8c 34       	cpi	r24, 0x4C	; 76
     e7a:	08 f4       	brcc	.+2      	; 0xe7e <__vector_34+0x3d0>
     e7c:	a3 c0       	rjmp	.+326    	; 0xfc4 <__vector_34+0x516>
		{
			if (_lvl < MSEN_SEN1_TRIG) //Off to on transition
     e7e:	30 91 06 20 	lds	r19, 0x2006	; 0x802006 <msenCh+0x5>
     e82:	3b 34       	cpi	r19, 0x4B	; 75
     e84:	08 f0       	brcs	.+2      	; 0xe88 <__vector_34+0x3da>
     e86:	9b c0       	rjmp	.+310    	; 0xfbe <__vector_34+0x510>
			{
				_linkAddr->msenCtrl = true;
     e88:	60 91 04 20 	lds	r22, 0x2004	; 0x802004 <msenCh+0x3>
     e8c:	70 91 05 20 	lds	r23, 0x2005	; 0x802005 <msenCh+0x4>
     e90:	31 e0       	ldi	r19, 0x01	; 1
     e92:	fb 01       	movw	r30, r22
     e94:	35 8f       	std	Z+29, r19	; 0x1d
				_linkAddr->direction = level > MSEN_SEN2_TRIG;
     e96:	85 36       	cpi	r24, 0x65	; 101
     e98:	08 f4       	brcc	.+2      	; 0xe9c <__vector_34+0x3ee>
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	db 01       	movw	r26, r22
     e9e:	5c 96       	adiw	r26, 0x1c	; 28
     ea0:	3c 93       	st	X, r19
     ea2:	5c 97       	sbiw	r26, 0x1c	; 28
				_linkAddr->setLevel(validConf.msenOnLvl); //Start from max light level
     ea4:	b0 90 27 21 	lds	r11, 0x2127	; 0x802127 <validConf+0x13>
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		uint8_t oLvl = sysState.linkLevels[_linkNum];
     ea8:	11 96       	adiw	r26, 0x01	; 1
     eaa:	2c 91       	ld	r18, X
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	f9 01       	movw	r30, r18
     eb0:	e5 50       	subi	r30, 0x05	; 5
     eb2:	ff 4d       	sbci	r31, 0xDF	; 223
     eb4:	e1 89       	ldd	r30, Z+17	; 0x11
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
     eb6:	4e 2f       	mov	r20, r30
     eb8:	50 e0       	ldi	r21, 0x00	; 0
     eba:	4b 19       	sub	r20, r11
     ebc:	51 09       	sbc	r21, r1
     ebe:	4e 5f       	subi	r20, 0xFE	; 254
     ec0:	5f 4f       	sbci	r21, 0xFF	; 255
     ec2:	45 30       	cpi	r20, 0x05	; 5
     ec4:	51 05       	cpc	r21, r1
     ec6:	48 f4       	brcc	.+18     	; 0xeda <__vector_34+0x42c>
     ec8:	51 e0       	ldi	r21, 0x01	; 1
     eca:	b1 10       	cpse	r11, r1
     ecc:	01 c0       	rjmp	.+2      	; 0xed0 <__vector_34+0x422>
     ece:	50 e0       	ldi	r21, 0x00	; 0
     ed0:	41 e0       	ldi	r20, 0x01	; 1
     ed2:	e1 11       	cpse	r30, r1
     ed4:	40 e0       	ldi	r20, 0x00	; 0
     ed6:	54 13       	cpse	r21, r20
     ed8:	6e c0       	rjmp	.+220    	; 0xfb6 <__vector_34+0x508>
			return;
		if (!msenCtrl)
			direction = oLvl > level;
		sysState.linkLevels[_linkNum] = level;
     eda:	f9 01       	movw	r30, r18
     edc:	e5 50       	subi	r30, 0x05	; 5
     ede:	ff 4d       	sbci	r31, 0xDF	; 223
     ee0:	b1 8a       	std	Z+17, r11	; 0x11

		for (uint8_t i = 0; i < _linkCnt; i++)
     ee2:	fb 01       	movw	r30, r22
     ee4:	40 81       	ld	r20, Z
     ee6:	44 23       	and	r20, r20
     ee8:	09 f4       	brne	.+2      	; 0xeec <__vector_34+0x43e>
     eea:	43 c0       	rjmp	.+134    	; 0xf72 <__vector_34+0x4c4>
     eec:	db 01       	movw	r26, r22
     eee:	12 96       	adiw	r26, 0x02	; 2
     ef0:	41 50       	subi	r20, 0x01	; 1
     ef2:	50 e0       	ldi	r21, 0x00	; 0
     ef4:	4d 5f       	subi	r20, 0xFD	; 253
     ef6:	5f 4f       	sbci	r21, 0xFF	; 255
     ef8:	46 0f       	add	r20, r22
     efa:	57 1f       	adc	r21, r23
     efc:	c1 2c       	mov	r12, r1
			dimInProcess |= (_lvl[i] != gLevels[j]);
			if (!level) //Set zero level directly
				_lvl[i] = 0;
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
     efe:	eb 2c       	mov	r14, r11
     f00:	f1 2c       	mov	r15, r1
				temp *= 0xFF - min;
				_lvl[i] = (uint8_t)(temp >> 8) + min;
     f02:	0f ef       	ldi	r16, 0xFF	; 255
     f04:	10 e0       	ldi	r17, 0x00	; 0
			direction = oLvl > level;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			uint8_t j = _link[i];
     f06:	ed 91       	ld	r30, X+
			uint8_t min = j < 8 ? validConf.minLvl[j] : 0x05;
     f08:	e8 30       	cpi	r30, 0x08	; 8
     f0a:	30 f4       	brcc	.+12     	; 0xf18 <__vector_34+0x46a>
     f0c:	ce 2f       	mov	r28, r30
     f0e:	d0 e0       	ldi	r29, 0x00	; 0
     f10:	cc 5e       	subi	r28, 0xEC	; 236
     f12:	de 4d       	sbci	r29, 0xDE	; 222
     f14:	d8 80       	ld	r13, Y
     f16:	04 c0       	rjmp	.+8      	; 0xf20 <__vector_34+0x472>
     f18:	0f 2e       	mov	r0, r31
     f1a:	f5 e0       	ldi	r31, 0x05	; 5
     f1c:	df 2e       	mov	r13, r31
     f1e:	f0 2d       	mov	r31, r0
     f20:	ed 01       	movw	r28, r26
			dimInProcess |= (_lvl[i] != gLevels[j]);
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	ee 0f       	add	r30, r30
     f26:	ff 1f       	adc	r31, r31
     f28:	ea 5b       	subi	r30, 0xBA	; 186
     f2a:	fe 4d       	sbci	r31, 0xDE	; 222
     f2c:	01 90       	ld	r0, Z+
     f2e:	f0 81       	ld	r31, Z
     f30:	e0 2d       	mov	r30, r0
     f32:	12 96       	adiw	r26, 0x02	; 2
     f34:	2c 91       	ld	r18, X
     f36:	12 97       	sbiw	r26, 0x02	; 2
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	aa 24       	eor	r10, r10
     f3c:	a3 94       	inc	r10
     f3e:	2e 17       	cp	r18, r30
     f40:	3f 07       	cpc	r19, r31
     f42:	09 f4       	brne	.+2      	; 0xf46 <__vector_34+0x498>
     f44:	a1 2c       	mov	r10, r1
     f46:	ca 28       	or	r12, r10
			if (!level) //Set zero level directly
     f48:	b1 10       	cpse	r11, r1
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <__vector_34+0x4a2>
				_lvl[i] = 0;
     f4c:	1a 82       	std	Y+2, r1	; 0x02
     f4e:	0c c0       	rjmp	.+24     	; 0xf68 <__vector_34+0x4ba>
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= 0xFF - min;
				_lvl[i] = (uint8_t)(temp >> 8) + min;
     f50:	f8 01       	movw	r30, r16
     f52:	ed 19       	sub	r30, r13
     f54:	f1 09       	sbc	r31, r1
     f56:	ee 9d       	mul	r30, r14
     f58:	90 01       	movw	r18, r0
     f5a:	ef 9d       	mul	r30, r15
     f5c:	30 0d       	add	r19, r0
     f5e:	fe 9d       	mul	r31, r14
     f60:	30 0d       	add	r19, r0
     f62:	11 24       	eor	r1, r1
     f64:	d3 0e       	add	r13, r19
     f66:	da 82       	std	Y+2, r13	; 0x02
			return;
		if (!msenCtrl)
			direction = oLvl > level;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
     f68:	a4 17       	cp	r26, r20
     f6a:	b5 07       	cpc	r27, r21
     f6c:	61 f6       	brne	.-104    	; 0xf06 <__vector_34+0x458>
				uint16_t temp = level;
				temp *= 0xFF - min;
				_lvl[i] = (uint8_t)(temp >> 8) + min;
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     f6e:	c1 10       	cpse	r12, r1
     f70:	22 c0       	rjmp	.+68     	; 0xfb6 <__vector_34+0x508>
			_tickLastChg = sysState.sysTick;
     f72:	eb ef       	ldi	r30, 0xFB	; 251
     f74:	f0 e2       	ldi	r31, 0x20	; 32
     f76:	20 81       	ld	r18, Z
     f78:	db 01       	movw	r26, r22
     f7a:	1c 96       	adiw	r26, 0x0c	; 12
     f7c:	2c 93       	st	X, r18
     f7e:	1c 97       	sbiw	r26, 0x0c	; 12
     f80:	21 81       	ldd	r18, Z+1	; 0x01
     f82:	1d 96       	adiw	r26, 0x0d	; 13
     f84:	2c 93       	st	X, r18
     f86:	1d 97       	sbiw	r26, 0x0d	; 13
     f88:	22 81       	ldd	r18, Z+2	; 0x02
     f8a:	1e 96       	adiw	r26, 0x0e	; 14
     f8c:	2c 93       	st	X, r18
     f8e:	1e 97       	sbiw	r26, 0x0e	; 14
     f90:	23 81       	ldd	r18, Z+3	; 0x03
     f92:	1f 96       	adiw	r26, 0x0f	; 15
     f94:	2c 93       	st	X, r18
     f96:	1f 97       	sbiw	r26, 0x0f	; 15
     f98:	24 81       	ldd	r18, Z+4	; 0x04
     f9a:	50 96       	adiw	r26, 0x10	; 16
     f9c:	2c 93       	st	X, r18
     f9e:	50 97       	sbiw	r26, 0x10	; 16
     fa0:	25 81       	ldd	r18, Z+5	; 0x05
     fa2:	51 96       	adiw	r26, 0x11	; 17
     fa4:	2c 93       	st	X, r18
     fa6:	51 97       	sbiw	r26, 0x11	; 17
     fa8:	26 81       	ldd	r18, Z+6	; 0x06
     faa:	52 96       	adiw	r26, 0x12	; 18
     fac:	2c 93       	st	X, r18
     fae:	52 97       	sbiw	r26, 0x12	; 18
     fb0:	27 81       	ldd	r18, Z+7	; 0x07
     fb2:	53 96       	adiw	r26, 0x13	; 19
     fb4:	2c 93       	st	X, r18
			if (_lvl < MSEN_SEN1_TRIG) //Off to on transition
			{
				_linkAddr->msenCtrl = true;
				_linkAddr->direction = level > MSEN_SEN2_TRIG;
				_linkAddr->setLevel(validConf.msenOnLvl); //Start from max light level
				ltEnt = cntDown = false;				
     fb6:	e1 e0       	ldi	r30, 0x01	; 1
     fb8:	f0 e2       	ldi	r31, 0x20	; 32
     fba:	10 82       	st	Z, r1
     fbc:	11 82       	std	Z+1, r1	; 0x01
			}
			_lvl = level;
     fbe:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <msenCh+0x5>
     fc2:	2a c0       	rjmp	.+84     	; 0x1018 <__vector_34+0x56a>
		}
		else
		{
			if (_lvl > level) //On to off transition
     fc4:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <msenCh+0x5>
     fc8:	28 17       	cp	r18, r24
     fca:	18 f5       	brcc	.+70     	; 0x1012 <__vector_34+0x564>
			{
				_onTimeStamp = sysState.sysTick;
     fcc:	e1 e0       	ldi	r30, 0x01	; 1
     fce:	f0 e2       	ldi	r31, 0x20	; 32
     fd0:	ab ef       	ldi	r26, 0xFB	; 251
     fd2:	b0 e2       	ldi	r27, 0x20	; 32
     fd4:	8c 91       	ld	r24, X
     fd6:	82 87       	std	Z+10, r24	; 0x0a
     fd8:	11 96       	adiw	r26, 0x01	; 1
     fda:	8c 91       	ld	r24, X
     fdc:	11 97       	sbiw	r26, 0x01	; 1
     fde:	83 87       	std	Z+11, r24	; 0x0b
     fe0:	12 96       	adiw	r26, 0x02	; 2
     fe2:	8c 91       	ld	r24, X
     fe4:	12 97       	sbiw	r26, 0x02	; 2
     fe6:	84 87       	std	Z+12, r24	; 0x0c
     fe8:	13 96       	adiw	r26, 0x03	; 3
     fea:	8c 91       	ld	r24, X
     fec:	13 97       	sbiw	r26, 0x03	; 3
     fee:	85 87       	std	Z+13, r24	; 0x0d
     ff0:	14 96       	adiw	r26, 0x04	; 4
     ff2:	8c 91       	ld	r24, X
     ff4:	14 97       	sbiw	r26, 0x04	; 4
     ff6:	86 87       	std	Z+14, r24	; 0x0e
     ff8:	15 96       	adiw	r26, 0x05	; 5
     ffa:	8c 91       	ld	r24, X
     ffc:	15 97       	sbiw	r26, 0x05	; 5
     ffe:	87 87       	std	Z+15, r24	; 0x0f
    1000:	16 96       	adiw	r26, 0x06	; 6
    1002:	8c 91       	ld	r24, X
    1004:	16 97       	sbiw	r26, 0x06	; 6
    1006:	80 8b       	std	Z+16, r24	; 0x10
    1008:	17 96       	adiw	r26, 0x07	; 7
    100a:	8c 91       	ld	r24, X
    100c:	81 8b       	std	Z+17, r24	; 0x11
				cntDown = true;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	80 83       	st	Z, r24
			}
			_lvl = MSEN_VALID_MIN;
    1012:	84 e1       	ldi	r24, 0x14	; 20
    1014:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <msenCh+0x5>
	else if (sAdcCnt < 4)
		sysState.linksMask &= ~(0x11 << sAdcCnt); //Clear 'valid' and 'non-zero' bits
	else //sAdcCnt == 4: MSEN channel
		msenCh.setLevel(result < 0 ? 0 : result >> 6);

	sAdcCnt++;
    1018:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
    101c:	91 e0       	ldi	r25, 0x01	; 1
    101e:	98 0f       	add	r25, r24
    1020:	90 93 00 20 	sts	0x2000, r25	; 0x802000 <_edata>
	ADCA.CH0.MUXCTRL = (sAdcCnt + 1) << ADC_CH_MUXPOS_gp;
    1024:	8e 5f       	subi	r24, 0xFE	; 254
    1026:	88 0f       	add	r24, r24
    1028:	88 0f       	add	r24, r24
    102a:	88 0f       	add	r24, r24
    102c:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
	if (sAdcCnt < 5)
    1030:	95 30       	cpi	r25, 0x05	; 5
    1032:	30 f4       	brcc	.+12     	; 0x1040 <__vector_34+0x592>
		ADCA.CTRLA |= ADC_START_bm;
    1034:	e0 e0       	ldi	r30, 0x00	; 0
    1036:	f2 e0       	ldi	r31, 0x02	; 2
    1038:	80 81       	ld	r24, Z
    103a:	84 60       	ori	r24, 0x04	; 4
    103c:	80 83       	st	Z, r24
    103e:	06 c0       	rjmp	.+12     	; 0x104c <__vector_34+0x59e>
	else
		sAdcCnt = 0;
    1040:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <_edata>
}
    1044:	03 c0       	rjmp	.+6      	; 0x104c <__vector_34+0x59e>
		_onTime = validConf.msenOnTime > 5 ? validConf.msenOnTime : 6;
		_fTime = _onTime + validConf.msenLowTime;
	}
	void setLevel(uint8_t level)
	{
		sysState.msenLevel = level;
    1046:	10 92 11 21 	sts	0x2111, r1	; 0x802111 <sysState+0x16>
    104a:	0d cf       	rjmp	.-486    	; 0xe66 <__vector_34+0x3b8>
	ADCA.CH0.MUXCTRL = (sAdcCnt + 1) << ADC_CH_MUXPOS_gp;
	if (sAdcCnt < 5)
		ADCA.CTRLA |= ADC_START_bm;
	else
		sAdcCnt = 0;
}
    104c:	ff 91       	pop	r31
    104e:	ef 91       	pop	r30
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	bf 91       	pop	r27
    1056:	af 91       	pop	r26
    1058:	9f 91       	pop	r25
    105a:	8f 91       	pop	r24
    105c:	7f 91       	pop	r23
    105e:	6f 91       	pop	r22
    1060:	5f 91       	pop	r21
    1062:	4f 91       	pop	r20
    1064:	3f 91       	pop	r19
    1066:	2f 91       	pop	r18
    1068:	1f 91       	pop	r17
    106a:	0f 91       	pop	r16
    106c:	ff 90       	pop	r15
    106e:	ef 90       	pop	r14
    1070:	df 90       	pop	r13
    1072:	cf 90       	pop	r12
    1074:	bf 90       	pop	r11
    1076:	af 90       	pop	r10
    1078:	0f 90       	pop	r0
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	0f 90       	pop	r0
    107e:	1f 90       	pop	r1
    1080:	18 95       	reti

00001082 <__vector_23>:

ISR(USARTC0_RXC_vect) //Data received from RS485
{
    1082:	1f 92       	push	r1
    1084:	0f 92       	push	r0
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	0f 92       	push	r0
    108a:	11 24       	eor	r1, r1
    108c:	2f 93       	push	r18
    108e:	3f 93       	push	r19
    1090:	4f 93       	push	r20
    1092:	5f 93       	push	r21
    1094:	6f 93       	push	r22
    1096:	7f 93       	push	r23
    1098:	8f 93       	push	r24
    109a:	9f 93       	push	r25
    109c:	af 93       	push	r26
    109e:	bf 93       	push	r27
    10a0:	cf 93       	push	r28
    10a2:	df 93       	push	r29
    10a4:	ef 93       	push	r30
    10a6:	ff 93       	push	r31
	uint8_t data = USARTC0.DATA;
    10a8:	e0 ec       	ldi	r30, 0xC0	; 192
    10aa:	f8 e0       	ldi	r31, 0x08	; 8
    10ac:	80 81       	ld	r24, Z
	if (USARTC0.CTRLB & USART_MPCM_bm) //Address listening mode
    10ae:	93 81       	ldd	r25, Z+3	; 0x03
    10b0:	91 ff       	sbrs	r25, 1
    10b2:	74 c0       	rjmp	.+232    	; 0x119c <__vector_23+0x11a>
	{
		if (CmdLC <= data && data <= CmdUC)
    10b4:	9f ec       	ldi	r25, 0xCF	; 207
    10b6:	98 0f       	add	r25, r24
    10b8:	94 30       	cpi	r25, 0x04	; 4
    10ba:	08 f0       	brcs	.+2      	; 0x10be <__vector_23+0x3c>
    10bc:	6d c0       	rjmp	.+218    	; 0x1198 <__vector_23+0x116>
		{
			USARTC0.CTRLB &= ~USART_MPCM_bm; //Clear MPCM bit
    10be:	93 81       	ldd	r25, Z+3	; 0x03
    10c0:	9d 7f       	andi	r25, 0xFD	; 253
    10c2:	93 83       	std	Z+3, r25	; 0x03
			rxMode = data;
    10c4:	80 93 44 21 	sts	0x2144, r24	; 0x802144 <rxMode>
			if (data == SetConfig)
    10c8:	83 33       	cpi	r24, 0x33	; 51
    10ca:	89 f4       	brne	.+34     	; 0x10ee <__vector_23+0x6c>
			{
				rxMark = 0;
    10cc:	10 92 43 21 	sts	0x2143, r1	; 0x802143 <rxMark>
				EDMA.CH0.ADDR = (register16_t)iobuf;
    10d0:	e0 e0       	ldi	r30, 0x00	; 0
    10d2:	f1 e0       	ldi	r31, 0x01	; 1
    10d4:	8b e8       	ldi	r24, 0x8B	; 139
    10d6:	90 e2       	ldi	r25, 0x20	; 32
    10d8:	80 8f       	std	Z+24, r24	; 0x18
    10da:	91 8f       	std	Z+25, r25	; 0x19
				EDMA.CH0.TRFCNT = sizeof(systemConfig); //Bytes to receive into iobuf
    10dc:	8a e1       	ldi	r24, 0x1A	; 26
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	86 8b       	std	Z+22, r24	; 0x16
    10e2:	97 8b       	std	Z+23, r25	; 0x17
				EDMA.CH0.CTRLA = EDMA_CH_ENABLE_bm | EDMA_CH_SINGLE_bm;
    10e4:	84 e8       	ldi	r24, 0x84	; 132
    10e6:	80 8b       	std	Z+16, r24	; 0x10
				USARTC0.CTRLA = USART_RXCINTLVL_OFF_gc; //Disable interrupt
    10e8:	10 92 c2 08 	sts	0x08C2, r1	; 0x8008c2 <__TEXT_REGION_LENGTH__+0x7008c2>
    10ec:	57 c0       	rjmp	.+174    	; 0x119c <__vector_23+0x11a>
0, 255, 30, 96,	//Motion sensor on time, on level, low time, low level
0, 0, 0};	//groupConfig, rtcCorrect, CRC16

void inline UCTXen()
{
	PORTC.OUTSET = PIN1_bm;
    10ee:	82 e0       	ldi	r24, 0x02	; 2
    10f0:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10f4:	8f e6       	ldi	r24, 0x6F	; 111
    10f6:	92 e0       	ldi	r25, 0x02	; 2
    10f8:	01 97       	sbiw	r24, 0x01	; 1
    10fa:	f1 f7       	brne	.-4      	; 0x10f8 <__vector_23+0x76>
    10fc:	00 c0       	rjmp	.+0      	; 0x10fe <__vector_23+0x7c>
    10fe:	00 00       	nop
				USARTC0.CTRLA = USART_RXCINTLVL_OFF_gc; //Disable interrupt
			}
			else //Data transmit request
			{
				UCTXen();
				if (rxMode == GetConfig)
    1100:	80 91 44 21 	lds	r24, 0x2144	; 0x802144 <rxMode>
    1104:	82 33       	cpi	r24, 0x32	; 50
    1106:	59 f4       	brne	.+22     	; 0x111e <__vector_23+0x9c>
				{
					EDMA.CH1.TRFCNT = sizeof(systemConfig) + 3;
    1108:	e0 e0       	ldi	r30, 0x00	; 0
    110a:	f1 e0       	ldi	r31, 0x01	; 1
    110c:	8d e1       	ldi	r24, 0x1D	; 29
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	86 a3       	std	Z+38, r24	; 0x26
    1112:	97 a3       	std	Z+39, r25	; 0x27
					EDMA.CH1.ADDR = (register16_t)&validConf;
    1114:	84 e1       	ldi	r24, 0x14	; 20
    1116:	91 e2       	ldi	r25, 0x21	; 33
    1118:	80 a7       	std	Z+40, r24	; 0x28
    111a:	91 a7       	std	Z+41, r25	; 0x29
    111c:	39 c0       	rjmp	.+114    	; 0x1190 <__vector_23+0x10e>
				}
				else if (rxMode == GetStatus) //Get state
    111e:	80 91 44 21 	lds	r24, 0x2144	; 0x802144 <rxMode>
    1122:	81 33       	cpi	r24, 0x31	; 49
    1124:	c9 f4       	brne	.+50     	; 0x1158 <__vector_23+0xd6>
				{
					memcpy(iobuf, &sysState, sizeof(systemState));
    1126:	cb e8       	ldi	r28, 0x8B	; 139
    1128:	d0 e2       	ldi	r29, 0x20	; 32
    112a:	89 e1       	ldi	r24, 0x19	; 25
    112c:	eb ef       	ldi	r30, 0xFB	; 251
    112e:	f0 e2       	ldi	r31, 0x20	; 32
    1130:	de 01       	movw	r26, r28
    1132:	01 90       	ld	r0, Z+
    1134:	0d 92       	st	X+, r0
    1136:	8a 95       	dec	r24
    1138:	e1 f7       	brne	.-8      	; 0x1132 <__vector_23+0xb0>
					((systemState*)iobuf)->CRC16 = CalculateCRC16(iobuf, sizeof(systemState) - 2);
    113a:	67 e1       	ldi	r22, 0x17	; 23
    113c:	ce 01       	movw	r24, r28
    113e:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pva>
    1142:	8f 8b       	std	Y+23, r24	; 0x17
    1144:	98 8f       	std	Y+24, r25	; 0x18
					EDMA.CH1.TRFCNT = sizeof(systemState) + 3;
    1146:	e0 e0       	ldi	r30, 0x00	; 0
    1148:	f1 e0       	ldi	r31, 0x01	; 1
    114a:	8c e1       	ldi	r24, 0x1C	; 28
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	86 a3       	std	Z+38, r24	; 0x26
    1150:	97 a3       	std	Z+39, r25	; 0x27
					EDMA.CH1.ADDR = (register16_t)iobuf;
    1152:	c0 a7       	std	Z+40, r28	; 0x28
    1154:	d1 a7       	std	Z+41, r29	; 0x29
    1156:	1c c0       	rjmp	.+56     	; 0x1190 <__vector_23+0x10e>
				}
				else //Get on time
				{
					memcpy(iobuf, &channelOT, sizeof(channelsOnTime));
    1158:	88 e3       	ldi	r24, 0x38	; 56
    115a:	e3 ec       	ldi	r30, 0xC3	; 195
    115c:	f0 e2       	ldi	r31, 0x20	; 32
    115e:	ab e8       	ldi	r26, 0x8B	; 139
    1160:	b0 e2       	ldi	r27, 0x20	; 32
    1162:	01 90       	ld	r0, Z+
    1164:	0d 92       	st	X+, r0
    1166:	8a 95       	dec	r24
    1168:	e1 f7       	brne	.-8      	; 0x1162 <__vector_23+0xe0>
					((channelsOnTime*)iobuf)->CRC16 = CalculateCRC16(iobuf, sizeof(channelsOnTime) - 2);
    116a:	66 e3       	ldi	r22, 0x36	; 54
    116c:	8b e8       	ldi	r24, 0x8B	; 139
    116e:	90 e2       	ldi	r25, 0x20	; 32
    1170:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pva>
    1174:	ab e8       	ldi	r26, 0x8B	; 139
    1176:	b0 e2       	ldi	r27, 0x20	; 32
    1178:	d6 96       	adiw	r26, 0x36	; 54
    117a:	8d 93       	st	X+, r24
    117c:	9c 93       	st	X, r25
    117e:	d7 97       	sbiw	r26, 0x37	; 55
					EDMA.CH1.TRFCNT = sizeof(channelsOnTime) + 3;
    1180:	e0 e0       	ldi	r30, 0x00	; 0
    1182:	f1 e0       	ldi	r31, 0x01	; 1
    1184:	8b e3       	ldi	r24, 0x3B	; 59
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	86 a3       	std	Z+38, r24	; 0x26
    118a:	97 a3       	std	Z+39, r25	; 0x27
					EDMA.CH1.ADDR = (register16_t)iobuf;
    118c:	a0 a7       	std	Z+40, r26	; 0x28
    118e:	b1 a7       	std	Z+41, r27	; 0x29
				}
				EDMA.CH1.CTRLA = EDMA_CH_ENABLE_bm | EDMA_CH_SINGLE_bm;
    1190:	84 e8       	ldi	r24, 0x84	; 132
    1192:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1196:	02 c0       	rjmp	.+4      	; 0x119c <__vector_23+0x11a>
			}
		}
		else
			rxMode = 0;
    1198:	10 92 44 21 	sts	0x2144, r1	; 0x802144 <rxMode>
	}
}
    119c:	ff 91       	pop	r31
    119e:	ef 91       	pop	r30
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	bf 91       	pop	r27
    11a6:	af 91       	pop	r26
    11a8:	9f 91       	pop	r25
    11aa:	8f 91       	pop	r24
    11ac:	7f 91       	pop	r23
    11ae:	6f 91       	pop	r22
    11b0:	5f 91       	pop	r21
    11b2:	4f 91       	pop	r20
    11b4:	3f 91       	pop	r19
    11b6:	2f 91       	pop	r18
    11b8:	0f 90       	pop	r0
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	0f 90       	pop	r0
    11be:	1f 90       	pop	r1
    11c0:	18 95       	reti

000011c2 <__vector_3>:

ISR(EDMA_CH0_vect)
{
    11c2:	1f 92       	push	r1
    11c4:	0f 92       	push	r0
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	0f 92       	push	r0
    11ca:	11 24       	eor	r1, r1
    11cc:	2f 93       	push	r18
    11ce:	3f 93       	push	r19
    11d0:	4f 93       	push	r20
    11d2:	5f 93       	push	r21
    11d4:	6f 93       	push	r22
    11d6:	7f 93       	push	r23
    11d8:	8f 93       	push	r24
    11da:	9f 93       	push	r25
    11dc:	af 93       	push	r26
    11de:	bf 93       	push	r27
    11e0:	ef 93       	push	r30
    11e2:	ff 93       	push	r31
	rxMode = 0;
    11e4:	10 92 44 21 	sts	0x2144, r1	; 0x802144 <rxMode>
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm | USART_MPCM_bm; //Set MPCM bit
    11e8:	e0 ec       	ldi	r30, 0xC0	; 192
    11ea:	f8 e0       	ldi	r31, 0x08	; 8
    11ec:	8a e1       	ldi	r24, 0x1A	; 26
    11ee:	83 83       	std	Z+3, r24	; 0x03
	USARTC0.CTRLA = USART_DRIE_bm | USART_RXCINTLVL_MED_gc;
    11f0:	80 e6       	ldi	r24, 0x60	; 96
    11f2:	82 83       	std	Z+2, r24	; 0x02
	uint16_t crc = CalculateCRC16(iobuf, sizeof(systemConfig) - 2);
    11f4:	68 e1       	ldi	r22, 0x18	; 24
    11f6:	8b e8       	ldi	r24, 0x8B	; 139
    11f8:	90 e2       	ldi	r25, 0x20	; 32
    11fa:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pva>
	if (crc == ((systemConfig*)iobuf)->CRC16)
    11fe:	20 91 a3 20 	lds	r18, 0x20A3	; 0x8020a3 <iobuf+0x18>
    1202:	30 91 a4 20 	lds	r19, 0x20A4	; 0x8020a4 <iobuf+0x19>
    1206:	82 17       	cp	r24, r18
    1208:	93 07       	cpc	r25, r19
    120a:	11 f4       	brne	.+4      	; 0x1210 <__vector_3+0x4e>
		ApplyConfig();
    120c:	0e 94 90 00 	call	0x120	; 0x120 <_Z11ApplyConfigv>
	EDMA.CH0.CTRLA = 0;
    1210:	e0 e0       	ldi	r30, 0x00	; 0
    1212:	f1 e0       	ldi	r31, 0x01	; 1
    1214:	10 8a       	std	Z+16, r1	; 0x10
	EDMA.CH0.CTRLB = EDMA_CH_TRNIF_bm | EDMA_CH_ERRIF_bm | EDMA_CH_TRNINTLVL_LO_gc;
    1216:	81 e3       	ldi	r24, 0x31	; 49
    1218:	81 8b       	std	Z+17, r24	; 0x11
}
    121a:	ff 91       	pop	r31
    121c:	ef 91       	pop	r30
    121e:	bf 91       	pop	r27
    1220:	af 91       	pop	r26
    1222:	9f 91       	pop	r25
    1224:	8f 91       	pop	r24
    1226:	7f 91       	pop	r23
    1228:	6f 91       	pop	r22
    122a:	5f 91       	pop	r21
    122c:	4f 91       	pop	r20
    122e:	3f 91       	pop	r19
    1230:	2f 91       	pop	r18
    1232:	0f 90       	pop	r0
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	0f 90       	pop	r0
    1238:	1f 90       	pop	r1
    123a:	18 95       	reti

0000123c <__vector_4>:

ISR(EDMA_CH1_vect) //Packet has been sent completely over RS485
{
    123c:	1f 92       	push	r1
    123e:	0f 92       	push	r0
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	0f 92       	push	r0
    1244:	11 24       	eor	r1, r1
    1246:	8f 93       	push	r24
    1248:	ef 93       	push	r30
    124a:	ff 93       	push	r31
	UCRXen(); //Set bus in the idle state
    124c:	82 e0       	ldi	r24, 0x02	; 2
    124e:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	rxMode = 0;
    1252:	10 92 44 21 	sts	0x2144, r1	; 0x802144 <rxMode>
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm | USART_MPCM_bm; //Set MPCM bit
    1256:	8a e1       	ldi	r24, 0x1A	; 26
    1258:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	EDMA.CH1.CTRLA = 0;
    125c:	e0 e0       	ldi	r30, 0x00	; 0
    125e:	f1 e0       	ldi	r31, 0x01	; 1
    1260:	10 a2       	std	Z+32, r1	; 0x20
	EDMA.CH1.CTRLB = EDMA_CH_TRNIF_bm | EDMA_CH_ERRIF_bm | EDMA_CH_TRNINTLVL_LO_gc;
    1262:	81 e3       	ldi	r24, 0x31	; 49
    1264:	81 a3       	std	Z+33, r24	; 0x21
}
    1266:	ff 91       	pop	r31
    1268:	ef 91       	pop	r30
    126a:	8f 91       	pop	r24
    126c:	0f 90       	pop	r0
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	0f 90       	pop	r0
    1272:	1f 90       	pop	r1
    1274:	18 95       	reti

00001276 <__vector_36>:

ISR(TCD5_OVF_vect)
{
    1276:	1f 92       	push	r1
    1278:	0f 92       	push	r0
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	0f 92       	push	r0
    127e:	11 24       	eor	r1, r1
    1280:	2f 93       	push	r18
    1282:	8f 93       	push	r24
    1284:	9f 93       	push	r25
    1286:	ef 93       	push	r30
    1288:	ff 93       	push	r31
	PORTD.OUT = *framePtr++;
    128a:	e0 91 2e 21 	lds	r30, 0x212E	; 0x80212e <framePtr>
    128e:	f0 91 2f 21 	lds	r31, 0x212F	; 0x80212f <framePtr+0x1>
    1292:	cf 01       	movw	r24, r30
    1294:	01 96       	adiw	r24, 0x01	; 1
    1296:	80 93 2e 21 	sts	0x212E, r24	; 0x80212e <framePtr>
    129a:	90 93 2f 21 	sts	0x212F, r25	; 0x80212f <framePtr+0x1>
    129e:	20 81       	ld	r18, Z
    12a0:	20 93 64 06 	sts	0x0664, r18	; 0x800664 <__TEXT_REGION_LENGTH__+0x700664>
	if (framePtr == DSI8xFrames + sizeof(DSI8xFrames) - 1)
    12a4:	82 54       	subi	r24, 0x42	; 66
    12a6:	91 42       	sbci	r25, 0x21	; 33
    12a8:	11 f4       	brne	.+4      	; 0x12ae <__vector_36+0x38>
		TCD5.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    12aa:	10 92 46 09 	sts	0x0946, r1	; 0x800946 <__TEXT_REGION_LENGTH__+0x700946>
	TCD5.INTFLAGS = TC5_OVFIF_bm;
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <__TEXT_REGION_LENGTH__+0x70094c>
}
    12b4:	ff 91       	pop	r31
    12b6:	ef 91       	pop	r30
    12b8:	9f 91       	pop	r25
    12ba:	8f 91       	pop	r24
    12bc:	2f 91       	pop	r18
    12be:	0f 90       	pop	r0
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	0f 90       	pop	r0
    12c4:	1f 90       	pop	r1
    12c6:	18 95       	reti

000012c8 <_Z7mcuInitv>:

inline void mcuInit()
{
	//Port A configuration: 0-5 analog inputs, 7 inverted output
	PORTA.DIRSET = PIN7_bm;
    12c8:	e0 e0       	ldi	r30, 0x00	; 0
    12ca:	f6 e0       	ldi	r31, 0x06	; 6
    12cc:	80 e8       	ldi	r24, 0x80	; 128
    12ce:	81 83       	std	Z+1, r24	; 0x01
	PORTCFG.MPCMASK = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm;
    12d0:	a0 eb       	ldi	r26, 0xB0	; 176
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	8f e3       	ldi	r24, 0x3F	; 63
    12d6:	8c 93       	st	X, r24
	PORTA.PIN0CTRL = PORT_OPC_TOTEM_gc | PORT_ISC_INPUT_DISABLE_gc;
    12d8:	87 e0       	ldi	r24, 0x07	; 7
    12da:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN7CTRL = PORT_OPC_TOTEM_gc | PORT_INVEN_bm;
    12dc:	80 e4       	ldi	r24, 0x40	; 64
    12de:	87 8b       	std	Z+23, r24	; 0x17
	//Port C configuration: 0-1, 3-7 outputs
	PORTC.DIRSET = PIN0_bm | PIN1_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
    12e0:	8b ef       	ldi	r24, 0xFB	; 251
    12e2:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
	//Port D configuration: 0-7 inverted outputs
	PORTD.DIRSET = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
    12e6:	e0 e6       	ldi	r30, 0x60	; 96
    12e8:	f6 e0       	ldi	r31, 0x06	; 6
    12ea:	8f ef       	ldi	r24, 0xFF	; 255
    12ec:	81 83       	std	Z+1, r24	; 0x01
	PORTCFG.MPCMASK = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
    12ee:	8c 93       	st	X, r24
	PORTD.PIN0CTRL = PORT_OPC_TOTEM_gc | PORT_INVEN_bm | PORT_ISC_INPUT_DISABLE_gc;
    12f0:	87 e4       	ldi	r24, 0x47	; 71
    12f2:	80 8b       	std	Z+16, r24	; 0x10
	//Clock configuration: 32MHz RC with DFLL from XOSC 32768Hz
	OSC.XOSCCTRL = OSC_XOSCSEL_32KHz_gc;
    12f4:	e0 e5       	ldi	r30, 0x50	; 80
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	82 e0       	ldi	r24, 0x02	; 2
    12fa:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |= OSC_RC32MEN_bm | OSC_XOSCEN_bm;
    12fc:	80 81       	ld	r24, Z
    12fe:	8a 60       	ori	r24, 0x0A	; 10
    1300:	80 83       	st	Z, r24
	while (!(OSC.STATUS & OSC_XOSCRDY_bm));
    1302:	81 81       	ldd	r24, Z+1	; 0x01
    1304:	83 ff       	sbrs	r24, 3
    1306:	fd cf       	rjmp	.-6      	; 0x1302 <_Z7mcuInitv+0x3a>
	while (!(OSC.STATUS & OSC_RC32MRDY_bm));
    1308:	e0 e5       	ldi	r30, 0x50	; 80
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	81 81       	ldd	r24, Z+1	; 0x01
    130e:	81 ff       	sbrs	r24, 1
    1310:	fd cf       	rjmp	.-6      	; 0x130c <_Z7mcuInitv+0x44>
	OSC.DFLLCTRL = OSC_RC32MCREF_XOSC32K_gc;
    1312:	a0 e5       	ldi	r26, 0x50	; 80
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	82 e0       	ldi	r24, 0x02	; 2
    1318:	16 96       	adiw	r26, 0x06	; 6
    131a:	8c 93       	st	X, r24
    131c:	16 97       	sbiw	r26, 0x06	; 6
	DFLLRC32M.CTRL = DFLL_ENABLE_bm;
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
	CCP = CCP_IOREG_gc;
    1324:	98 ed       	ldi	r25, 0xD8	; 216
    1326:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
    1328:	e0 e4       	ldi	r30, 0x40	; 64
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 83       	st	Z, r24
	OSC.CTRL = OSC_RC32MEN_bm | OSC_XOSCEN_bm; //Disable unused clock sources
    132e:	8a e0       	ldi	r24, 0x0A	; 10
    1330:	8c 93       	st	X, r24
	CLK.RTCCTRL = CLK_RTCSRC_TOSC_gc | CLK_RTCEN_bm; //1024Hz RTC clock source
    1332:	83 e0       	ldi	r24, 0x03	; 3
    1334:	83 83       	std	Z+3, r24	; 0x03
	while (RTC.STATUS & RTC_SYNCBUSY_bm);
    1336:	e0 e0       	ldi	r30, 0x00	; 0
    1338:	f4 e0       	ldi	r31, 0x04	; 4
    133a:	81 81       	ldd	r24, Z+1	; 0x01
    133c:	80 fd       	sbrc	r24, 0
    133e:	fd cf       	rjmp	.-6      	; 0x133a <_Z7mcuInitv+0x72>
	CCP = CCP_IOREG_gc;
    1340:	88 ed       	ldi	r24, 0xD8	; 216
    1342:	84 bf       	out	0x34, r24	; 52
	CLK.LOCK = CLK_LOCK_bm; //Disable further changes in clock system
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	80 93 42 00 	sts	0x0042, r24	; 0x800042 <__TEXT_REGION_LENGTH__+0x700042>
	//PMIC: enable interrupts
	PMIC.CTRL = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
    134a:	27 e0       	ldi	r18, 0x07	; 7
    134c:	20 93 a2 00 	sts	0x00A2, r18	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	//RTC configuration: 1024 / 2 = 512Hz clock, medium level interrupt
	RTC.PER = 15; //32 overflows per second
    1350:	e0 e0       	ldi	r30, 0x00	; 0
    1352:	f4 e0       	ldi	r31, 0x04	; 4
    1354:	4f e0       	ldi	r20, 0x0F	; 15
    1356:	50 e0       	ldi	r21, 0x00	; 0
    1358:	42 87       	std	Z+10, r20	; 0x0a
    135a:	53 87       	std	Z+11, r21	; 0x0b
	RTC.INTCTRL = RTC_OVFINTLVL_MED_gc;
    135c:	92 e0       	ldi	r25, 0x02	; 2
    135e:	92 83       	std	Z+2, r25	; 0x02
	RTC.CTRL = RTC_PRESCALER_DIV2_gc;
    1360:	90 83       	st	Z, r25
	RTC.CNT = 0;
    1362:	10 86       	std	Z+8, r1	; 0x08
    1364:	11 86       	std	Z+9, r1	; 0x09
	//USARTC configuration: start / 9 data / 2 stop; 76.8kbps baud, multi-processor communication
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm | USART_MPCM_bm;
    1366:	e0 ec       	ldi	r30, 0xC0	; 192
    1368:	f8 e0       	ldi	r31, 0x08	; 8
    136a:	9a e1       	ldi	r25, 0x1A	; 26
    136c:	93 83       	std	Z+3, r25	; 0x03
	USARTC0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_SBMODE_bm | USART_CHSIZE_9BIT_gc;
    136e:	9f e0       	ldi	r25, 0x0F	; 15
    1370:	94 83       	std	Z+4, r25	; 0x04
	USARTC0.BAUDCTRLA = 12 << USART_BSEL_gp;
    1372:	9c e0       	ldi	r25, 0x0C	; 12
    1374:	96 83       	std	Z+6, r25	; 0x06
	USARTC0.BAUDCTRLB = 1 << USART_BSCALE_gp;
    1376:	90 e1       	ldi	r25, 0x10	; 16
    1378:	97 83       	std	Z+7, r25	; 0x07
	USARTC0.CTRLA = USART_DRIE_bm | USART_RXCINTLVL_MED_gc;
    137a:	30 e6       	ldi	r19, 0x60	; 96
    137c:	32 83       	std	Z+2, r19	; 0x02
	//ADC configuration: 1MHz, 15bit oversampling
	ADCA.CTRLA = ADC_ENABLE_bm;
    137e:	e0 e0       	ldi	r30, 0x00	; 0
    1380:	f2 e0       	ldi	r31, 0x02	; 2
    1382:	80 83       	st	Z, r24
	ADCA.CTRLB = ADC_CONMODE_bm | ADC_RESOLUTION_MT12BIT_gc; //Signed mode
    1384:	32 e1       	ldi	r19, 0x12	; 18
    1386:	31 83       	std	Z+1, r19	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;
    1388:	30 e2       	ldi	r19, 0x20	; 32
    138a:	32 83       	std	Z+2, r19	; 0x02
	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc;
    138c:	43 e0       	ldi	r20, 0x03	; 3
    138e:	44 83       	std	Z+4, r20	; 0x04
	ADCA.SAMPCTRL = 7 << ADC_SAMPVAL_gp;
    1390:	20 87       	std	Z+8, r18	; 0x08
	ADCA.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc | ADC_CH_GAIN_1X_gc;
    1392:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.CH0.INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc;
    1394:	82 a3       	std	Z+34, r24	; 0x22
	ADCA.CH0.AVGCTRL = ADC_CH_SAMPNUM_16X_gc; //This will produce 15 bit result
    1396:	24 e0       	ldi	r18, 0x04	; 4
    1398:	24 a7       	std	Z+44, r18	; 0x2c
	//TCD5 configuration: 500kHz, 1199Hz overflow rate
	TCD5.CTRLA = TC_CLKSEL_DIV64_gc;
    139a:	e0 e4       	ldi	r30, 0x40	; 64
    139c:	f9 e0       	ldi	r31, 0x09	; 9
    139e:	25 e0       	ldi	r18, 0x05	; 5
    13a0:	20 83       	st	Z, r18
	TCD5.CTRLB = TC_WGMODE_NORMAL_gc;
    13a2:	11 82       	std	Z+1, r1	; 0x01
	TCD5.PERBUF = 417;
    13a4:	41 ea       	ldi	r20, 0xA1	; 161
    13a6:	51 e0       	ldi	r21, 0x01	; 1
    13a8:	46 ab       	std	Z+54, r20	; 0x36
    13aa:	57 ab       	std	Z+55, r21	; 0x37
	TCD5.CTRLGCLR = TC5_STOP_bm;
    13ac:	30 87       	std	Z+8, r19	; 0x08
	//EDMA peripheral channel 0: USARTC read transfer
	EDMA.CH0.CTRLB = EDMA_CH_TRNINTLVL_LO_gc;
    13ae:	e0 e0       	ldi	r30, 0x00	; 0
    13b0:	f1 e0       	ldi	r31, 0x01	; 1
    13b2:	81 8b       	std	Z+17, r24	; 0x11
	EDMA.CH0.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_INC_gc;
    13b4:	31 e3       	ldi	r19, 0x31	; 49
    13b6:	32 8b       	std	Z+18, r19	; 0x12
	EDMA.CH0.TRIGSRC = EDMA_CH_TRIGSRC_USARTC0_RXC_gc;
    13b8:	4c e4       	ldi	r20, 0x4C	; 76
    13ba:	44 8b       	std	Z+20, r20	; 0x14
	//EDMA peripheral channel 1: USARTC write transfer
	EDMA.CH1.CTRLB = EDMA_CH_TRNINTLVL_LO_gc; //Low-level interrupt
    13bc:	81 a3       	std	Z+33, r24	; 0x21
	EDMA.CH1.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_INC_gc;
    13be:	32 a3       	std	Z+34, r19	; 0x22
	EDMA.CH1.TRIGSRC = EDMA_CH_TRIGSRC_USARTC0_DRE_gc;
    13c0:	8d e4       	ldi	r24, 0x4D	; 77
    13c2:	84 a3       	std	Z+36, r24	; 0x24
	//EDMA: 1 standard and 2 peripheral channels
	EDMA.CTRL = EDMA_ENABLE_bm | EDMA_CHMODE_STD2_gc | EDMA_DBUFMODE_DISABLE_gc | EDMA_PRIMODE_RR0123_gc;
    13c4:	80 ea       	ldi	r24, 0xA0	; 160
    13c6:	80 83       	st	Z, r24
	//Power reduction
	PR.PRGEN = PR_XCL_bm | PR_EVSYS_bm;
    13c8:	e0 e7       	ldi	r30, 0x70	; 112
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	82 e8       	ldi	r24, 0x82	; 130
    13ce:	80 83       	st	Z, r24
	PR.PRPA = PR_DAC_bm | PR_AC_bm;
    13d0:	21 83       	std	Z+1, r18	; 0x01
	PR.PRPC = PR_TWI_bm | PR_SPI_bm | PR_HIRES_bm | PR_TC5_bm | PR_TC4_bm;
    13d2:	8f e4       	ldi	r24, 0x4F	; 79
    13d4:	83 83       	std	Z+3, r24	; 0x03
	PR.PRPD = PR_USART0_bm;
    13d6:	94 83       	std	Z+4, r25	; 0x04
	sei();
    13d8:	78 94       	sei
    13da:	08 95       	ret

000013dc <main>:
}

int main(void)
{
	mcuInit();
    13dc:	0e 94 64 09 	call	0x12c8	; 0x12c8 <_Z7mcuInitv>
	eeprom_read_block(&channelOT, &savedCOT, sizeof(channelsOnTime));
    13e0:	48 e3       	ldi	r20, 0x38	; 56
    13e2:	50 e0       	ldi	r21, 0x00	; 0
    13e4:	6a e1       	ldi	r22, 0x1A	; 26
    13e6:	70 e0       	ldi	r23, 0x00	; 0
    13e8:	83 ec       	ldi	r24, 0xC3	; 195
    13ea:	90 e2       	ldi	r25, 0x20	; 32
    13ec:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <eeprom_read_block>
	eeprom_read_block(iobuf, &savedConfig, sizeof(systemConfig) - 2);
    13f0:	48 e1       	ldi	r20, 0x18	; 24
    13f2:	50 e0       	ldi	r21, 0x00	; 0
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	70 e0       	ldi	r23, 0x00	; 0
    13f8:	8b e8       	ldi	r24, 0x8B	; 139
    13fa:	90 e2       	ldi	r25, 0x20	; 32
    13fc:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <eeprom_read_block>
	((systemConfig*)iobuf)->overrideCfg = ((systemConfig*)iobuf)->groupConf = 0; //Ignore saved overrides
    1400:	cb e8       	ldi	r28, 0x8B	; 139
    1402:	d0 e2       	ldi	r29, 0x20	; 32
    1404:	1e 8a       	std	Y+22, r1	; 0x16
    1406:	19 86       	std	Y+9, r1	; 0x09
	((systemConfig*)iobuf)->CRC16 = CalculateCRC16(iobuf, sizeof(systemConfig) - 2);
    1408:	68 e1       	ldi	r22, 0x18	; 24
    140a:	ce 01       	movw	r24, r28
    140c:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pva>
    1410:	88 8f       	std	Y+24, r24	; 0x18
    1412:	99 8f       	std	Y+25, r25	; 0x19
	ApplyConfig();
    1414:	0e 94 90 00 	call	0x120	; 0x120 <_Z11ApplyConfigv>
    1418:	ff cf       	rjmp	.-2      	; 0x1418 <main+0x3c>

0000141a <_GLOBAL__sub_I_gLevels>:

public:
	bool direction, msenCtrl; //Direction of group delay, is it controlled by motion sense
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    141a:	e3 e1       	ldi	r30, 0x13	; 19
    141c:	f0 e2       	ldi	r31, 0x20	; 32
    141e:	83 e0       	ldi	r24, 0x03	; 3
    1420:	80 83       	st	Z, r24
		_link[0] = posA;
    1422:	97 e0       	ldi	r25, 0x07	; 7
    1424:	92 83       	std	Z+2, r25	; 0x02
		_link[1] = posB;
    1426:	96 e0       	ldi	r25, 0x06	; 6
    1428:	93 83       	std	Z+3, r25	; 0x03
		_link[2] = posC;
    142a:	95 e0       	ldi	r25, 0x05	; 5
    142c:	94 83       	std	Z+4, r25	; 0x04
		_linkNum = num;
    142e:	11 82       	std	Z+1, r1	; 0x01
		_chActMask = 0x10 << num;
    1430:	90 e1       	ldi	r25, 0x10	; 16
    1432:	93 87       	std	Z+11, r25	; 0x0b

public:
	bool direction, msenCtrl; //Direction of group delay, is it controlled by motion sense
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    1434:	86 8f       	std	Z+30, r24	; 0x1e
		_link[0] = posA;
    1436:	94 e0       	ldi	r25, 0x04	; 4
    1438:	90 a3       	std	Z+32, r25	; 0x20
		_link[1] = posB;
    143a:	81 a3       	std	Z+33, r24	; 0x21
		_link[2] = posC;
    143c:	22 e0       	ldi	r18, 0x02	; 2
    143e:	22 a3       	std	Z+34, r18	; 0x22
		_linkNum = num;
    1440:	91 e0       	ldi	r25, 0x01	; 1
    1442:	97 8f       	std	Z+31, r25	; 0x1f
		_chActMask = 0x10 << num;
    1444:	30 e2       	ldi	r19, 0x20	; 32
    1446:	31 a7       	std	Z+41, r19	; 0x29

public:
	bool direction, msenCtrl; //Direction of group delay, is it controlled by motion sense
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    1448:	24 af       	std	Z+60, r18	; 0x3c
		_link[0] = posA;
    144a:	96 af       	std	Z+62, r25	; 0x3e
		_link[1] = posB;
    144c:	17 ae       	std	Z+63, r1	; 0x3f
		_link[2] = posC;
    144e:	10 92 53 20 	sts	0x2053, r1	; 0x802053 <links+0x40>
		_linkNum = num;
    1452:	25 af       	std	Z+61, r18	; 0x3d
		_chActMask = 0x10 << num;
    1454:	20 e4       	ldi	r18, 0x40	; 64
    1456:	20 93 5a 20 	sts	0x205A, r18	; 0x80205a <links+0x47>

public:
	bool direction, msenCtrl; //Direction of group delay, is it controlled by motion sense
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    145a:	90 93 6d 20 	sts	0x206D, r25	; 0x80206d <links+0x5a>
		_link[0] = posA;
    145e:	98 e0       	ldi	r25, 0x08	; 8
    1460:	90 93 6f 20 	sts	0x206F, r25	; 0x80206f <links+0x5c>
		_link[1] = posB;
    1464:	10 92 70 20 	sts	0x2070, r1	; 0x802070 <links+0x5d>
		_link[2] = posC;
    1468:	10 92 71 20 	sts	0x2071, r1	; 0x802071 <links+0x5e>
		_linkNum = num;
    146c:	80 93 6e 20 	sts	0x206E, r24	; 0x80206e <links+0x5b>
		_chActMask = 0x10 << num;
    1470:	80 e8       	ldi	r24, 0x80	; 128
    1472:	80 93 78 20 	sts	0x2078, r24	; 0x802078 <links+0x65>
	uint16_t _onTime, _fTime;
	uint64_t _onTimeStamp;
public:
	Msen(uint8_t actLink)
	{
		_linkMask = 0x10 << actLink;
    1476:	e1 e0       	ldi	r30, 0x01	; 1
    1478:	f0 e2       	ldi	r31, 0x20	; 32
    147a:	22 83       	std	Z+2, r18	; 0x02
		_linkAddr = &links[actLink];
    147c:	8f e4       	ldi	r24, 0x4F	; 79
    147e:	90 e2       	ldi	r25, 0x20	; 32
    1480:	83 83       	std	Z+3, r24	; 0x03
    1482:	94 83       	std	Z+4, r25	; 0x04
    1484:	08 95       	ret

00001486 <__divmodhi4>:
    1486:	97 fb       	bst	r25, 7
    1488:	07 2e       	mov	r0, r23
    148a:	16 f4       	brtc	.+4      	; 0x1490 <__divmodhi4+0xa>
    148c:	00 94       	com	r0
    148e:	07 d0       	rcall	.+14     	; 0x149e <__divmodhi4_neg1>
    1490:	77 fd       	sbrc	r23, 7
    1492:	09 d0       	rcall	.+18     	; 0x14a6 <__divmodhi4_neg2>
    1494:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__udivmodhi4>
    1498:	07 fc       	sbrc	r0, 7
    149a:	05 d0       	rcall	.+10     	; 0x14a6 <__divmodhi4_neg2>
    149c:	3e f4       	brtc	.+14     	; 0x14ac <__divmodhi4_exit>

0000149e <__divmodhi4_neg1>:
    149e:	90 95       	com	r25
    14a0:	81 95       	neg	r24
    14a2:	9f 4f       	sbci	r25, 0xFF	; 255
    14a4:	08 95       	ret

000014a6 <__divmodhi4_neg2>:
    14a6:	70 95       	com	r23
    14a8:	61 95       	neg	r22
    14aa:	7f 4f       	sbci	r23, 0xFF	; 255

000014ac <__divmodhi4_exit>:
    14ac:	08 95       	ret

000014ae <__adddi3_s8>:
    14ae:	00 24       	eor	r0, r0
    14b0:	a7 fd       	sbrc	r26, 7
    14b2:	00 94       	com	r0
    14b4:	2a 0f       	add	r18, r26
    14b6:	30 1d       	adc	r19, r0
    14b8:	40 1d       	adc	r20, r0
    14ba:	50 1d       	adc	r21, r0
    14bc:	60 1d       	adc	r22, r0
    14be:	70 1d       	adc	r23, r0
    14c0:	80 1d       	adc	r24, r0
    14c2:	90 1d       	adc	r25, r0
    14c4:	08 95       	ret

000014c6 <__udivmodhi4>:
    14c6:	aa 1b       	sub	r26, r26
    14c8:	bb 1b       	sub	r27, r27
    14ca:	51 e1       	ldi	r21, 0x11	; 17
    14cc:	07 c0       	rjmp	.+14     	; 0x14dc <__udivmodhi4_ep>

000014ce <__udivmodhi4_loop>:
    14ce:	aa 1f       	adc	r26, r26
    14d0:	bb 1f       	adc	r27, r27
    14d2:	a6 17       	cp	r26, r22
    14d4:	b7 07       	cpc	r27, r23
    14d6:	10 f0       	brcs	.+4      	; 0x14dc <__udivmodhi4_ep>
    14d8:	a6 1b       	sub	r26, r22
    14da:	b7 0b       	sbc	r27, r23

000014dc <__udivmodhi4_ep>:
    14dc:	88 1f       	adc	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	5a 95       	dec	r21
    14e2:	a9 f7       	brne	.-22     	; 0x14ce <__udivmodhi4_loop>
    14e4:	80 95       	com	r24
    14e6:	90 95       	com	r25
    14e8:	bc 01       	movw	r22, r24
    14ea:	cd 01       	movw	r24, r26
    14ec:	08 95       	ret

000014ee <__tablejump2__>:
    14ee:	ee 0f       	add	r30, r30
    14f0:	ff 1f       	adc	r31, r31
    14f2:	05 90       	lpm	r0, Z+
    14f4:	f4 91       	lpm	r31, Z
    14f6:	e0 2d       	mov	r30, r0
    14f8:	09 94       	ijmp

000014fa <eeprom_read_block>:
    14fa:	60 50       	subi	r22, 0x00	; 0
    14fc:	70 4f       	sbci	r23, 0xF0	; 240
    14fe:	0c 94 ba 0a 	jmp	0x1574	; 0x1574 <memcpy>

00001502 <eeprom_update_block>:
    1502:	dc 01       	movw	r26, r24
    1504:	a4 0f       	add	r26, r20
    1506:	b5 1f       	adc	r27, r21
    1508:	41 50       	subi	r20, 0x01	; 1
    150a:	50 40       	sbci	r21, 0x00	; 0
    150c:	48 f0       	brcs	.+18     	; 0x1520 <eeprom_update_block+0x1e>
    150e:	cb 01       	movw	r24, r22
    1510:	84 0f       	add	r24, r20
    1512:	95 1f       	adc	r25, r21
    1514:	2e 91       	ld	r18, -X
    1516:	0e 94 92 0a 	call	0x1524	; 0x1524 <eeprom_update_r18>
    151a:	41 50       	subi	r20, 0x01	; 1
    151c:	50 40       	sbci	r21, 0x00	; 0
    151e:	d0 f7       	brcc	.-12     	; 0x1514 <eeprom_update_block+0x12>
    1520:	08 95       	ret

00001522 <eeprom_update_byte>:
    1522:	26 2f       	mov	r18, r22

00001524 <eeprom_update_r18>:
    1524:	0e 94 b6 0a 	call	0x156c	; 0x156c <eeprom_mapen>
    1528:	00 80       	ld	r0, Z
    152a:	02 16       	cp	r0, r18
    152c:	19 f0       	breq	.+6      	; 0x1534 <eeprom_update_r18+0x10>
    152e:	0e 94 9d 0a 	call	0x153a	; 0x153a <eeprom_write_r18>
    1532:	01 97       	sbiw	r24, 0x01	; 1
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	08 95       	ret

00001538 <eeprom_write_byte>:
    1538:	26 2f       	mov	r18, r22

0000153a <eeprom_write_r18>:
    153a:	af 93       	push	r26
    153c:	bf 93       	push	r27
    153e:	e0 ec       	ldi	r30, 0xC0	; 192
    1540:	f1 e0       	ldi	r31, 0x01	; 1
    1542:	37 85       	ldd	r19, Z+15	; 0x0f
    1544:	37 fd       	sbrc	r19, 7
    1546:	fd cf       	rjmp	.-6      	; 0x1542 <eeprom_write_r18+0x8>
    1548:	dc 01       	movw	r26, r24
    154a:	a0 50       	subi	r26, 0x00	; 0
    154c:	b0 4f       	sbci	r27, 0xF0	; 240
    154e:	2c 93       	st	X, r18
    1550:	25 e3       	ldi	r18, 0x35	; 53
    1552:	22 87       	std	Z+10, r18	; 0x0a
    1554:	28 ed       	ldi	r18, 0xD8	; 216
    1556:	31 e0       	ldi	r19, 0x01	; 1
    1558:	24 bf       	out	0x34, r18	; 52
    155a:	33 87       	std	Z+11, r19	; 0x0b
    155c:	01 96       	adiw	r24, 0x01	; 1
    155e:	bf 91       	pop	r27
    1560:	af 91       	pop	r26
    1562:	08 95       	ret

00001564 <eeprom_read_byte>:
    1564:	03 d0       	rcall	.+6      	; 0x156c <eeprom_mapen>
    1566:	80 81       	ld	r24, Z
    1568:	99 27       	eor	r25, r25
    156a:	08 95       	ret

0000156c <eeprom_mapen>:
    156c:	fc 01       	movw	r30, r24
    156e:	e0 50       	subi	r30, 0x00	; 0
    1570:	f0 4f       	sbci	r31, 0xF0	; 240
    1572:	08 95       	ret

00001574 <memcpy>:
    1574:	fb 01       	movw	r30, r22
    1576:	dc 01       	movw	r26, r24
    1578:	02 c0       	rjmp	.+4      	; 0x157e <memcpy+0xa>
    157a:	01 90       	ld	r0, Z+
    157c:	0d 92       	st	X+, r0
    157e:	41 50       	subi	r20, 0x01	; 1
    1580:	50 40       	sbci	r21, 0x00	; 0
    1582:	d8 f7       	brcc	.-10     	; 0x157a <memcpy+0x6>
    1584:	08 95       	ret

00001586 <_exit>:
    1586:	f8 94       	cli

00001588 <__stop_program>:
    1588:	ff cf       	rjmp	.-2      	; 0x1588 <__stop_program>
