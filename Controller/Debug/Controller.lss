
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001564  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00001651  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000016f  00802000  00802000  000015f8  2**0
                  ALLOC
  3 .eeprom       00000059  00810000  00810000  000015f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00001651  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001684  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000110  00000000  00000000  000016c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000050f3  00000000  00000000  000017d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001f4a  00000000  00000000  000068cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f67  00000000  00000000  00008815  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000030c  00000000  00000000  0000977c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003555  00000000  00000000  00009a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001211  00000000  00000000  0000cfdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000150  00000000  00000000  0000e1ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 57 00 	jmp	0xae	; 0xae <__ctors_end>
       4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       c:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <__vector_3>
      10:	0c 94 0c 09 	jmp	0x1218	; 0x1218 <__vector_4>
      14:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      18:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      1c:	0c 94 93 01 	jmp	0x326	; 0x326 <__vector_7>
      20:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      24:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      28:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      2c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      30:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      34:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      38:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      3c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      40:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      44:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      48:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      4c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      50:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      54:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      58:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      5c:	0c 94 2e 08 	jmp	0x105c	; 0x105c <__vector_23>
      60:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      68:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      6c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      70:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      74:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      78:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      7c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      80:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      84:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      88:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__vector_34>
      8c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      90:	0c 94 20 09 	jmp	0x1240	; 0x1240 <__vector_36>
      94:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      98:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      9c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      a0:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      a4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      a8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>

000000ac <__ctors_start>:
      ac:	fb 09       	sbc	r31, r11

000000ae <__ctors_end>:
      ae:	11 24       	eor	r1, r1
      b0:	1f be       	out	0x3f, r1	; 63
      b2:	cf ef       	ldi	r28, 0xFF	; 255
      b4:	cd bf       	out	0x3d, r28	; 61
      b6:	d7 e2       	ldi	r29, 0x27	; 39
      b8:	de bf       	out	0x3e, r29	; 62

000000ba <__do_clear_bss>:
      ba:	21 e2       	ldi	r18, 0x21	; 33
      bc:	a0 e0       	ldi	r26, 0x00	; 0
      be:	b0 e2       	ldi	r27, 0x20	; 32
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	af 36       	cpi	r26, 0x6F	; 111
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>

000000ca <__do_global_ctors>:
      ca:	10 e0       	ldi	r17, 0x00	; 0
      cc:	c7 e5       	ldi	r28, 0x57	; 87
      ce:	d0 e0       	ldi	r29, 0x00	; 0
      d0:	04 c0       	rjmp	.+8      	; 0xda <__do_global_ctors+0x10>
      d2:	21 97       	sbiw	r28, 0x01	; 1
      d4:	fe 01       	movw	r30, r28
      d6:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__tablejump2__>
      da:	c6 35       	cpi	r28, 0x56	; 86
      dc:	d1 07       	cpc	r29, r17
      de:	c9 f7       	brne	.-14     	; 0xd2 <__do_global_ctors+0x8>
      e0:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <main>
      e4:	0c 94 b0 0a 	jmp	0x1560	; 0x1560 <_exit>

000000e8 <__bad_interrupt>:
      e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ec <_Z14CalculateCRC16Pva>:
}

uint16_t CalculateCRC16(void *arr, int8_t count)
{
	uint8_t *ptr = (uint8_t*)arr;
	CRC.CTRL = CRC_RESET_RESET1_gc | CRC_SOURCE_IO_gc;
      ec:	21 ec       	ldi	r18, 0xC1	; 193
      ee:	20 93 d0 00 	sts	0x00D0, r18	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
	while (--count >= 0)
      f2:	61 50       	subi	r22, 0x01	; 1
      f4:	52 f0       	brmi	.+20     	; 0x10a <_Z14CalculateCRC16Pva+0x1e>
      f6:	e8 2f       	mov	r30, r24
      f8:	f9 2f       	mov	r31, r25
		CRC.DATAIN = *ptr++;
      fa:	a0 ed       	ldi	r26, 0xD0	; 208
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	81 91       	ld	r24, Z+
     100:	13 96       	adiw	r26, 0x03	; 3
     102:	8c 93       	st	X, r24
     104:	13 97       	sbiw	r26, 0x03	; 3
     106:	61 50       	subi	r22, 0x01	; 1

uint16_t CalculateCRC16(void *arr, int8_t count)
{
	uint8_t *ptr = (uint8_t*)arr;
	CRC.CTRL = CRC_RESET_RESET1_gc | CRC_SOURCE_IO_gc;
	while (--count >= 0)
     108:	d2 f7       	brpl	.-12     	; 0xfe <_Z14CalculateCRC16Pva+0x12>
		CRC.DATAIN = *ptr++;
	uint16_t result = ((uint16_t)CRC.CHECKSUM1 << 8) | CRC.CHECKSUM0;
     10a:	e0 ed       	ldi	r30, 0xD0	; 208
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	25 81       	ldd	r18, Z+5	; 0x05
     110:	84 81       	ldd	r24, Z+4	; 0x04
	CRC.CTRL = CRC_SOURCE_DISABLE_gc;
     112:	10 82       	st	Z, r1
	return result;
     114:	90 e0       	ldi	r25, 0x00	; 0
}
     116:	92 2b       	or	r25, r18
     118:	08 95       	ret

0000011a <_Z11ApplyConfigv>:

void ApplyConfig()
{
     11a:	2f 92       	push	r2
     11c:	3f 92       	push	r3
     11e:	4f 92       	push	r4
     120:	5f 92       	push	r5
     122:	6f 92       	push	r6
     124:	7f 92       	push	r7
     126:	8f 92       	push	r8
     128:	9f 92       	push	r9
     12a:	af 92       	push	r10
     12c:	bf 92       	push	r11
     12e:	cf 92       	push	r12
     130:	df 92       	push	r13
     132:	ef 92       	push	r14
     134:	ff 92       	push	r15
     136:	0f 93       	push	r16
     138:	1f 93       	push	r17
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
     13e:	cd b7       	in	r28, 0x3d	; 61
     140:	de b7       	in	r29, 0x3e	; 62
     142:	25 97       	sbiw	r28, 0x05	; 5
     144:	cd bf       	out	0x3d, r28	; 61
     146:	de bf       	out	0x3e, r29	; 62
	systemConfig *temp = (systemConfig*)iobuf;
	//Both bits 7 are set: one of the on-time counters must be rewritten
	if ((temp->groupConf & 0x80) && (temp->overrideCfg & 0x80))
     148:	50 90 b9 20 	lds	r5, 0x20B9	; 0x8020b9 <iobuf+0x1d>
     14c:	55 20       	and	r5, r5
     14e:	24 f5       	brge	.+72     	; 0x198 <_Z11ApplyConfigv+0x7e>
     150:	80 91 ad 20 	lds	r24, 0x20AD	; 0x8020ad <iobuf+0x11>
     154:	88 23       	and	r24, r24
     156:	04 f5       	brge	.+64     	; 0x198 <_Z11ApplyConfigv+0x7e>
	{
		uint8_t j = temp->overrideCfg & 0xF; //Update on-time of link
		channelOT.linkOnTime[j] = *((uint32_t*)temp->minLvl);
     158:	8f 70       	andi	r24, 0x0F	; 15
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	fc 01       	movw	r30, r24
     15e:	ee 0f       	add	r30, r30
     160:	ff 1f       	adc	r31, r31
     162:	ee 0f       	add	r30, r30
     164:	ff 1f       	adc	r31, r31
     166:	ec 52       	subi	r30, 0x2C	; 44
     168:	ff 4d       	sbci	r31, 0xDF	; 223
     16a:	ac e9       	ldi	r26, 0x9C	; 156
     16c:	b0 e2       	ldi	r27, 0x20	; 32
     16e:	4d 91       	ld	r20, X+
     170:	5d 91       	ld	r21, X+
     172:	6d 91       	ld	r22, X+
     174:	7c 91       	ld	r23, X
     176:	13 97       	sbiw	r26, 0x03	; 3
     178:	40 83       	st	Z, r20
     17a:	51 83       	std	Z+1, r21	; 0x01
     17c:	62 83       	std	Z+2, r22	; 0x02
     17e:	73 83       	std	Z+3, r23	; 0x03
		channelOT.linkSwCnt[j] = *((uint16_t*)temp->maxLvl);
     180:	88 0f       	add	r24, r24
     182:	99 1f       	adc	r25, r25
     184:	fc 01       	movw	r30, r24
     186:	e8 50       	subi	r30, 0x08	; 8
     188:	ff 4d       	sbci	r31, 0xDF	; 223
     18a:	18 96       	adiw	r26, 0x08	; 8
     18c:	8d 91       	ld	r24, X+
     18e:	9c 91       	ld	r25, X
     190:	19 97       	sbiw	r26, 0x09	; 9
     192:	80 83       	st	Z, r24
     194:	91 83       	std	Z+1, r25	; 0x01
		return;
     196:	b1 c0       	rjmp	.+354    	; 0x2fa <_Z11ApplyConfigv+0x1e0>
	}
	memcpy(&validConf, iobuf, sizeof(systemConfig));
     198:	81 e2       	ldi	r24, 0x21	; 33
     19a:	ec e9       	ldi	r30, 0x9C	; 156
     19c:	f0 e2       	ldi	r31, 0x20	; 32
     19e:	a4 e2       	ldi	r26, 0x24	; 36
     1a0:	b1 e2       	ldi	r27, 0x21	; 33
     1a2:	01 90       	ld	r0, Z+
     1a4:	0d 92       	st	X+, r0
     1a6:	8a 95       	dec	r24
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <_Z11ApplyConfigv+0x88>
		_fadeRate = (min > 160) ? 160 : min;
		_linkDelay = (max > 63) ? 64 : max + 1;
		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			pos = _link[i];
			if (validConf.overrideCfg == (pos | 0x10))
     1aa:	20 91 35 21 	lds	r18, 0x2135	; 0x802135 <validConf+0x11>
			{
				if (_lvl[i] == gLevels[pos]) //Refresh saved ticks value only if no dimming in the process right now
					_tickLastChg = sysState.sysTick;
     1ae:	ec e0       	ldi	r30, 0x0C	; 12
     1b0:	f1 e2       	ldi	r31, 0x21	; 33
     1b2:	b0 80       	ld	r11, Z
     1b4:	c1 80       	ldd	r12, Z+1	; 0x01
     1b6:	d2 80       	ldd	r13, Z+2	; 0x02
     1b8:	e3 80       	ldd	r14, Z+3	; 0x03
     1ba:	a4 80       	ldd	r10, Z+4	; 0x04
     1bc:	95 80       	ldd	r9, Z+5	; 0x05
     1be:	76 80       	ldd	r7, Z+6	; 0x06
     1c0:	67 80       	ldd	r6, Z+7	; 0x07
				_lvl[i] = validConf.overrideLvl;
     1c2:	f0 90 34 21 	lds	r15, 0x2134	; 0x802134 <validConf+0x10>
     1c6:	00 e1       	ldi	r16, 0x10	; 16
     1c8:	10 e2       	ldi	r17, 0x20	; 32
     1ca:	0f 2e       	mov	r0, r31
     1cc:	fc e9       	ldi	r31, 0x9C	; 156
     1ce:	2f 2e       	mov	r2, r31
     1d0:	f0 e2       	ldi	r31, 0x20	; 32
     1d2:	3f 2e       	mov	r3, r31
     1d4:	f0 2d       	mov	r31, r0
	void setParams()
	{
		uint8_t pos, min = validConf.fadeRate[_linkNum], max = validConf.linkDelay[_linkNum];
		if (min < 32)
			min = 32;
		_fadeRate = (min > 160) ? 160 : min;
     1d6:	0f 2e       	mov	r0, r31
     1d8:	f0 ea       	ldi	r31, 0xA0	; 160
     1da:	8f 2e       	mov	r8, r31
     1dc:	f0 2d       	mov	r31, r0
		_linkDelay = (max > 63) ? 64 : max + 1;
     1de:	41 2c       	mov	r4, r1
     1e0:	a8 01       	movw	r20, r16
		_chActMask = 0x10 << num;
	};

	void setParams()
	{
		uint8_t pos, min = validConf.fadeRate[_linkNum], max = validConf.linkDelay[_linkNum];
     1e2:	d8 01       	movw	r26, r16
     1e4:	12 96       	adiw	r26, 0x02	; 2
     1e6:	ec 91       	ld	r30, X
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	ec 5d       	subi	r30, 0xDC	; 220
     1ec:	fe 4d       	sbci	r31, 0xDE	; 222
     1ee:	92 89       	ldd	r25, Z+18	; 0x12
     1f0:	86 89       	ldd	r24, Z+22	; 0x16
		if (min < 32)
     1f2:	90 32       	cpi	r25, 0x20	; 32
     1f4:	08 f4       	brcc	.+2      	; 0x1f8 <_Z11ApplyConfigv+0xde>
			min = 32;
     1f6:	90 e2       	ldi	r25, 0x20	; 32
		_fadeRate = (min > 160) ? 160 : min;
     1f8:	91 3a       	cpi	r25, 0xA1	; 161
     1fa:	08 f0       	brcs	.+2      	; 0x1fe <_Z11ApplyConfigv+0xe4>
     1fc:	98 2d       	mov	r25, r8
     1fe:	fa 01       	movw	r30, r20
     200:	97 87       	std	Z+15, r25	; 0x0f
		_linkDelay = (max > 63) ? 64 : max + 1;
     202:	80 34       	cpi	r24, 0x40	; 64
     204:	18 f4       	brcc	.+6      	; 0x20c <_Z11ApplyConfigv+0xf2>
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	01 96       	adiw	r24, 0x01	; 1
     20a:	02 c0       	rjmp	.+4      	; 0x210 <_Z11ApplyConfigv+0xf6>
     20c:	80 e4       	ldi	r24, 0x40	; 64
     20e:	94 2d       	mov	r25, r4
     210:	da 01       	movw	r26, r20
     212:	50 96       	adiw	r26, 0x10	; 16
     214:	8d 93       	st	X+, r24
     216:	9c 93       	st	X, r25
     218:	51 97       	sbiw	r26, 0x11	; 17
		for (uint8_t i = 0; i < _linkCnt; i++)
     21a:	11 96       	adiw	r26, 0x01	; 1
     21c:	9c 91       	ld	r25, X
     21e:	99 23       	and	r25, r25
     220:	09 f4       	brne	.+2      	; 0x224 <_Z11ApplyConfigv+0x10a>
     222:	4b c0       	rjmp	.+150    	; 0x2ba <_Z11ApplyConfigv+0x1a0>
     224:	d8 01       	movw	r26, r16
     226:	13 96       	adiw	r26, 0x03	; 3
     228:	80 e0       	ldi	r24, 0x00	; 0
		{
			pos = _link[i];
     22a:	ed 91       	ld	r30, X+
     22c:	ed 83       	std	Y+5, r30	; 0x05
			if (validConf.overrideCfg == (pos | 0x10))
     22e:	3e 2f       	mov	r19, r30
     230:	30 61       	ori	r19, 0x10	; 16
     232:	23 13       	cpse	r18, r19
     234:	1f c0       	rjmp	.+62     	; 0x274 <_Z11ApplyConfigv+0x15a>
     236:	a9 83       	std	Y+1, r26	; 0x01
     238:	ba 83       	std	Y+2, r27	; 0x02
			{
				if (_lvl[i] == gLevels[pos]) //Refresh saved ticks value only if no dimming in the process right now
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	ee 0f       	add	r30, r30
     23e:	ff 1f       	adc	r31, r31
     240:	bf 01       	movw	r22, r30
     242:	63 5a       	subi	r22, 0xA3	; 163
     244:	7e 4d       	sbci	r23, 0xDE	; 222
     246:	fb 01       	movw	r30, r22
     248:	01 90       	ld	r0, Z+
     24a:	f0 81       	ld	r31, Z
     24c:	e0 2d       	mov	r30, r0
     24e:	12 96       	adiw	r26, 0x02	; 2
     250:	6c 91       	ld	r22, X
     252:	12 97       	sbiw	r26, 0x02	; 2
     254:	70 e0       	ldi	r23, 0x00	; 0
     256:	6e 17       	cp	r22, r30
     258:	7f 07       	cpc	r23, r31
     25a:	49 f4       	brne	.+18     	; 0x26e <_Z11ApplyConfigv+0x154>
					_tickLastChg = sysState.sysTick;
     25c:	fa 01       	movw	r30, r20
     25e:	b3 8a       	std	Z+19, r11	; 0x13
     260:	c4 8a       	std	Z+20, r12	; 0x14
     262:	d5 8a       	std	Z+21, r13	; 0x15
     264:	e6 8a       	std	Z+22, r14	; 0x16
     266:	a7 8a       	std	Z+23, r10	; 0x17
     268:	90 8e       	std	Z+24, r9	; 0x18
     26a:	71 8e       	std	Z+25, r7	; 0x19
     26c:	62 8e       	std	Z+26, r6	; 0x1a
				_lvl[i] = validConf.overrideLvl;
     26e:	e9 81       	ldd	r30, Y+1	; 0x01
     270:	fa 81       	ldd	r31, Y+2	; 0x02
     272:	f2 82       	std	Z+2, r15	; 0x02
			}
			min = pos > 7 ? 4 : validConf.minLvl[pos];
     274:	fd 81       	ldd	r31, Y+5	; 0x05
     276:	f8 30       	cpi	r31, 0x08	; 8
     278:	48 f4       	brcc	.+18     	; 0x28c <_Z11ApplyConfigv+0x172>
     27a:	ef 2f       	mov	r30, r31
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	ec 5d       	subi	r30, 0xDC	; 220
     280:	fe 4d       	sbci	r31, 0xDE	; 222
     282:	30 81       	ld	r19, Z
			max = pos > 7 ? 63 : validConf.maxLvl[pos];
     284:	60 85       	ldd	r22, Z+8	; 0x08
			_minLvl[i] = (min < 222) ? min + 1 : 223;
     286:	3e 3d       	cpi	r19, 0xDE	; 222
     288:	28 f4       	brcc	.+10     	; 0x294 <_Z11ApplyConfigv+0x17a>
     28a:	02 c0       	rjmp	.+4      	; 0x290 <_Z11ApplyConfigv+0x176>
			{
				if (_lvl[i] == gLevels[pos]) //Refresh saved ticks value only if no dimming in the process right now
					_tickLastChg = sysState.sysTick;
				_lvl[i] = validConf.overrideLvl;
			}
			min = pos > 7 ? 4 : validConf.minLvl[pos];
     28c:	34 e0       	ldi	r19, 0x04	; 4
			max = pos > 7 ? 63 : validConf.maxLvl[pos];
     28e:	6f e3       	ldi	r22, 0x3F	; 63
			_minLvl[i] = (min < 222) ? min + 1 : 223;
     290:	3f 5f       	subi	r19, 0xFF	; 255
     292:	01 c0       	rjmp	.+2      	; 0x296 <_Z11ApplyConfigv+0x17c>
     294:	3f ed       	ldi	r19, 0xDF	; 223
     296:	fd 01       	movw	r30, r26
     298:	15 96       	adiw	r26, 0x05	; 5
     29a:	3c 93       	st	X, r19
     29c:	15 97       	sbiw	r26, 0x05	; 5
			_difLvl[i] = max;
			if (max > _minLvl[i])
     29e:	36 17       	cp	r19, r22
     2a0:	20 f0       	brcs	.+8      	; 0x2aa <_Z11ApplyConfigv+0x190>
				_lvl[i] = validConf.overrideLvl;
			}
			min = pos > 7 ? 4 : validConf.minLvl[pos];
			max = pos > 7 ? 63 : validConf.maxLvl[pos];
			_minLvl[i] = (min < 222) ? min + 1 : 223;
			_difLvl[i] = max;
     2a2:	18 96       	adiw	r26, 0x08	; 8
     2a4:	6c 93       	st	X, r22
     2a6:	18 97       	sbiw	r26, 0x08	; 8
     2a8:	05 c0       	rjmp	.+10     	; 0x2b4 <_Z11ApplyConfigv+0x19a>
			if (max > _minLvl[i])
			{
				max -= _minLvl[i];
				_difLvl[i] = (max >= 32) ? max : 32;
     2aa:	63 1b       	sub	r22, r19
     2ac:	60 32       	cpi	r22, 0x20	; 32
     2ae:	08 f4       	brcc	.+2      	; 0x2b2 <_Z11ApplyConfigv+0x198>
     2b0:	60 e2       	ldi	r22, 0x20	; 32
     2b2:	60 87       	std	Z+8, r22	; 0x08
		uint8_t pos, min = validConf.fadeRate[_linkNum], max = validConf.linkDelay[_linkNum];
		if (min < 32)
			min = 32;
		_fadeRate = (min > 160) ? 160 : min;
		_linkDelay = (max > 63) ? 64 : max + 1;
		for (uint8_t i = 0; i < _linkCnt; i++)
     2b4:	8f 5f       	subi	r24, 0xFF	; 255
     2b6:	89 13       	cpse	r24, r25
     2b8:	b8 cf       	rjmp	.-144    	; 0x22a <_Z11ApplyConfigv+0x110>
     2ba:	0d 5d       	subi	r16, 0xDD	; 221
     2bc:	1f 4f       	sbci	r17, 0xFF	; 255
		channelOT.linkOnTime[j] = *((uint32_t*)temp->minLvl);
		channelOT.linkSwCnt[j] = *((uint16_t*)temp->maxLvl);
		return;
	}
	memcpy(&validConf, iobuf, sizeof(systemConfig));
	for (uint8_t i = 0; i < 4; i++)
     2be:	02 15       	cp	r16, r2
     2c0:	13 05       	cpc	r17, r3
     2c2:	09 f0       	breq	.+2      	; 0x2c6 <_Z11ApplyConfigv+0x1ac>
     2c4:	8d cf       	rjmp	.-230    	; 0x1e0 <_Z11ApplyConfigv+0xc6>
	{
		_linkNum = actLink;
	};
	void setParams()
	{
		_onTime = validConf.msenOnTime > 5 ? validConf.msenOnTime : 6;
     2c6:	80 91 3e 21 	lds	r24, 0x213E	; 0x80213e <validConf+0x1a>
     2ca:	86 30       	cpi	r24, 0x06	; 6
     2cc:	08 f4       	brcc	.+2      	; 0x2d0 <_Z11ApplyConfigv+0x1b6>
     2ce:	86 e0       	ldi	r24, 0x06	; 6
     2d0:	e2 e0       	ldi	r30, 0x02	; 2
     2d2:	f0 e2       	ldi	r31, 0x20	; 32
     2d4:	84 83       	std	Z+4, r24	; 0x04
		_fTime = _onTime + validConf.msenLowTime;
     2d6:	90 91 3f 21 	lds	r25, 0x213F	; 0x80213f <validConf+0x1b>
     2da:	89 0f       	add	r24, r25
     2dc:	85 83       	std	Z+5, r24	; 0x05
	}
	memcpy(&validConf, iobuf, sizeof(systemConfig));
	for (uint8_t i = 0; i < 4; i++)
		links[i].setParams();
	msenCh.setParams();
	if (validConf.groupConf & 0x08) //Bit 3 is set: save config to EEPROM
     2de:	53 fe       	sbrs	r5, 3
     2e0:	08 c0       	rjmp	.+16     	; 0x2f2 <_Z11ApplyConfigv+0x1d8>
		eeprom_update_block(&validConf, &savedConfig, sizeof(systemConfig));
     2e2:	41 e2       	ldi	r20, 0x21	; 33
     2e4:	50 e0       	ldi	r21, 0x00	; 0
     2e6:	60 e0       	ldi	r22, 0x00	; 0
     2e8:	70 e0       	ldi	r23, 0x00	; 0
     2ea:	84 e2       	ldi	r24, 0x24	; 36
     2ec:	91 e2       	ldi	r25, 0x21	; 33
     2ee:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <eeprom_update_block>
	RTC.CALIB = validConf.rtcCorrect;
     2f2:	80 91 42 21 	lds	r24, 0x2142	; 0x802142 <validConf+0x1e>
     2f6:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
}
     2fa:	25 96       	adiw	r28, 0x05	; 5
     2fc:	cd bf       	out	0x3d, r28	; 61
     2fe:	de bf       	out	0x3e, r29	; 62
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	1f 91       	pop	r17
     306:	0f 91       	pop	r16
     308:	ff 90       	pop	r15
     30a:	ef 90       	pop	r14
     30c:	df 90       	pop	r13
     30e:	cf 90       	pop	r12
     310:	bf 90       	pop	r11
     312:	af 90       	pop	r10
     314:	9f 90       	pop	r9
     316:	8f 90       	pop	r8
     318:	7f 90       	pop	r7
     31a:	6f 90       	pop	r6
     31c:	5f 90       	pop	r5
     31e:	4f 90       	pop	r4
     320:	3f 90       	pop	r3
     322:	2f 90       	pop	r2
     324:	08 95       	ret

00000326 <__vector_7>:

ISR(RTC_OVF_vect)
{
     326:	1f 92       	push	r1
     328:	0f 92       	push	r0
     32a:	0f b6       	in	r0, 0x3f	; 63
     32c:	0f 92       	push	r0
     32e:	11 24       	eor	r1, r1
     330:	2f 92       	push	r2
     332:	3f 92       	push	r3
     334:	4f 92       	push	r4
     336:	5f 92       	push	r5
     338:	6f 92       	push	r6
     33a:	7f 92       	push	r7
     33c:	8f 92       	push	r8
     33e:	9f 92       	push	r9
     340:	af 92       	push	r10
     342:	bf 92       	push	r11
     344:	cf 92       	push	r12
     346:	df 92       	push	r13
     348:	ef 92       	push	r14
     34a:	ff 92       	push	r15
     34c:	0f 93       	push	r16
     34e:	1f 93       	push	r17
     350:	2f 93       	push	r18
     352:	3f 93       	push	r19
     354:	4f 93       	push	r20
     356:	5f 93       	push	r21
     358:	6f 93       	push	r22
     35a:	7f 93       	push	r23
     35c:	8f 93       	push	r24
     35e:	9f 93       	push	r25
     360:	af 93       	push	r26
     362:	bf 93       	push	r27
     364:	ef 93       	push	r30
     366:	ff 93       	push	r31
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	cd b7       	in	r28, 0x3d	; 61
     36e:	de b7       	in	r29, 0x3e	; 62
     370:	2e 97       	sbiw	r28, 0x0e	; 14
     372:	cd bf       	out	0x3d, r28	; 61
     374:	de bf       	out	0x3e, r29	; 62
	sysState.sysTick++;
     376:	ec e0       	ldi	r30, 0x0C	; 12
     378:	f1 e2       	ldi	r31, 0x21	; 33
     37a:	20 81       	ld	r18, Z
     37c:	31 81       	ldd	r19, Z+1	; 0x01
     37e:	42 81       	ldd	r20, Z+2	; 0x02
     380:	53 81       	ldd	r21, Z+3	; 0x03
     382:	64 81       	ldd	r22, Z+4	; 0x04
     384:	75 81       	ldd	r23, Z+5	; 0x05
     386:	86 81       	ldd	r24, Z+6	; 0x06
     388:	97 81       	ldd	r25, Z+7	; 0x07
     38a:	a1 e0       	ldi	r26, 0x01	; 1
     38c:	0e 94 44 0a 	call	0x1488	; 0x1488 <__adddi3_s8>
     390:	20 83       	st	Z, r18
     392:	31 83       	std	Z+1, r19	; 0x01
     394:	42 83       	std	Z+2, r20	; 0x02
     396:	53 83       	std	Z+3, r21	; 0x03
     398:	64 83       	std	Z+4, r22	; 0x04
     39a:	75 83       	std	Z+5, r23	; 0x05
     39c:	86 83       	std	Z+6, r24	; 0x06
     39e:	97 83       	std	Z+7, r25	; 0x07
     3a0:	0f 2e       	mov	r0, r31
     3a2:	f0 e1       	ldi	r31, 0x10	; 16
     3a4:	2f 2e       	mov	r2, r31
     3a6:	f0 e2       	ldi	r31, 0x20	; 32
     3a8:	3f 2e       	mov	r3, r31
     3aa:	f0 2d       	mov	r31, r0
     3ac:	81 2c       	mov	r8, r1
     3ae:	91 2c       	mov	r9, r1
	static uint8_t rs485busy = 0;
	uint8_t i;
	for (i = 0; i < 4; i++)
		links[i].updateLevel();
     3b0:	94 01       	movw	r18, r8
     3b2:	f1 01       	movw	r30, r2
			_tickLastChg = sysState.sysTick;
	}

	void updateLevel()
	{
		int16_t ticksEl = (int16_t)(sysState.sysTick - _tickLastChg); //Elapsed ticks since beginning of dim
     3b4:	ac e0       	ldi	r26, 0x0C	; 12
     3b6:	b1 e2       	ldi	r27, 0x21	; 33
     3b8:	ed 90       	ld	r14, X+
     3ba:	fc 90       	ld	r15, X
     3bc:	83 89       	ldd	r24, Z+19	; 0x13
     3be:	94 89       	ldd	r25, Z+20	; 0x14
     3c0:	e8 1a       	sub	r14, r24
     3c2:	f9 0a       	sbc	r15, r25
		int16_t delta = (((ticksEl + 1) * _fadeRate) >> 5) - ((ticksEl * _fadeRate) >> 5); //Number of steps
     3c4:	47 85       	ldd	r20, Z+15	; 0x0f
     3c6:	50 e0       	ldi	r21, 0x00	; 0
     3c8:	b7 01       	movw	r22, r14
     3ca:	6f 5f       	subi	r22, 0xFF	; 255
     3cc:	7f 4f       	sbci	r23, 0xFF	; 255
     3ce:	64 9f       	mul	r22, r20
     3d0:	c0 01       	movw	r24, r0
     3d2:	65 9f       	mul	r22, r21
     3d4:	90 0d       	add	r25, r0
     3d6:	74 9f       	mul	r23, r20
     3d8:	90 0d       	add	r25, r0
     3da:	11 24       	eor	r1, r1
     3dc:	6c 01       	movw	r12, r24
     3de:	d5 94       	asr	r13
     3e0:	c7 94       	ror	r12
     3e2:	d5 94       	asr	r13
     3e4:	c7 94       	ror	r12
     3e6:	d5 94       	asr	r13
     3e8:	c7 94       	ror	r12
     3ea:	d5 94       	asr	r13
     3ec:	c7 94       	ror	r12
     3ee:	d5 94       	asr	r13
     3f0:	c7 94       	ror	r12
     3f2:	84 1b       	sub	r24, r20
     3f4:	95 0b       	sbc	r25, r21
     3f6:	95 95       	asr	r25
     3f8:	87 95       	ror	r24
     3fa:	95 95       	asr	r25
     3fc:	87 95       	ror	r24
     3fe:	95 95       	asr	r25
     400:	87 95       	ror	r24
     402:	95 95       	asr	r25
     404:	87 95       	ror	r24
     406:	95 95       	asr	r25
     408:	87 95       	ror	r24
     40a:	c8 1a       	sub	r12, r24
     40c:	d9 0a       	sbc	r13, r25
		if (_chActMask != PIN4_bm)
     40e:	82 89       	ldd	r24, Z+18	; 0x12
     410:	80 31       	cpi	r24, 0x10	; 16
     412:	11 f0       	breq	.+4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
			PORTC.OUTCLR = _chActMask;
     414:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
		for (int8_t i = 0; i < _linkCnt; i++)
     418:	81 81       	ldd	r24, Z+1	; 0x01
     41a:	88 23       	and	r24, r24
     41c:	09 f4       	brne	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     41e:	d0 c0       	rjmp	.+416    	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	70 e0       	ldi	r23, 0x00	; 0
     424:	b1 2c       	mov	r11, r1
		{
			uint8_t s = _dir ? i : _linkCnt - i - 1; //Direction '1' means forward
			uint8_t j = _link[s];
     426:	93 e2       	ldi	r25, 0x23	; 35
     428:	92 9f       	mul	r25, r18
     42a:	d0 01       	movw	r26, r0
     42c:	93 9f       	mul	r25, r19
     42e:	b0 0d       	add	r27, r0
     430:	11 24       	eor	r1, r1
     432:	a0 5f       	subi	r26, 0xF0	; 240
     434:	bf 4d       	sbci	r27, 0xDF	; 223
						channelOT.linkSwCnt[j]++; //Increment switch counter
					}
				}
				else //Level needs to be raised
				{
					tempLvl += ((-tempLvl > delta) ? delta : -tempLvl) + (int16_t)_lvl[s];
     436:	c9 82       	std	Y+1, r12	; 0x01
     438:	da 82       	std	Y+2, r13	; 0x02
     43a:	ad 87       	std	Y+13, r26	; 0x0d
     43c:	be 87       	std	Y+14, r27	; 0x0e
		int16_t delta = (((ticksEl + 1) * _fadeRate) >> 5) - ((ticksEl * _fadeRate) >> 5); //Number of steps
		if (_chActMask != PIN4_bm)
			PORTC.OUTCLR = _chActMask;
		for (int8_t i = 0; i < _linkCnt; i++)
		{
			uint8_t s = _dir ? i : _linkCnt - i - 1; //Direction '1' means forward
     43e:	90 81       	ld	r25, Z
     440:	99 23       	and	r25, r25
     442:	11 f0       	breq	.+4      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     444:	8b 2d       	mov	r24, r11
     446:	03 c0       	rjmp	.+6      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     448:	9b 2d       	mov	r25, r11
     44a:	90 95       	com	r25
     44c:	89 0f       	add	r24, r25
			uint8_t j = _link[s];
     44e:	0d 85       	ldd	r16, Y+13	; 0x0d
     450:	1e 85       	ldd	r17, Y+14	; 0x0e
     452:	08 0f       	add	r16, r24
     454:	11 1d       	adc	r17, r1
			int16_t tempLvl = gLevels[j] - _lvl[s]; //Difference between actual and set levels
     456:	d8 01       	movw	r26, r16
     458:	13 96       	adiw	r26, 0x03	; 3
     45a:	ac 90       	ld	r10, X
     45c:	4a 2d       	mov	r20, r10
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	ca 01       	movw	r24, r20
     462:	88 0f       	add	r24, r24
     464:	99 1f       	adc	r25, r25
     466:	83 5a       	subi	r24, 0xA3	; 163
     468:	9e 4d       	sbci	r25, 0xDE	; 222
     46a:	dc 01       	movw	r26, r24
     46c:	2d 91       	ld	r18, X+
     46e:	3c 91       	ld	r19, X
     470:	d8 01       	movw	r26, r16
     472:	16 96       	adiw	r26, 0x06	; 6
     474:	8c 91       	ld	r24, X
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	28 1b       	sub	r18, r24
     47a:	39 0b       	sbc	r19, r25
			if (tempLvl && ticksEl >= i * _linkDelay)
     47c:	09 f4       	brne	.+2      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     47e:	94 c0       	rjmp	.+296    	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
     480:	00 89       	ldd	r16, Z+16	; 0x10
     482:	11 89       	ldd	r17, Z+17	; 0x11
     484:	60 9f       	mul	r22, r16
     486:	30 01       	movw	r6, r0
     488:	61 9f       	mul	r22, r17
     48a:	70 0c       	add	r7, r0
     48c:	70 9f       	mul	r23, r16
     48e:	70 0c       	add	r7, r0
     490:	11 24       	eor	r1, r1
     492:	e6 14       	cp	r14, r6
     494:	f7 04       	cpc	r15, r7
     496:	0c f4       	brge	.+2      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     498:	87 c0       	rjmp	.+270    	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
			{
				if (tempLvl > 0) //Level needs to be lowered
     49a:	12 16       	cp	r1, r18
     49c:	13 06       	cpc	r1, r19
     49e:	0c f0       	brlt	.+2      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     4a0:	4e c0       	rjmp	.+156    	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
				{
					tempLvl -= ((tempLvl > delta) ? delta : tempLvl) - (int16_t)_lvl[s];
     4a2:	69 81       	ldd	r22, Y+1	; 0x01
     4a4:	7a 81       	ldd	r23, Y+2	; 0x02
     4a6:	2c 15       	cp	r18, r12
     4a8:	3d 05       	cpc	r19, r13
     4aa:	0c f4       	brge	.+2      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4ac:	b9 01       	movw	r22, r18
     4ae:	68 1b       	sub	r22, r24
     4b0:	79 0b       	sbc	r23, r25
     4b2:	26 1b       	sub	r18, r22
     4b4:	37 0b       	sbc	r19, r23
					if (!tempLvl) //Actual level became zero
     4b6:	09 f0       	breq	.+2      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4b8:	5d c0       	rjmp	.+186    	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
					{
						tempLvl -= (int16_t)_fadeRate << 2; //Subtract 4x fade steps, so off/on delay will be 4s
     4ba:	27 85       	ldd	r18, Z+15	; 0x0f
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	22 0f       	add	r18, r18
     4c0:	33 1f       	adc	r19, r19
     4c2:	22 0f       	add	r18, r18
     4c4:	33 1f       	adc	r19, r19
     4c6:	31 95       	neg	r19
     4c8:	21 95       	neg	r18
     4ca:	31 09       	sbc	r19, r1
						channelOT.linkOnTime[j] += (uint32_t)(sysState.sysTick - _onTimeStamp) >> 5; //Add seconds
     4cc:	8a 01       	movw	r16, r20
     4ce:	00 0f       	add	r16, r16
     4d0:	11 1f       	adc	r17, r17
     4d2:	00 0f       	add	r16, r16
     4d4:	11 1f       	adc	r17, r17
     4d6:	0c 52       	subi	r16, 0x2C	; 44
     4d8:	1f 4d       	sbci	r17, 0xDF	; 223
     4da:	ac e0       	ldi	r26, 0x0C	; 12
     4dc:	b1 e2       	ldi	r27, 0x21	; 33
     4de:	6d 91       	ld	r22, X+
     4e0:	7d 91       	ld	r23, X+
     4e2:	8d 91       	ld	r24, X+
     4e4:	9c 91       	ld	r25, X
     4e6:	43 8c       	ldd	r4, Z+27	; 0x1b
     4e8:	54 8c       	ldd	r5, Z+28	; 0x1c
     4ea:	65 8c       	ldd	r6, Z+29	; 0x1d
     4ec:	76 8c       	ldd	r7, Z+30	; 0x1e
     4ee:	64 19       	sub	r22, r4
     4f0:	75 09       	sbc	r23, r5
     4f2:	86 09       	sbc	r24, r6
     4f4:	97 09       	sbc	r25, r7
     4f6:	68 94       	set
     4f8:	14 f8       	bld	r1, 4
     4fa:	96 95       	lsr	r25
     4fc:	87 95       	ror	r24
     4fe:	77 95       	ror	r23
     500:	67 95       	ror	r22
     502:	16 94       	lsr	r1
     504:	d1 f7       	brne	.-12     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     506:	d8 01       	movw	r26, r16
     508:	4d 90       	ld	r4, X+
     50a:	5d 90       	ld	r5, X+
     50c:	6d 90       	ld	r6, X+
     50e:	7c 90       	ld	r7, X
     510:	13 97       	sbiw	r26, 0x03	; 3
     512:	46 0e       	add	r4, r22
     514:	57 1e       	adc	r5, r23
     516:	68 1e       	adc	r6, r24
     518:	79 1e       	adc	r7, r25
     51a:	4d 92       	st	X+, r4
     51c:	5d 92       	st	X+, r5
     51e:	6d 92       	st	X+, r6
     520:	7c 92       	st	X, r7
     522:	13 97       	sbiw	r26, 0x03	; 3
						channelOT.linkSwCnt[j]++; //Increment switch counter
     524:	ba 01       	movw	r22, r20
     526:	66 0f       	add	r22, r22
     528:	77 1f       	adc	r23, r23
     52a:	68 50       	subi	r22, 0x08	; 8
     52c:	7f 4d       	sbci	r23, 0xDF	; 223
     52e:	db 01       	movw	r26, r22
     530:	8d 91       	ld	r24, X+
     532:	9c 91       	ld	r25, X
     534:	11 97       	sbiw	r26, 0x01	; 1
     536:	01 96       	adiw	r24, 0x01	; 1
     538:	8d 93       	st	X+, r24
     53a:	9c 93       	st	X, r25
     53c:	1b c0       	rjmp	.+54     	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
					}
				}
				else //Level needs to be raised
				{
					tempLvl += ((-tempLvl > delta) ? delta : -tempLvl) + (int16_t)_lvl[s];
     53e:	66 27       	eor	r22, r22
     540:	77 27       	eor	r23, r23
     542:	62 1b       	sub	r22, r18
     544:	73 0b       	sbc	r23, r19
     546:	c6 16       	cp	r12, r22
     548:	d7 06       	cpc	r13, r23
     54a:	14 f4       	brge	.+4      	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
     54c:	69 81       	ldd	r22, Y+1	; 0x01
     54e:	7a 81       	ldd	r23, Y+2	; 0x02
     550:	86 0f       	add	r24, r22
     552:	97 1f       	adc	r25, r23
     554:	28 0f       	add	r18, r24
     556:	39 1f       	adc	r19, r25
					if (!gLevels[j] && tempLvl > 0) //Lamp has been switched on - remember ticks
     558:	ba 01       	movw	r22, r20
     55a:	66 0f       	add	r22, r22
     55c:	77 1f       	adc	r23, r23
     55e:	63 5a       	subi	r22, 0xA3	; 163
     560:	7e 4d       	sbci	r23, 0xDE	; 222
     562:	db 01       	movw	r26, r22
     564:	8d 91       	ld	r24, X+
     566:	9c 91       	ld	r25, X
     568:	89 2b       	or	r24, r25
     56a:	21 f4       	brne	.+8      	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
     56c:	12 16       	cp	r1, r18
     56e:	13 06       	cpc	r1, r19
     570:	0c f4       	brge	.+2      	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
     572:	8c c2       	rjmp	.+1304   	; 0xa8c <__LOCK_REGION_LENGTH__+0x68c>
						_onTimeStamp = sysState.sysTick;
				}
				gLevels[j] = tempLvl;
     574:	44 0f       	add	r20, r20
     576:	55 1f       	adc	r21, r21
     578:	43 5a       	subi	r20, 0xA3	; 163
     57a:	5e 4d       	sbci	r21, 0xDE	; 222
     57c:	da 01       	movw	r26, r20
     57e:	2d 93       	st	X+, r18
     580:	3c 93       	st	X, r19
				if (tempLvl >= 0)
     582:	33 23       	and	r19, r19
     584:	8c f0       	brlt	.+34     	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
				{
					gLevelChg |= 1 << j;
     586:	20 91 5c 21 	lds	r18, 0x215C	; 0x80215c <gLevelChg>
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	02 c0       	rjmp	.+4      	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
     590:	88 0f       	add	r24, r24
     592:	99 1f       	adc	r25, r25
     594:	aa 94       	dec	r10
     596:	e2 f7       	brpl	.-8      	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
     598:	82 2b       	or	r24, r18
     59a:	80 93 5c 21 	sts	0x215C, r24	; 0x80215c <gLevelChg>
					if (_chActMask != PIN4_bm)
     59e:	82 89       	ldd	r24, Z+18	; 0x12
     5a0:	80 31       	cpi	r24, 0x10	; 16
     5a2:	11 f0       	breq	.+4      	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
						PORTC.OUTSET = _chActMask; //Switch on activity LED
     5a4:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     5a8:	b3 94       	inc	r11
	{
		int16_t ticksEl = (int16_t)(sysState.sysTick - _tickLastChg); //Elapsed ticks since beginning of dim
		int16_t delta = (((ticksEl + 1) * _fadeRate) >> 5) - ((ticksEl * _fadeRate) >> 5); //Number of steps
		if (_chActMask != PIN4_bm)
			PORTC.OUTCLR = _chActMask;
		for (int8_t i = 0; i < _linkCnt; i++)
     5aa:	6b 2d       	mov	r22, r11
     5ac:	0b 2c       	mov	r0, r11
     5ae:	00 0c       	add	r0, r0
     5b0:	77 0b       	sbc	r23, r23
     5b2:	81 81       	ldd	r24, Z+1	; 0x01
     5b4:	28 2f       	mov	r18, r24
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	62 17       	cp	r22, r18
     5ba:	73 07       	cpc	r23, r19
     5bc:	0c f4       	brge	.+2      	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
     5be:	3f cf       	rjmp	.-386    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     5c0:	bf ef       	ldi	r27, 0xFF	; 255
     5c2:	8b 1a       	sub	r8, r27
     5c4:	9b 0a       	sbc	r9, r27
     5c6:	e3 e2       	ldi	r30, 0x23	; 35
     5c8:	2e 0e       	add	r2, r30
     5ca:	31 1c       	adc	r3, r1
ISR(RTC_OVF_vect)
{
	sysState.sysTick++;
	static uint8_t rs485busy = 0;
	uint8_t i;
	for (i = 0; i < 4; i++)
     5cc:	f4 e0       	ldi	r31, 0x04	; 4
     5ce:	8f 16       	cp	r8, r31
     5d0:	91 04       	cpc	r9, r1
     5d2:	09 f0       	breq	.+2      	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
     5d4:	ed ce       	rjmp	.-550    	; 0x3b0 <__vector_7+0x8a>
			cntDown = true;
		}
	}
	void updateLevel()
	{
		if (cntDown)
     5d6:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <msenCh>
     5da:	88 23       	and	r24, r24
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     5de:	77 c2       	rjmp	.+1262   	; 0xace <__LOCK_REGION_LENGTH__+0x6ce>
		{
			uint16_t ton = (uint16_t)(sysState.sysTick - _onTimeStamp) >> 5;
     5e0:	2c e0       	ldi	r18, 0x0C	; 12
     5e2:	31 e2       	ldi	r19, 0x21	; 33
     5e4:	d9 01       	movw	r26, r18
     5e6:	bc 91       	ld	r27, X
     5e8:	bd 83       	std	Y+5, r27	; 0x05
     5ea:	f9 01       	movw	r30, r18
     5ec:	f1 81       	ldd	r31, Z+1	; 0x01
     5ee:	fe 83       	std	Y+6, r31	; 0x06
     5f0:	d9 01       	movw	r26, r18
     5f2:	12 96       	adiw	r26, 0x02	; 2
     5f4:	bc 91       	ld	r27, X
     5f6:	bf 83       	std	Y+7, r27	; 0x07
     5f8:	f9 01       	movw	r30, r18
     5fa:	f3 81       	ldd	r31, Z+3	; 0x03
     5fc:	f8 87       	std	Y+8, r31	; 0x08
     5fe:	d9 01       	movw	r26, r18
     600:	14 96       	adiw	r26, 0x04	; 4
     602:	bc 91       	ld	r27, X
     604:	b9 87       	std	Y+9, r27	; 0x09
     606:	f9 01       	movw	r30, r18
     608:	f5 81       	ldd	r31, Z+5	; 0x05
     60a:	fa 87       	std	Y+10, r31	; 0x0a
     60c:	d9 01       	movw	r26, r18
     60e:	16 96       	adiw	r26, 0x06	; 6
     610:	bc 91       	ld	r27, X
     612:	bb 87       	std	Y+11, r27	; 0x0b
     614:	f9 01       	movw	r30, r18
     616:	f7 81       	ldd	r31, Z+7	; 0x07
     618:	fc 87       	std	Y+12, r31	; 0x0c
     61a:	22 e0       	ldi	r18, 0x02	; 2
     61c:	30 e2       	ldi	r19, 0x20	; 32
			if (ton > _fTime)
     61e:	d9 01       	movw	r26, r18
     620:	16 96       	adiw	r26, 0x06	; 6
     622:	4d 91       	ld	r20, X+
     624:	5c 91       	ld	r21, X
     626:	17 97       	sbiw	r26, 0x07	; 7
     628:	ed 81       	ldd	r30, Y+5	; 0x05
     62a:	fe 81       	ldd	r31, Y+6	; 0x06
     62c:	e4 1b       	sub	r30, r20
     62e:	f5 0b       	sbc	r31, r21
     630:	af 01       	movw	r20, r30
     632:	56 95       	lsr	r21
     634:	47 95       	ror	r20
     636:	52 95       	swap	r21
     638:	42 95       	swap	r20
     63a:	4f 70       	andi	r20, 0x0F	; 15
     63c:	45 27       	eor	r20, r21
     63e:	5f 70       	andi	r21, 0x0F	; 15
     640:	45 27       	eor	r20, r21
     642:	15 96       	adiw	r26, 0x05	; 5
     644:	2c 91       	ld	r18, X
     646:	15 97       	sbiw	r26, 0x05	; 5
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	24 17       	cp	r18, r20
     64c:	35 07       	cpc	r19, r21
     64e:	08 f0       	brcs	.+2      	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
     650:	81 c0       	rjmp	.+258    	; 0x754 <__LOCK_REGION_LENGTH__+0x354>
			{
				ltEnt = cntDown = false;
     652:	1c 92       	st	X, r1
     654:	11 96       	adiw	r26, 0x01	; 1
     656:	1c 92       	st	X, r1
     658:	11 97       	sbiw	r26, 0x01	; 1
				links[_linkNum].setLevel(0); //Both on and low time are expired, shut down the lamp
     65a:	12 96       	adiw	r26, 0x02	; 2
     65c:	4c 91       	ld	r20, X
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		uint8_t oLvl = sysState.linkLevels[_linkNum];
     65e:	a4 2e       	mov	r10, r20
     660:	b1 2c       	mov	r11, r1
     662:	b3 e2       	ldi	r27, 0x23	; 35
     664:	4b 9f       	mul	r20, r27
     666:	90 01       	movw	r18, r0
     668:	11 24       	eor	r1, r1
     66a:	20 5f       	subi	r18, 0xF0	; 240
     66c:	3f 4d       	sbci	r19, 0xDF	; 223
     66e:	f9 01       	movw	r30, r18
     670:	22 81       	ldd	r18, Z+2	; 0x02
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	b9 01       	movw	r22, r18
     676:	64 5f       	subi	r22, 0xF4	; 244
     678:	7e 4d       	sbci	r23, 0xDE	; 222
     67a:	db 01       	movw	r26, r22
     67c:	51 96       	adiw	r26, 0x11	; 17
     67e:	5c 91       	ld	r21, X
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
     680:	65 2f       	mov	r22, r21
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	6e 5f       	subi	r22, 0xFE	; 254
     686:	7f 4f       	sbci	r23, 0xFF	; 255
     688:	65 30       	cpi	r22, 0x05	; 5
     68a:	71 05       	cpc	r23, r1
     68c:	18 f4       	brcc	.+6      	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
     68e:	55 23       	and	r21, r21
     690:	09 f4       	brne	.+2      	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
     692:	1d c2       	rjmp	.+1082   	; 0xace <__LOCK_REGION_LENGTH__+0x6ce>
			return;
		sysState.linkLevels[_linkNum] = level;
     694:	24 5f       	subi	r18, 0xF4	; 244
     696:	3e 4d       	sbci	r19, 0xDE	; 222
     698:	f9 01       	movw	r30, r18
     69a:	11 8a       	std	Z+17, r1	; 0x11

		for (uint8_t i = 0; i < _linkCnt; i++)
     69c:	53 e2       	ldi	r21, 0x23	; 35
     69e:	5a 9d       	mul	r21, r10
     6a0:	90 01       	movw	r18, r0
     6a2:	5b 9d       	mul	r21, r11
     6a4:	30 0d       	add	r19, r0
     6a6:	11 24       	eor	r1, r1
     6a8:	20 5f       	subi	r18, 0xF0	; 240
     6aa:	3f 4d       	sbci	r19, 0xDF	; 223
     6ac:	d9 01       	movw	r26, r18
     6ae:	11 96       	adiw	r26, 0x01	; 1
     6b0:	cc 90       	ld	r12, X
     6b2:	cc 20       	and	r12, r12
     6b4:	19 f1       	breq	.+70     	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
     6b6:	b3 e2       	ldi	r27, 0x23	; 35
     6b8:	4b 9f       	mul	r20, r27
     6ba:	a0 01       	movw	r20, r0
     6bc:	11 24       	eor	r1, r1
     6be:	4d 5e       	subi	r20, 0xED	; 237
     6c0:	5f 4d       	sbci	r21, 0xDF	; 223
     6c2:	d1 2c       	mov	r13, r1
     6c4:	f1 2c       	mov	r15, r1
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     6c6:	fa 01       	movw	r30, r20
     6c8:	20 81       	ld	r18, Z
     6ca:	4f 5f       	subi	r20, 0xFF	; 255
     6cc:	5f 4f       	sbci	r21, 0xFF	; 255
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	22 0f       	add	r18, r18
     6d2:	33 1f       	adc	r19, r19
     6d4:	23 5a       	subi	r18, 0xA3	; 163
     6d6:	3e 4d       	sbci	r19, 0xDE	; 222
     6d8:	d9 01       	movw	r26, r18
     6da:	0d 91       	ld	r16, X+
     6dc:	1c 91       	ld	r17, X
     6de:	23 81       	ldd	r18, Z+3	; 0x03
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	61 e0       	ldi	r22, 0x01	; 1
     6e4:	20 17       	cp	r18, r16
     6e6:	31 07       	cpc	r19, r17
     6e8:	09 f4       	brne	.+2      	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
     6ea:	60 e0       	ldi	r22, 0x00	; 0
     6ec:	d6 2a       	or	r13, r22
			if (!level || !_difLvl[i]) //Set zero level directly
				_lvl[i] = 0;
     6ee:	fa 01       	movw	r30, r20
     6f0:	12 82       	std	Z+2, r1	; 0x02
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
			return;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
     6f2:	f3 94       	inc	r15
     6f4:	fc 10       	cpse	r15, r12
     6f6:	e7 cf       	rjmp	.-50     	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     6f8:	d1 10       	cpse	r13, r1
     6fa:	e9 c1       	rjmp	.+978    	; 0xace <__LOCK_REGION_LENGTH__+0x6ce>
			_tickLastChg = sysState.sysTick;
     6fc:	23 e2       	ldi	r18, 0x23	; 35
     6fe:	2a 9d       	mul	r18, r10
     700:	a0 01       	movw	r20, r0
     702:	2b 9d       	mul	r18, r11
     704:	50 0d       	add	r21, r0
     706:	11 24       	eor	r1, r1
     708:	40 5f       	subi	r20, 0xF0	; 240
     70a:	5f 4d       	sbci	r21, 0xDF	; 223
     70c:	9a 01       	movw	r18, r20
     70e:	2d 5e       	subi	r18, 0xED	; 237
     710:	3f 4f       	sbci	r19, 0xFF	; 255
     712:	ed 81       	ldd	r30, Y+5	; 0x05
     714:	da 01       	movw	r26, r20
     716:	53 96       	adiw	r26, 0x13	; 19
     718:	ec 93       	st	X, r30
     71a:	ee 81       	ldd	r30, Y+6	; 0x06
     71c:	d9 01       	movw	r26, r18
     71e:	11 96       	adiw	r26, 0x01	; 1
     720:	ec 93       	st	X, r30
     722:	11 97       	sbiw	r26, 0x01	; 1
     724:	ff 81       	ldd	r31, Y+7	; 0x07
     726:	12 96       	adiw	r26, 0x02	; 2
     728:	fc 93       	st	X, r31
     72a:	12 97       	sbiw	r26, 0x02	; 2
     72c:	68 85       	ldd	r22, Y+8	; 0x08
     72e:	13 96       	adiw	r26, 0x03	; 3
     730:	6c 93       	st	X, r22
     732:	13 97       	sbiw	r26, 0x03	; 3
     734:	79 85       	ldd	r23, Y+9	; 0x09
     736:	14 96       	adiw	r26, 0x04	; 4
     738:	7c 93       	st	X, r23
     73a:	14 97       	sbiw	r26, 0x04	; 4
     73c:	8a 85       	ldd	r24, Y+10	; 0x0a
     73e:	15 96       	adiw	r26, 0x05	; 5
     740:	8c 93       	st	X, r24
     742:	15 97       	sbiw	r26, 0x05	; 5
     744:	9b 85       	ldd	r25, Y+11	; 0x0b
     746:	16 96       	adiw	r26, 0x06	; 6
     748:	9c 93       	st	X, r25
     74a:	16 97       	sbiw	r26, 0x06	; 6
     74c:	ec 85       	ldd	r30, Y+12	; 0x0c
     74e:	17 96       	adiw	r26, 0x07	; 7
     750:	ec 93       	st	X, r30
     752:	bd c1       	rjmp	.+890    	; 0xace <__LOCK_REGION_LENGTH__+0x6ce>
			if (ton > _fTime)
			{
				ltEnt = cntDown = false;
				links[_linkNum].setLevel(0); //Both on and low time are expired, shut down the lamp
			}
			else if (!ltEnt && _onTime)
     754:	20 91 03 20 	lds	r18, 0x2003	; 0x802003 <msenCh+0x1>
     758:	21 11       	cpse	r18, r1
     75a:	b9 c1       	rjmp	.+882    	; 0xace <__LOCK_REGION_LENGTH__+0x6ce>
     75c:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <msenCh+0x4>
     760:	22 23       	and	r18, r18
     762:	09 f4       	brne	.+2      	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
     764:	b4 c1       	rjmp	.+872    	; 0xace <__LOCK_REGION_LENGTH__+0x6ce>
			{
				ltEnt = true;
     766:	22 e0       	ldi	r18, 0x02	; 2
     768:	30 e2       	ldi	r19, 0x20	; 32
     76a:	41 e0       	ldi	r20, 0x01	; 1
     76c:	d9 01       	movw	r26, r18
     76e:	11 96       	adiw	r26, 0x01	; 1
     770:	4c 93       	st	X, r20
     772:	11 97       	sbiw	r26, 0x01	; 1
				links[_linkNum].setLevel(validConf.msenLowLvl);
     774:	f0 90 40 21 	lds	r15, 0x2140	; 0x802140 <validConf+0x1c>
     778:	12 96       	adiw	r26, 0x02	; 2
     77a:	6c 91       	ld	r22, X
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		uint8_t oLvl = sysState.linkLevels[_linkNum];
     77c:	a6 2e       	mov	r10, r22
     77e:	b1 2c       	mov	r11, r1
     780:	b3 e2       	ldi	r27, 0x23	; 35
     782:	6b 9f       	mul	r22, r27
     784:	90 01       	movw	r18, r0
     786:	11 24       	eor	r1, r1
     788:	20 5f       	subi	r18, 0xF0	; 240
     78a:	3f 4d       	sbci	r19, 0xDF	; 223
     78c:	f9 01       	movw	r30, r18
     78e:	22 81       	ldd	r18, Z+2	; 0x02
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	a9 01       	movw	r20, r18
     794:	44 5f       	subi	r20, 0xF4	; 244
     796:	5e 4d       	sbci	r21, 0xDE	; 222
     798:	da 01       	movw	r26, r20
     79a:	51 96       	adiw	r26, 0x11	; 17
     79c:	7c 91       	ld	r23, X
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
     79e:	47 2f       	mov	r20, r23
     7a0:	50 e0       	ldi	r21, 0x00	; 0
     7a2:	4f 19       	sub	r20, r15
     7a4:	51 09       	sbc	r21, r1
     7a6:	4e 5f       	subi	r20, 0xFE	; 254
     7a8:	5f 4f       	sbci	r21, 0xFF	; 255
     7aa:	45 30       	cpi	r20, 0x05	; 5
     7ac:	51 05       	cpc	r21, r1
     7ae:	48 f4       	brcc	.+18     	; 0x7c2 <__LOCK_REGION_LENGTH__+0x3c2>
     7b0:	51 e0       	ldi	r21, 0x01	; 1
     7b2:	f1 10       	cpse	r15, r1
     7b4:	01 c0       	rjmp	.+2      	; 0x7b8 <__LOCK_REGION_LENGTH__+0x3b8>
     7b6:	50 e0       	ldi	r21, 0x00	; 0
     7b8:	41 e0       	ldi	r20, 0x01	; 1
     7ba:	71 11       	cpse	r23, r1
     7bc:	40 e0       	ldi	r20, 0x00	; 0
     7be:	54 13       	cpse	r21, r20
     7c0:	86 c1       	rjmp	.+780    	; 0xace <__LOCK_REGION_LENGTH__+0x6ce>
			return;
		sysState.linkLevels[_linkNum] = level;
     7c2:	a9 01       	movw	r20, r18
     7c4:	44 5f       	subi	r20, 0xF4	; 244
     7c6:	5e 4d       	sbci	r21, 0xDE	; 222
     7c8:	fa 01       	movw	r30, r20
     7ca:	f1 8a       	std	Z+17, r15	; 0x11

		for (uint8_t i = 0; i < _linkCnt; i++)
     7cc:	43 e2       	ldi	r20, 0x23	; 35
     7ce:	4a 9d       	mul	r20, r10
     7d0:	90 01       	movw	r18, r0
     7d2:	4b 9d       	mul	r20, r11
     7d4:	30 0d       	add	r19, r0
     7d6:	11 24       	eor	r1, r1
     7d8:	20 5f       	subi	r18, 0xF0	; 240
     7da:	3f 4d       	sbci	r19, 0xDF	; 223
     7dc:	d9 01       	movw	r26, r18
     7de:	11 96       	adiw	r26, 0x01	; 1
     7e0:	ec 90       	ld	r14, X
     7e2:	ee 20       	and	r14, r14
     7e4:	b1 f1       	breq	.+108    	; 0x852 <__LOCK_REGION_LENGTH__+0x452>
     7e6:	b3 e2       	ldi	r27, 0x23	; 35
     7e8:	6b 9f       	mul	r22, r27
     7ea:	90 01       	movw	r18, r0
     7ec:	11 24       	eor	r1, r1
     7ee:	2d 5e       	subi	r18, 0xED	; 237
     7f0:	3f 4d       	sbci	r19, 0xDF	; 223
     7f2:	70 e0       	ldi	r23, 0x00	; 0
     7f4:	60 e0       	ldi	r22, 0x00	; 0
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
			if (!level || !_difLvl[i]) //Set zero level directly
				_lvl[i] = 0;
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
     7f6:	cf 2c       	mov	r12, r15
     7f8:	d1 2c       	mov	r13, r1
			return;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     7fa:	f9 01       	movw	r30, r18
     7fc:	40 81       	ld	r20, Z
     7fe:	2f 5f       	subi	r18, 0xFF	; 255
     800:	3f 4f       	sbci	r19, 0xFF	; 255
     802:	50 e0       	ldi	r21, 0x00	; 0
     804:	44 0f       	add	r20, r20
     806:	55 1f       	adc	r21, r21
     808:	43 5a       	subi	r20, 0xA3	; 163
     80a:	5e 4d       	sbci	r21, 0xDE	; 222
     80c:	da 01       	movw	r26, r20
     80e:	8d 90       	ld	r8, X+
     810:	9c 90       	ld	r9, X
     812:	43 81       	ldd	r20, Z+3	; 0x03
     814:	50 e0       	ldi	r21, 0x00	; 0
     816:	11 e0       	ldi	r17, 0x01	; 1
     818:	48 15       	cp	r20, r8
     81a:	59 05       	cpc	r21, r9
     81c:	09 f4       	brne	.+2      	; 0x820 <__LOCK_REGION_LENGTH__+0x420>
     81e:	10 e0       	ldi	r17, 0x00	; 0
     820:	71 2b       	or	r23, r17
			if (!level || !_difLvl[i]) //Set zero level directly
     822:	ff 20       	and	r15, r15
     824:	21 f0       	breq	.+8      	; 0x82e <__LOCK_REGION_LENGTH__+0x42e>
     826:	f9 01       	movw	r30, r18
     828:	40 85       	ldd	r20, Z+8	; 0x08
     82a:	41 11       	cpse	r20, r1
     82c:	04 c0       	rjmp	.+8      	; 0x836 <__LOCK_REGION_LENGTH__+0x436>
				_lvl[i] = 0;
     82e:	d9 01       	movw	r26, r18
     830:	12 96       	adiw	r26, 0x02	; 2
     832:	1c 92       	st	X, r1
     834:	09 c0       	rjmp	.+18     	; 0x848 <__LOCK_REGION_LENGTH__+0x448>
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
     836:	4c 9d       	mul	r20, r12
     838:	80 01       	movw	r16, r0
     83a:	4d 9d       	mul	r20, r13
     83c:	10 0d       	add	r17, r0
     83e:	11 24       	eor	r1, r1
     840:	f9 01       	movw	r30, r18
     842:	45 81       	ldd	r20, Z+5	; 0x05
     844:	41 0f       	add	r20, r17
     846:	42 83       	std	Z+2, r20	; 0x02
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
			return;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
     848:	6f 5f       	subi	r22, 0xFF	; 255
     84a:	6e 11       	cpse	r22, r14
     84c:	d6 cf       	rjmp	.-84     	; 0x7fa <__LOCK_REGION_LENGTH__+0x3fa>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     84e:	71 11       	cpse	r23, r1
     850:	3e c1       	rjmp	.+636    	; 0xace <__LOCK_REGION_LENGTH__+0x6ce>
			_tickLastChg = sysState.sysTick;
     852:	23 e2       	ldi	r18, 0x23	; 35
     854:	2a 9d       	mul	r18, r10
     856:	a0 01       	movw	r20, r0
     858:	2b 9d       	mul	r18, r11
     85a:	50 0d       	add	r21, r0
     85c:	11 24       	eor	r1, r1
     85e:	40 5f       	subi	r20, 0xF0	; 240
     860:	5f 4d       	sbci	r21, 0xDF	; 223
     862:	9a 01       	movw	r18, r20
     864:	2d 5e       	subi	r18, 0xED	; 237
     866:	3f 4f       	sbci	r19, 0xFF	; 255
     868:	ed 81       	ldd	r30, Y+5	; 0x05
     86a:	da 01       	movw	r26, r20
     86c:	53 96       	adiw	r26, 0x13	; 19
     86e:	ec 93       	st	X, r30
     870:	ee 81       	ldd	r30, Y+6	; 0x06
     872:	d9 01       	movw	r26, r18
     874:	11 96       	adiw	r26, 0x01	; 1
     876:	ec 93       	st	X, r30
     878:	11 97       	sbiw	r26, 0x01	; 1
     87a:	ff 81       	ldd	r31, Y+7	; 0x07
     87c:	12 96       	adiw	r26, 0x02	; 2
     87e:	fc 93       	st	X, r31
     880:	12 97       	sbiw	r26, 0x02	; 2
     882:	68 85       	ldd	r22, Y+8	; 0x08
     884:	13 96       	adiw	r26, 0x03	; 3
     886:	6c 93       	st	X, r22
     888:	13 97       	sbiw	r26, 0x03	; 3
     88a:	79 85       	ldd	r23, Y+9	; 0x09
     88c:	14 96       	adiw	r26, 0x04	; 4
     88e:	7c 93       	st	X, r23
     890:	14 97       	sbiw	r26, 0x04	; 4
     892:	8a 85       	ldd	r24, Y+10	; 0x0a
     894:	15 96       	adiw	r26, 0x05	; 5
     896:	8c 93       	st	X, r24
     898:	15 97       	sbiw	r26, 0x05	; 5
     89a:	9b 85       	ldd	r25, Y+11	; 0x0b
     89c:	16 96       	adiw	r26, 0x06	; 6
     89e:	9c 93       	st	X, r25
     8a0:	16 97       	sbiw	r26, 0x06	; 6
     8a2:	ec 85       	ldd	r30, Y+12	; 0x0c
     8a4:	17 96       	adiw	r26, 0x07	; 7
     8a6:	ec 93       	st	X, r30
     8a8:	12 c1       	rjmp	.+548    	; 0xace <__LOCK_REGION_LENGTH__+0x6ce>
	uint8_t i;
	for (i = 0; i < 4; i++)
		links[i].updateLevel();
	msenCh.updateLevel();
	for (i = 0; i < 9; i++)
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
     8aa:	fc 01       	movw	r30, r24
     8ac:	ee 0f       	add	r30, r30
     8ae:	ff 1f       	adc	r31, r31
     8b0:	e3 5a       	subi	r30, 0xA3	; 163
     8b2:	fe 4d       	sbci	r31, 0xDE	; 222
     8b4:	20 81       	ld	r18, Z
     8b6:	31 81       	ldd	r19, Z+1	; 0x01
     8b8:	12 16       	cp	r1, r18
     8ba:	13 06       	cpc	r1, r19
     8bc:	44 f4       	brge	.+16     	; 0x8ce <__LOCK_REGION_LENGTH__+0x4ce>
     8be:	fc 01       	movw	r30, r24
     8c0:	ee 0f       	add	r30, r30
     8c2:	ff 1f       	adc	r31, r31
     8c4:	e3 5a       	subi	r30, 0xA3	; 163
     8c6:	fe 4d       	sbci	r31, 0xDE	; 222
     8c8:	20 81       	ld	r18, Z
     8ca:	31 81       	ldd	r19, Z+1	; 0x01
     8cc:	01 c0       	rjmp	.+2      	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     8ce:	20 e0       	ldi	r18, 0x00	; 0
     8d0:	2d 93       	st	X+, r18
     8d2:	01 96       	adiw	r24, 0x01	; 1
	static uint8_t rs485busy = 0;
	uint8_t i;
	for (i = 0; i < 4; i++)
		links[i].updateLevel();
	msenCh.updateLevel();
	for (i = 0; i < 9; i++)
     8d4:	89 30       	cpi	r24, 0x09	; 9
     8d6:	91 05       	cpc	r25, r1
     8d8:	41 f7       	brne	.-48     	; 0x8aa <__LOCK_REGION_LENGTH__+0x4aa>
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
	DSI8xFrames[0] = gLevelChg; //DSI start bit
     8da:	80 91 5c 21 	lds	r24, 0x215C	; 0x80215c <gLevelChg>
     8de:	80 93 47 21 	sts	0x2147, r24	; 0x802147 <DSI8xFrames>
     8e2:	1b 82       	std	Y+3, r1	; 0x03
     8e4:	1c 82       	std	Y+4, r1	; 0x04
     8e6:	68 94       	set
     8e8:	ee 24       	eor	r14, r14
     8ea:	e3 f8       	bld	r14, 3
     8ec:	01 e0       	ldi	r16, 0x01	; 1
     8ee:	10 e0       	ldi	r17, 0x00	; 0
     8f0:	d8 01       	movw	r26, r16
     8f2:	0b 80       	ldd	r0, Y+3	; 0x03
     8f4:	02 c0       	rjmp	.+4      	; 0x8fa <__LOCK_REGION_LENGTH__+0x4fa>
     8f6:	aa 0f       	add	r26, r26
     8f8:	bb 1f       	adc	r27, r27
     8fa:	0a 94       	dec	r0
     8fc:	e2 f7       	brpl	.-8      	; 0x8f6 <__LOCK_REGION_LENGTH__+0x4f6>
     8fe:	ec e0       	ldi	r30, 0x0C	; 12
     900:	f1 e2       	ldi	r31, 0x21	; 33
		{
			tmp1 >>= 1;
			tmp0 >>= 1;
			if (gLevelChg & (1 << j)) //Particular level has been changed
			{
				if (sysState.setLevels[j] & (1 << i)) //Set upper half-bit
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	d1 2c       	mov	r13, r1
     908:	f1 2c       	mov	r15, r1
	for (i = 0; i < 8; i++) //DSI frame bits 0-7
	{
		uint8_t tmp0 = 0, tmp1 = 0, j;
		for (j = 0; j < 8; j++) //Levels
		{
			tmp1 >>= 1;
     90a:	6d 2d       	mov	r22, r13
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	75 95       	asr	r23
     910:	67 95       	ror	r22
     912:	d6 2e       	mov	r13, r22
			tmp0 >>= 1;
     914:	4f 2d       	mov	r20, r15
     916:	50 e0       	ldi	r21, 0x00	; 0
     918:	55 95       	asr	r21
     91a:	47 95       	ror	r20
     91c:	f4 2e       	mov	r15, r20
			if (gLevelChg & (1 << j)) //Particular level has been changed
     91e:	80 91 5c 21 	lds	r24, 0x215C	; 0x80215c <gLevelChg>
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	02 2e       	mov	r0, r18
     926:	02 c0       	rjmp	.+4      	; 0x92c <__LOCK_REGION_LENGTH__+0x52c>
     928:	95 95       	asr	r25
     92a:	87 95       	ror	r24
     92c:	0a 94       	dec	r0
     92e:	e2 f7       	brpl	.-8      	; 0x928 <__LOCK_REGION_LENGTH__+0x528>
     930:	80 ff       	sbrs	r24, 0
     932:	0d c0       	rjmp	.+26     	; 0x94e <__LOCK_REGION_LENGTH__+0x54e>
			{
				if (sysState.setLevels[j] & (1 << i)) //Set upper half-bit
     934:	80 85       	ldd	r24, Z+8	; 0x08
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	8a 23       	and	r24, r26
     93a:	9b 23       	and	r25, r27
     93c:	89 2b       	or	r24, r25
     93e:	21 f0       	breq	.+8      	; 0x948 <__LOCK_REGION_LENGTH__+0x548>
					tmp1 |= 0x80;
     940:	86 2f       	mov	r24, r22
     942:	80 68       	ori	r24, 0x80	; 128
     944:	d8 2e       	mov	r13, r24
     946:	03 c0       	rjmp	.+6      	; 0x94e <__LOCK_REGION_LENGTH__+0x54e>
				else
					tmp0 |= 0x80; //Set lower half-bit (one-zero transition)
     948:	94 2f       	mov	r25, r20
     94a:	90 68       	ori	r25, 0x80	; 128
     94c:	f9 2e       	mov	r15, r25
     94e:	2f 5f       	subi	r18, 0xFF	; 255
     950:	3f 4f       	sbci	r19, 0xFF	; 255
     952:	31 96       	adiw	r30, 0x01	; 1
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
	DSI8xFrames[0] = gLevelChg; //DSI start bit
	for (i = 0; i < 8; i++) //DSI frame bits 0-7
	{
		uint8_t tmp0 = 0, tmp1 = 0, j;
		for (j = 0; j < 8; j++) //Levels
     954:	28 30       	cpi	r18, 0x08	; 8
     956:	31 05       	cpc	r19, r1
     958:	c1 f6       	brne	.-80     	; 0x90a <__LOCK_REGION_LENGTH__+0x50a>
				else
					tmp0 |= 0x80; //Set lower half-bit (one-zero transition)
			}
		}
		j = (8 - i) << 1;
		DSI8xFrames[j - 1] = tmp1;
     95a:	8e 2d       	mov	r24, r14
     95c:	88 0f       	add	r24, r24
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	fc 01       	movw	r30, r24
     962:	ea 5b       	subi	r30, 0xBA	; 186
     964:	fe 4d       	sbci	r31, 0xDE	; 222
     966:	d0 82       	st	Z, r13
		DSI8xFrames[j] = tmp0; //Manchester coded
     968:	fc 01       	movw	r30, r24
     96a:	e9 5b       	subi	r30, 0xB9	; 185
     96c:	fe 4d       	sbci	r31, 0xDE	; 222
     96e:	f0 82       	st	Z, r15
     970:	ea 94       	dec	r14
     972:	ab 81       	ldd	r26, Y+3	; 0x03
     974:	bc 81       	ldd	r27, Y+4	; 0x04
     976:	11 96       	adiw	r26, 0x01	; 1
     978:	ab 83       	std	Y+3, r26	; 0x03
     97a:	bc 83       	std	Y+4, r27	; 0x04
		links[i].updateLevel();
	msenCh.updateLevel();
	for (i = 0; i < 9; i++)
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
	DSI8xFrames[0] = gLevelChg; //DSI start bit
	for (i = 0; i < 8; i++) //DSI frame bits 0-7
     97c:	e1 10       	cpse	r14, r1
     97e:	b8 cf       	rjmp	.-144    	; 0x8f0 <__LOCK_REGION_LENGTH__+0x4f0>
		}
		j = (8 - i) << 1;
		DSI8xFrames[j - 1] = tmp1;
		DSI8xFrames[j] = tmp0; //Manchester coded
	}
	DSI8xFrames[17] = 0; //DSI stop bit
     980:	10 92 58 21 	sts	0x2158, r1	; 0x802158 <DSI8xFrames+0x11>
	gLevelChg = 0; //Clear flags for changed levels
     984:	10 92 5c 21 	sts	0x215C, r1	; 0x80215c <gLevelChg>
	if (sysState.setLevels[8] > 0) //On/off channel processing
     988:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <sysState+0x10>
     98c:	88 23       	and	r24, r24
     98e:	21 f0       	breq	.+8      	; 0x998 <__LOCK_REGION_LENGTH__+0x598>
		PORTA.OUTSET = PIN7_bm;
     990:	80 e8       	ldi	r24, 0x80	; 128
     992:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
     996:	03 c0       	rjmp	.+6      	; 0x99e <__LOCK_REGION_LENGTH__+0x59e>
	else
		PORTA.OUTCLR = PIN7_bm;
     998:	80 e8       	ldi	r24, 0x80	; 128
     99a:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>

	if ((char)sysState.sysTick % 4 == 0) //Initialize conversion sequence 8 times per second
     99e:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <sysState>
     9a2:	83 70       	andi	r24, 0x03	; 3
     9a4:	39 f4       	brne	.+14     	; 0x9b4 <__LOCK_REGION_LENGTH__+0x5b4>
	{
		ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN1_gc;
     9a6:	e0 e0       	ldi	r30, 0x00	; 0
     9a8:	f2 e0       	ldi	r31, 0x02	; 2
     9aa:	88 e0       	ldi	r24, 0x08	; 8
     9ac:	81 a3       	std	Z+33, r24	; 0x21
		ADCA.CTRLA |= ADC_START_bm; //Start conversion from pin 1 (channel 1)
     9ae:	80 81       	ld	r24, Z
     9b0:	84 60       	ori	r24, 0x04	; 4
     9b2:	80 83       	st	Z, r24
	}

	int16_t h = (int8_t)sysState.sysTick;
     9b4:	2c e0       	ldi	r18, 0x0C	; 12
     9b6:	31 e2       	ldi	r19, 0x21	; 33
     9b8:	f9 01       	movw	r30, r18
     9ba:	f0 81       	ld	r31, Z
     9bc:	fd 83       	std	Y+5, r31	; 0x05
     9be:	d9 01       	movw	r26, r18
     9c0:	11 96       	adiw	r26, 0x01	; 1
     9c2:	bc 91       	ld	r27, X
     9c4:	be 83       	std	Y+6, r27	; 0x06
     9c6:	f9 01       	movw	r30, r18
     9c8:	f2 81       	ldd	r31, Z+2	; 0x02
     9ca:	ff 83       	std	Y+7, r31	; 0x07
     9cc:	d9 01       	movw	r26, r18
     9ce:	13 96       	adiw	r26, 0x03	; 3
     9d0:	bc 91       	ld	r27, X
     9d2:	b8 87       	std	Y+8, r27	; 0x08
     9d4:	f9 01       	movw	r30, r18
     9d6:	f4 81       	ldd	r31, Z+4	; 0x04
     9d8:	f9 87       	std	Y+9, r31	; 0x09
     9da:	d9 01       	movw	r26, r18
     9dc:	15 96       	adiw	r26, 0x05	; 5
     9de:	bc 91       	ld	r27, X
     9e0:	ba 87       	std	Y+10, r27	; 0x0a
     9e2:	f9 01       	movw	r30, r18
     9e4:	f6 81       	ldd	r31, Z+6	; 0x06
     9e6:	fb 87       	std	Y+11, r31	; 0x0b
     9e8:	d9 01       	movw	r26, r18
     9ea:	17 96       	adiw	r26, 0x07	; 7
     9ec:	bc 91       	ld	r27, X
     9ee:	bc 87       	std	Y+12, r27	; 0x0c
	TCC4.CCABUF = h * h; //This will produce slow fading of HB LED (4s up/down)
     9f0:	ed 81       	ldd	r30, Y+5	; 0x05
     9f2:	ee 02       	muls	r30, r30
     9f4:	90 01       	movw	r18, r0
     9f6:	11 24       	eor	r1, r1
     9f8:	20 93 38 08 	sts	0x0838, r18	; 0x800838 <__TEXT_REGION_LENGTH__+0x700838>
     9fc:	30 93 39 08 	sts	0x0839, r19	; 0x800839 <__TEXT_REGION_LENGTH__+0x700839>

	if (((uint32_t)sysState.sysTick & 0x7FFFF) == 0) //Save state to EEPROM every 4.5 hrs
     a00:	8d 81       	ldd	r24, Y+5	; 0x05
     a02:	9e 81       	ldd	r25, Y+6	; 0x06
     a04:	af 81       	ldd	r26, Y+7	; 0x07
     a06:	b8 85       	ldd	r27, Y+8	; 0x08
     a08:	a7 70       	andi	r26, 0x07	; 7
     a0a:	bb 27       	eor	r27, r27
     a0c:	89 2b       	or	r24, r25
     a0e:	8a 2b       	or	r24, r26
     a10:	8b 2b       	or	r24, r27
     a12:	41 f4       	brne	.+16     	; 0xa24 <__LOCK_REGION_LENGTH__+0x624>
		eeprom_update_block(&channelOT, &savedCOT, sizeof(channelsOnTime));
     a14:	48 e3       	ldi	r20, 0x38	; 56
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	61 e2       	ldi	r22, 0x21	; 33
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	84 ed       	ldi	r24, 0xD4	; 212
     a1e:	90 e2       	ldi	r25, 0x20	; 32
     a20:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <eeprom_update_block>

	if (rxMode == SetConfig) //We are currently receiving data packet
     a24:	80 91 5b 21 	lds	r24, 0x215B	; 0x80215b <rxMode>
     a28:	83 32       	cpi	r24, 0x23	; 35
     a2a:	e9 f4       	brne	.+58     	; 0xa66 <__LOCK_REGION_LENGTH__+0x666>
	{
		if (rs485busy == rxMark) //Second tick in a row detected
     a2c:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <rxMark>
     a30:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <_ZZ10__vector_7E9rs485busy>
     a34:	98 13       	cpse	r25, r24
     a36:	12 c0       	rjmp	.+36     	; 0xa5c <__LOCK_REGION_LENGTH__+0x65c>
		{
			rxMode = 0; //Packet considered lost
     a38:	10 92 5b 21 	sts	0x215B, r1	; 0x80215b <rxMode>
			USARTC0.CTRLB |= USART_MPCM_bm; //Set MPCM bit
     a3c:	e0 ec       	ldi	r30, 0xC0	; 192
     a3e:	f8 e0       	ldi	r31, 0x08	; 8
     a40:	83 81       	ldd	r24, Z+3	; 0x03
     a42:	82 60       	ori	r24, 0x02	; 2
     a44:	83 83       	std	Z+3, r24	; 0x03
			#ifdef RXC_EDMA
			EDMA.CH0.CTRLA = 0;
     a46:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__TEXT_REGION_LENGTH__+0x700110>
			while (EDMA.CH0.CTRLB & EDMA_CH_CHBUSY_bm);
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f1 e0       	ldi	r31, 0x01	; 1
     a4e:	81 89       	ldd	r24, Z+17	; 0x11
     a50:	88 23       	and	r24, r24
     a52:	ec f3       	brlt	.-6      	; 0xa4e <__LOCK_REGION_LENGTH__+0x64e>
			USARTC0.CTRLA = USART_DRIE_bm | USART_RXCINTLVL_HI_gc;
     a54:	80 e7       	ldi	r24, 0x70	; 112
     a56:	80 93 c2 08 	sts	0x08C2, r24	; 0x8008c2 <__TEXT_REGION_LENGTH__+0x7008c2>
     a5a:	0a c0       	rjmp	.+20     	; 0xa70 <__LOCK_REGION_LENGTH__+0x670>
			#endif
		}
		else
			rs485busy = rxMark;
     a5c:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <rxMark>
     a60:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <_ZZ10__vector_7E9rs485busy>
     a64:	05 c0       	rjmp	.+10     	; 0xa70 <__LOCK_REGION_LENGTH__+0x670>
	}
	else
		rs485busy = rxMark - 1;
     a66:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <rxMark>
     a6a:	81 50       	subi	r24, 0x01	; 1
     a6c:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <_ZZ10__vector_7E9rs485busy>
	framePtr = DSI8xFrames;
     a70:	87 e4       	ldi	r24, 0x47	; 71
     a72:	91 e2       	ldi	r25, 0x21	; 33
     a74:	80 93 45 21 	sts	0x2145, r24	; 0x802145 <framePtr>
     a78:	90 93 46 21 	sts	0x2146, r25	; 0x802146 <framePtr+0x1>
	TCD5.INTFLAGS |= TC5_OVFIF_bm;
     a7c:	e0 e4       	ldi	r30, 0x40	; 64
     a7e:	f9 e0       	ldi	r31, 0x09	; 9
     a80:	84 85       	ldd	r24, Z+12	; 0x0c
     a82:	81 60       	ori	r24, 0x01	; 1
     a84:	84 87       	std	Z+12, r24	; 0x0c
	TCD5.INTCTRLA = TC_OVFINTLVL_HI_gc;
     a86:	83 e0       	ldi	r24, 0x03	; 3
     a88:	86 83       	std	Z+6, r24	; 0x06
}
     a8a:	26 c0       	rjmp	.+76     	; 0xad8 <__LOCK_REGION_LENGTH__+0x6d8>
				}
				else //Level needs to be raised
				{
					tempLvl += ((-tempLvl > delta) ? delta : -tempLvl) + (int16_t)_lvl[s];
					if (!gLevels[j] && tempLvl > 0) //Lamp has been switched on - remember ticks
						_onTimeStamp = sysState.sysTick;
     a8c:	ac e0       	ldi	r26, 0x0C	; 12
     a8e:	b1 e2       	ldi	r27, 0x21	; 33
     a90:	8c 91       	ld	r24, X
     a92:	83 8f       	std	Z+27, r24	; 0x1b
     a94:	80 91 0d 21 	lds	r24, 0x210D	; 0x80210d <sysState+0x1>
     a98:	84 8f       	std	Z+28, r24	; 0x1c
     a9a:	80 91 0e 21 	lds	r24, 0x210E	; 0x80210e <sysState+0x2>
     a9e:	85 8f       	std	Z+29, r24	; 0x1d
     aa0:	80 91 0f 21 	lds	r24, 0x210F	; 0x80210f <sysState+0x3>
     aa4:	86 8f       	std	Z+30, r24	; 0x1e
     aa6:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <sysState+0x4>
     aaa:	87 8f       	std	Z+31, r24	; 0x1f
     aac:	80 91 11 21 	lds	r24, 0x2111	; 0x802111 <sysState+0x5>
     ab0:	80 a3       	std	Z+32, r24	; 0x20
     ab2:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <sysState+0x6>
     ab6:	81 a3       	std	Z+33, r24	; 0x21
     ab8:	80 91 13 21 	lds	r24, 0x2113	; 0x802113 <sysState+0x7>
     abc:	82 a3       	std	Z+34, r24	; 0x22
				}
				gLevels[j] = tempLvl;
     abe:	44 0f       	add	r20, r20
     ac0:	55 1f       	adc	r21, r21
     ac2:	43 5a       	subi	r20, 0xA3	; 163
     ac4:	5e 4d       	sbci	r21, 0xDE	; 222
     ac6:	da 01       	movw	r26, r20
     ac8:	2d 93       	st	X+, r18
     aca:	3c 93       	st	X, r19
     acc:	5c cd       	rjmp	.-1352   	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     ace:	a4 e1       	ldi	r26, 0x14	; 20
     ad0:	b1 e2       	ldi	r27, 0x21	; 33
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
			return;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	e9 ce       	rjmp	.-558    	; 0x8aa <__LOCK_REGION_LENGTH__+0x4aa>
	else
		rs485busy = rxMark - 1;
	framePtr = DSI8xFrames;
	TCD5.INTFLAGS |= TC5_OVFIF_bm;
	TCD5.INTCTRLA = TC_OVFINTLVL_HI_gc;
}
     ad8:	2e 96       	adiw	r28, 0x0e	; 14
     ada:	cd bf       	out	0x3d, r28	; 61
     adc:	de bf       	out	0x3e, r29	; 62
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	ff 91       	pop	r31
     ae4:	ef 91       	pop	r30
     ae6:	bf 91       	pop	r27
     ae8:	af 91       	pop	r26
     aea:	9f 91       	pop	r25
     aec:	8f 91       	pop	r24
     aee:	7f 91       	pop	r23
     af0:	6f 91       	pop	r22
     af2:	5f 91       	pop	r21
     af4:	4f 91       	pop	r20
     af6:	3f 91       	pop	r19
     af8:	2f 91       	pop	r18
     afa:	1f 91       	pop	r17
     afc:	0f 91       	pop	r16
     afe:	ff 90       	pop	r15
     b00:	ef 90       	pop	r14
     b02:	df 90       	pop	r13
     b04:	cf 90       	pop	r12
     b06:	bf 90       	pop	r11
     b08:	af 90       	pop	r10
     b0a:	9f 90       	pop	r9
     b0c:	8f 90       	pop	r8
     b0e:	7f 90       	pop	r7
     b10:	6f 90       	pop	r6
     b12:	5f 90       	pop	r5
     b14:	4f 90       	pop	r4
     b16:	3f 90       	pop	r3
     b18:	2f 90       	pop	r2
     b1a:	0f 90       	pop	r0
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	0f 90       	pop	r0
     b20:	1f 90       	pop	r1
     b22:	18 95       	reti

00000b24 <__vector_34>:

ISR(ADCA_CH0_vect)
{
     b24:	1f 92       	push	r1
     b26:	0f 92       	push	r0
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	0f 92       	push	r0
     b2c:	11 24       	eor	r1, r1
     b2e:	af 92       	push	r10
     b30:	bf 92       	push	r11
     b32:	df 92       	push	r13
     b34:	ef 92       	push	r14
     b36:	ff 92       	push	r15
     b38:	0f 93       	push	r16
     b3a:	1f 93       	push	r17
     b3c:	2f 93       	push	r18
     b3e:	3f 93       	push	r19
     b40:	4f 93       	push	r20
     b42:	5f 93       	push	r21
     b44:	6f 93       	push	r22
     b46:	7f 93       	push	r23
     b48:	8f 93       	push	r24
     b4a:	9f 93       	push	r25
     b4c:	af 93       	push	r26
     b4e:	bf 93       	push	r27
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	ef 93       	push	r30
     b56:	ff 93       	push	r31
	static uint8_t sAdcCnt = 0;
	int16_t result = ADCA.CH0RES;
     b58:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__TEXT_REGION_LENGTH__+0x700210>
     b5c:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__TEXT_REGION_LENGTH__+0x700211>
	if (sAdcCnt < 4 && LINK_VALID_MIN < result && result < LINK_VALID_MAX)
     b60:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <_edata>
     b64:	24 30       	cpi	r18, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <__vector_34+0x46>
     b68:	5f c1       	rjmp	.+702    	; 0xe28 <__vector_34+0x304>
     b6a:	bc 01       	movw	r22, r24
     b6c:	6e 5e       	subi	r22, 0xEE	; 238
     b6e:	73 41       	sbci	r23, 0x13	; 19
     b70:	6b 36       	cpi	r22, 0x6B	; 107
     b72:	77 46       	sbci	r23, 0x67	; 103
     b74:	08 f0       	brcs	.+2      	; 0xb78 <__vector_34+0x54>
     b76:	49 c1       	rjmp	.+658    	; 0xe0a <__vector_34+0x2e6>
	{
		sysState.linksMask |= (1 << sAdcCnt); //Set 'valid' bit
     b78:	a2 2e       	mov	r10, r18
     b7a:	b1 2c       	mov	r11, r1
     b7c:	ec e0       	ldi	r30, 0x0C	; 12
     b7e:	f1 e2       	ldi	r31, 0x21	; 33
     b80:	61 e0       	ldi	r22, 0x01	; 1
     b82:	70 e0       	ldi	r23, 0x00	; 0
     b84:	02 2e       	mov	r0, r18
     b86:	02 c0       	rjmp	.+4      	; 0xb8c <__vector_34+0x68>
     b88:	66 0f       	add	r22, r22
     b8a:	77 1f       	adc	r23, r23
     b8c:	0a 94       	dec	r0
     b8e:	e2 f7       	brpl	.-8      	; 0xb88 <__vector_34+0x64>
     b90:	35 89       	ldd	r19, Z+21	; 0x15
     b92:	36 2b       	or	r19, r22
     b94:	35 8b       	std	Z+21, r19	; 0x15
		if (result < LINK_ON_BARRIER)
     b96:	85 34       	cpi	r24, 0x45	; 69
     b98:	6b e1       	ldi	r22, 0x1B	; 27
     b9a:	96 07       	cpc	r25, r22
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__vector_34+0x7c>
     b9e:	88 c0       	rjmp	.+272    	; 0xcb0 <__vector_34+0x18c>
		{
			result = 0;
			if (sysState.linksMask & (0x10 << sAdcCnt)) //Previous level was non-zero
     ba0:	80 e1       	ldi	r24, 0x10	; 16
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	02 2e       	mov	r0, r18
     ba6:	02 c0       	rjmp	.+4      	; 0xbac <__vector_34+0x88>
     ba8:	88 0f       	add	r24, r24
     baa:	99 1f       	adc	r25, r25
     bac:	0a 94       	dec	r0
     bae:	e2 f7       	brpl	.-8      	; 0xba8 <__vector_34+0x84>
     bb0:	43 2f       	mov	r20, r19
     bb2:	50 e0       	ldi	r21, 0x00	; 0
     bb4:	48 23       	and	r20, r24
     bb6:	59 23       	and	r21, r25
     bb8:	45 2b       	or	r20, r21
     bba:	09 f4       	brne	.+2      	; 0xbbe <__vector_34+0x9a>
     bbc:	74 c0       	rjmp	.+232    	; 0xca6 <__vector_34+0x182>
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		uint8_t oLvl = sysState.linkLevels[_linkNum];
     bbe:	43 e2       	ldi	r20, 0x23	; 35
     bc0:	4a 9d       	mul	r20, r10
     bc2:	f0 01       	movw	r30, r0
     bc4:	4b 9d       	mul	r20, r11
     bc6:	f0 0d       	add	r31, r0
     bc8:	11 24       	eor	r1, r1
     bca:	e0 5f       	subi	r30, 0xF0	; 240
     bcc:	ff 4d       	sbci	r31, 0xDF	; 223
     bce:	42 81       	ldd	r20, Z+2	; 0x02
     bd0:	50 e0       	ldi	r21, 0x00	; 0
     bd2:	fa 01       	movw	r30, r20
     bd4:	e4 5f       	subi	r30, 0xF4	; 244
     bd6:	fe 4d       	sbci	r31, 0xDE	; 222
     bd8:	e1 89       	ldd	r30, Z+17	; 0x11
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
     bda:	6e 2f       	mov	r22, r30
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	6e 5f       	subi	r22, 0xFE	; 254
     be0:	7f 4f       	sbci	r23, 0xFF	; 255
     be2:	65 30       	cpi	r22, 0x05	; 5
     be4:	71 05       	cpc	r23, r1
     be6:	18 f4       	brcc	.+6      	; 0xbee <__vector_34+0xca>
     be8:	ee 23       	and	r30, r30
     bea:	09 f4       	brne	.+2      	; 0xbee <__vector_34+0xca>
     bec:	5c c0       	rjmp	.+184    	; 0xca6 <__vector_34+0x182>
			return;
		sysState.linkLevels[_linkNum] = level;
     bee:	fa 01       	movw	r30, r20
     bf0:	e4 5f       	subi	r30, 0xF4	; 244
     bf2:	fe 4d       	sbci	r31, 0xDE	; 222
     bf4:	11 8a       	std	Z+17, r1	; 0x11

		for (uint8_t i = 0; i < _linkCnt; i++)
     bf6:	43 e2       	ldi	r20, 0x23	; 35
     bf8:	4a 9d       	mul	r20, r10
     bfa:	f0 01       	movw	r30, r0
     bfc:	4b 9d       	mul	r20, r11
     bfe:	f0 0d       	add	r31, r0
     c00:	11 24       	eor	r1, r1
     c02:	e0 5f       	subi	r30, 0xF0	; 240
     c04:	ff 4d       	sbci	r31, 0xDF	; 223
     c06:	d1 80       	ldd	r13, Z+1	; 0x01
     c08:	dd 20       	and	r13, r13
     c0a:	19 f1       	breq	.+70     	; 0xc52 <__vector_34+0x12e>
     c0c:	c3 e2       	ldi	r28, 0x23	; 35
     c0e:	2c 9f       	mul	r18, r28
     c10:	a0 01       	movw	r20, r0
     c12:	11 24       	eor	r1, r1
     c14:	4d 5e       	subi	r20, 0xED	; 237
     c16:	5f 4d       	sbci	r21, 0xDF	; 223
     c18:	00 e0       	ldi	r16, 0x00	; 0
     c1a:	10 e0       	ldi	r17, 0x00	; 0
     c1c:	da 01       	movw	r26, r20
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     c1e:	ec 91       	ld	r30, X
     c20:	4f 5f       	subi	r20, 0xFF	; 255
     c22:	5f 4f       	sbci	r21, 0xFF	; 255
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	ee 0f       	add	r30, r30
     c28:	ff 1f       	adc	r31, r31
     c2a:	e3 5a       	subi	r30, 0xA3	; 163
     c2c:	fe 4d       	sbci	r31, 0xDE	; 222
     c2e:	e0 80       	ld	r14, Z
     c30:	f1 80       	ldd	r15, Z+1	; 0x01
     c32:	13 96       	adiw	r26, 0x03	; 3
     c34:	6c 91       	ld	r22, X
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	e1 e0       	ldi	r30, 0x01	; 1
     c3a:	6e 15       	cp	r22, r14
     c3c:	7f 05       	cpc	r23, r15
     c3e:	09 f4       	brne	.+2      	; 0xc42 <__vector_34+0x11e>
     c40:	e0 e0       	ldi	r30, 0x00	; 0
     c42:	0e 2b       	or	r16, r30
			if (!level || !_difLvl[i]) //Set zero level directly
				_lvl[i] = 0;
     c44:	fa 01       	movw	r30, r20
     c46:	12 82       	std	Z+2, r1	; 0x02
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
			return;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
     c48:	1f 5f       	subi	r17, 0xFF	; 255
     c4a:	1d 11       	cpse	r17, r13
     c4c:	e7 cf       	rjmp	.-50     	; 0xc1c <__vector_34+0xf8>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     c4e:	01 11       	cpse	r16, r1
     c50:	2a c0       	rjmp	.+84     	; 0xca6 <__vector_34+0x182>
			_tickLastChg = sysState.sysTick;
     c52:	63 e2       	ldi	r22, 0x23	; 35
     c54:	6a 9d       	mul	r22, r10
     c56:	a0 01       	movw	r20, r0
     c58:	6b 9d       	mul	r22, r11
     c5a:	50 0d       	add	r21, r0
     c5c:	11 24       	eor	r1, r1
     c5e:	ea 01       	movw	r28, r20
     c60:	c0 5f       	subi	r28, 0xF0	; 240
     c62:	df 4d       	sbci	r29, 0xDF	; 223
     c64:	de 01       	movw	r26, r28
     c66:	53 96       	adiw	r26, 0x13	; 19
     c68:	ec e0       	ldi	r30, 0x0C	; 12
     c6a:	f1 e2       	ldi	r31, 0x21	; 33
     c6c:	40 81       	ld	r20, Z
     c6e:	4b 8b       	std	Y+19, r20	; 0x13
     c70:	41 81       	ldd	r20, Z+1	; 0x01
     c72:	11 96       	adiw	r26, 0x01	; 1
     c74:	4c 93       	st	X, r20
     c76:	11 97       	sbiw	r26, 0x01	; 1
     c78:	42 81       	ldd	r20, Z+2	; 0x02
     c7a:	12 96       	adiw	r26, 0x02	; 2
     c7c:	4c 93       	st	X, r20
     c7e:	12 97       	sbiw	r26, 0x02	; 2
     c80:	43 81       	ldd	r20, Z+3	; 0x03
     c82:	13 96       	adiw	r26, 0x03	; 3
     c84:	4c 93       	st	X, r20
     c86:	13 97       	sbiw	r26, 0x03	; 3
     c88:	44 81       	ldd	r20, Z+4	; 0x04
     c8a:	14 96       	adiw	r26, 0x04	; 4
     c8c:	4c 93       	st	X, r20
     c8e:	14 97       	sbiw	r26, 0x04	; 4
     c90:	45 81       	ldd	r20, Z+5	; 0x05
     c92:	15 96       	adiw	r26, 0x05	; 5
     c94:	4c 93       	st	X, r20
     c96:	15 97       	sbiw	r26, 0x05	; 5
     c98:	46 81       	ldd	r20, Z+6	; 0x06
     c9a:	16 96       	adiw	r26, 0x06	; 6
     c9c:	4c 93       	st	X, r20
     c9e:	16 97       	sbiw	r26, 0x06	; 6
     ca0:	47 81       	ldd	r20, Z+7	; 0x07
     ca2:	17 96       	adiw	r26, 0x07	; 7
     ca4:	4c 93       	st	X, r20
		if (result < LINK_ON_BARRIER)
		{
			result = 0;
			if (sysState.linksMask & (0x10 << sAdcCnt)) //Previous level was non-zero
				links[sAdcCnt].setLevel(0);
			sysState.linksMask &= ~(0x10 << sAdcCnt); //Clear 'non-zero' bit
     ca6:	80 95       	com	r24
     ca8:	38 23       	and	r19, r24
     caa:	30 93 21 21 	sts	0x2121, r19	; 0x802121 <sysState+0x15>
     cae:	a8 c1       	rjmp	.+848    	; 0x1000 <__vector_34+0x4dc>
		}
		else
		{
			result = (result - LINK_1PERC_CODE) / LINK_SCALE;
     cb0:	80 59       	subi	r24, 0x90	; 144
     cb2:	91 42       	sbci	r25, 0x21	; 33
     cb4:	64 e5       	ldi	r22, 0x54	; 84
     cb6:	70 e0       	ldi	r23, 0x00	; 0
     cb8:	0e 94 30 0a 	call	0x1460	; 0x1460 <__divmodhi4>
			if (result < 5)
     cbc:	65 30       	cpi	r22, 0x05	; 5
     cbe:	71 05       	cpc	r23, r1
     cc0:	14 f4       	brge	.+4      	; 0xcc6 <__vector_34+0x1a2>
				result = 5;
     cc2:	65 e0       	ldi	r22, 0x05	; 5
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	6f 3f       	cpi	r22, 0xFF	; 255
     cc8:	71 05       	cpc	r23, r1
     cca:	19 f0       	breq	.+6      	; 0xcd2 <__vector_34+0x1ae>
     ccc:	14 f0       	brlt	.+4      	; 0xcd2 <__vector_34+0x1ae>
     cce:	6f ef       	ldi	r22, 0xFF	; 255
     cd0:	70 e0       	ldi	r23, 0x00	; 0
			if (result > 255)
				result = 255;
			sysState.linksMask |= (0x10 << sAdcCnt); //Set 'non-zero' bit
     cd2:	80 e1       	ldi	r24, 0x10	; 16
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	02 2e       	mov	r0, r18
     cd8:	02 c0       	rjmp	.+4      	; 0xcde <__vector_34+0x1ba>
     cda:	88 0f       	add	r24, r24
     cdc:	99 1f       	adc	r25, r25
     cde:	0a 94       	dec	r0
     ce0:	e2 f7       	brpl	.-8      	; 0xcda <__vector_34+0x1b6>
     ce2:	38 2b       	or	r19, r24
     ce4:	30 93 21 21 	sts	0x2121, r19	; 0x802121 <sysState+0x15>
			links[sAdcCnt].setLevel((uint8_t)result);
     ce8:	16 2f       	mov	r17, r22
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		uint8_t oLvl = sysState.linkLevels[_linkNum];
     cea:	83 e2       	ldi	r24, 0x23	; 35
     cec:	8a 9d       	mul	r24, r10
     cee:	f0 01       	movw	r30, r0
     cf0:	8b 9d       	mul	r24, r11
     cf2:	f0 0d       	add	r31, r0
     cf4:	11 24       	eor	r1, r1
     cf6:	e0 5f       	subi	r30, 0xF0	; 240
     cf8:	ff 4d       	sbci	r31, 0xDF	; 223
     cfa:	42 81       	ldd	r20, Z+2	; 0x02
     cfc:	50 e0       	ldi	r21, 0x00	; 0
     cfe:	fa 01       	movw	r30, r20
     d00:	e4 5f       	subi	r30, 0xF4	; 244
     d02:	fe 4d       	sbci	r31, 0xDE	; 222
     d04:	31 89       	ldd	r19, Z+17	; 0x11
     d06:	77 27       	eor	r23, r23
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
     d08:	83 2f       	mov	r24, r19
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	86 1b       	sub	r24, r22
     d0e:	97 0b       	sbc	r25, r23
     d10:	02 96       	adiw	r24, 0x02	; 2
     d12:	05 97       	sbiw	r24, 0x05	; 5
     d14:	48 f4       	brcc	.+18     	; 0xd28 <__vector_34+0x204>
     d16:	91 e0       	ldi	r25, 0x01	; 1
     d18:	11 11       	cpse	r17, r1
     d1a:	01 c0       	rjmp	.+2      	; 0xd1e <__vector_34+0x1fa>
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	31 11       	cpse	r19, r1
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	98 13       	cpse	r25, r24
     d26:	6c c1       	rjmp	.+728    	; 0x1000 <__vector_34+0x4dc>
			return;
		sysState.linkLevels[_linkNum] = level;
     d28:	fa 01       	movw	r30, r20
     d2a:	e4 5f       	subi	r30, 0xF4	; 244
     d2c:	fe 4d       	sbci	r31, 0xDE	; 222
     d2e:	11 8b       	std	Z+17, r17	; 0x11

		for (uint8_t i = 0; i < _linkCnt; i++)
     d30:	83 e2       	ldi	r24, 0x23	; 35
     d32:	8a 9d       	mul	r24, r10
     d34:	f0 01       	movw	r30, r0
     d36:	8b 9d       	mul	r24, r11
     d38:	f0 0d       	add	r31, r0
     d3a:	11 24       	eor	r1, r1
     d3c:	e0 5f       	subi	r30, 0xF0	; 240
     d3e:	ff 4d       	sbci	r31, 0xDF	; 223
     d40:	01 81       	ldd	r16, Z+1	; 0x01
     d42:	00 23       	and	r16, r16
     d44:	b9 f1       	breq	.+110    	; 0xdb4 <__vector_34+0x290>
     d46:	f3 e2       	ldi	r31, 0x23	; 35
     d48:	2f 9f       	mul	r18, r31
     d4a:	d0 01       	movw	r26, r0
     d4c:	11 24       	eor	r1, r1
     d4e:	ad 5e       	subi	r26, 0xED	; 237
     d50:	bf 4d       	sbci	r27, 0xDF	; 223
     d52:	50 e0       	ldi	r21, 0x00	; 0
     d54:	30 e0       	ldi	r19, 0x00	; 0
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     d56:	ed 01       	movw	r28, r26
     d58:	e8 81       	ld	r30, Y
     d5a:	11 96       	adiw	r26, 0x01	; 1
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	ee 0f       	add	r30, r30
     d60:	ff 1f       	adc	r31, r31
     d62:	e3 5a       	subi	r30, 0xA3	; 163
     d64:	fe 4d       	sbci	r31, 0xDE	; 222
     d66:	01 90       	ld	r0, Z+
     d68:	f0 81       	ld	r31, Z
     d6a:	e0 2d       	mov	r30, r0
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	41 e0       	ldi	r20, 0x01	; 1
     d72:	8e 17       	cp	r24, r30
     d74:	9f 07       	cpc	r25, r31
     d76:	09 f4       	brne	.+2      	; 0xd7a <__vector_34+0x256>
     d78:	40 e0       	ldi	r20, 0x00	; 0
     d7a:	54 2b       	or	r21, r20
			if (!level || !_difLvl[i]) //Set zero level directly
     d7c:	11 23       	and	r17, r17
     d7e:	29 f0       	breq	.+10     	; 0xd8a <__vector_34+0x266>
     d80:	18 96       	adiw	r26, 0x08	; 8
     d82:	8c 91       	ld	r24, X
     d84:	18 97       	sbiw	r26, 0x08	; 8
     d86:	81 11       	cpse	r24, r1
     d88:	04 c0       	rjmp	.+8      	; 0xd92 <__vector_34+0x26e>
				_lvl[i] = 0;
     d8a:	12 96       	adiw	r26, 0x02	; 2
     d8c:	1c 92       	st	X, r1
     d8e:	12 97       	sbiw	r26, 0x02	; 2
     d90:	0c c0       	rjmp	.+24     	; 0xdaa <__vector_34+0x286>
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
     d92:	86 9f       	mul	r24, r22
     d94:	f0 01       	movw	r30, r0
     d96:	87 9f       	mul	r24, r23
     d98:	f0 0d       	add	r31, r0
     d9a:	11 24       	eor	r1, r1
     d9c:	15 96       	adiw	r26, 0x05	; 5
     d9e:	8c 91       	ld	r24, X
     da0:	15 97       	sbiw	r26, 0x05	; 5
     da2:	8f 0f       	add	r24, r31
     da4:	12 96       	adiw	r26, 0x02	; 2
     da6:	8c 93       	st	X, r24
     da8:	12 97       	sbiw	r26, 0x02	; 2
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
			return;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
     daa:	3f 5f       	subi	r19, 0xFF	; 255
     dac:	03 13       	cpse	r16, r19
     dae:	d3 cf       	rjmp	.-90     	; 0xd56 <__vector_34+0x232>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     db0:	51 11       	cpse	r21, r1
     db2:	26 c1       	rjmp	.+588    	; 0x1000 <__vector_34+0x4dc>
			_tickLastChg = sysState.sysTick;
     db4:	33 e2       	ldi	r19, 0x23	; 35
     db6:	3a 9d       	mul	r19, r10
     db8:	c0 01       	movw	r24, r0
     dba:	3b 9d       	mul	r19, r11
     dbc:	90 0d       	add	r25, r0
     dbe:	11 24       	eor	r1, r1
     dc0:	ec 01       	movw	r28, r24
     dc2:	c0 5f       	subi	r28, 0xF0	; 240
     dc4:	df 4d       	sbci	r29, 0xDF	; 223
     dc6:	de 01       	movw	r26, r28
     dc8:	53 96       	adiw	r26, 0x13	; 19
     dca:	ec e0       	ldi	r30, 0x0C	; 12
     dcc:	f1 e2       	ldi	r31, 0x21	; 33
     dce:	80 81       	ld	r24, Z
     dd0:	8b 8b       	std	Y+19, r24	; 0x13
     dd2:	81 81       	ldd	r24, Z+1	; 0x01
     dd4:	11 96       	adiw	r26, 0x01	; 1
     dd6:	8c 93       	st	X, r24
     dd8:	11 97       	sbiw	r26, 0x01	; 1
     dda:	82 81       	ldd	r24, Z+2	; 0x02
     ddc:	12 96       	adiw	r26, 0x02	; 2
     dde:	8c 93       	st	X, r24
     de0:	12 97       	sbiw	r26, 0x02	; 2
     de2:	83 81       	ldd	r24, Z+3	; 0x03
     de4:	13 96       	adiw	r26, 0x03	; 3
     de6:	8c 93       	st	X, r24
     de8:	13 97       	sbiw	r26, 0x03	; 3
     dea:	84 81       	ldd	r24, Z+4	; 0x04
     dec:	14 96       	adiw	r26, 0x04	; 4
     dee:	8c 93       	st	X, r24
     df0:	14 97       	sbiw	r26, 0x04	; 4
     df2:	85 81       	ldd	r24, Z+5	; 0x05
     df4:	15 96       	adiw	r26, 0x05	; 5
     df6:	8c 93       	st	X, r24
     df8:	15 97       	sbiw	r26, 0x05	; 5
     dfa:	86 81       	ldd	r24, Z+6	; 0x06
     dfc:	16 96       	adiw	r26, 0x06	; 6
     dfe:	8c 93       	st	X, r24
     e00:	16 97       	sbiw	r26, 0x06	; 6
     e02:	87 81       	ldd	r24, Z+7	; 0x07
     e04:	17 96       	adiw	r26, 0x07	; 7
     e06:	8c 93       	st	X, r24
     e08:	fb c0       	rjmp	.+502    	; 0x1000 <__vector_34+0x4dc>
			sysState.linksMask |= (0x10 << sAdcCnt); //Set 'non-zero' bit
			links[sAdcCnt].setLevel((uint8_t)result);
		}
	}
	else if (sAdcCnt < 4)
		sysState.linksMask &= ~(0x11 << sAdcCnt); //Clear 'valid' and 'non-zero' bits
     e0a:	ec e0       	ldi	r30, 0x0C	; 12
     e0c:	f1 e2       	ldi	r31, 0x21	; 33
     e0e:	81 e1       	ldi	r24, 0x11	; 17
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	02 2e       	mov	r0, r18
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <__vector_34+0x2f6>
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	0a 94       	dec	r0
     e1c:	e2 f7       	brpl	.-8      	; 0xe16 <__vector_34+0x2f2>
     e1e:	80 95       	com	r24
     e20:	95 89       	ldd	r25, Z+21	; 0x15
     e22:	89 23       	and	r24, r25
     e24:	85 8b       	std	Z+21, r24	; 0x15
     e26:	ec c0       	rjmp	.+472    	; 0x1000 <__vector_34+0x4dc>
	else //sAdcCnt == 4: MSEN channel
		msenCh.setLevel((uint8_t)(result >> 6));
     e28:	08 2e       	mov	r0, r24
     e2a:	89 2f       	mov	r24, r25
     e2c:	00 0c       	add	r0, r0
     e2e:	88 1f       	adc	r24, r24
     e30:	99 0b       	sbc	r25, r25
     e32:	00 0c       	add	r0, r0
     e34:	88 1f       	adc	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	38 2f       	mov	r19, r24
		_onTime = validConf.msenOnTime > 5 ? validConf.msenOnTime : 6;
		_fTime = _onTime + validConf.msenLowTime;
	}
	void setLevel(uint8_t level)
	{
		if (level < MSEN_VALID_MIN || !validConf.msenOnTime || (sysState.linksMask & (0x10 << _linkNum)))
     e3a:	84 31       	cpi	r24, 0x14	; 20
     e3c:	c0 f0       	brcs	.+48     	; 0xe6e <__vector_34+0x34a>
     e3e:	40 91 3e 21 	lds	r20, 0x213E	; 0x80213e <validConf+0x1a>
     e42:	44 23       	and	r20, r20
     e44:	a1 f0       	breq	.+40     	; 0xe6e <__vector_34+0x34a>
     e46:	e0 91 04 20 	lds	r30, 0x2004	; 0x802004 <msenCh+0x2>
     e4a:	ae 2f       	mov	r26, r30
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	40 91 21 21 	lds	r20, 0x2121	; 0x802121 <sysState+0x15>
     e52:	64 2f       	mov	r22, r20
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	40 e1       	ldi	r20, 0x10	; 16
     e58:	50 e0       	ldi	r21, 0x00	; 0
     e5a:	0e 2e       	mov	r0, r30
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <__vector_34+0x33e>
     e5e:	44 0f       	add	r20, r20
     e60:	55 1f       	adc	r21, r21
     e62:	0a 94       	dec	r0
     e64:	e2 f7       	brpl	.-8      	; 0xe5e <__vector_34+0x33a>
     e66:	46 23       	and	r20, r22
     e68:	57 23       	and	r21, r23
     e6a:	45 2b       	or	r20, r21
     e6c:	29 f0       	breq	.+10     	; 0xe78 <__vector_34+0x354>
		{
			_lvl = 0; //MSEN disconnected, disabled (by zero on time) or there is non-zero level from link
     e6e:	e2 e0       	ldi	r30, 0x02	; 2
     e70:	f0 e2       	ldi	r31, 0x20	; 32
     e72:	13 82       	std	Z+3, r1	; 0x03
			cntDown = false;
     e74:	10 82       	st	Z, r1
     e76:	c4 c0       	rjmp	.+392    	; 0x1000 <__vector_34+0x4dc>
			return;
		}
		if (level > MSEN_SEN1_TRIG && _lvl == MSEN_VALID_MIN) //Off to on transition
     e78:	8a 33       	cpi	r24, 0x3A	; 58
     e7a:	08 f4       	brcc	.+2      	; 0xe7e <__vector_34+0x35a>
     e7c:	96 c0       	rjmp	.+300    	; 0xfaa <__vector_34+0x486>
     e7e:	40 91 05 20 	lds	r20, 0x2005	; 0x802005 <msenCh+0x3>
     e82:	44 31       	cpi	r20, 0x14	; 20
     e84:	09 f0       	breq	.+2      	; 0xe88 <__vector_34+0x364>
     e86:	91 c0       	rjmp	.+290    	; 0xfaa <__vector_34+0x486>
		{
			_lvl = level;
     e88:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <msenCh+0x3>
		}
	}

	void setLevel(uint8_t level, bool direction) //Accepts level in the range 0…255
	{
		_dir = direction;
     e8c:	83 e2       	ldi	r24, 0x23	; 35
     e8e:	8a 9f       	mul	r24, r26
     e90:	e0 01       	movw	r28, r0
     e92:	8b 9f       	mul	r24, r27
     e94:	d0 0d       	add	r29, r0
     e96:	11 24       	eor	r1, r1
     e98:	c0 5f       	subi	r28, 0xF0	; 240
     e9a:	df 4d       	sbci	r29, 0xDF	; 223
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	37 34       	cpi	r19, 0x47	; 71
     ea0:	08 f4       	brcc	.+2      	; 0xea4 <__vector_34+0x380>
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	88 83       	st	Y, r24
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		uint8_t oLvl = sysState.linkLevels[_linkNum];
     ea6:	83 e2       	ldi	r24, 0x23	; 35
     ea8:	8a 9f       	mul	r24, r26
     eaa:	e0 01       	movw	r28, r0
     eac:	8b 9f       	mul	r24, r27
     eae:	d0 0d       	add	r29, r0
     eb0:	11 24       	eor	r1, r1
     eb2:	c0 5f       	subi	r28, 0xF0	; 240
     eb4:	df 4d       	sbci	r29, 0xDF	; 223
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	ec 01       	movw	r28, r24
     ebc:	c4 5f       	subi	r28, 0xF4	; 244
     ebe:	de 4d       	sbci	r29, 0xDE	; 222
     ec0:	39 89       	ldd	r19, Y+17	; 0x11
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
     ec2:	43 2f       	mov	r20, r19
     ec4:	50 e0       	ldi	r21, 0x00	; 0
     ec6:	4d 5f       	subi	r20, 0xFD	; 253
     ec8:	51 09       	sbc	r21, r1
     eca:	45 30       	cpi	r20, 0x05	; 5
     ecc:	51 05       	cpc	r21, r1
     ece:	10 f4       	brcc	.+4      	; 0xed4 <__vector_34+0x3b0>
     ed0:	31 11       	cpse	r19, r1
     ed2:	66 c0       	rjmp	.+204    	; 0xfa0 <__vector_34+0x47c>
			return;
		sysState.linkLevels[_linkNum] = level;
     ed4:	ec 01       	movw	r28, r24
     ed6:	c4 5f       	subi	r28, 0xF4	; 244
     ed8:	de 4d       	sbci	r29, 0xDE	; 222
     eda:	3f ef       	ldi	r19, 0xFF	; 255
     edc:	39 8b       	std	Y+17, r19	; 0x11

		for (uint8_t i = 0; i < _linkCnt; i++)
     ede:	83 e2       	ldi	r24, 0x23	; 35
     ee0:	8a 9f       	mul	r24, r26
     ee2:	e0 01       	movw	r28, r0
     ee4:	8b 9f       	mul	r24, r27
     ee6:	d0 0d       	add	r29, r0
     ee8:	11 24       	eor	r1, r1
     eea:	c0 5f       	subi	r28, 0xF0	; 240
     eec:	df 4d       	sbci	r29, 0xDF	; 223
     eee:	69 81       	ldd	r22, Y+1	; 0x01
     ef0:	66 23       	and	r22, r22
     ef2:	69 f1       	breq	.+90     	; 0xf4e <__vector_34+0x42a>
     ef4:	33 e2       	ldi	r19, 0x23	; 35
     ef6:	e3 9f       	mul	r30, r19
     ef8:	f0 01       	movw	r30, r0
     efa:	11 24       	eor	r1, r1
     efc:	ed 5e       	subi	r30, 0xED	; 237
     efe:	ff 4d       	sbci	r31, 0xDF	; 223
     f00:	50 e0       	ldi	r21, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
				_lvl[i] = 0;
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
     f04:	7f ef       	ldi	r23, 0xFF	; 255
     f06:	cf 01       	movw	r24, r30
			return;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     f08:	40 81       	ld	r20, Z
     f0a:	31 96       	adiw	r30, 0x01	; 1
     f0c:	c4 2f       	mov	r28, r20
     f0e:	d0 e0       	ldi	r29, 0x00	; 0
     f10:	cc 0f       	add	r28, r28
     f12:	dd 1f       	adc	r29, r29
     f14:	c3 5a       	subi	r28, 0xA3	; 163
     f16:	de 4d       	sbci	r29, 0xDE	; 222
     f18:	08 81       	ld	r16, Y
     f1a:	19 81       	ldd	r17, Y+1	; 0x01
     f1c:	ec 01       	movw	r28, r24
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	41 e0       	ldi	r20, 0x01	; 1
     f24:	80 17       	cp	r24, r16
     f26:	91 07       	cpc	r25, r17
     f28:	09 f4       	brne	.+2      	; 0xf2c <__vector_34+0x408>
     f2a:	40 e0       	ldi	r20, 0x00	; 0
     f2c:	54 2b       	or	r21, r20
			if (!level || !_difLvl[i]) //Set zero level directly
     f2e:	80 85       	ldd	r24, Z+8	; 0x08
     f30:	81 11       	cpse	r24, r1
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <__vector_34+0x414>
				_lvl[i] = 0;
     f34:	12 82       	std	Z+2, r1	; 0x02
     f36:	06 c0       	rjmp	.+12     	; 0xf44 <__vector_34+0x420>
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
     f38:	78 9f       	mul	r23, r24
     f3a:	c0 01       	movw	r24, r0
     f3c:	11 24       	eor	r1, r1
     f3e:	85 81       	ldd	r24, Z+5	; 0x05
     f40:	89 0f       	add	r24, r25
     f42:	82 83       	std	Z+2, r24	; 0x02
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
			return;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
     f44:	3f 5f       	subi	r19, 0xFF	; 255
     f46:	63 13       	cpse	r22, r19
     f48:	de cf       	rjmp	.-68     	; 0xf06 <__vector_34+0x3e2>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     f4a:	51 11       	cpse	r21, r1
     f4c:	29 c0       	rjmp	.+82     	; 0xfa0 <__vector_34+0x47c>
			_tickLastChg = sysState.sysTick;
     f4e:	83 e2       	ldi	r24, 0x23	; 35
     f50:	8a 9f       	mul	r24, r26
     f52:	e0 01       	movw	r28, r0
     f54:	8b 9f       	mul	r24, r27
     f56:	d0 0d       	add	r29, r0
     f58:	11 24       	eor	r1, r1
     f5a:	c0 5f       	subi	r28, 0xF0	; 240
     f5c:	df 4d       	sbci	r29, 0xDF	; 223
     f5e:	de 01       	movw	r26, r28
     f60:	53 96       	adiw	r26, 0x13	; 19
     f62:	ec e0       	ldi	r30, 0x0C	; 12
     f64:	f1 e2       	ldi	r31, 0x21	; 33
     f66:	80 81       	ld	r24, Z
     f68:	8b 8b       	std	Y+19, r24	; 0x13
     f6a:	81 81       	ldd	r24, Z+1	; 0x01
     f6c:	11 96       	adiw	r26, 0x01	; 1
     f6e:	8c 93       	st	X, r24
     f70:	11 97       	sbiw	r26, 0x01	; 1
     f72:	82 81       	ldd	r24, Z+2	; 0x02
     f74:	12 96       	adiw	r26, 0x02	; 2
     f76:	8c 93       	st	X, r24
     f78:	12 97       	sbiw	r26, 0x02	; 2
     f7a:	83 81       	ldd	r24, Z+3	; 0x03
     f7c:	13 96       	adiw	r26, 0x03	; 3
     f7e:	8c 93       	st	X, r24
     f80:	13 97       	sbiw	r26, 0x03	; 3
     f82:	84 81       	ldd	r24, Z+4	; 0x04
     f84:	14 96       	adiw	r26, 0x04	; 4
     f86:	8c 93       	st	X, r24
     f88:	14 97       	sbiw	r26, 0x04	; 4
     f8a:	85 81       	ldd	r24, Z+5	; 0x05
     f8c:	15 96       	adiw	r26, 0x05	; 5
     f8e:	8c 93       	st	X, r24
     f90:	15 97       	sbiw	r26, 0x05	; 5
     f92:	86 81       	ldd	r24, Z+6	; 0x06
     f94:	16 96       	adiw	r26, 0x06	; 6
     f96:	8c 93       	st	X, r24
     f98:	16 97       	sbiw	r26, 0x06	; 6
     f9a:	87 81       	ldd	r24, Z+7	; 0x07
     f9c:	17 96       	adiw	r26, 0x07	; 7
     f9e:	8c 93       	st	X, r24
		}
		if (level > MSEN_SEN1_TRIG && _lvl == MSEN_VALID_MIN) //Off to on transition
		{
			_lvl = level;
			links[_linkNum].setLevel(255, level > MSEN_SEN2_TRIG); //Start from max light level
			ltEnt = cntDown = false;
     fa0:	e2 e0       	ldi	r30, 0x02	; 2
     fa2:	f0 e2       	ldi	r31, 0x20	; 32
     fa4:	10 82       	st	Z, r1
     fa6:	11 82       	std	Z+1, r1	; 0x01
     fa8:	2b c0       	rjmp	.+86     	; 0x1000 <__vector_34+0x4dc>
			return;
		}
		if (level < MSEN_SEN1_TRIG && _lvl > level) //On to off transition
     faa:	39 33       	cpi	r19, 0x39	; 57
     fac:	48 f5       	brcc	.+82     	; 0x1000 <__vector_34+0x4dc>
     fae:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <msenCh+0x3>
     fb2:	38 17       	cp	r19, r24
     fb4:	28 f5       	brcc	.+74     	; 0x1000 <__vector_34+0x4dc>
		{
			_lvl = MSEN_VALID_MIN;
     fb6:	e2 e0       	ldi	r30, 0x02	; 2
     fb8:	f0 e2       	ldi	r31, 0x20	; 32
     fba:	84 e1       	ldi	r24, 0x14	; 20
     fbc:	83 83       	std	Z+3, r24	; 0x03
			_onTimeStamp = sysState.sysTick;
     fbe:	ac e0       	ldi	r26, 0x0C	; 12
     fc0:	b1 e2       	ldi	r27, 0x21	; 33
     fc2:	8c 91       	ld	r24, X
     fc4:	86 83       	std	Z+6, r24	; 0x06
     fc6:	11 96       	adiw	r26, 0x01	; 1
     fc8:	8c 91       	ld	r24, X
     fca:	11 97       	sbiw	r26, 0x01	; 1
     fcc:	87 83       	std	Z+7, r24	; 0x07
     fce:	12 96       	adiw	r26, 0x02	; 2
     fd0:	8c 91       	ld	r24, X
     fd2:	12 97       	sbiw	r26, 0x02	; 2
     fd4:	80 87       	std	Z+8, r24	; 0x08
     fd6:	13 96       	adiw	r26, 0x03	; 3
     fd8:	8c 91       	ld	r24, X
     fda:	13 97       	sbiw	r26, 0x03	; 3
     fdc:	81 87       	std	Z+9, r24	; 0x09
     fde:	14 96       	adiw	r26, 0x04	; 4
     fe0:	8c 91       	ld	r24, X
     fe2:	14 97       	sbiw	r26, 0x04	; 4
     fe4:	82 87       	std	Z+10, r24	; 0x0a
     fe6:	15 96       	adiw	r26, 0x05	; 5
     fe8:	8c 91       	ld	r24, X
     fea:	15 97       	sbiw	r26, 0x05	; 5
     fec:	83 87       	std	Z+11, r24	; 0x0b
     fee:	16 96       	adiw	r26, 0x06	; 6
     ff0:	8c 91       	ld	r24, X
     ff2:	16 97       	sbiw	r26, 0x06	; 6
     ff4:	84 87       	std	Z+12, r24	; 0x0c
     ff6:	17 96       	adiw	r26, 0x07	; 7
     ff8:	8c 91       	ld	r24, X
     ffa:	85 87       	std	Z+13, r24	; 0x0d
			cntDown = true;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	80 83       	st	Z, r24
	else if (sAdcCnt < 4)
		sysState.linksMask &= ~(0x11 << sAdcCnt); //Clear 'valid' and 'non-zero' bits
	else //sAdcCnt == 4: MSEN channel
		msenCh.setLevel((uint8_t)(result >> 6));

	sAdcCnt++;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	82 0f       	add	r24, r18
    1004:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <_edata>
	ADCA.CH0.MUXCTRL = (sAdcCnt + 1) << ADC_CH_MUXPOS_gp;
    1008:	2e 5f       	subi	r18, 0xFE	; 254
    100a:	22 0f       	add	r18, r18
    100c:	22 0f       	add	r18, r18
    100e:	22 0f       	add	r18, r18
    1010:	20 93 21 02 	sts	0x0221, r18	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
	if (sAdcCnt < 5)
    1014:	85 30       	cpi	r24, 0x05	; 5
    1016:	30 f4       	brcc	.+12     	; 0x1024 <__vector_34+0x500>
		ADCA.CTRLA |= ADC_START_bm;
    1018:	e0 e0       	ldi	r30, 0x00	; 0
    101a:	f2 e0       	ldi	r31, 0x02	; 2
    101c:	80 81       	ld	r24, Z
    101e:	84 60       	ori	r24, 0x04	; 4
    1020:	80 83       	st	Z, r24
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <__vector_34+0x504>
	else
		sAdcCnt = 0;
    1024:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <_edata>
}
    1028:	ff 91       	pop	r31
    102a:	ef 91       	pop	r30
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	bf 91       	pop	r27
    1032:	af 91       	pop	r26
    1034:	9f 91       	pop	r25
    1036:	8f 91       	pop	r24
    1038:	7f 91       	pop	r23
    103a:	6f 91       	pop	r22
    103c:	5f 91       	pop	r21
    103e:	4f 91       	pop	r20
    1040:	3f 91       	pop	r19
    1042:	2f 91       	pop	r18
    1044:	1f 91       	pop	r17
    1046:	0f 91       	pop	r16
    1048:	ff 90       	pop	r15
    104a:	ef 90       	pop	r14
    104c:	df 90       	pop	r13
    104e:	bf 90       	pop	r11
    1050:	af 90       	pop	r10
    1052:	0f 90       	pop	r0
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	0f 90       	pop	r0
    1058:	1f 90       	pop	r1
    105a:	18 95       	reti

0000105c <__vector_23>:

ISR(USARTC0_RXC_vect) //Data received from RS485
{
    105c:	1f 92       	push	r1
    105e:	0f 92       	push	r0
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	0f 92       	push	r0
    1064:	11 24       	eor	r1, r1
    1066:	2f 93       	push	r18
    1068:	3f 93       	push	r19
    106a:	4f 93       	push	r20
    106c:	5f 93       	push	r21
    106e:	6f 93       	push	r22
    1070:	7f 93       	push	r23
    1072:	8f 93       	push	r24
    1074:	9f 93       	push	r25
    1076:	af 93       	push	r26
    1078:	bf 93       	push	r27
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	ef 93       	push	r30
    1080:	ff 93       	push	r31
	#ifndef RXC_EDMA
	static uint8_t uCnt;
	static uint8_t *rxBuf;
	#endif
	uint8_t data = USARTC0.DATA;
    1082:	e0 ec       	ldi	r30, 0xC0	; 192
    1084:	f8 e0       	ldi	r31, 0x08	; 8
    1086:	80 81       	ld	r24, Z
	if (USARTC0.CTRLB & USART_MPCM_bm) //Address listening mode
    1088:	93 81       	ldd	r25, Z+3	; 0x03
    108a:	91 ff       	sbrs	r25, 1
    108c:	76 c0       	rjmp	.+236    	; 0x117a <__vector_23+0x11e>
	{
		if (CmdLC <= data && data <= CmdUC)
    108e:	9f ed       	ldi	r25, 0xDF	; 223
    1090:	98 0f       	add	r25, r24
    1092:	94 30       	cpi	r25, 0x04	; 4
    1094:	08 f0       	brcs	.+2      	; 0x1098 <__vector_23+0x3c>
    1096:	6f c0       	rjmp	.+222    	; 0x1176 <__vector_23+0x11a>
		{
			USARTC0.CTRLB &= ~USART_MPCM_bm; //Clear MPCM bit
    1098:	93 81       	ldd	r25, Z+3	; 0x03
    109a:	9d 7f       	andi	r25, 0xFD	; 253
    109c:	93 83       	std	Z+3, r25	; 0x03
			rxMode = data;
    109e:	80 93 5b 21 	sts	0x215B, r24	; 0x80215b <rxMode>
			if (data == SetConfig)
    10a2:	83 32       	cpi	r24, 0x23	; 35
    10a4:	91 f4       	brne	.+36     	; 0x10ca <__vector_23+0x6e>
			{
				rxMark = (uint8_t)sysState.sysTick;
    10a6:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <sysState>
    10aa:	80 93 5a 21 	sts	0x215A, r24	; 0x80215a <rxMark>
				#ifdef RXC_EDMA
				EDMA.CH0.TRFCNT = sizeof(systemConfig); //Bytes to receive into iobuf
    10ae:	e0 e0       	ldi	r30, 0x00	; 0
    10b0:	f1 e0       	ldi	r31, 0x01	; 1
    10b2:	81 e2       	ldi	r24, 0x21	; 33
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	86 8b       	std	Z+22, r24	; 0x16
    10b8:	97 8b       	std	Z+23, r25	; 0x17
				EDMA.CH0.CTRLA = EDMA_CH_ENABLE_bm | EDMA_CH_SINGLE_bm;
    10ba:	84 e8       	ldi	r24, 0x84	; 132
    10bc:	80 8b       	std	Z+16, r24	; 0x10
				USARTC0.CTRLA = USART_RXCINTLVL_OFF_gc; //Disable interrupt
    10be:	10 92 c2 08 	sts	0x08C2, r1	; 0x8008c2 <__TEXT_REGION_LENGTH__+0x7008c2>
				#else
				uCnt = sizeof(systemConfig);
				rxBuf = iobuf; //First byte address in structure
				#endif
				PORTC.OUTCLR = PIN4_bm;
    10c2:	80 e1       	ldi	r24, 0x10	; 16
    10c4:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
    10c8:	58 c0       	rjmp	.+176    	; 0x117a <__vector_23+0x11e>
0, 30, 96,	//Motion sensor on time, low time, low level
0, 0, 0};	//ninthLvl, rtcCorrect, CRC16

void inline UCTXen()
{
	PORTC.OUTSET = PIN1_bm;
    10ca:	82 e0       	ldi	r24, 0x02	; 2
    10cc:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10d0:	85 e1       	ldi	r24, 0x15	; 21
    10d2:	8a 95       	dec	r24
    10d4:	f1 f7       	brne	.-4      	; 0x10d2 <__vector_23+0x76>
    10d6:	00 00       	nop
				PORTC.OUTCLR = PIN4_bm;
			}
			else //Data transmit request
			{
				UCTXen();
				if (rxMode == GetConfig)
    10d8:	80 91 5b 21 	lds	r24, 0x215B	; 0x80215b <rxMode>
    10dc:	82 32       	cpi	r24, 0x22	; 34
    10de:	59 f4       	brne	.+22     	; 0x10f6 <__vector_23+0x9a>
				{
					EDMA.CH1.TRFCNT = sizeof(systemConfig);
    10e0:	e0 e0       	ldi	r30, 0x00	; 0
    10e2:	f1 e0       	ldi	r31, 0x01	; 1
    10e4:	81 e2       	ldi	r24, 0x21	; 33
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	86 a3       	std	Z+38, r24	; 0x26
    10ea:	97 a3       	std	Z+39, r25	; 0x27
					EDMA.CH1.ADDR = (uint16_t)&validConf;
    10ec:	84 e2       	ldi	r24, 0x24	; 36
    10ee:	91 e2       	ldi	r25, 0x21	; 33
    10f0:	80 a7       	std	Z+40, r24	; 0x28
    10f2:	91 a7       	std	Z+41, r25	; 0x29
    10f4:	3c c0       	rjmp	.+120    	; 0x116e <__vector_23+0x112>
				}
				else if (rxMode == GetStatus) //Get state
    10f6:	80 91 5b 21 	lds	r24, 0x215B	; 0x80215b <rxMode>
    10fa:	81 32       	cpi	r24, 0x21	; 33
    10fc:	e1 f4       	brne	.+56     	; 0x1136 <__vector_23+0xda>
				{
					memcpy(iobuf, &sysState, sizeof(systemState));
    10fe:	cc e9       	ldi	r28, 0x9C	; 156
    1100:	d0 e2       	ldi	r29, 0x20	; 32
    1102:	88 e1       	ldi	r24, 0x18	; 24
    1104:	ec e0       	ldi	r30, 0x0C	; 12
    1106:	f1 e2       	ldi	r31, 0x21	; 33
    1108:	de 01       	movw	r26, r28
    110a:	01 90       	ld	r0, Z+
    110c:	0d 92       	st	X+, r0
    110e:	8a 95       	dec	r24
    1110:	e1 f7       	brne	.-8      	; 0x110a <__vector_23+0xae>
					((systemState*)iobuf)->CRC16 = CalculateCRC16(iobuf, sizeof(systemState) - 2);
    1112:	66 e1       	ldi	r22, 0x16	; 22
    1114:	ce 01       	movw	r24, r28
    1116:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pva>
    111a:	8e 8b       	std	Y+22, r24	; 0x16
    111c:	9f 8b       	std	Y+23, r25	; 0x17
					EDMA.CH1.TRFCNT = sizeof(systemState);
    111e:	e0 e0       	ldi	r30, 0x00	; 0
    1120:	f1 e0       	ldi	r31, 0x01	; 1
    1122:	88 e1       	ldi	r24, 0x18	; 24
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	86 a3       	std	Z+38, r24	; 0x26
    1128:	97 a3       	std	Z+39, r25	; 0x27
					EDMA.CH1.ADDR = (uint16_t)iobuf;
    112a:	c0 a7       	std	Z+40, r28	; 0x28
    112c:	d1 a7       	std	Z+41, r29	; 0x29
					PORTC.OUTSET = PIN4_bm;
    112e:	80 e1       	ldi	r24, 0x10	; 16
    1130:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    1134:	1c c0       	rjmp	.+56     	; 0x116e <__vector_23+0x112>
				}
				else //Get on time
				{
					memcpy(iobuf, &channelOT, sizeof(channelsOnTime));
    1136:	88 e3       	ldi	r24, 0x38	; 56
    1138:	e4 ed       	ldi	r30, 0xD4	; 212
    113a:	f0 e2       	ldi	r31, 0x20	; 32
    113c:	ac e9       	ldi	r26, 0x9C	; 156
    113e:	b0 e2       	ldi	r27, 0x20	; 32
    1140:	01 90       	ld	r0, Z+
    1142:	0d 92       	st	X+, r0
    1144:	8a 95       	dec	r24
    1146:	e1 f7       	brne	.-8      	; 0x1140 <__vector_23+0xe4>
					((channelsOnTime*)iobuf)->CRC16 = CalculateCRC16(iobuf, sizeof(channelsOnTime) - 2);
    1148:	66 e3       	ldi	r22, 0x36	; 54
    114a:	8c e9       	ldi	r24, 0x9C	; 156
    114c:	90 e2       	ldi	r25, 0x20	; 32
    114e:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pva>
    1152:	ac e9       	ldi	r26, 0x9C	; 156
    1154:	b0 e2       	ldi	r27, 0x20	; 32
    1156:	d6 96       	adiw	r26, 0x36	; 54
    1158:	8d 93       	st	X+, r24
    115a:	9c 93       	st	X, r25
    115c:	d7 97       	sbiw	r26, 0x37	; 55
					EDMA.CH1.TRFCNT = sizeof(channelsOnTime);
    115e:	e0 e0       	ldi	r30, 0x00	; 0
    1160:	f1 e0       	ldi	r31, 0x01	; 1
    1162:	88 e3       	ldi	r24, 0x38	; 56
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	86 a3       	std	Z+38, r24	; 0x26
    1168:	97 a3       	std	Z+39, r25	; 0x27
					EDMA.CH1.ADDR = (uint16_t)iobuf;
    116a:	a0 a7       	std	Z+40, r26	; 0x28
    116c:	b1 a7       	std	Z+41, r27	; 0x29
				}
				EDMA.CH1.CTRLA = EDMA_CH_ENABLE_bm | EDMA_CH_SINGLE_bm;
    116e:	84 e8       	ldi	r24, 0x84	; 132
    1170:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1174:	02 c0       	rjmp	.+4      	; 0x117a <__vector_23+0x11e>
			}
		}
		else
			rxMode = 0;
    1176:	10 92 5b 21 	sts	0x215B, r1	; 0x80215b <rxMode>
			if (CalculateCRC16(iobuf, sizeof(systemConfig) - 2) == ((systemConfig*)iobuf)->CRC16)
				ApplyConfig();
		}
	}
	#endif
}
    117a:	ff 91       	pop	r31
    117c:	ef 91       	pop	r30
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	bf 91       	pop	r27
    1184:	af 91       	pop	r26
    1186:	9f 91       	pop	r25
    1188:	8f 91       	pop	r24
    118a:	7f 91       	pop	r23
    118c:	6f 91       	pop	r22
    118e:	5f 91       	pop	r21
    1190:	4f 91       	pop	r20
    1192:	3f 91       	pop	r19
    1194:	2f 91       	pop	r18
    1196:	0f 90       	pop	r0
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	0f 90       	pop	r0
    119c:	1f 90       	pop	r1
    119e:	18 95       	reti

000011a0 <__vector_3>:

#ifdef RXC_EDMA
ISR(EDMA_CH0_vect)
{
    11a0:	1f 92       	push	r1
    11a2:	0f 92       	push	r0
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	0f 92       	push	r0
    11a8:	11 24       	eor	r1, r1
    11aa:	2f 93       	push	r18
    11ac:	3f 93       	push	r19
    11ae:	4f 93       	push	r20
    11b0:	5f 93       	push	r21
    11b2:	6f 93       	push	r22
    11b4:	7f 93       	push	r23
    11b6:	8f 93       	push	r24
    11b8:	9f 93       	push	r25
    11ba:	af 93       	push	r26
    11bc:	bf 93       	push	r27
    11be:	ef 93       	push	r30
    11c0:	ff 93       	push	r31
	rxMode = 0;
    11c2:	10 92 5b 21 	sts	0x215B, r1	; 0x80215b <rxMode>
	USARTC0.CTRLB |= USART_MPCM_bm; //Set MPCM bit
    11c6:	e0 ec       	ldi	r30, 0xC0	; 192
    11c8:	f8 e0       	ldi	r31, 0x08	; 8
    11ca:	83 81       	ldd	r24, Z+3	; 0x03
    11cc:	82 60       	ori	r24, 0x02	; 2
    11ce:	83 83       	std	Z+3, r24	; 0x03
	USARTC0.CTRLA = USART_DRIE_bm | USART_RXCINTLVL_MED_gc;
    11d0:	80 e6       	ldi	r24, 0x60	; 96
    11d2:	82 83       	std	Z+2, r24	; 0x02
	if (CalculateCRC16(iobuf, sizeof(systemConfig) - 2) == ((systemConfig*)iobuf)->CRC16)
    11d4:	6f e1       	ldi	r22, 0x1F	; 31
    11d6:	8c e9       	ldi	r24, 0x9C	; 156
    11d8:	90 e2       	ldi	r25, 0x20	; 32
    11da:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pva>
    11de:	20 91 bb 20 	lds	r18, 0x20BB	; 0x8020bb <iobuf+0x1f>
    11e2:	30 91 bc 20 	lds	r19, 0x20BC	; 0x8020bc <iobuf+0x20>
    11e6:	82 17       	cp	r24, r18
    11e8:	93 07       	cpc	r25, r19
    11ea:	11 f4       	brne	.+4      	; 0x11f0 <__vector_3+0x50>
		ApplyConfig();
    11ec:	0e 94 8d 00 	call	0x11a	; 0x11a <_Z11ApplyConfigv>
	EDMA.CH0.CTRLB = EDMA_CH_TRNIF_bm;
    11f0:	80 e1       	ldi	r24, 0x10	; 16
    11f2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <__TEXT_REGION_LENGTH__+0x700111>
}
    11f6:	ff 91       	pop	r31
    11f8:	ef 91       	pop	r30
    11fa:	bf 91       	pop	r27
    11fc:	af 91       	pop	r26
    11fe:	9f 91       	pop	r25
    1200:	8f 91       	pop	r24
    1202:	7f 91       	pop	r23
    1204:	6f 91       	pop	r22
    1206:	5f 91       	pop	r21
    1208:	4f 91       	pop	r20
    120a:	3f 91       	pop	r19
    120c:	2f 91       	pop	r18
    120e:	0f 90       	pop	r0
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	0f 90       	pop	r0
    1214:	1f 90       	pop	r1
    1216:	18 95       	reti

00001218 <__vector_4>:
#endif

ISR(EDMA_CH1_vect) //Packet has been sent completely over RS485
{
    1218:	1f 92       	push	r1
    121a:	0f 92       	push	r0
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	0f 92       	push	r0
    1220:	11 24       	eor	r1, r1
    1222:	8f 93       	push	r24
	UCRXen(); //Set bus in the idle state
    1224:	82 e0       	ldi	r24, 0x02	; 2
    1226:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	rxMode = 0;
    122a:	10 92 5b 21 	sts	0x215B, r1	; 0x80215b <rxMode>
	EDMA.CH1.CTRLB = EDMA_CH_TRNIF_bm;
    122e:	80 e1       	ldi	r24, 0x10	; 16
    1230:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x700121>
}
    1234:	8f 91       	pop	r24
    1236:	0f 90       	pop	r0
    1238:	0f be       	out	0x3f, r0	; 63
    123a:	0f 90       	pop	r0
    123c:	1f 90       	pop	r1
    123e:	18 95       	reti

00001240 <__vector_36>:

ISR(TCD5_OVF_vect)
{
    1240:	1f 92       	push	r1
    1242:	0f 92       	push	r0
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	0f 92       	push	r0
    1248:	11 24       	eor	r1, r1
    124a:	2f 93       	push	r18
    124c:	8f 93       	push	r24
    124e:	9f 93       	push	r25
    1250:	ef 93       	push	r30
    1252:	ff 93       	push	r31
	PORTD.OUT = *framePtr++;
    1254:	e0 91 45 21 	lds	r30, 0x2145	; 0x802145 <framePtr>
    1258:	f0 91 46 21 	lds	r31, 0x2146	; 0x802146 <framePtr+0x1>
    125c:	cf 01       	movw	r24, r30
    125e:	01 96       	adiw	r24, 0x01	; 1
    1260:	80 93 45 21 	sts	0x2145, r24	; 0x802145 <framePtr>
    1264:	90 93 46 21 	sts	0x2146, r25	; 0x802146 <framePtr+0x1>
    1268:	20 81       	ld	r18, Z
    126a:	20 93 64 06 	sts	0x0664, r18	; 0x800664 <__TEXT_REGION_LENGTH__+0x700664>
	if (framePtr == DSI8xFrames + sizeof(DSI8xFrames) - 1)
    126e:	89 55       	subi	r24, 0x59	; 89
    1270:	91 42       	sbci	r25, 0x21	; 33
    1272:	11 f4       	brne	.+4      	; 0x1278 <__vector_36+0x38>
		TCD5.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    1274:	10 92 46 09 	sts	0x0946, r1	; 0x800946 <__TEXT_REGION_LENGTH__+0x700946>
	TCD5.INTFLAGS = TC5_OVFIF_bm;
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <__TEXT_REGION_LENGTH__+0x70094c>
}
    127e:	ff 91       	pop	r31
    1280:	ef 91       	pop	r30
    1282:	9f 91       	pop	r25
    1284:	8f 91       	pop	r24
    1286:	2f 91       	pop	r18
    1288:	0f 90       	pop	r0
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	0f 90       	pop	r0
    128e:	1f 90       	pop	r1
    1290:	18 95       	reti

00001292 <_Z7mcuInitv>:

inline void mcuInit()
{
	//Port A configuration: 0-5 analog inputs, 7 inverted output
	PORTA.DIRSET = PIN7_bm;
    1292:	e0 e0       	ldi	r30, 0x00	; 0
    1294:	f6 e0       	ldi	r31, 0x06	; 6
    1296:	80 e8       	ldi	r24, 0x80	; 128
    1298:	81 83       	std	Z+1, r24	; 0x01
	PORTCFG.MPCMASK = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm;
    129a:	a0 eb       	ldi	r26, 0xB0	; 176
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	8f e3       	ldi	r24, 0x3F	; 63
    12a0:	8c 93       	st	X, r24
	PORTA.PIN0CTRL = PORT_OPC_TOTEM_gc | PORT_ISC_INPUT_DISABLE_gc;
    12a2:	87 e0       	ldi	r24, 0x07	; 7
    12a4:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN7CTRL = PORT_OPC_TOTEM_gc | PORT_INVEN_bm;
    12a6:	80 e4       	ldi	r24, 0x40	; 64
    12a8:	87 8b       	std	Z+23, r24	; 0x17
	//Port C configuration: 0-1, 3-7 outputs
	PORTC.DIRSET = PIN0_bm | PIN1_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
    12aa:	8b ef       	ldi	r24, 0xFB	; 251
    12ac:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
	//Port D configuration: 0-7 inverted outputs
	PORTD.DIRSET = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
    12b0:	e0 e6       	ldi	r30, 0x60	; 96
    12b2:	f6 e0       	ldi	r31, 0x06	; 6
    12b4:	8f ef       	ldi	r24, 0xFF	; 255
    12b6:	81 83       	std	Z+1, r24	; 0x01
	PORTCFG.MPCMASK = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
    12b8:	8c 93       	st	X, r24
	PORTD.PIN0CTRL = PORT_OPC_TOTEM_gc | PORT_INVEN_bm | PORT_ISC_INPUT_DISABLE_gc;
    12ba:	87 e4       	ldi	r24, 0x47	; 71
    12bc:	80 8b       	std	Z+16, r24	; 0x10
	//Clock configuration: 32MHz RC with DFLL from XOSC 32768Hz
	OSC.XOSCCTRL = OSC_XOSCSEL_32KHz_gc;
    12be:	e0 e5       	ldi	r30, 0x50	; 80
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	82 e0       	ldi	r24, 0x02	; 2
    12c4:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |= OSC_RC32MEN_bm | OSC_XOSCEN_bm;
    12c6:	80 81       	ld	r24, Z
    12c8:	8a 60       	ori	r24, 0x0A	; 10
    12ca:	80 83       	st	Z, r24
	while (!(OSC.STATUS & OSC_XOSCRDY_bm));
    12cc:	81 81       	ldd	r24, Z+1	; 0x01
    12ce:	83 ff       	sbrs	r24, 3
    12d0:	fd cf       	rjmp	.-6      	; 0x12cc <_Z7mcuInitv+0x3a>
	while (!(OSC.STATUS & OSC_RC32MRDY_bm));
    12d2:	e0 e5       	ldi	r30, 0x50	; 80
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	81 81       	ldd	r24, Z+1	; 0x01
    12d8:	81 ff       	sbrs	r24, 1
    12da:	fd cf       	rjmp	.-6      	; 0x12d6 <_Z7mcuInitv+0x44>
	OSC.DFLLCTRL = OSC_RC32MCREF_XOSC32K_gc;
    12dc:	a0 e5       	ldi	r26, 0x50	; 80
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	82 e0       	ldi	r24, 0x02	; 2
    12e2:	16 96       	adiw	r26, 0x06	; 6
    12e4:	8c 93       	st	X, r24
    12e6:	16 97       	sbiw	r26, 0x06	; 6
	DFLLRC32M.CTRL = DFLL_ENABLE_bm;
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
	CCP = CCP_IOREG_gc;
    12ee:	98 ed       	ldi	r25, 0xD8	; 216
    12f0:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
    12f2:	e0 e4       	ldi	r30, 0x40	; 64
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 83       	st	Z, r24
	OSC.CTRL = OSC_RC32MEN_bm | OSC_XOSCEN_bm; //Disable unused clock sources
    12f8:	8a e0       	ldi	r24, 0x0A	; 10
    12fa:	8c 93       	st	X, r24
	CLK.RTCCTRL = CLK_RTCSRC_TOSC_gc | CLK_RTCEN_bm; //1024Hz RTC clock source
    12fc:	83 e0       	ldi	r24, 0x03	; 3
    12fe:	83 83       	std	Z+3, r24	; 0x03
	while (RTC.STATUS & RTC_SYNCBUSY_bm);
    1300:	e0 e0       	ldi	r30, 0x00	; 0
    1302:	f4 e0       	ldi	r31, 0x04	; 4
    1304:	81 81       	ldd	r24, Z+1	; 0x01
    1306:	80 fd       	sbrc	r24, 0
    1308:	fd cf       	rjmp	.-6      	; 0x1304 <_Z7mcuInitv+0x72>
	CCP = CCP_IOREG_gc;
    130a:	88 ed       	ldi	r24, 0xD8	; 216
    130c:	84 bf       	out	0x34, r24	; 52
	CLK.LOCK = CLK_LOCK_bm; //Disable further changes in clock system
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	80 93 42 00 	sts	0x0042, r24	; 0x800042 <__TEXT_REGION_LENGTH__+0x700042>
	//PMIC: enable interrupts
	PMIC.CTRL = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
    1314:	47 e0       	ldi	r20, 0x07	; 7
    1316:	40 93 a2 00 	sts	0x00A2, r20	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	//RTC configuration: 1024 / 2 = 512Hz clock, medium level interrupt
	RTC.PER = 16; //32 overflows per second
    131a:	e0 e0       	ldi	r30, 0x00	; 0
    131c:	f4 e0       	ldi	r31, 0x04	; 4
    131e:	20 e1       	ldi	r18, 0x10	; 16
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	22 87       	std	Z+10, r18	; 0x0a
    1324:	33 87       	std	Z+11, r19	; 0x0b
	RTC.INTCTRL = RTC_OVFINTLVL_MED_gc;
    1326:	92 e0       	ldi	r25, 0x02	; 2
    1328:	92 83       	std	Z+2, r25	; 0x02
	RTC.CTRL = RTC_PRESCALER_DIV2_gc;
    132a:	90 83       	st	Z, r25
	RTC.CNT = 0;
    132c:	10 86       	std	Z+8, r1	; 0x08
    132e:	11 86       	std	Z+9, r1	; 0x09
	//USARTC configuration: start / 9 data / 2 stop; 76.8kbps baud, multi-processor communication
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm | USART_MPCM_bm;
    1330:	e0 ec       	ldi	r30, 0xC0	; 192
    1332:	f8 e0       	ldi	r31, 0x08	; 8
    1334:	9a e1       	ldi	r25, 0x1A	; 26
    1336:	93 83       	std	Z+3, r25	; 0x03
	USARTC0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_SBMODE_bm | USART_CHSIZE_9BIT_gc;
    1338:	9f e0       	ldi	r25, 0x0F	; 15
    133a:	94 83       	std	Z+4, r25	; 0x04
	USARTC0.BAUDCTRLA = 12 << USART_BSEL_gp;
    133c:	9c e0       	ldi	r25, 0x0C	; 12
    133e:	96 83       	std	Z+6, r25	; 0x06
	USARTC0.BAUDCTRLB = 1 << USART_BSCALE_gp;
    1340:	30 e1       	ldi	r19, 0x10	; 16
    1342:	37 83       	std	Z+7, r19	; 0x07
	USARTC0.CTRLA = USART_DRIE_bm | USART_RXCINTLVL_MED_gc;
    1344:	90 e6       	ldi	r25, 0x60	; 96
    1346:	92 83       	std	Z+2, r25	; 0x02
	//ADC configuration: 1MHz, 15bit oversampling
	ADCA.CTRLA = ADC_ENABLE_bm;
    1348:	e0 e0       	ldi	r30, 0x00	; 0
    134a:	f2 e0       	ldi	r31, 0x02	; 2
    134c:	80 83       	st	Z, r24
	ADCA.CTRLB = ADC_CONMODE_bm | ADC_RESOLUTION_MT12BIT_gc; //Signed mode
    134e:	92 e1       	ldi	r25, 0x12	; 18
    1350:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;
    1352:	90 e2       	ldi	r25, 0x20	; 32
    1354:	92 83       	std	Z+2, r25	; 0x02
	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc;
    1356:	23 e0       	ldi	r18, 0x03	; 3
    1358:	24 83       	std	Z+4, r18	; 0x04
	ADCA.SAMPCTRL = 7 << ADC_SAMPVAL_gp;
    135a:	40 87       	std	Z+8, r20	; 0x08
	ADCA.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc | ADC_CH_GAIN_1X_gc;
    135c:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.CH0.INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc;
    135e:	82 a3       	std	Z+34, r24	; 0x22
	ADCA.CH0.AVGCTRL = ADC_CH_SAMPNUM_16X_gc; //This will produce 15 bit result
    1360:	44 e0       	ldi	r20, 0x04	; 4
    1362:	44 a7       	std	Z+44, r20	; 0x2c
	//TCC4 configuration: 8MHz, dual slope 244Hz (heartbeat LED)
	TCC4.CTRLA = TC_CLKSEL_DIV4_gc;
    1364:	e0 e0       	ldi	r30, 0x00	; 0
    1366:	f8 e0       	ldi	r31, 0x08	; 8
    1368:	20 83       	st	Z, r18
	TCC4.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_DSTOP_gc;
    136a:	25 e0       	ldi	r18, 0x05	; 5
    136c:	21 83       	std	Z+1, r18	; 0x01
	TCC4.CTRLC = TC4_POLA_bm;
    136e:	32 83       	std	Z+2, r19	; 0x02
	TCC4.CTRLE = TC_CCAMODE_COMP_gc;
    1370:	84 83       	std	Z+4, r24	; 0x04
	TCC4.PERBUF = 16384;
    1372:	40 e0       	ldi	r20, 0x00	; 0
    1374:	50 e4       	ldi	r21, 0x40	; 64
    1376:	46 ab       	std	Z+54, r20	; 0x36
    1378:	57 ab       	std	Z+55, r21	; 0x37
	TCC4.CCABUF = 0;
    137a:	10 ae       	std	Z+56, r1	; 0x38
    137c:	11 ae       	std	Z+57, r1	; 0x39
	TCC4.CTRLGCLR = TC4_STOP_bm;
    137e:	90 87       	std	Z+8, r25	; 0x08
	//TCD5 configuration: 500kHz, 1199Hz overflow rate
	TCD5.CTRLA = TC_CLKSEL_DIV64_gc;
    1380:	e0 e4       	ldi	r30, 0x40	; 64
    1382:	f9 e0       	ldi	r31, 0x09	; 9
    1384:	20 83       	st	Z, r18
	TCD5.CTRLB = TC_WGMODE_NORMAL_gc;
    1386:	11 82       	std	Z+1, r1	; 0x01
	TCD5.PERBUF = 417;
    1388:	21 ea       	ldi	r18, 0xA1	; 161
    138a:	31 e0       	ldi	r19, 0x01	; 1
    138c:	26 ab       	std	Z+54, r18	; 0x36
    138e:	37 ab       	std	Z+55, r19	; 0x37
	TCD5.CTRLGCLR = TC5_STOP_bm;
    1390:	90 87       	std	Z+8, r25	; 0x08
	//EDMA peripheral channel 0: USARTC read transfer
	EDMA.CH0.CTRLB = EDMA_CH_TRNINTLVL_LO_gc;
    1392:	e0 e0       	ldi	r30, 0x00	; 0
    1394:	f1 e0       	ldi	r31, 0x01	; 1
    1396:	81 8b       	std	Z+17, r24	; 0x11
	EDMA.CH0.ADDRCTRL = EDMA_CH_RELOAD_BLOCK_gc | EDMA_CH_DIR_INC_gc;
    1398:	91 e1       	ldi	r25, 0x11	; 17
    139a:	92 8b       	std	Z+18, r25	; 0x12
	EDMA.CH0.ADDR = (register16_t)iobuf;
    139c:	2c e9       	ldi	r18, 0x9C	; 156
    139e:	30 e2       	ldi	r19, 0x20	; 32
    13a0:	20 8f       	std	Z+24, r18	; 0x18
    13a2:	31 8f       	std	Z+25, r19	; 0x19
	EDMA.CH0.TRIGSRC = EDMA_CH_TRIGSRC_USARTC0_RXC_gc;
    13a4:	2c e4       	ldi	r18, 0x4C	; 76
    13a6:	24 8b       	std	Z+20, r18	; 0x14
	//EDMA peripheral channel 1: USARTC write transfer
	EDMA.CH1.CTRLB = EDMA_CH_TRNINTLVL_LO_gc; //Low-level interrupt
    13a8:	81 a3       	std	Z+33, r24	; 0x21
	EDMA.CH1.ADDRCTRL = EDMA_CH_RELOAD_BLOCK_gc | EDMA_CH_DIR_INC_gc;
    13aa:	92 a3       	std	Z+34, r25	; 0x22
	EDMA.CH1.TRIGSRC = EDMA_CH_TRIGSRC_USARTC0_DRE_gc;
    13ac:	8d e4       	ldi	r24, 0x4D	; 77
    13ae:	84 a3       	std	Z+36, r24	; 0x24
	//EDMA: 1 standard and 2 peripheral channels
	EDMA.CTRL = EDMA_ENABLE_bm | EDMA_CHMODE_STD2_gc | EDMA_DBUFMODE_DISABLE_gc | EDMA_PRIMODE_RR0123_gc;
    13b0:	80 ea       	ldi	r24, 0xA0	; 160
    13b2:	80 83       	st	Z, r24
	sei();
    13b4:	78 94       	sei
    13b6:	08 95       	ret

000013b8 <main>:
}

int main(void)
{
	mcuInit();
    13b8:	0e 94 49 09 	call	0x1292	; 0x1292 <_Z7mcuInitv>
	eeprom_read_block(&channelOT, &savedCOT, sizeof(channelsOnTime));
    13bc:	48 e3       	ldi	r20, 0x38	; 56
    13be:	50 e0       	ldi	r21, 0x00	; 0
    13c0:	61 e2       	ldi	r22, 0x21	; 33
    13c2:	70 e0       	ldi	r23, 0x00	; 0
    13c4:	84 ed       	ldi	r24, 0xD4	; 212
    13c6:	90 e2       	ldi	r25, 0x20	; 32
    13c8:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <eeprom_read_block>
	eeprom_read_block(iobuf, &savedConfig, sizeof(systemConfig) - 2);
    13cc:	4f e1       	ldi	r20, 0x1F	; 31
    13ce:	50 e0       	ldi	r21, 0x00	; 0
    13d0:	60 e0       	ldi	r22, 0x00	; 0
    13d2:	70 e0       	ldi	r23, 0x00	; 0
    13d4:	8c e9       	ldi	r24, 0x9C	; 156
    13d6:	90 e2       	ldi	r25, 0x20	; 32
    13d8:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <eeprom_read_block>
	((systemConfig*)iobuf)->overrideCfg = ((systemConfig*)iobuf)->groupConf = 0; //Ignore saved overrides
    13dc:	cc e9       	ldi	r28, 0x9C	; 156
    13de:	d0 e2       	ldi	r29, 0x20	; 32
    13e0:	1d 8e       	std	Y+29, r1	; 0x1d
    13e2:	19 8a       	std	Y+17, r1	; 0x11
	((systemConfig*)iobuf)->CRC16 = CalculateCRC16(iobuf, sizeof(systemConfig) - 2);
    13e4:	6f e1       	ldi	r22, 0x1F	; 31
    13e6:	ce 01       	movw	r24, r28
    13e8:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pva>
    13ec:	8f 8f       	std	Y+31, r24	; 0x1f
    13ee:	98 a3       	std	Y+32, r25	; 0x20
	ApplyConfig();
    13f0:	0e 94 8d 00 	call	0x11a	; 0x11a <_Z11ApplyConfigv>
    13f4:	ff cf       	rjmp	.-2      	; 0x13f4 <main+0x3c>

000013f6 <_GLOBAL__sub_I_gLevels>:
	uint64_t _tickLastChg, _onTimeStamp;

public:
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    13f6:	e0 e1       	ldi	r30, 0x10	; 16
    13f8:	f0 e2       	ldi	r31, 0x20	; 32
    13fa:	93 e0       	ldi	r25, 0x03	; 3
    13fc:	91 83       	std	Z+1, r25	; 0x01
		_link[0] = posA;
    13fe:	87 e0       	ldi	r24, 0x07	; 7
    1400:	83 83       	std	Z+3, r24	; 0x03
		_link[1] = posB;
    1402:	86 e0       	ldi	r24, 0x06	; 6
    1404:	84 83       	std	Z+4, r24	; 0x04
		_link[2] = posC;
    1406:	85 e0       	ldi	r24, 0x05	; 5
    1408:	85 83       	std	Z+5, r24	; 0x05
		_linkNum = num;
    140a:	12 82       	std	Z+2, r1	; 0x02
		_chActMask = 0x10 << num;
    140c:	80 e1       	ldi	r24, 0x10	; 16
    140e:	82 8b       	std	Z+18, r24	; 0x12
	uint64_t _tickLastChg, _onTimeStamp;

public:
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    1410:	94 a3       	std	Z+36, r25	; 0x24
		_link[0] = posA;
    1412:	84 e0       	ldi	r24, 0x04	; 4
    1414:	86 a3       	std	Z+38, r24	; 0x26
		_link[1] = posB;
    1416:	97 a3       	std	Z+39, r25	; 0x27
		_link[2] = posC;
    1418:	82 e0       	ldi	r24, 0x02	; 2
    141a:	80 a7       	std	Z+40, r24	; 0x28
		_linkNum = num;
    141c:	21 e0       	ldi	r18, 0x01	; 1
    141e:	25 a3       	std	Z+37, r18	; 0x25
		_chActMask = 0x10 << num;
    1420:	30 e2       	ldi	r19, 0x20	; 32
    1422:	35 ab       	std	Z+53, r19	; 0x35
	uint64_t _tickLastChg, _onTimeStamp;

public:
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    1424:	80 93 57 20 	sts	0x2057, r24	; 0x802057 <links+0x47>
		_link[0] = posA;
    1428:	20 93 59 20 	sts	0x2059, r18	; 0x802059 <links+0x49>
		_link[1] = posB;
    142c:	10 92 5a 20 	sts	0x205A, r1	; 0x80205a <links+0x4a>
		_link[2] = posC;
    1430:	10 92 5b 20 	sts	0x205B, r1	; 0x80205b <links+0x4b>
		_linkNum = num;
    1434:	80 93 58 20 	sts	0x2058, r24	; 0x802058 <links+0x48>
		_chActMask = 0x10 << num;
    1438:	30 e4       	ldi	r19, 0x40	; 64
    143a:	30 93 68 20 	sts	0x2068, r19	; 0x802068 <links+0x58>
	uint64_t _tickLastChg, _onTimeStamp;

public:
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    143e:	20 93 7a 20 	sts	0x207A, r18	; 0x80207a <links+0x6a>
		_link[0] = posA;
    1442:	28 e0       	ldi	r18, 0x08	; 8
    1444:	20 93 7c 20 	sts	0x207C, r18	; 0x80207c <links+0x6c>
		_link[1] = posB;
    1448:	10 92 7d 20 	sts	0x207D, r1	; 0x80207d <links+0x6d>
		_link[2] = posC;
    144c:	10 92 7e 20 	sts	0x207E, r1	; 0x80207e <links+0x6e>
		_linkNum = num;
    1450:	90 93 7b 20 	sts	0x207B, r25	; 0x80207b <links+0x6b>
		_chActMask = 0x10 << num;
    1454:	90 e8       	ldi	r25, 0x80	; 128
    1456:	90 93 8b 20 	sts	0x208B, r25	; 0x80208b <links+0x7b>
	uint8_t _onTime, _fTime;
	uint64_t _onTimeStamp;
public:
	Msen(uint8_t actLink)
	{
		_linkNum = actLink;
    145a:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <msenCh+0x2>
    145e:	08 95       	ret

00001460 <__divmodhi4>:
    1460:	97 fb       	bst	r25, 7
    1462:	07 2e       	mov	r0, r23
    1464:	16 f4       	brtc	.+4      	; 0x146a <__divmodhi4+0xa>
    1466:	00 94       	com	r0
    1468:	07 d0       	rcall	.+14     	; 0x1478 <__divmodhi4_neg1>
    146a:	77 fd       	sbrc	r23, 7
    146c:	09 d0       	rcall	.+18     	; 0x1480 <__divmodhi4_neg2>
    146e:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__udivmodhi4>
    1472:	07 fc       	sbrc	r0, 7
    1474:	05 d0       	rcall	.+10     	; 0x1480 <__divmodhi4_neg2>
    1476:	3e f4       	brtc	.+14     	; 0x1486 <__divmodhi4_exit>

00001478 <__divmodhi4_neg1>:
    1478:	90 95       	com	r25
    147a:	81 95       	neg	r24
    147c:	9f 4f       	sbci	r25, 0xFF	; 255
    147e:	08 95       	ret

00001480 <__divmodhi4_neg2>:
    1480:	70 95       	com	r23
    1482:	61 95       	neg	r22
    1484:	7f 4f       	sbci	r23, 0xFF	; 255

00001486 <__divmodhi4_exit>:
    1486:	08 95       	ret

00001488 <__adddi3_s8>:
    1488:	00 24       	eor	r0, r0
    148a:	a7 fd       	sbrc	r26, 7
    148c:	00 94       	com	r0
    148e:	2a 0f       	add	r18, r26
    1490:	30 1d       	adc	r19, r0
    1492:	40 1d       	adc	r20, r0
    1494:	50 1d       	adc	r21, r0
    1496:	60 1d       	adc	r22, r0
    1498:	70 1d       	adc	r23, r0
    149a:	80 1d       	adc	r24, r0
    149c:	90 1d       	adc	r25, r0
    149e:	08 95       	ret

000014a0 <__udivmodhi4>:
    14a0:	aa 1b       	sub	r26, r26
    14a2:	bb 1b       	sub	r27, r27
    14a4:	51 e1       	ldi	r21, 0x11	; 17
    14a6:	07 c0       	rjmp	.+14     	; 0x14b6 <__udivmodhi4_ep>

000014a8 <__udivmodhi4_loop>:
    14a8:	aa 1f       	adc	r26, r26
    14aa:	bb 1f       	adc	r27, r27
    14ac:	a6 17       	cp	r26, r22
    14ae:	b7 07       	cpc	r27, r23
    14b0:	10 f0       	brcs	.+4      	; 0x14b6 <__udivmodhi4_ep>
    14b2:	a6 1b       	sub	r26, r22
    14b4:	b7 0b       	sbc	r27, r23

000014b6 <__udivmodhi4_ep>:
    14b6:	88 1f       	adc	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	5a 95       	dec	r21
    14bc:	a9 f7       	brne	.-22     	; 0x14a8 <__udivmodhi4_loop>
    14be:	80 95       	com	r24
    14c0:	90 95       	com	r25
    14c2:	bc 01       	movw	r22, r24
    14c4:	cd 01       	movw	r24, r26
    14c6:	08 95       	ret

000014c8 <__tablejump2__>:
    14c8:	ee 0f       	add	r30, r30
    14ca:	ff 1f       	adc	r31, r31
    14cc:	05 90       	lpm	r0, Z+
    14ce:	f4 91       	lpm	r31, Z
    14d0:	e0 2d       	mov	r30, r0
    14d2:	09 94       	ijmp

000014d4 <eeprom_read_block>:
    14d4:	60 50       	subi	r22, 0x00	; 0
    14d6:	70 4f       	sbci	r23, 0xF0	; 240
    14d8:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <memcpy>

000014dc <eeprom_update_block>:
    14dc:	dc 01       	movw	r26, r24
    14de:	a4 0f       	add	r26, r20
    14e0:	b5 1f       	adc	r27, r21
    14e2:	41 50       	subi	r20, 0x01	; 1
    14e4:	50 40       	sbci	r21, 0x00	; 0
    14e6:	48 f0       	brcs	.+18     	; 0x14fa <eeprom_update_block+0x1e>
    14e8:	cb 01       	movw	r24, r22
    14ea:	84 0f       	add	r24, r20
    14ec:	95 1f       	adc	r25, r21
    14ee:	2e 91       	ld	r18, -X
    14f0:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <eeprom_update_r18>
    14f4:	41 50       	subi	r20, 0x01	; 1
    14f6:	50 40       	sbci	r21, 0x00	; 0
    14f8:	d0 f7       	brcc	.-12     	; 0x14ee <eeprom_update_block+0x12>
    14fa:	08 95       	ret

000014fc <eeprom_update_byte>:
    14fc:	26 2f       	mov	r18, r22

000014fe <eeprom_update_r18>:
    14fe:	0e 94 a3 0a 	call	0x1546	; 0x1546 <eeprom_mapen>
    1502:	00 80       	ld	r0, Z
    1504:	02 16       	cp	r0, r18
    1506:	19 f0       	breq	.+6      	; 0x150e <eeprom_update_r18+0x10>
    1508:	0e 94 8a 0a 	call	0x1514	; 0x1514 <eeprom_write_r18>
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	01 97       	sbiw	r24, 0x01	; 1
    1510:	08 95       	ret

00001512 <eeprom_write_byte>:
    1512:	26 2f       	mov	r18, r22

00001514 <eeprom_write_r18>:
    1514:	af 93       	push	r26
    1516:	bf 93       	push	r27
    1518:	e0 ec       	ldi	r30, 0xC0	; 192
    151a:	f1 e0       	ldi	r31, 0x01	; 1
    151c:	37 85       	ldd	r19, Z+15	; 0x0f
    151e:	37 fd       	sbrc	r19, 7
    1520:	fd cf       	rjmp	.-6      	; 0x151c <eeprom_write_r18+0x8>
    1522:	dc 01       	movw	r26, r24
    1524:	a0 50       	subi	r26, 0x00	; 0
    1526:	b0 4f       	sbci	r27, 0xF0	; 240
    1528:	2c 93       	st	X, r18
    152a:	25 e3       	ldi	r18, 0x35	; 53
    152c:	22 87       	std	Z+10, r18	; 0x0a
    152e:	28 ed       	ldi	r18, 0xD8	; 216
    1530:	31 e0       	ldi	r19, 0x01	; 1
    1532:	24 bf       	out	0x34, r18	; 52
    1534:	33 87       	std	Z+11, r19	; 0x0b
    1536:	01 96       	adiw	r24, 0x01	; 1
    1538:	bf 91       	pop	r27
    153a:	af 91       	pop	r26
    153c:	08 95       	ret

0000153e <eeprom_read_byte>:
    153e:	03 d0       	rcall	.+6      	; 0x1546 <eeprom_mapen>
    1540:	80 81       	ld	r24, Z
    1542:	99 27       	eor	r25, r25
    1544:	08 95       	ret

00001546 <eeprom_mapen>:
    1546:	fc 01       	movw	r30, r24
    1548:	e0 50       	subi	r30, 0x00	; 0
    154a:	f0 4f       	sbci	r31, 0xF0	; 240
    154c:	08 95       	ret

0000154e <memcpy>:
    154e:	fb 01       	movw	r30, r22
    1550:	dc 01       	movw	r26, r24
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <memcpy+0xa>
    1554:	01 90       	ld	r0, Z+
    1556:	0d 92       	st	X+, r0
    1558:	41 50       	subi	r20, 0x01	; 1
    155a:	50 40       	sbci	r21, 0x00	; 0
    155c:	d8 f7       	brcc	.-10     	; 0x1554 <memcpy+0x6>
    155e:	08 95       	ret

00001560 <_exit>:
    1560:	f8 94       	cli

00001562 <__stop_program>:
    1562:	ff cf       	rjmp	.-2      	; 0x1562 <__stop_program>
