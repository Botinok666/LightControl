
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001460  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000154d  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000016a  00802000  00802000  000014f4  2**0
                  ALLOC
  3 .eeprom       00000059  00810000  00810000  000014f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000154d  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001580  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000108  00000000  00000000  000015c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000050c6  00000000  00000000  000016c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001f4a  00000000  00000000  0000678e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000eea  00000000  00000000  000086d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002b8  00000000  00000000  000095c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000357e  00000000  00000000  0000987c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000fe7  00000000  00000000  0000cdfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000190  00000000  00000000  0000dde1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 57 00 	jmp	0xae	; 0xae <__ctors_end>
       4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      10:	0c 94 8b 08 	jmp	0x1116	; 0x1116 <__vector_4>
      14:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__vector_5>
      18:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      1c:	0c 94 af 01 	jmp	0x35e	; 0x35e <__vector_7>
      20:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      24:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      28:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      2c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      30:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      34:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      38:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      3c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      40:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      44:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      48:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      4c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      50:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      54:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      58:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      5c:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__vector_23>
      60:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      68:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      6c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      70:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      74:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      78:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      7c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      80:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      84:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      88:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__vector_34>
      8c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      90:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      94:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      98:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      9c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      a0:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      a4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      a8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>

000000ac <__ctors_start>:
      ac:	79 09       	sbc	r23, r9

000000ae <__ctors_end>:
      ae:	11 24       	eor	r1, r1
      b0:	1f be       	out	0x3f, r1	; 63
      b2:	cf ef       	ldi	r28, 0xFF	; 255
      b4:	cd bf       	out	0x3d, r28	; 61
      b6:	d7 e2       	ldi	r29, 0x27	; 39
      b8:	de bf       	out	0x3e, r29	; 62

000000ba <__do_clear_bss>:
      ba:	21 e2       	ldi	r18, 0x21	; 33
      bc:	a0 e0       	ldi	r26, 0x00	; 0
      be:	b0 e2       	ldi	r27, 0x20	; 32
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	aa 36       	cpi	r26, 0x6A	; 106
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>

000000ca <__do_global_ctors>:
      ca:	10 e0       	ldi	r17, 0x00	; 0
      cc:	c7 e5       	ldi	r28, 0x57	; 87
      ce:	d0 e0       	ldi	r29, 0x00	; 0
      d0:	04 c0       	rjmp	.+8      	; 0xda <__do_global_ctors+0x10>
      d2:	21 97       	sbiw	r28, 0x01	; 1
      d4:	fe 01       	movw	r30, r28
      d6:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <__tablejump2__>
      da:	c6 35       	cpi	r28, 0x56	; 86
      dc:	d1 07       	cpc	r29, r17
      de:	c9 f7       	brne	.-14     	; 0xd2 <__do_global_ctors+0x8>
      e0:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <main>
      e4:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <_exit>

000000e8 <__bad_interrupt>:
      e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ec <_Z14CalculateCRC16Pvh>:
}

uint16_t CalculateCRC16(void *arr, uint8_t count)
{
	uint8_t *ptr = (uint8_t*)arr;
	CRC.CTRL |= CRC_RESET_RESET0_gc;
      ec:	e0 ed       	ldi	r30, 0xD0	; 208
      ee:	f0 e0       	ldi	r31, 0x00	; 0
      f0:	20 81       	ld	r18, Z
      f2:	20 68       	ori	r18, 0x80	; 128
      f4:	20 83       	st	Z, r18
	while (--count)
      f6:	61 50       	subi	r22, 0x01	; 1
      f8:	51 f0       	breq	.+20     	; 0x10e <_Z14CalculateCRC16Pvh+0x22>
      fa:	e8 2f       	mov	r30, r24
      fc:	f9 2f       	mov	r31, r25
		CRC.DATAIN = *ptr++;
      fe:	a0 ed       	ldi	r26, 0xD0	; 208
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	81 91       	ld	r24, Z+
     104:	13 96       	adiw	r26, 0x03	; 3
     106:	8c 93       	st	X, r24
     108:	13 97       	sbiw	r26, 0x03	; 3

uint16_t CalculateCRC16(void *arr, uint8_t count)
{
	uint8_t *ptr = (uint8_t*)arr;
	CRC.CTRL |= CRC_RESET_RESET0_gc;
	while (--count)
     10a:	61 50       	subi	r22, 0x01	; 1
     10c:	d1 f7       	brne	.-12     	; 0x102 <_Z14CalculateCRC16Pvh+0x16>
		CRC.DATAIN = *ptr++;
	return ((uint16_t)CRC.CHECKSUM1 << 8) | CRC.CHECKSUM0;
     10e:	e0 ed       	ldi	r30, 0xD0	; 208
     110:	f0 e0       	ldi	r31, 0x00	; 0
     112:	25 81       	ldd	r18, Z+5	; 0x05
     114:	84 81       	ldd	r24, Z+4	; 0x04
     116:	90 e0       	ldi	r25, 0x00	; 0
}
     118:	92 2b       	or	r25, r18
     11a:	08 95       	ret

0000011c <_Z11ApplyConfigv>:

void ApplyConfig()
{
     11c:	2f 92       	push	r2
     11e:	3f 92       	push	r3
     120:	4f 92       	push	r4
     122:	5f 92       	push	r5
     124:	6f 92       	push	r6
     126:	7f 92       	push	r7
     128:	8f 92       	push	r8
     12a:	9f 92       	push	r9
     12c:	af 92       	push	r10
     12e:	bf 92       	push	r11
     130:	cf 92       	push	r12
     132:	df 92       	push	r13
     134:	ef 92       	push	r14
     136:	ff 92       	push	r15
     138:	0f 93       	push	r16
     13a:	1f 93       	push	r17
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
     140:	00 d0       	rcall	.+0      	; 0x142 <_Z11ApplyConfigv+0x26>
     142:	00 d0       	rcall	.+0      	; 0x144 <_Z11ApplyConfigv+0x28>
     144:	cd b7       	in	r28, 0x3d	; 61
     146:	de b7       	in	r29, 0x3e	; 62
	systemConfig *temp = (systemConfig*)iobuf;
	//Both bits 7 are set: one of the on-time counters must be rewritten
	if ((temp->groupConf & 0x80) && (temp->overrideCfg & 0x80))
     148:	30 90 b8 20 	lds	r3, 0x20B8	; 0x8020b8 <iobuf+0x1d>
     14c:	33 20       	and	r3, r3
     14e:	24 f5       	brge	.+72     	; 0x198 <_Z11ApplyConfigv+0x7c>
     150:	80 91 ac 20 	lds	r24, 0x20AC	; 0x8020ac <iobuf+0x11>
     154:	88 23       	and	r24, r24
     156:	04 f5       	brge	.+64     	; 0x198 <_Z11ApplyConfigv+0x7c>
	{
		uint8_t j = temp->overrideCfg & 0xF; //Update on-time of link
		channelOT.linkOnTime[j] = *((uint32_t*)temp->minLvl);
     158:	8f 70       	andi	r24, 0x0F	; 15
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	fc 01       	movw	r30, r24
     15e:	ee 0f       	add	r30, r30
     160:	ff 1f       	adc	r31, r31
     162:	ee 0f       	add	r30, r30
     164:	ff 1f       	adc	r31, r31
     166:	ed 52       	subi	r30, 0x2D	; 45
     168:	ff 4d       	sbci	r31, 0xDF	; 223
     16a:	ab e9       	ldi	r26, 0x9B	; 155
     16c:	b0 e2       	ldi	r27, 0x20	; 32
     16e:	4d 91       	ld	r20, X+
     170:	5d 91       	ld	r21, X+
     172:	6d 91       	ld	r22, X+
     174:	7c 91       	ld	r23, X
     176:	13 97       	sbiw	r26, 0x03	; 3
     178:	40 83       	st	Z, r20
     17a:	51 83       	std	Z+1, r21	; 0x01
     17c:	62 83       	std	Z+2, r22	; 0x02
     17e:	73 83       	std	Z+3, r23	; 0x03
		channelOT.linkSwCnt[j] = *((uint16_t*)temp->maxLvl);
     180:	88 0f       	add	r24, r24
     182:	99 1f       	adc	r25, r25
     184:	fc 01       	movw	r30, r24
     186:	e9 50       	subi	r30, 0x09	; 9
     188:	ff 4d       	sbci	r31, 0xDF	; 223
     18a:	18 96       	adiw	r26, 0x08	; 8
     18c:	8d 91       	ld	r24, X+
     18e:	9c 91       	ld	r25, X
     190:	19 97       	sbiw	r26, 0x09	; 9
     192:	80 83       	st	Z, r24
     194:	91 83       	std	Z+1, r25	; 0x01
		return;
     196:	cd c0       	rjmp	.+410    	; 0x332 <_Z11ApplyConfigv+0x216>
	}
	memcpy(&validConf, iobuf, sizeof(systemConfig));
     198:	81 e2       	ldi	r24, 0x21	; 33
     19a:	eb e9       	ldi	r30, 0x9B	; 155
     19c:	f0 e2       	ldi	r31, 0x20	; 32
     19e:	a3 e2       	ldi	r26, 0x23	; 35
     1a0:	b1 e2       	ldi	r27, 0x21	; 33
     1a2:	01 90       	ld	r0, Z+
     1a4:	0d 92       	st	X+, r0
     1a6:	8a 95       	dec	r24
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <_Z11ApplyConfigv+0x86>
		bool dimInProcess = false;
		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			uint8_t j = _link[i];
			dimInProcess |= (_lvl[i] != gLevels[j]);
			_lvl[i] = validConf.overrideLvl;
     1aa:	90 91 33 21 	lds	r25, 0x2133	; 0x802133 <validConf+0x10>
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
			_tickLastChg = sysState.sysTick;
     1ae:	eb e0       	ldi	r30, 0x0B	; 11
     1b0:	f1 e2       	ldi	r31, 0x21	; 33
     1b2:	a0 80       	ld	r10, Z
     1b4:	b1 80       	ldd	r11, Z+1	; 0x01
     1b6:	c2 80       	ldd	r12, Z+2	; 0x02
     1b8:	d3 80       	ldd	r13, Z+3	; 0x03
     1ba:	e4 80       	ldd	r14, Z+4	; 0x04
     1bc:	75 80       	ldd	r7, Z+5	; 0x05
     1be:	66 80       	ldd	r6, Z+6	; 0x06
     1c0:	27 80       	ldd	r2, Z+7	; 0x07
     1c2:	43 e1       	ldi	r20, 0x13	; 19
     1c4:	50 e2       	ldi	r21, 0x20	; 32
     1c6:	26 e1       	ldi	r18, 0x16	; 22
     1c8:	30 e2       	ldi	r19, 0x20	; 32
     1ca:	0f 2e       	mov	r0, r31
     1cc:	fb e9       	ldi	r31, 0x9B	; 155
     1ce:	4f 2e       	mov	r4, r31
     1d0:	f0 e2       	ldi	r31, 0x20	; 32
     1d2:	5f 2e       	mov	r5, r31
     1d4:	f0 2d       	mov	r31, r0
	void setParams()
	{
		uint8_t pos, min = validConf.fadeRate[_linkNum], max = validConf.linkDelay[_linkNum];
		if (min < 32)
			min = 32;
		_fadeRate = (min > 160) ? 160 : min;
     1d6:	70 ea       	ldi	r23, 0xA0	; 160
		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			pos = _link[i];
			min = validConf.minLvl[pos];
			max = validConf.maxLvl[pos];
			_minLvl[i] = (min < 222) ? min + 1 : 223;
     1d8:	0f 2e       	mov	r0, r31
     1da:	ff ed       	ldi	r31, 0xDF	; 223
     1dc:	ff 2e       	mov	r15, r31
     1de:	f0 2d       	mov	r31, r0
     1e0:	83 2c       	mov	r8, r3
     1e2:	49 83       	std	Y+1, r20	; 0x01
     1e4:	5a 83       	std	Y+2, r21	; 0x02
     1e6:	9a 2c       	mov	r9, r10
     1e8:	ab 2c       	mov	r10, r11
     1ea:	02 2d       	mov	r16, r2
     1ec:	19 01       	movw	r2, r18
     1ee:	29 81       	ldd	r18, Y+1	; 0x01
     1f0:	3a 81       	ldd	r19, Y+2	; 0x02
     1f2:	2b 83       	std	Y+3, r18	; 0x03
     1f4:	3c 83       	std	Y+4, r19	; 0x04
		_chActMask = 0x10 << num;
	};

	void setParams()
	{
		uint8_t pos, min = validConf.fadeRate[_linkNum], max = validConf.linkDelay[_linkNum];
     1f6:	d9 01       	movw	r26, r18
     1f8:	12 96       	adiw	r26, 0x02	; 2
     1fa:	ec 91       	ld	r30, X
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	ed 5d       	subi	r30, 0xDD	; 221
     200:	fe 4d       	sbci	r31, 0xDE	; 222
     202:	82 89       	ldd	r24, Z+18	; 0x12
     204:	26 89       	ldd	r18, Z+22	; 0x16
		if (min < 32)
     206:	80 32       	cpi	r24, 0x20	; 32
     208:	08 f4       	brcc	.+2      	; 0x20c <_Z11ApplyConfigv+0xf0>
			min = 32;
     20a:	80 e2       	ldi	r24, 0x20	; 32
		_fadeRate = (min > 160) ? 160 : min;
     20c:	81 3a       	cpi	r24, 0xA1	; 161
     20e:	08 f0       	brcs	.+2      	; 0x212 <_Z11ApplyConfigv+0xf6>
     210:	87 2f       	mov	r24, r23
     212:	eb 81       	ldd	r30, Y+3	; 0x03
     214:	fc 81       	ldd	r31, Y+4	; 0x04
     216:	87 87       	std	Z+15, r24	; 0x0f
		_linkDelay = (max > 63) ? 64 : max + 1;
     218:	20 34       	cpi	r18, 0x40	; 64
     21a:	10 f4       	brcc	.+4      	; 0x220 <_Z11ApplyConfigv+0x104>
     21c:	2f 5f       	subi	r18, 0xFF	; 255
     21e:	01 c0       	rjmp	.+2      	; 0x222 <_Z11ApplyConfigv+0x106>
     220:	20 e4       	ldi	r18, 0x40	; 64
     222:	ab 81       	ldd	r26, Y+3	; 0x03
     224:	bc 81       	ldd	r27, Y+4	; 0x04
     226:	50 96       	adiw	r26, 0x10	; 16
     228:	2c 93       	st	X, r18
     22a:	50 97       	sbiw	r26, 0x10	; 16
		for (uint8_t i = 0; i < _linkCnt; i++)
     22c:	11 96       	adiw	r26, 0x01	; 1
     22e:	8c 91       	ld	r24, X
     230:	88 23       	and	r24, r24
     232:	e9 f1       	breq	.+122    	; 0x2ae <_Z11ApplyConfigv+0x192>
     234:	d1 01       	movw	r26, r2
     236:	30 e0       	ldi	r19, 0x00	; 0
		{
			pos = _link[i];
     238:	ed 91       	ld	r30, X+
			min = validConf.minLvl[pos];
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	ed 5d       	subi	r30, 0xDD	; 221
     23e:	fe 4d       	sbci	r31, 0xDE	; 222
     240:	20 81       	ld	r18, Z
			max = validConf.maxLvl[pos];
     242:	40 85       	ldd	r20, Z+8	; 0x08
			_minLvl[i] = (min < 222) ? min + 1 : 223;
     244:	2e 3d       	cpi	r18, 0xDE	; 222
     246:	10 f4       	brcc	.+4      	; 0x24c <_Z11ApplyConfigv+0x130>
     248:	2f 5f       	subi	r18, 0xFF	; 255
     24a:	01 c0       	rjmp	.+2      	; 0x24e <_Z11ApplyConfigv+0x132>
     24c:	2f 2d       	mov	r18, r15
     24e:	fd 01       	movw	r30, r26
     250:	15 96       	adiw	r26, 0x05	; 5
     252:	2c 93       	st	X, r18
     254:	15 97       	sbiw	r26, 0x05	; 5
			_difLvl[i] = max;
			if (max > _minLvl[i])
     256:	24 17       	cp	r18, r20
     258:	20 f0       	brcs	.+8      	; 0x262 <_Z11ApplyConfigv+0x146>
		{
			pos = _link[i];
			min = validConf.minLvl[pos];
			max = validConf.maxLvl[pos];
			_minLvl[i] = (min < 222) ? min + 1 : 223;
			_difLvl[i] = max;
     25a:	18 96       	adiw	r26, 0x08	; 8
     25c:	4c 93       	st	X, r20
     25e:	18 97       	sbiw	r26, 0x08	; 8
     260:	05 c0       	rjmp	.+10     	; 0x26c <_Z11ApplyConfigv+0x150>
			if (max > _minLvl[i])
			{
				max -= _minLvl[i];
				_difLvl[i] = (max >= 32) ? max : 32;
     262:	42 1b       	sub	r20, r18
     264:	40 32       	cpi	r20, 0x20	; 32
     266:	08 f4       	brcc	.+2      	; 0x26a <_Z11ApplyConfigv+0x14e>
     268:	40 e2       	ldi	r20, 0x20	; 32
     26a:	40 87       	std	Z+8, r20	; 0x08
		uint8_t pos, min = validConf.fadeRate[_linkNum], max = validConf.linkDelay[_linkNum];
		if (min < 32)
			min = 32;
		_fadeRate = (min > 160) ? 160 : min;
		_linkDelay = (max > 63) ? 64 : max + 1;
		for (uint8_t i = 0; i < _linkCnt; i++)
     26c:	3f 5f       	subi	r19, 0xFF	; 255
     26e:	38 13       	cpse	r19, r24
     270:	e3 cf       	rjmp	.-58     	; 0x238 <_Z11ApplyConfigv+0x11c>
     272:	d1 01       	movw	r26, r2
     274:	b1 2c       	mov	r11, r1
     276:	60 e0       	ldi	r22, 0x00	; 0
	void overrideCheck()
	{
		bool dimInProcess = false;
		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			uint8_t j = _link[i];
     278:	ed 91       	ld	r30, X+
     27a:	ad 01       	movw	r20, r26
			dimInProcess |= (_lvl[i] != gLevels[j]);
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	ee 0f       	add	r30, r30
     280:	ff 1f       	adc	r31, r31
     282:	e8 5a       	subi	r30, 0xA8	; 168
     284:	fe 4d       	sbci	r31, 0xDE	; 222
     286:	01 90       	ld	r0, Z+
     288:	f0 81       	ld	r31, Z
     28a:	e0 2d       	mov	r30, r0
     28c:	12 96       	adiw	r26, 0x02	; 2
     28e:	2c 91       	ld	r18, X
     290:	12 97       	sbiw	r26, 0x02	; 2
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	11 e0       	ldi	r17, 0x01	; 1
     296:	2e 17       	cp	r18, r30
     298:	3f 07       	cpc	r19, r31
     29a:	09 f4       	brne	.+2      	; 0x29e <_Z11ApplyConfigv+0x182>
     29c:	10 e0       	ldi	r17, 0x00	; 0
     29e:	b1 2a       	or	r11, r17
			_lvl[i] = validConf.overrideLvl;
     2a0:	fa 01       	movw	r30, r20
     2a2:	92 83       	std	Z+2, r25	; 0x02
	}

	void overrideCheck()
	{
		bool dimInProcess = false;
		for (uint8_t i = 0; i < _linkCnt; i++)
     2a4:	6f 5f       	subi	r22, 0xFF	; 255
     2a6:	68 13       	cpse	r22, r24
     2a8:	e7 cf       	rjmp	.-50     	; 0x278 <_Z11ApplyConfigv+0x15c>
		{
			uint8_t j = _link[i];
			dimInProcess |= (_lvl[i] != gLevels[j]);
			_lvl[i] = validConf.overrideLvl;
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     2aa:	b1 10       	cpse	r11, r1
     2ac:	19 c0       	rjmp	.+50     	; 0x2e0 <_Z11ApplyConfigv+0x1c4>
			_tickLastChg = sysState.sysTick;
     2ae:	ab 81       	ldd	r26, Y+3	; 0x03
     2b0:	bc 81       	ldd	r27, Y+4	; 0x04
     2b2:	52 96       	adiw	r26, 0x12	; 18
     2b4:	9c 92       	st	X, r9
     2b6:	52 97       	sbiw	r26, 0x12	; 18
     2b8:	53 96       	adiw	r26, 0x13	; 19
     2ba:	ac 92       	st	X, r10
     2bc:	53 97       	sbiw	r26, 0x13	; 19
     2be:	54 96       	adiw	r26, 0x14	; 20
     2c0:	cc 92       	st	X, r12
     2c2:	54 97       	sbiw	r26, 0x14	; 20
     2c4:	55 96       	adiw	r26, 0x15	; 21
     2c6:	dc 92       	st	X, r13
     2c8:	55 97       	sbiw	r26, 0x15	; 21
     2ca:	56 96       	adiw	r26, 0x16	; 22
     2cc:	ec 92       	st	X, r14
     2ce:	56 97       	sbiw	r26, 0x16	; 22
     2d0:	57 96       	adiw	r26, 0x17	; 23
     2d2:	7c 92       	st	X, r7
     2d4:	57 97       	sbiw	r26, 0x17	; 23
     2d6:	58 96       	adiw	r26, 0x18	; 24
     2d8:	6c 92       	st	X, r6
     2da:	58 97       	sbiw	r26, 0x18	; 24
     2dc:	59 96       	adiw	r26, 0x19	; 25
     2de:	0c 93       	st	X, r16
     2e0:	e9 81       	ldd	r30, Y+1	; 0x01
     2e2:	fa 81       	ldd	r31, Y+2	; 0x02
     2e4:	b2 96       	adiw	r30, 0x22	; 34
     2e6:	e9 83       	std	Y+1, r30	; 0x01
     2e8:	fa 83       	std	Y+2, r31	; 0x02
     2ea:	f2 e2       	ldi	r31, 0x22	; 34
     2ec:	2f 0e       	add	r2, r31
     2ee:	31 1c       	adc	r3, r1
		channelOT.linkOnTime[j] = *((uint32_t*)temp->minLvl);
		channelOT.linkSwCnt[j] = *((uint16_t*)temp->maxLvl);
		return;
	}
	memcpy(&validConf, iobuf, sizeof(systemConfig));
	for (uint8_t i = 0; i < 4; i++)
     2f0:	29 81       	ldd	r18, Y+1	; 0x01
     2f2:	3a 81       	ldd	r19, Y+2	; 0x02
     2f4:	24 15       	cp	r18, r4
     2f6:	35 05       	cpc	r19, r5
     2f8:	09 f0       	breq	.+2      	; 0x2fc <_Z11ApplyConfigv+0x1e0>
     2fa:	79 cf       	rjmp	.-270    	; 0x1ee <_Z11ApplyConfigv+0xd2>
     2fc:	38 2c       	mov	r3, r8
	{
		_linkNum = actLink;
	};
	void setParams()
	{
		_onTime = validConf.msenOnTime > 5 ? validConf.msenOnTime : 6;
     2fe:	80 91 3d 21 	lds	r24, 0x213D	; 0x80213d <validConf+0x1a>
     302:	86 30       	cpi	r24, 0x06	; 6
     304:	08 f4       	brcc	.+2      	; 0x308 <_Z11ApplyConfigv+0x1ec>
     306:	86 e0       	ldi	r24, 0x06	; 6
     308:	e5 e0       	ldi	r30, 0x05	; 5
     30a:	f0 e2       	ldi	r31, 0x20	; 32
     30c:	84 83       	std	Z+4, r24	; 0x04
		_fTime = _onTime + validConf.msenLowTime;
     30e:	90 91 3e 21 	lds	r25, 0x213E	; 0x80213e <validConf+0x1b>
     312:	89 0f       	add	r24, r25
     314:	85 83       	std	Z+5, r24	; 0x05
	{
		links[i].setParams();
		links[i].overrideCheck();
	}
	msenCh.setParams();
	if (validConf.groupConf & 0x08) //Bit 3 is set: save config to EEPROM
     316:	33 fe       	sbrs	r3, 3
     318:	08 c0       	rjmp	.+16     	; 0x32a <_Z11ApplyConfigv+0x20e>
		eeprom_update_block(&validConf, &savedConfig, sizeof(systemConfig));
     31a:	41 e2       	ldi	r20, 0x21	; 33
     31c:	50 e0       	ldi	r21, 0x00	; 0
     31e:	60 e0       	ldi	r22, 0x00	; 0
     320:	70 e0       	ldi	r23, 0x00	; 0
     322:	83 e2       	ldi	r24, 0x23	; 35
     324:	91 e2       	ldi	r25, 0x21	; 33
     326:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <eeprom_update_block>
	RTC.CALIB = validConf.rtcCorrect;
     32a:	80 91 41 21 	lds	r24, 0x2141	; 0x802141 <validConf+0x1e>
     32e:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
}
     332:	24 96       	adiw	r28, 0x04	; 4
     334:	cd bf       	out	0x3d, r28	; 61
     336:	de bf       	out	0x3e, r29	; 62
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	1f 91       	pop	r17
     33e:	0f 91       	pop	r16
     340:	ff 90       	pop	r15
     342:	ef 90       	pop	r14
     344:	df 90       	pop	r13
     346:	cf 90       	pop	r12
     348:	bf 90       	pop	r11
     34a:	af 90       	pop	r10
     34c:	9f 90       	pop	r9
     34e:	8f 90       	pop	r8
     350:	7f 90       	pop	r7
     352:	6f 90       	pop	r6
     354:	5f 90       	pop	r5
     356:	4f 90       	pop	r4
     358:	3f 90       	pop	r3
     35a:	2f 90       	pop	r2
     35c:	08 95       	ret

0000035e <__vector_7>:

ISR(RTC_OVF_vect)
{
     35e:	1f 92       	push	r1
     360:	0f 92       	push	r0
     362:	0f b6       	in	r0, 0x3f	; 63
     364:	0f 92       	push	r0
     366:	11 24       	eor	r1, r1
     368:	2f 92       	push	r2
     36a:	3f 92       	push	r3
     36c:	4f 92       	push	r4
     36e:	5f 92       	push	r5
     370:	6f 92       	push	r6
     372:	7f 92       	push	r7
     374:	8f 92       	push	r8
     376:	9f 92       	push	r9
     378:	af 92       	push	r10
     37a:	bf 92       	push	r11
     37c:	cf 92       	push	r12
     37e:	df 92       	push	r13
     380:	ef 92       	push	r14
     382:	ff 92       	push	r15
     384:	0f 93       	push	r16
     386:	1f 93       	push	r17
     388:	2f 93       	push	r18
     38a:	3f 93       	push	r19
     38c:	4f 93       	push	r20
     38e:	5f 93       	push	r21
     390:	6f 93       	push	r22
     392:	7f 93       	push	r23
     394:	8f 93       	push	r24
     396:	9f 93       	push	r25
     398:	af 93       	push	r26
     39a:	bf 93       	push	r27
     39c:	ef 93       	push	r30
     39e:	ff 93       	push	r31
     3a0:	cf 93       	push	r28
     3a2:	df 93       	push	r29
     3a4:	cd b7       	in	r28, 0x3d	; 61
     3a6:	de b7       	in	r29, 0x3e	; 62
     3a8:	64 97       	sbiw	r28, 0x14	; 20
     3aa:	cd bf       	out	0x3d, r28	; 61
     3ac:	de bf       	out	0x3e, r29	; 62
	sysState.sysTick++;
     3ae:	eb e0       	ldi	r30, 0x0B	; 11
     3b0:	f1 e2       	ldi	r31, 0x21	; 33
     3b2:	20 81       	ld	r18, Z
     3b4:	31 81       	ldd	r19, Z+1	; 0x01
     3b6:	42 81       	ldd	r20, Z+2	; 0x02
     3b8:	53 81       	ldd	r21, Z+3	; 0x03
     3ba:	64 81       	ldd	r22, Z+4	; 0x04
     3bc:	75 81       	ldd	r23, Z+5	; 0x05
     3be:	86 81       	ldd	r24, Z+6	; 0x06
     3c0:	97 81       	ldd	r25, Z+7	; 0x07
     3c2:	a1 e0       	ldi	r26, 0x01	; 1
     3c4:	0e 94 c2 09 	call	0x1384	; 0x1384 <__adddi3_s8>
     3c8:	20 83       	st	Z, r18
     3ca:	31 83       	std	Z+1, r19	; 0x01
     3cc:	42 83       	std	Z+2, r20	; 0x02
     3ce:	53 83       	std	Z+3, r21	; 0x03
     3d0:	64 83       	std	Z+4, r22	; 0x04
     3d2:	75 83       	std	Z+5, r23	; 0x05
     3d4:	86 83       	std	Z+6, r24	; 0x06
     3d6:	97 83       	std	Z+7, r25	; 0x07
     3d8:	83 e1       	ldi	r24, 0x13	; 19
     3da:	90 e2       	ldi	r25, 0x20	; 32
     3dc:	89 83       	std	Y+1, r24	; 0x01
     3de:	9a 83       	std	Y+2, r25	; 0x02
     3e0:	1b 82       	std	Y+3, r1	; 0x03
     3e2:	1c 82       	std	Y+4, r1	; 0x04
					tempLvl += ((-tempLvl < delta) ? delta : -tempLvl) + (int16_t)_lvl[s];
					if (!gLevels[j]) //Lamp has been switched on - remember ticks
						_onTimeStamp = sysState.sysTick;
				}
				gLevels[j] = tempLvl;
				gLevelChg |= 1 << j;
     3e4:	22 24       	eor	r2, r2
     3e6:	23 94       	inc	r2
     3e8:	31 2c       	mov	r3, r1
{
	sysState.sysTick++;
	static bool rs485busy = false;
	int8_t i;
	for (i = 0; i < 4; i++)
		links[i].updateLevel();
     3ea:	4b 81       	ldd	r20, Y+3	; 0x03
     3ec:	5c 81       	ldd	r21, Y+4	; 0x04
     3ee:	a9 81       	ldd	r26, Y+1	; 0x01
     3f0:	ba 81       	ldd	r27, Y+2	; 0x02
			_tickLastChg = sysState.sysTick;
	}

	void updateLevel()
	{
		int16_t ticksEl = (int16_t)(sysState.sysTick - _tickLastChg); //Elapsed ticks since beginning of dim
     3f2:	eb e0       	ldi	r30, 0x0B	; 11
     3f4:	f1 e2       	ldi	r31, 0x21	; 33
     3f6:	e0 80       	ld	r14, Z
     3f8:	f1 80       	ldd	r15, Z+1	; 0x01
     3fa:	52 96       	adiw	r26, 0x12	; 18
     3fc:	8d 91       	ld	r24, X+
     3fe:	9c 91       	ld	r25, X
     400:	53 97       	sbiw	r26, 0x13	; 19
     402:	e8 1a       	sub	r14, r24
     404:	f9 0a       	sbc	r15, r25
		int16_t delta = (((ticksEl + 1) * _fadeRate) >> 5) - ((ticksEl * _fadeRate) >> 5); //Number of steps
     406:	1f 96       	adiw	r26, 0x0f	; 15
     408:	6c 91       	ld	r22, X
     40a:	1f 97       	sbiw	r26, 0x0f	; 15
     40c:	70 e0       	ldi	r23, 0x00	; 0
     40e:	97 01       	movw	r18, r14
     410:	2f 5f       	subi	r18, 0xFF	; 255
     412:	3f 4f       	sbci	r19, 0xFF	; 255
     414:	26 9f       	mul	r18, r22
     416:	c0 01       	movw	r24, r0
     418:	27 9f       	mul	r18, r23
     41a:	90 0d       	add	r25, r0
     41c:	36 9f       	mul	r19, r22
     41e:	90 0d       	add	r25, r0
     420:	11 24       	eor	r1, r1
     422:	9c 01       	movw	r18, r24
     424:	35 95       	asr	r19
     426:	27 95       	ror	r18
     428:	35 95       	asr	r19
     42a:	27 95       	ror	r18
     42c:	35 95       	asr	r19
     42e:	27 95       	ror	r18
     430:	35 95       	asr	r19
     432:	27 95       	ror	r18
     434:	35 95       	asr	r19
     436:	27 95       	ror	r18
     438:	86 1b       	sub	r24, r22
     43a:	97 0b       	sbc	r25, r23
     43c:	95 95       	asr	r25
     43e:	87 95       	ror	r24
     440:	95 95       	asr	r25
     442:	87 95       	ror	r24
     444:	95 95       	asr	r25
     446:	87 95       	ror	r24
     448:	95 95       	asr	r25
     44a:	87 95       	ror	r24
     44c:	95 95       	asr	r25
     44e:	87 95       	ror	r24
     450:	69 01       	movw	r12, r18
     452:	c8 1a       	sub	r12, r24
     454:	d9 0a       	sbc	r13, r25
		if (_linkNum == 2)
     456:	12 96       	adiw	r26, 0x02	; 2
     458:	8c 91       	ld	r24, X
     45a:	12 97       	sbiw	r26, 0x02	; 2
     45c:	82 30       	cpi	r24, 0x02	; 2
     45e:	19 f4       	brne	.+6      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
			PORTC.OUTSET = PIN7_bm;
     460:	f0 e8       	ldi	r31, 0x80	; 128
     462:	f0 93 45 06 	sts	0x0645, r31	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
		for (int16_t i = 0; i < _linkCnt; i++)
     466:	11 96       	adiw	r26, 0x01	; 1
     468:	2c 91       	ld	r18, X
     46a:	11 97       	sbiw	r26, 0x01	; 1
     46c:	22 23       	and	r18, r18
     46e:	09 f4       	brne	.+2      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     470:	fe c0       	rjmp	.+508    	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
     472:	9f ef       	ldi	r25, 0xFF	; 255
     474:	60 e0       	ldi	r22, 0x00	; 0
     476:	70 e0       	ldi	r23, 0x00	; 0
		{
			uint8_t s = _dir ? i : _linkCnt - i - 1; //Direction '1' means forward
			uint8_t j = _link[s];
     478:	0f 2e       	mov	r0, r31
     47a:	f2 e2       	ldi	r31, 0x22	; 34
     47c:	4f 2e       	mov	r4, r31
     47e:	f0 2d       	mov	r31, r0
     480:	44 9e       	mul	r4, r20
     482:	80 01       	movw	r16, r0
     484:	45 9e       	mul	r4, r21
     486:	10 0d       	add	r17, r0
     488:	11 24       	eor	r1, r1
     48a:	0d 5e       	subi	r16, 0xED	; 237
     48c:	1f 4d       	sbci	r17, 0xDF	; 223
						channelOT.linkSwCnt[j]++; //Increment switch counter
					}
				}
				else //Level needs to be raised
				{
					tempLvl += ((-tempLvl < delta) ? delta : -tempLvl) + (int16_t)_lvl[s];
     48e:	9c 2c       	mov	r9, r12
     490:	8d 2c       	mov	r8, r13
     492:	e9 8a       	std	Y+17, r14	; 0x11
     494:	fa 8a       	std	Y+18, r15	; 0x12
     496:	cb 8a       	std	Y+19, r12	; 0x13
     498:	dc 8a       	std	Y+20, r13	; 0x14
     49a:	b9 2e       	mov	r11, r25
		int16_t delta = (((ticksEl + 1) * _fadeRate) >> 5) - ((ticksEl * _fadeRate) >> 5); //Number of steps
		if (_linkNum == 2)
			PORTC.OUTSET = PIN7_bm;
		for (int16_t i = 0; i < _linkCnt; i++)
		{
			uint8_t s = _dir ? i : _linkCnt - i - 1; //Direction '1' means forward
     49c:	8c 91       	ld	r24, X
     49e:	88 23       	and	r24, r24
     4a0:	11 f0       	breq	.+4      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     4a2:	26 2f       	mov	r18, r22
     4a4:	01 c0       	rjmp	.+2      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     4a6:	2b 0d       	add	r18, r11
			uint8_t j = _link[s];
     4a8:	78 01       	movw	r14, r16
     4aa:	e2 0e       	add	r14, r18
     4ac:	f1 1c       	adc	r15, r1
			int16_t tempLvl = gLevels[j];
     4ae:	f7 01       	movw	r30, r14
     4b0:	a3 80       	ldd	r10, Z+3	; 0x03
     4b2:	4a 2d       	mov	r20, r10
     4b4:	50 e0       	ldi	r21, 0x00	; 0
     4b6:	fa 01       	movw	r30, r20
     4b8:	ee 0f       	add	r30, r30
     4ba:	ff 1f       	adc	r31, r31
     4bc:	e8 5a       	subi	r30, 0xA8	; 168
     4be:	fe 4d       	sbci	r31, 0xDE	; 222
     4c0:	20 81       	ld	r18, Z
     4c2:	31 81       	ldd	r19, Z+1	; 0x01
			tempLvl -= _lvl[s]; //Difference between actual and set levels
     4c4:	f7 01       	movw	r30, r14
     4c6:	86 81       	ldd	r24, Z+6	; 0x06
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	28 1b       	sub	r18, r24
     4cc:	39 0b       	sbc	r19, r25
			if (tempLvl && ticksEl > i * _linkDelay)
     4ce:	09 f4       	brne	.+2      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     4d0:	c2 c0       	rjmp	.+388    	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
     4d2:	50 96       	adiw	r26, 0x10	; 16
     4d4:	fc 90       	ld	r15, X
     4d6:	50 97       	sbiw	r26, 0x10	; 16
     4d8:	f6 9e       	mul	r15, r22
     4da:	f0 01       	movw	r30, r0
     4dc:	f7 9e       	mul	r15, r23
     4de:	f0 0d       	add	r31, r0
     4e0:	11 24       	eor	r1, r1
     4e2:	49 88       	ldd	r4, Y+17	; 0x11
     4e4:	5a 88       	ldd	r5, Y+18	; 0x12
     4e6:	e4 15       	cp	r30, r4
     4e8:	f5 05       	cpc	r31, r5
     4ea:	0c f0       	brlt	.+2      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     4ec:	b4 c0       	rjmp	.+360    	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
			{
				if (tempLvl >= 0) //Level needs to be lowered
     4ee:	33 23       	and	r19, r19
     4f0:	0c f4       	brge	.+2      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     4f2:	59 c0       	rjmp	.+178    	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
				{
					tempLvl -= ((tempLvl > delta) ? delta : tempLvl) - (int16_t)_lvl[s];
     4f4:	e9 2d       	mov	r30, r9
     4f6:	f8 2d       	mov	r31, r8
     4f8:	6b 88       	ldd	r6, Y+19	; 0x13
     4fa:	7c 88       	ldd	r7, Y+20	; 0x14
     4fc:	26 15       	cp	r18, r6
     4fe:	37 05       	cpc	r19, r7
     500:	0c f4       	brge	.+2      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
     502:	f9 01       	movw	r30, r18
     504:	e8 1b       	sub	r30, r24
     506:	f9 0b       	sbc	r31, r25
     508:	2e 1b       	sub	r18, r30
     50a:	3f 0b       	sbc	r19, r31
					if (!tempLvl) //Actual level became zero
     50c:	09 f0       	breq	.+2      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     50e:	8c c0       	rjmp	.+280    	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
					{
						tempLvl -= (int16_t)_fadeRate << 2; //Subtract 4x fade steps, so off/on delay will be 4s
     510:	1f 96       	adiw	r26, 0x0f	; 15
     512:	2c 91       	ld	r18, X
     514:	1f 97       	sbiw	r26, 0x0f	; 15
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	22 0f       	add	r18, r18
     51a:	33 1f       	adc	r19, r19
     51c:	22 0f       	add	r18, r18
     51e:	33 1f       	adc	r19, r19
     520:	31 95       	neg	r19
     522:	21 95       	neg	r18
     524:	31 09       	sbc	r19, r1
						channelOT.linkOnTime[j] += (uint32_t)(sysState.sysTick - _onTimeStamp) >> 5; //Add seconds
     526:	fa 01       	movw	r30, r20
     528:	ee 0f       	add	r30, r30
     52a:	ff 1f       	adc	r31, r31
     52c:	ee 0f       	add	r30, r30
     52e:	ff 1f       	adc	r31, r31
     530:	cf 01       	movw	r24, r30
     532:	8d 52       	subi	r24, 0x2D	; 45
     534:	9f 4d       	sbci	r25, 0xDF	; 223
     536:	eb e0       	ldi	r30, 0x0B	; 11
     538:	f1 e2       	ldi	r31, 0x21	; 33
     53a:	c0 80       	ld	r12, Z
     53c:	d1 80       	ldd	r13, Z+1	; 0x01
     53e:	e2 80       	ldd	r14, Z+2	; 0x02
     540:	f3 80       	ldd	r15, Z+3	; 0x03
     542:	5a 96       	adiw	r26, 0x1a	; 26
     544:	4d 90       	ld	r4, X+
     546:	5d 90       	ld	r5, X+
     548:	6d 90       	ld	r6, X+
     54a:	7c 90       	ld	r7, X
     54c:	5d 97       	sbiw	r26, 0x1d	; 29
     54e:	c4 18       	sub	r12, r4
     550:	d5 08       	sbc	r13, r5
     552:	e6 08       	sbc	r14, r6
     554:	f7 08       	sbc	r15, r7
     556:	68 94       	set
     558:	14 f8       	bld	r1, 4
     55a:	f6 94       	lsr	r15
     55c:	e7 94       	ror	r14
     55e:	d7 94       	ror	r13
     560:	c7 94       	ror	r12
     562:	16 94       	lsr	r1
     564:	d1 f7       	brne	.-12     	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
     566:	c9 86       	std	Y+9, r12	; 0x09
     568:	da 86       	std	Y+10, r13	; 0x0a
     56a:	eb 86       	std	Y+11, r14	; 0x0b
     56c:	fc 86       	std	Y+12, r15	; 0x0c
     56e:	fc 01       	movw	r30, r24
     570:	c0 80       	ld	r12, Z
     572:	d1 80       	ldd	r13, Z+1	; 0x01
     574:	e2 80       	ldd	r14, Z+2	; 0x02
     576:	f3 80       	ldd	r15, Z+3	; 0x03
     578:	49 84       	ldd	r4, Y+9	; 0x09
     57a:	5a 84       	ldd	r5, Y+10	; 0x0a
     57c:	6b 84       	ldd	r6, Y+11	; 0x0b
     57e:	7c 84       	ldd	r7, Y+12	; 0x0c
     580:	4c 0c       	add	r4, r12
     582:	5d 1c       	adc	r5, r13
     584:	6e 1c       	adc	r6, r14
     586:	7f 1c       	adc	r7, r15
     588:	40 82       	st	Z, r4
     58a:	51 82       	std	Z+1, r5	; 0x01
     58c:	62 82       	std	Z+2, r6	; 0x02
     58e:	73 82       	std	Z+3, r7	; 0x03
						channelOT.linkSwCnt[j]++; //Increment switch counter
     590:	fa 01       	movw	r30, r20
     592:	ee 0f       	add	r30, r30
     594:	ff 1f       	adc	r31, r31
     596:	e9 50       	subi	r30, 0x09	; 9
     598:	ff 4d       	sbci	r31, 0xDF	; 223
     59a:	80 81       	ld	r24, Z
     59c:	91 81       	ldd	r25, Z+1	; 0x01
     59e:	01 96       	adiw	r24, 0x01	; 1
     5a0:	80 83       	st	Z, r24
     5a2:	91 83       	std	Z+1, r25	; 0x01
     5a4:	41 c0       	rjmp	.+130    	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
					}
				}
				else //Level needs to be raised
				{
					tempLvl += ((-tempLvl < delta) ? delta : -tempLvl) + (int16_t)_lvl[s];
     5a6:	ee 27       	eor	r30, r30
     5a8:	ff 27       	eor	r31, r31
     5aa:	e2 1b       	sub	r30, r18
     5ac:	f3 0b       	sbc	r31, r19
     5ae:	4b 88       	ldd	r4, Y+19	; 0x13
     5b0:	5c 88       	ldd	r5, Y+20	; 0x14
     5b2:	e4 15       	cp	r30, r4
     5b4:	f5 05       	cpc	r31, r5
     5b6:	14 f4       	brge	.+4      	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     5b8:	e9 2d       	mov	r30, r9
     5ba:	f8 2d       	mov	r31, r8
     5bc:	8e 0f       	add	r24, r30
     5be:	9f 1f       	adc	r25, r31
     5c0:	28 0f       	add	r18, r24
     5c2:	39 1f       	adc	r19, r25
					if (!gLevels[j]) //Lamp has been switched on - remember ticks
     5c4:	fa 01       	movw	r30, r20
     5c6:	ee 0f       	add	r30, r30
     5c8:	ff 1f       	adc	r31, r31
     5ca:	e8 5a       	subi	r30, 0xA8	; 168
     5cc:	fe 4d       	sbci	r31, 0xDE	; 222
     5ce:	80 81       	ld	r24, Z
     5d0:	91 81       	ldd	r25, Z+1	; 0x01
     5d2:	89 2b       	or	r24, r25
     5d4:	49 f5       	brne	.+82     	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
						_onTimeStamp = sysState.sysTick;
     5d6:	eb e0       	ldi	r30, 0x0B	; 11
     5d8:	f1 e2       	ldi	r31, 0x21	; 33
     5da:	80 81       	ld	r24, Z
     5dc:	5a 96       	adiw	r26, 0x1a	; 26
     5de:	8c 93       	st	X, r24
     5e0:	5a 97       	sbiw	r26, 0x1a	; 26
     5e2:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <sysState+0x1>
     5e6:	5b 96       	adiw	r26, 0x1b	; 27
     5e8:	8c 93       	st	X, r24
     5ea:	5b 97       	sbiw	r26, 0x1b	; 27
     5ec:	80 91 0d 21 	lds	r24, 0x210D	; 0x80210d <sysState+0x2>
     5f0:	5c 96       	adiw	r26, 0x1c	; 28
     5f2:	8c 93       	st	X, r24
     5f4:	5c 97       	sbiw	r26, 0x1c	; 28
     5f6:	80 91 0e 21 	lds	r24, 0x210E	; 0x80210e <sysState+0x3>
     5fa:	5d 96       	adiw	r26, 0x1d	; 29
     5fc:	8c 93       	st	X, r24
     5fe:	5d 97       	sbiw	r26, 0x1d	; 29
     600:	80 91 0f 21 	lds	r24, 0x210F	; 0x80210f <sysState+0x4>
     604:	5e 96       	adiw	r26, 0x1e	; 30
     606:	8c 93       	st	X, r24
     608:	5e 97       	sbiw	r26, 0x1e	; 30
     60a:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <sysState+0x5>
     60e:	5f 96       	adiw	r26, 0x1f	; 31
     610:	8c 93       	st	X, r24
     612:	5f 97       	sbiw	r26, 0x1f	; 31
     614:	80 91 11 21 	lds	r24, 0x2111	; 0x802111 <sysState+0x6>
     618:	90 96       	adiw	r26, 0x20	; 32
     61a:	8c 93       	st	X, r24
     61c:	90 97       	sbiw	r26, 0x20	; 32
     61e:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <sysState+0x7>
     622:	91 96       	adiw	r26, 0x21	; 33
     624:	8c 93       	st	X, r24
     626:	91 97       	sbiw	r26, 0x21	; 33
				}
				gLevels[j] = tempLvl;
     628:	44 0f       	add	r20, r20
     62a:	55 1f       	adc	r21, r21
     62c:	fa 01       	movw	r30, r20
     62e:	e8 5a       	subi	r30, 0xA8	; 168
     630:	fe 4d       	sbci	r31, 0xDE	; 222
     632:	20 83       	st	Z, r18
     634:	31 83       	std	Z+1, r19	; 0x01
				gLevelChg |= 1 << j;
     636:	20 91 57 21 	lds	r18, 0x2157	; 0x802157 <gLevelChg>
     63a:	c1 01       	movw	r24, r2
     63c:	02 c0       	rjmp	.+4      	; 0x642 <__LOCK_REGION_LENGTH__+0x242>
     63e:	88 0f       	add	r24, r24
     640:	99 1f       	adc	r25, r25
     642:	aa 94       	dec	r10
     644:	e2 f7       	brpl	.-8      	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
     646:	82 2b       	or	r24, r18
     648:	80 93 57 21 	sts	0x2157, r24	; 0x802157 <gLevelChg>
				PORTC.OUTSET = _chActMask; //Switch on activity LED
     64c:	51 96       	adiw	r26, 0x11	; 17
     64e:	8c 91       	ld	r24, X
     650:	51 97       	sbiw	r26, 0x11	; 17
     652:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	{
		int16_t ticksEl = (int16_t)(sysState.sysTick - _tickLastChg); //Elapsed ticks since beginning of dim
		int16_t delta = (((ticksEl + 1) * _fadeRate) >> 5) - ((ticksEl * _fadeRate) >> 5); //Number of steps
		if (_linkNum == 2)
			PORTC.OUTSET = PIN7_bm;
		for (int16_t i = 0; i < _linkCnt; i++)
     656:	6f 5f       	subi	r22, 0xFF	; 255
     658:	7f 4f       	sbci	r23, 0xFF	; 255
     65a:	11 96       	adiw	r26, 0x01	; 1
     65c:	2c 91       	ld	r18, X
     65e:	11 97       	sbiw	r26, 0x01	; 1
     660:	ba 94       	dec	r11
     662:	82 2f       	mov	r24, r18
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	68 17       	cp	r22, r24
     668:	79 07       	cpc	r23, r25
     66a:	0c f4       	brge	.+2      	; 0x66e <__LOCK_REGION_LENGTH__+0x26e>
     66c:	17 cf       	rjmp	.-466    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     66e:	8b 81       	ldd	r24, Y+3	; 0x03
     670:	9c 81       	ldd	r25, Y+4	; 0x04
     672:	01 96       	adiw	r24, 0x01	; 1
     674:	8b 83       	std	Y+3, r24	; 0x03
     676:	9c 83       	std	Y+4, r25	; 0x04
     678:	a9 81       	ldd	r26, Y+1	; 0x01
     67a:	ba 81       	ldd	r27, Y+2	; 0x02
     67c:	92 96       	adiw	r26, 0x22	; 34
     67e:	a9 83       	std	Y+1, r26	; 0x01
     680:	ba 83       	std	Y+2, r27	; 0x02
ISR(RTC_OVF_vect)
{
	sysState.sysTick++;
	static bool rs485busy = false;
	int8_t i;
	for (i = 0; i < 4; i++)
     682:	04 97       	sbiw	r24, 0x04	; 4
     684:	09 f0       	breq	.+2      	; 0x688 <__LOCK_REGION_LENGTH__+0x288>
     686:	b1 ce       	rjmp	.-670    	; 0x3ea <__vector_7+0x8c>
			cntDown = true;
		}
	}
	void updateLevel()
	{
		if (cntDown)
     688:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <msenCh>
     68c:	88 23       	and	r24, r24
     68e:	09 f4       	brne	.+2      	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
     690:	ed c1       	rjmp	.+986    	; 0xa6c <__LOCK_REGION_LENGTH__+0x66c>
		{
			uint16_t ton = (uint16_t)(sysState.sysTick - _onTimeStamp) >> 5;
     692:	2b e0       	ldi	r18, 0x0B	; 11
     694:	31 e2       	ldi	r19, 0x21	; 33
     696:	f9 01       	movw	r30, r18
     698:	f0 81       	ld	r31, Z
     69a:	f9 87       	std	Y+9, r31	; 0x09
     69c:	d9 01       	movw	r26, r18
     69e:	11 96       	adiw	r26, 0x01	; 1
     6a0:	bc 91       	ld	r27, X
     6a2:	ba 87       	std	Y+10, r27	; 0x0a
     6a4:	f9 01       	movw	r30, r18
     6a6:	f2 81       	ldd	r31, Z+2	; 0x02
     6a8:	fb 87       	std	Y+11, r31	; 0x0b
     6aa:	d9 01       	movw	r26, r18
     6ac:	13 96       	adiw	r26, 0x03	; 3
     6ae:	bc 91       	ld	r27, X
     6b0:	bc 87       	std	Y+12, r27	; 0x0c
     6b2:	f9 01       	movw	r30, r18
     6b4:	f4 81       	ldd	r31, Z+4	; 0x04
     6b6:	fd 87       	std	Y+13, r31	; 0x0d
     6b8:	d9 01       	movw	r26, r18
     6ba:	15 96       	adiw	r26, 0x05	; 5
     6bc:	bc 91       	ld	r27, X
     6be:	be 87       	std	Y+14, r27	; 0x0e
     6c0:	f9 01       	movw	r30, r18
     6c2:	f6 81       	ldd	r31, Z+6	; 0x06
     6c4:	ff 87       	std	Y+15, r31	; 0x0f
     6c6:	d9 01       	movw	r26, r18
     6c8:	17 96       	adiw	r26, 0x07	; 7
     6ca:	bc 91       	ld	r27, X
     6cc:	b8 8b       	std	Y+16, r27	; 0x10
     6ce:	25 e0       	ldi	r18, 0x05	; 5
     6d0:	30 e2       	ldi	r19, 0x20	; 32
			if (ton > _fTime)
     6d2:	f9 01       	movw	r30, r18
     6d4:	46 81       	ldd	r20, Z+6	; 0x06
     6d6:	57 81       	ldd	r21, Z+7	; 0x07
     6d8:	49 84       	ldd	r4, Y+9	; 0x09
     6da:	5a 84       	ldd	r5, Y+10	; 0x0a
     6dc:	44 1a       	sub	r4, r20
     6de:	55 0a       	sbc	r5, r21
     6e0:	a2 01       	movw	r20, r4
     6e2:	56 95       	lsr	r21
     6e4:	47 95       	ror	r20
     6e6:	52 95       	swap	r21
     6e8:	42 95       	swap	r20
     6ea:	4f 70       	andi	r20, 0x0F	; 15
     6ec:	45 27       	eor	r20, r21
     6ee:	5f 70       	andi	r21, 0x0F	; 15
     6f0:	45 27       	eor	r20, r21
     6f2:	25 81       	ldd	r18, Z+5	; 0x05
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	24 17       	cp	r18, r20
     6f8:	35 07       	cpc	r19, r21
     6fa:	08 f0       	brcs	.+2      	; 0x6fe <__LOCK_REGION_LENGTH__+0x2fe>
     6fc:	65 c0       	rjmp	.+202    	; 0x7c8 <__LOCK_REGION_LENGTH__+0x3c8>
			{
				ltEnt = cntDown = false;
     6fe:	10 82       	st	Z, r1
     700:	11 82       	std	Z+1, r1	; 0x01
				links[_linkNum].setLevel(0); //Both on and low time are expired, shut down the lamp
     702:	42 81       	ldd	r20, Z+2	; 0x02
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
     704:	a4 2e       	mov	r10, r20
     706:	b1 2c       	mov	r11, r1
     708:	b2 e2       	ldi	r27, 0x22	; 34
     70a:	4b 9f       	mul	r20, r27
     70c:	b0 01       	movw	r22, r0
     70e:	11 24       	eor	r1, r1
     710:	6d 5e       	subi	r22, 0xED	; 237
     712:	7f 4d       	sbci	r23, 0xDF	; 223
     714:	fb 01       	movw	r30, r22
     716:	22 81       	ldd	r18, Z+2	; 0x02
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	25 5f       	subi	r18, 0xF5	; 245
     71c:	3e 4d       	sbci	r19, 0xDE	; 222
     71e:	d9 01       	movw	r26, r18
     720:	51 96       	adiw	r26, 0x11	; 17
     722:	1c 92       	st	X, r1
		for (uint8_t i = 0; i < _linkCnt; i++)
     724:	c1 80       	ldd	r12, Z+1	; 0x01
     726:	cc 20       	and	r12, r12
     728:	19 f1       	breq	.+70     	; 0x770 <__LOCK_REGION_LENGTH__+0x370>
     72a:	b2 e2       	ldi	r27, 0x22	; 34
     72c:	4b 9f       	mul	r20, r27
     72e:	a0 01       	movw	r20, r0
     730:	11 24       	eor	r1, r1
     732:	4a 5e       	subi	r20, 0xEA	; 234
     734:	5f 4d       	sbci	r21, 0xDF	; 223
     736:	d1 2c       	mov	r13, r1
     738:	f1 2c       	mov	r15, r1
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     73a:	fa 01       	movw	r30, r20
     73c:	20 81       	ld	r18, Z
     73e:	4f 5f       	subi	r20, 0xFF	; 255
     740:	5f 4f       	sbci	r21, 0xFF	; 255
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	22 0f       	add	r18, r18
     746:	33 1f       	adc	r19, r19
     748:	28 5a       	subi	r18, 0xA8	; 168
     74a:	3e 4d       	sbci	r19, 0xDE	; 222
     74c:	d9 01       	movw	r26, r18
     74e:	0d 91       	ld	r16, X+
     750:	1c 91       	ld	r17, X
     752:	23 81       	ldd	r18, Z+3	; 0x03
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	61 e0       	ldi	r22, 0x01	; 1
     758:	20 17       	cp	r18, r16
     75a:	31 07       	cpc	r19, r17
     75c:	09 f4       	brne	.+2      	; 0x760 <__LOCK_REGION_LENGTH__+0x360>
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	d6 2a       	or	r13, r22
			if (!level || !_difLvl[i]) //Set zero level directly
				_lvl[i] = 0;
     762:	fa 01       	movw	r30, r20
     764:	12 82       	std	Z+2, r1	; 0x02

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
		for (uint8_t i = 0; i < _linkCnt; i++)
     766:	f3 94       	inc	r15
     768:	fc 10       	cpse	r15, r12
     76a:	e7 cf       	rjmp	.-50     	; 0x73a <__LOCK_REGION_LENGTH__+0x33a>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     76c:	d1 10       	cpse	r13, r1
     76e:	7e c1       	rjmp	.+764    	; 0xa6c <__LOCK_REGION_LENGTH__+0x66c>
			_tickLastChg = sysState.sysTick;
     770:	22 e2       	ldi	r18, 0x22	; 34
     772:	2a 9d       	mul	r18, r10
     774:	a0 01       	movw	r20, r0
     776:	2b 9d       	mul	r18, r11
     778:	50 0d       	add	r21, r0
     77a:	11 24       	eor	r1, r1
     77c:	4d 5e       	subi	r20, 0xED	; 237
     77e:	5f 4d       	sbci	r21, 0xDF	; 223
     780:	9a 01       	movw	r18, r20
     782:	2e 5e       	subi	r18, 0xEE	; 238
     784:	3f 4f       	sbci	r19, 0xFF	; 255
     786:	e9 85       	ldd	r30, Y+9	; 0x09
     788:	da 01       	movw	r26, r20
     78a:	52 96       	adiw	r26, 0x12	; 18
     78c:	ec 93       	st	X, r30
     78e:	ea 85       	ldd	r30, Y+10	; 0x0a
     790:	d9 01       	movw	r26, r18
     792:	11 96       	adiw	r26, 0x01	; 1
     794:	ec 93       	st	X, r30
     796:	11 97       	sbiw	r26, 0x01	; 1
     798:	fb 85       	ldd	r31, Y+11	; 0x0b
     79a:	12 96       	adiw	r26, 0x02	; 2
     79c:	fc 93       	st	X, r31
     79e:	12 97       	sbiw	r26, 0x02	; 2
     7a0:	4c 84       	ldd	r4, Y+12	; 0x0c
     7a2:	13 96       	adiw	r26, 0x03	; 3
     7a4:	4c 92       	st	X, r4
     7a6:	13 97       	sbiw	r26, 0x03	; 3
     7a8:	5d 84       	ldd	r5, Y+13	; 0x0d
     7aa:	14 96       	adiw	r26, 0x04	; 4
     7ac:	5c 92       	st	X, r5
     7ae:	14 97       	sbiw	r26, 0x04	; 4
     7b0:	6e 84       	ldd	r6, Y+14	; 0x0e
     7b2:	15 96       	adiw	r26, 0x05	; 5
     7b4:	6c 92       	st	X, r6
     7b6:	15 97       	sbiw	r26, 0x05	; 5
     7b8:	7f 84       	ldd	r7, Y+15	; 0x0f
     7ba:	16 96       	adiw	r26, 0x06	; 6
     7bc:	7c 92       	st	X, r7
     7be:	16 97       	sbiw	r26, 0x06	; 6
     7c0:	c8 88       	ldd	r12, Y+16	; 0x10
     7c2:	17 96       	adiw	r26, 0x07	; 7
     7c4:	cc 92       	st	X, r12
     7c6:	52 c1       	rjmp	.+676    	; 0xa6c <__LOCK_REGION_LENGTH__+0x66c>
			if (ton > _fTime)
			{
				ltEnt = cntDown = false;
				links[_linkNum].setLevel(0); //Both on and low time are expired, shut down the lamp
			}
			else if (!ltEnt && _onTime)
     7c8:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <msenCh+0x1>
     7cc:	21 11       	cpse	r18, r1
     7ce:	4e c1       	rjmp	.+668    	; 0xa6c <__LOCK_REGION_LENGTH__+0x66c>
     7d0:	20 91 09 20 	lds	r18, 0x2009	; 0x802009 <msenCh+0x4>
     7d4:	22 23       	and	r18, r18
     7d6:	09 f4       	brne	.+2      	; 0x7da <__LOCK_REGION_LENGTH__+0x3da>
     7d8:	49 c1       	rjmp	.+658    	; 0xa6c <__LOCK_REGION_LENGTH__+0x66c>
			{
				ltEnt = true;
     7da:	25 e0       	ldi	r18, 0x05	; 5
     7dc:	30 e2       	ldi	r19, 0x20	; 32
     7de:	41 e0       	ldi	r20, 0x01	; 1
     7e0:	d9 01       	movw	r26, r18
     7e2:	11 96       	adiw	r26, 0x01	; 1
     7e4:	4c 93       	st	X, r20
     7e6:	11 97       	sbiw	r26, 0x01	; 1
				links[_linkNum].setLevel(validConf.msenLowLvl);
     7e8:	f0 90 3f 21 	lds	r15, 0x213F	; 0x80213f <validConf+0x1c>
     7ec:	12 96       	adiw	r26, 0x02	; 2
     7ee:	2c 91       	ld	r18, X
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
     7f0:	a2 2e       	mov	r10, r18
     7f2:	b1 2c       	mov	r11, r1
     7f4:	b2 e2       	ldi	r27, 0x22	; 34
     7f6:	2b 9f       	mul	r18, r27
     7f8:	b0 01       	movw	r22, r0
     7fa:	11 24       	eor	r1, r1
     7fc:	6d 5e       	subi	r22, 0xED	; 237
     7fe:	7f 4d       	sbci	r23, 0xDF	; 223
     800:	fb 01       	movw	r30, r22
     802:	42 81       	ldd	r20, Z+2	; 0x02
     804:	50 e0       	ldi	r21, 0x00	; 0
     806:	45 5f       	subi	r20, 0xF5	; 245
     808:	5e 4d       	sbci	r21, 0xDE	; 222
     80a:	da 01       	movw	r26, r20
     80c:	51 96       	adiw	r26, 0x11	; 17
     80e:	fc 92       	st	X, r15
		for (uint8_t i = 0; i < _linkCnt; i++)
     810:	e1 80       	ldd	r14, Z+1	; 0x01
     812:	ee 20       	and	r14, r14
     814:	b1 f1       	breq	.+108    	; 0x882 <__LOCK_REGION_LENGTH__+0x482>
     816:	b2 e2       	ldi	r27, 0x22	; 34
     818:	2b 9f       	mul	r18, r27
     81a:	90 01       	movw	r18, r0
     81c:	11 24       	eor	r1, r1
     81e:	2a 5e       	subi	r18, 0xEA	; 234
     820:	3f 4d       	sbci	r19, 0xDF	; 223
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	60 e0       	ldi	r22, 0x00	; 0
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
			if (!level || !_difLvl[i]) //Set zero level directly
				_lvl[i] = 0;
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
     826:	cf 2c       	mov	r12, r15
     828:	d1 2c       	mov	r13, r1
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     82a:	f9 01       	movw	r30, r18
     82c:	40 81       	ld	r20, Z
     82e:	2f 5f       	subi	r18, 0xFF	; 255
     830:	3f 4f       	sbci	r19, 0xFF	; 255
     832:	50 e0       	ldi	r21, 0x00	; 0
     834:	44 0f       	add	r20, r20
     836:	55 1f       	adc	r21, r21
     838:	48 5a       	subi	r20, 0xA8	; 168
     83a:	5e 4d       	sbci	r21, 0xDE	; 222
     83c:	da 01       	movw	r26, r20
     83e:	8d 90       	ld	r8, X+
     840:	9c 90       	ld	r9, X
     842:	43 81       	ldd	r20, Z+3	; 0x03
     844:	50 e0       	ldi	r21, 0x00	; 0
     846:	11 e0       	ldi	r17, 0x01	; 1
     848:	48 15       	cp	r20, r8
     84a:	59 05       	cpc	r21, r9
     84c:	09 f4       	brne	.+2      	; 0x850 <__LOCK_REGION_LENGTH__+0x450>
     84e:	10 e0       	ldi	r17, 0x00	; 0
     850:	71 2b       	or	r23, r17
			if (!level || !_difLvl[i]) //Set zero level directly
     852:	ff 20       	and	r15, r15
     854:	21 f0       	breq	.+8      	; 0x85e <__LOCK_REGION_LENGTH__+0x45e>
     856:	f9 01       	movw	r30, r18
     858:	40 85       	ldd	r20, Z+8	; 0x08
     85a:	41 11       	cpse	r20, r1
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__LOCK_REGION_LENGTH__+0x466>
				_lvl[i] = 0;
     85e:	d9 01       	movw	r26, r18
     860:	12 96       	adiw	r26, 0x02	; 2
     862:	1c 92       	st	X, r1
     864:	09 c0       	rjmp	.+18     	; 0x878 <__LOCK_REGION_LENGTH__+0x478>
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
     866:	4c 9d       	mul	r20, r12
     868:	80 01       	movw	r16, r0
     86a:	4d 9d       	mul	r20, r13
     86c:	10 0d       	add	r17, r0
     86e:	11 24       	eor	r1, r1
     870:	f9 01       	movw	r30, r18
     872:	45 81       	ldd	r20, Z+5	; 0x05
     874:	41 0f       	add	r20, r17
     876:	42 83       	std	Z+2, r20	; 0x02

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
		for (uint8_t i = 0; i < _linkCnt; i++)
     878:	6f 5f       	subi	r22, 0xFF	; 255
     87a:	6e 11       	cpse	r22, r14
     87c:	d6 cf       	rjmp	.-84     	; 0x82a <__LOCK_REGION_LENGTH__+0x42a>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     87e:	71 11       	cpse	r23, r1
     880:	f5 c0       	rjmp	.+490    	; 0xa6c <__LOCK_REGION_LENGTH__+0x66c>
			_tickLastChg = sysState.sysTick;
     882:	22 e2       	ldi	r18, 0x22	; 34
     884:	2a 9d       	mul	r18, r10
     886:	a0 01       	movw	r20, r0
     888:	2b 9d       	mul	r18, r11
     88a:	50 0d       	add	r21, r0
     88c:	11 24       	eor	r1, r1
     88e:	4d 5e       	subi	r20, 0xED	; 237
     890:	5f 4d       	sbci	r21, 0xDF	; 223
     892:	9a 01       	movw	r18, r20
     894:	2e 5e       	subi	r18, 0xEE	; 238
     896:	3f 4f       	sbci	r19, 0xFF	; 255
     898:	e9 85       	ldd	r30, Y+9	; 0x09
     89a:	da 01       	movw	r26, r20
     89c:	52 96       	adiw	r26, 0x12	; 18
     89e:	ec 93       	st	X, r30
     8a0:	ea 85       	ldd	r30, Y+10	; 0x0a
     8a2:	d9 01       	movw	r26, r18
     8a4:	11 96       	adiw	r26, 0x01	; 1
     8a6:	ec 93       	st	X, r30
     8a8:	11 97       	sbiw	r26, 0x01	; 1
     8aa:	fb 85       	ldd	r31, Y+11	; 0x0b
     8ac:	12 96       	adiw	r26, 0x02	; 2
     8ae:	fc 93       	st	X, r31
     8b0:	12 97       	sbiw	r26, 0x02	; 2
     8b2:	4c 84       	ldd	r4, Y+12	; 0x0c
     8b4:	13 96       	adiw	r26, 0x03	; 3
     8b6:	4c 92       	st	X, r4
     8b8:	13 97       	sbiw	r26, 0x03	; 3
     8ba:	5d 84       	ldd	r5, Y+13	; 0x0d
     8bc:	14 96       	adiw	r26, 0x04	; 4
     8be:	5c 92       	st	X, r5
     8c0:	14 97       	sbiw	r26, 0x04	; 4
     8c2:	6e 84       	ldd	r6, Y+14	; 0x0e
     8c4:	15 96       	adiw	r26, 0x05	; 5
     8c6:	6c 92       	st	X, r6
     8c8:	15 97       	sbiw	r26, 0x05	; 5
     8ca:	7f 84       	ldd	r7, Y+15	; 0x0f
     8cc:	16 96       	adiw	r26, 0x06	; 6
     8ce:	7c 92       	st	X, r7
     8d0:	16 97       	sbiw	r26, 0x06	; 6
     8d2:	c8 88       	ldd	r12, Y+16	; 0x10
     8d4:	17 96       	adiw	r26, 0x07	; 7
     8d6:	cc 92       	st	X, r12
     8d8:	c9 c0       	rjmp	.+402    	; 0xa6c <__LOCK_REGION_LENGTH__+0x66c>
	int8_t i;
	for (i = 0; i < 4; i++)
		links[i].updateLevel();
	msenCh.updateLevel();
	for (i = 0; i < 9; i++)
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
     8da:	fc 01       	movw	r30, r24
     8dc:	ee 0f       	add	r30, r30
     8de:	ff 1f       	adc	r31, r31
     8e0:	e8 5a       	subi	r30, 0xA8	; 168
     8e2:	fe 4d       	sbci	r31, 0xDE	; 222
     8e4:	20 81       	ld	r18, Z
     8e6:	31 81       	ldd	r19, Z+1	; 0x01
     8e8:	12 16       	cp	r1, r18
     8ea:	13 06       	cpc	r1, r19
     8ec:	44 f4       	brge	.+16     	; 0x8fe <__LOCK_REGION_LENGTH__+0x4fe>
     8ee:	fc 01       	movw	r30, r24
     8f0:	ee 0f       	add	r30, r30
     8f2:	ff 1f       	adc	r31, r31
     8f4:	e8 5a       	subi	r30, 0xA8	; 168
     8f6:	fe 4d       	sbci	r31, 0xDE	; 222
     8f8:	20 81       	ld	r18, Z
     8fa:	31 81       	ldd	r19, Z+1	; 0x01
     8fc:	01 c0       	rjmp	.+2      	; 0x900 <__LOCK_REGION_LENGTH__+0x500>
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	2d 93       	st	X+, r18
     902:	01 96       	adiw	r24, 0x01	; 1
	static bool rs485busy = false;
	int8_t i;
	for (i = 0; i < 4; i++)
		links[i].updateLevel();
	msenCh.updateLevel();
	for (i = 0; i < 9; i++)
     904:	89 30       	cpi	r24, 0x09	; 9
     906:	91 05       	cpc	r25, r1
     908:	41 f7       	brne	.-48     	; 0x8da <__LOCK_REGION_LENGTH__+0x4da>
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
	DSI8xFrames[0] = gLevelChg; //DSI start bit
     90a:	80 91 57 21 	lds	r24, 0x2157	; 0x802157 <gLevelChg>
     90e:	80 93 44 21 	sts	0x2144, r24	; 0x802144 <DSI8xFrames>
     912:	11 e0       	ldi	r17, 0x01	; 1
     914:	67 e0       	ldi	r22, 0x07	; 7
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	cc 24       	eor	r12, r12
     91a:	c3 94       	inc	r12
     91c:	d1 2c       	mov	r13, r1
     91e:	d6 01       	movw	r26, r12
     920:	06 2e       	mov	r0, r22
     922:	02 c0       	rjmp	.+4      	; 0x928 <__LOCK_REGION_LENGTH__+0x528>
     924:	aa 0f       	add	r26, r26
     926:	bb 1f       	adc	r27, r27
     928:	0a 94       	dec	r0
     92a:	e2 f7       	brpl	.-8      	; 0x924 <__LOCK_REGION_LENGTH__+0x524>
     92c:	eb e0       	ldi	r30, 0x0B	; 11
     92e:	f1 e2       	ldi	r31, 0x21	; 33
		uint8_t tmp0 = 0, tmp1 = 0, j;
		for (j = 0; j < 8; j++) //Levels
		{
			if (gLevelChg & (1 << j)) //Particular level has been changed
			{
				if (sysState.setLevels[j] & (1 << i)) //Set upper half-bit
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	50 e0       	ldi	r21, 0x00	; 0
	for (i = 7; i >= 0; i--) //DSI frame bits 7-0
	{
		uint8_t tmp0 = 0, tmp1 = 0, j;
		for (j = 0; j < 8; j++) //Levels
		{
			if (gLevelChg & (1 << j)) //Particular level has been changed
     938:	80 91 57 21 	lds	r24, 0x2157	; 0x802157 <gLevelChg>
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	02 2e       	mov	r0, r18
     940:	02 c0       	rjmp	.+4      	; 0x946 <__LOCK_REGION_LENGTH__+0x546>
     942:	95 95       	asr	r25
     944:	87 95       	ror	r24
     946:	0a 94       	dec	r0
     948:	e2 f7       	brpl	.-8      	; 0x942 <__LOCK_REGION_LENGTH__+0x542>
     94a:	80 ff       	sbrs	r24, 0
     94c:	09 c0       	rjmp	.+18     	; 0x960 <__LOCK_REGION_LENGTH__+0x560>
			{
				if (sysState.setLevels[j] & (1 << i)) //Set upper half-bit
     94e:	80 85       	ldd	r24, Z+8	; 0x08
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	8a 23       	and	r24, r26
     954:	9b 23       	and	r25, r27
     956:	89 2b       	or	r24, r25
     958:	11 f0       	breq	.+4      	; 0x95e <__LOCK_REGION_LENGTH__+0x55e>
					tmp1 |= 1;
     95a:	41 60       	ori	r20, 0x01	; 1
     95c:	01 c0       	rjmp	.+2      	; 0x960 <__LOCK_REGION_LENGTH__+0x560>
				else
					tmp0 |= 1; //Set lower half-bit (one-zero transition)
     95e:	51 60       	ori	r21, 0x01	; 1
			}
			tmp1 <<= 1;
     960:	44 0f       	add	r20, r20
			tmp0 <<= 1;
     962:	55 0f       	add	r21, r21
     964:	2f 5f       	subi	r18, 0xFF	; 255
     966:	3f 4f       	sbci	r19, 0xFF	; 255
     968:	31 96       	adiw	r30, 0x01	; 1
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
	DSI8xFrames[0] = gLevelChg; //DSI start bit
	for (i = 7; i >= 0; i--) //DSI frame bits 7-0
	{
		uint8_t tmp0 = 0, tmp1 = 0, j;
		for (j = 0; j < 8; j++) //Levels
     96a:	28 30       	cpi	r18, 0x08	; 8
     96c:	31 05       	cpc	r19, r1
     96e:	21 f7       	brne	.-56     	; 0x938 <__LOCK_REGION_LENGTH__+0x538>
			}
			tmp1 <<= 1;
			tmp0 <<= 1;
		}
		j = (8 - i) << 1;
		DSI8xFrames[j - 1] = tmp0;
     970:	e1 2f       	mov	r30, r17
     972:	ee 0f       	add	r30, r30
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	ec 5b       	subi	r30, 0xBC	; 188
     978:	fe 4d       	sbci	r31, 0xDE	; 222
     97a:	9f 01       	movw	r18, r30
     97c:	21 50       	subi	r18, 0x01	; 1
     97e:	31 09       	sbc	r19, r1
     980:	d9 01       	movw	r26, r18
     982:	5c 93       	st	X, r21
		DSI8xFrames[j] = tmp1; //Manchester coded
     984:	40 83       	st	Z, r20
     986:	61 50       	subi	r22, 0x01	; 1
     988:	71 09       	sbc	r23, r1
     98a:	1f 5f       	subi	r17, 0xFF	; 255
		links[i].updateLevel();
	msenCh.updateLevel();
	for (i = 0; i < 9; i++)
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
	DSI8xFrames[0] = gLevelChg; //DSI start bit
	for (i = 7; i >= 0; i--) //DSI frame bits 7-0
     98c:	19 30       	cpi	r17, 0x09	; 9
     98e:	39 f6       	brne	.-114    	; 0x91e <__LOCK_REGION_LENGTH__+0x51e>
		}
		j = (8 - i) << 1;
		DSI8xFrames[j - 1] = tmp0;
		DSI8xFrames[j] = tmp1; //Manchester coded
	}
	DSI8xFrames[17] = 0; //DSI stop bit
     990:	10 92 55 21 	sts	0x2155, r1	; 0x802155 <DSI8xFrames+0x11>
	gLevelChg = 0; //Clear flags for changed levels
     994:	10 92 57 21 	sts	0x2157, r1	; 0x802157 <gLevelChg>
	EDMA.CH2.CTRLA |= EDMA_CH_ENABLE_bm | EDMA_CH_SINGLE_bm; //Initialize EDMA transfer sequence
     998:	e0 e0       	ldi	r30, 0x00	; 0
     99a:	f1 e0       	ldi	r31, 0x01	; 1
     99c:	80 a9       	ldd	r24, Z+48	; 0x30
     99e:	84 68       	ori	r24, 0x84	; 132
     9a0:	80 ab       	std	Z+48, r24	; 0x30

	if (sysState.setLevels[8] > 0) //On/off channel processing
     9a2:	80 91 1b 21 	lds	r24, 0x211B	; 0x80211b <sysState+0x10>
     9a6:	88 23       	and	r24, r24
     9a8:	21 f0       	breq	.+8      	; 0x9b2 <__LOCK_REGION_LENGTH__+0x5b2>
		PORTA.OUTSET = PIN7_bm;
     9aa:	80 e8       	ldi	r24, 0x80	; 128
     9ac:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
     9b0:	03 c0       	rjmp	.+6      	; 0x9b8 <__LOCK_REGION_LENGTH__+0x5b8>
	else
		PORTA.OUTCLR = PIN7_bm;
     9b2:	80 e8       	ldi	r24, 0x80	; 128
     9b4:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>

	if ((char)sysState.sysTick % 4 == 0) //Initialize conversion sequence 8 times per second
     9b8:	80 91 0b 21 	lds	r24, 0x210B	; 0x80210b <sysState>
     9bc:	83 70       	andi	r24, 0x03	; 3
     9be:	39 f4       	brne	.+14     	; 0x9ce <__LOCK_REGION_LENGTH__+0x5ce>
	{
		ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN1_gc;
     9c0:	e0 e0       	ldi	r30, 0x00	; 0
     9c2:	f2 e0       	ldi	r31, 0x02	; 2
     9c4:	88 e0       	ldi	r24, 0x08	; 8
     9c6:	81 a3       	std	Z+33, r24	; 0x21
		ADCA.CTRLA |= ADC_START_bm; //Start conversion from pin 1 (channel 1)
     9c8:	80 81       	ld	r24, Z
     9ca:	84 60       	ori	r24, 0x04	; 4
     9cc:	80 83       	st	Z, r24
	}

	int16_t h = (int8_t)sysState.sysTick;
     9ce:	2b e0       	ldi	r18, 0x0B	; 11
     9d0:	31 e2       	ldi	r19, 0x21	; 33
     9d2:	f9 01       	movw	r30, r18
     9d4:	f0 81       	ld	r31, Z
     9d6:	f9 87       	std	Y+9, r31	; 0x09
     9d8:	d9 01       	movw	r26, r18
     9da:	11 96       	adiw	r26, 0x01	; 1
     9dc:	bc 91       	ld	r27, X
     9de:	ba 87       	std	Y+10, r27	; 0x0a
     9e0:	f9 01       	movw	r30, r18
     9e2:	f2 81       	ldd	r31, Z+2	; 0x02
     9e4:	fb 87       	std	Y+11, r31	; 0x0b
     9e6:	d9 01       	movw	r26, r18
     9e8:	13 96       	adiw	r26, 0x03	; 3
     9ea:	bc 91       	ld	r27, X
     9ec:	bc 87       	std	Y+12, r27	; 0x0c
     9ee:	f9 01       	movw	r30, r18
     9f0:	f4 81       	ldd	r31, Z+4	; 0x04
     9f2:	fd 87       	std	Y+13, r31	; 0x0d
     9f4:	d9 01       	movw	r26, r18
     9f6:	15 96       	adiw	r26, 0x05	; 5
     9f8:	bc 91       	ld	r27, X
     9fa:	be 87       	std	Y+14, r27	; 0x0e
     9fc:	f9 01       	movw	r30, r18
     9fe:	f6 81       	ldd	r31, Z+6	; 0x06
     a00:	ff 87       	std	Y+15, r31	; 0x0f
     a02:	d9 01       	movw	r26, r18
     a04:	17 96       	adiw	r26, 0x07	; 7
     a06:	bc 91       	ld	r27, X
     a08:	b8 8b       	std	Y+16, r27	; 0x10
	TCC4.CCABUF = h * h; //This will produce slow fading of HB LED (4s up/down)
     a0a:	e9 85       	ldd	r30, Y+9	; 0x09
     a0c:	ee 02       	muls	r30, r30
     a0e:	90 01       	movw	r18, r0
     a10:	11 24       	eor	r1, r1
     a12:	20 93 38 08 	sts	0x0838, r18	; 0x800838 <__TEXT_REGION_LENGTH__+0x700838>
     a16:	30 93 39 08 	sts	0x0839, r19	; 0x800839 <__TEXT_REGION_LENGTH__+0x700839>

	if (((uint32_t)sysState.sysTick & 0x7FFFF) == 0) //Save state to EEPROM every 4.5 hrs
     a1a:	89 85       	ldd	r24, Y+9	; 0x09
     a1c:	9a 85       	ldd	r25, Y+10	; 0x0a
     a1e:	ab 85       	ldd	r26, Y+11	; 0x0b
     a20:	bc 85       	ldd	r27, Y+12	; 0x0c
     a22:	a7 70       	andi	r26, 0x07	; 7
     a24:	bb 27       	eor	r27, r27
     a26:	89 2b       	or	r24, r25
     a28:	8a 2b       	or	r24, r26
     a2a:	8b 2b       	or	r24, r27
     a2c:	41 f4       	brne	.+16     	; 0xa3e <__LOCK_REGION_LENGTH__+0x63e>
		eeprom_update_block(&channelOT, &savedCOT, sizeof(channelsOnTime));
     a2e:	48 e3       	ldi	r20, 0x38	; 56
     a30:	50 e0       	ldi	r21, 0x00	; 0
     a32:	61 e2       	ldi	r22, 0x21	; 33
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	83 ed       	ldi	r24, 0xD3	; 211
     a38:	90 e2       	ldi	r25, 0x20	; 32
     a3a:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <eeprom_update_block>

	if (rxMode == SetConfig) //We are currently receiving data packet
     a3e:	80 91 56 21 	lds	r24, 0x2156	; 0x802156 <rxMode>
     a42:	83 32       	cpi	r24, 0x23	; 35
     a44:	81 f4       	brne	.+32     	; 0xa66 <__LOCK_REGION_LENGTH__+0x666>
	{
		if (rs485busy) //Second tick in a row detected
     a46:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <_ZZ10__vector_7E9rs485busy>
     a4a:	88 23       	and	r24, r24
     a4c:	41 f0       	breq	.+16     	; 0xa5e <__LOCK_REGION_LENGTH__+0x65e>
		{
			rxMode = 0; //Packet considered lost
     a4e:	10 92 56 21 	sts	0x2156, r1	; 0x802156 <rxMode>
			USARTC0.CTRLB |= USART_MPCM_bm; //Set MPCM bit
     a52:	e0 ec       	ldi	r30, 0xC0	; 192
     a54:	f8 e0       	ldi	r31, 0x08	; 8
     a56:	83 81       	ldd	r24, Z+3	; 0x03
     a58:	82 60       	ori	r24, 0x02	; 2
     a5a:	83 83       	std	Z+3, r24	; 0x03
     a5c:	0c c0       	rjmp	.+24     	; 0xa76 <__LOCK_REGION_LENGTH__+0x676>
		}
		else
			rs485busy = true;
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <_ZZ10__vector_7E9rs485busy>
     a64:	08 c0       	rjmp	.+16     	; 0xa76 <__LOCK_REGION_LENGTH__+0x676>
	}
	else
		rs485busy = false;
     a66:	10 92 04 20 	sts	0x2004, r1	; 0x802004 <_ZZ10__vector_7E9rs485busy>
}
     a6a:	05 c0       	rjmp	.+10     	; 0xa76 <__LOCK_REGION_LENGTH__+0x676>
     a6c:	a3 e1       	ldi	r26, 0x13	; 19
     a6e:	b1 e2       	ldi	r27, 0x21	; 33

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
		for (uint8_t i = 0; i < _linkCnt; i++)
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	32 cf       	rjmp	.-412    	; 0x8da <__LOCK_REGION_LENGTH__+0x4da>
		else
			rs485busy = true;
	}
	else
		rs485busy = false;
}
     a76:	64 96       	adiw	r28, 0x14	; 20
     a78:	cd bf       	out	0x3d, r28	; 61
     a7a:	de bf       	out	0x3e, r29	; 62
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	ff 91       	pop	r31
     a82:	ef 91       	pop	r30
     a84:	bf 91       	pop	r27
     a86:	af 91       	pop	r26
     a88:	9f 91       	pop	r25
     a8a:	8f 91       	pop	r24
     a8c:	7f 91       	pop	r23
     a8e:	6f 91       	pop	r22
     a90:	5f 91       	pop	r21
     a92:	4f 91       	pop	r20
     a94:	3f 91       	pop	r19
     a96:	2f 91       	pop	r18
     a98:	1f 91       	pop	r17
     a9a:	0f 91       	pop	r16
     a9c:	ff 90       	pop	r15
     a9e:	ef 90       	pop	r14
     aa0:	df 90       	pop	r13
     aa2:	cf 90       	pop	r12
     aa4:	bf 90       	pop	r11
     aa6:	af 90       	pop	r10
     aa8:	9f 90       	pop	r9
     aaa:	8f 90       	pop	r8
     aac:	7f 90       	pop	r7
     aae:	6f 90       	pop	r6
     ab0:	5f 90       	pop	r5
     ab2:	4f 90       	pop	r4
     ab4:	3f 90       	pop	r3
     ab6:	2f 90       	pop	r2
     ab8:	0f 90       	pop	r0
     aba:	0f be       	out	0x3f, r0	; 63
     abc:	0f 90       	pop	r0
     abe:	1f 90       	pop	r1
     ac0:	18 95       	reti

00000ac2 <__vector_34>:

ISR(ADCA_CH0_vect)
{
     ac2:	1f 92       	push	r1
     ac4:	0f 92       	push	r0
     ac6:	0f b6       	in	r0, 0x3f	; 63
     ac8:	0f 92       	push	r0
     aca:	11 24       	eor	r1, r1
     acc:	af 92       	push	r10
     ace:	bf 92       	push	r11
     ad0:	df 92       	push	r13
     ad2:	ef 92       	push	r14
     ad4:	ff 92       	push	r15
     ad6:	0f 93       	push	r16
     ad8:	1f 93       	push	r17
     ada:	2f 93       	push	r18
     adc:	3f 93       	push	r19
     ade:	4f 93       	push	r20
     ae0:	5f 93       	push	r21
     ae2:	6f 93       	push	r22
     ae4:	7f 93       	push	r23
     ae6:	8f 93       	push	r24
     ae8:	9f 93       	push	r25
     aea:	af 93       	push	r26
     aec:	bf 93       	push	r27
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	ef 93       	push	r30
     af4:	ff 93       	push	r31
	static uint8_t sAdcCnt = 0;
	int16_t result = ADCA.CH0RES;
     af6:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__TEXT_REGION_LENGTH__+0x700210>
     afa:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__TEXT_REGION_LENGTH__+0x700211>
	if (sAdcCnt < 4 && LINK_VALID_MIN < result && result < LINK_VALID_MAX)
     afe:	20 91 03 20 	lds	r18, 0x2003	; 0x802003 <_ZZ11__vector_34E7sAdcCnt>
     b02:	24 30       	cpi	r18, 0x04	; 4
     b04:	08 f0       	brcs	.+2      	; 0xb08 <__vector_34+0x46>
     b06:	3a c1       	rjmp	.+628    	; 0xd7c <__vector_34+0x2ba>
     b08:	bc 01       	movw	r22, r24
     b0a:	6e 5e       	subi	r22, 0xEE	; 238
     b0c:	73 41       	sbci	r23, 0x13	; 19
     b0e:	6b 36       	cpi	r22, 0x6B	; 107
     b10:	77 46       	sbci	r23, 0x67	; 103
     b12:	08 f0       	brcs	.+2      	; 0xb16 <__vector_34+0x54>
     b14:	24 c1       	rjmp	.+584    	; 0xd5e <__vector_34+0x29c>
	{
		sysState.linksMask |= (1 << sAdcCnt); //Set 'valid' bit
     b16:	a2 2e       	mov	r10, r18
     b18:	b1 2c       	mov	r11, r1
     b1a:	eb e0       	ldi	r30, 0x0B	; 11
     b1c:	f1 e2       	ldi	r31, 0x21	; 33
     b1e:	61 e0       	ldi	r22, 0x01	; 1
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	02 2e       	mov	r0, r18
     b24:	02 c0       	rjmp	.+4      	; 0xb2a <__vector_34+0x68>
     b26:	66 0f       	add	r22, r22
     b28:	77 1f       	adc	r23, r23
     b2a:	0a 94       	dec	r0
     b2c:	e2 f7       	brpl	.-8      	; 0xb26 <__vector_34+0x64>
     b2e:	35 89       	ldd	r19, Z+21	; 0x15
     b30:	36 2b       	or	r19, r22
     b32:	35 8b       	std	Z+21, r19	; 0x15
		if (result < LINK_ON_BARRIER)
     b34:	85 34       	cpi	r24, 0x45	; 69
     b36:	6b e1       	ldi	r22, 0x1B	; 27
     b38:	96 07       	cpc	r25, r22
     b3a:	0c f0       	brlt	.+2      	; 0xb3e <__vector_34+0x7c>
     b3c:	73 c0       	rjmp	.+230    	; 0xc24 <__vector_34+0x162>
		{
			result = 0;
			if (sysState.linksMask & (0x10 << sAdcCnt)) //Previous level was non-zero
     b3e:	60 e1       	ldi	r22, 0x10	; 16
     b40:	70 e0       	ldi	r23, 0x00	; 0
     b42:	02 2e       	mov	r0, r18
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <__vector_34+0x88>
     b46:	66 0f       	add	r22, r22
     b48:	77 1f       	adc	r23, r23
     b4a:	0a 94       	dec	r0
     b4c:	e2 f7       	brpl	.-8      	; 0xb46 <__vector_34+0x84>
     b4e:	83 2f       	mov	r24, r19
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	86 23       	and	r24, r22
     b54:	97 23       	and	r25, r23
     b56:	89 2b       	or	r24, r25
     b58:	09 f4       	brne	.+2      	; 0xb5c <__vector_34+0x9a>
     b5a:	5f c0       	rjmp	.+190    	; 0xc1a <__vector_34+0x158>
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
     b5c:	82 e2       	ldi	r24, 0x22	; 34
     b5e:	8a 9d       	mul	r24, r10
     b60:	d0 01       	movw	r26, r0
     b62:	8b 9d       	mul	r24, r11
     b64:	b0 0d       	add	r27, r0
     b66:	11 24       	eor	r1, r1
     b68:	ad 5e       	subi	r26, 0xED	; 237
     b6a:	bf 4d       	sbci	r27, 0xDF	; 223
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	ec 91       	ld	r30, X
     b70:	12 97       	sbiw	r26, 0x02	; 2
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	e5 5f       	subi	r30, 0xF5	; 245
     b76:	fe 4d       	sbci	r31, 0xDE	; 222
     b78:	11 8a       	std	Z+17, r1	; 0x11
		for (uint8_t i = 0; i < _linkCnt; i++)
     b7a:	11 96       	adiw	r26, 0x01	; 1
     b7c:	dc 90       	ld	r13, X
     b7e:	dd 20       	and	r13, r13
     b80:	11 f1       	breq	.+68     	; 0xbc6 <__vector_34+0x104>
     b82:	c2 e2       	ldi	r28, 0x22	; 34
     b84:	2c 9f       	mul	r18, r28
     b86:	c0 01       	movw	r24, r0
     b88:	11 24       	eor	r1, r1
     b8a:	8a 5e       	subi	r24, 0xEA	; 234
     b8c:	9f 4d       	sbci	r25, 0xDF	; 223
     b8e:	00 e0       	ldi	r16, 0x00	; 0
     b90:	10 e0       	ldi	r17, 0x00	; 0
     b92:	dc 01       	movw	r26, r24
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     b94:	ec 91       	ld	r30, X
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	ee 0f       	add	r30, r30
     b9c:	ff 1f       	adc	r31, r31
     b9e:	e8 5a       	subi	r30, 0xA8	; 168
     ba0:	fe 4d       	sbci	r31, 0xDE	; 222
     ba2:	e0 80       	ld	r14, Z
     ba4:	f1 80       	ldd	r15, Z+1	; 0x01
     ba6:	13 96       	adiw	r26, 0x03	; 3
     ba8:	4c 91       	ld	r20, X
     baa:	50 e0       	ldi	r21, 0x00	; 0
     bac:	e1 e0       	ldi	r30, 0x01	; 1
     bae:	4e 15       	cp	r20, r14
     bb0:	5f 05       	cpc	r21, r15
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <__vector_34+0xf4>
     bb4:	e0 e0       	ldi	r30, 0x00	; 0
     bb6:	0e 2b       	or	r16, r30
			if (!level || !_difLvl[i]) //Set zero level directly
				_lvl[i] = 0;
     bb8:	fc 01       	movw	r30, r24
     bba:	12 82       	std	Z+2, r1	; 0x02

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
		for (uint8_t i = 0; i < _linkCnt; i++)
     bbc:	1f 5f       	subi	r17, 0xFF	; 255
     bbe:	1d 11       	cpse	r17, r13
     bc0:	e8 cf       	rjmp	.-48     	; 0xb92 <__vector_34+0xd0>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     bc2:	01 11       	cpse	r16, r1
     bc4:	2a c0       	rjmp	.+84     	; 0xc1a <__vector_34+0x158>
			_tickLastChg = sysState.sysTick;
     bc6:	42 e2       	ldi	r20, 0x22	; 34
     bc8:	4a 9d       	mul	r20, r10
     bca:	c0 01       	movw	r24, r0
     bcc:	4b 9d       	mul	r20, r11
     bce:	90 0d       	add	r25, r0
     bd0:	11 24       	eor	r1, r1
     bd2:	ec 01       	movw	r28, r24
     bd4:	cd 5e       	subi	r28, 0xED	; 237
     bd6:	df 4d       	sbci	r29, 0xDF	; 223
     bd8:	de 01       	movw	r26, r28
     bda:	52 96       	adiw	r26, 0x12	; 18
     bdc:	eb e0       	ldi	r30, 0x0B	; 11
     bde:	f1 e2       	ldi	r31, 0x21	; 33
     be0:	80 81       	ld	r24, Z
     be2:	8a 8b       	std	Y+18, r24	; 0x12
     be4:	81 81       	ldd	r24, Z+1	; 0x01
     be6:	11 96       	adiw	r26, 0x01	; 1
     be8:	8c 93       	st	X, r24
     bea:	11 97       	sbiw	r26, 0x01	; 1
     bec:	82 81       	ldd	r24, Z+2	; 0x02
     bee:	12 96       	adiw	r26, 0x02	; 2
     bf0:	8c 93       	st	X, r24
     bf2:	12 97       	sbiw	r26, 0x02	; 2
     bf4:	83 81       	ldd	r24, Z+3	; 0x03
     bf6:	13 96       	adiw	r26, 0x03	; 3
     bf8:	8c 93       	st	X, r24
     bfa:	13 97       	sbiw	r26, 0x03	; 3
     bfc:	84 81       	ldd	r24, Z+4	; 0x04
     bfe:	14 96       	adiw	r26, 0x04	; 4
     c00:	8c 93       	st	X, r24
     c02:	14 97       	sbiw	r26, 0x04	; 4
     c04:	85 81       	ldd	r24, Z+5	; 0x05
     c06:	15 96       	adiw	r26, 0x05	; 5
     c08:	8c 93       	st	X, r24
     c0a:	15 97       	sbiw	r26, 0x05	; 5
     c0c:	86 81       	ldd	r24, Z+6	; 0x06
     c0e:	16 96       	adiw	r26, 0x06	; 6
     c10:	8c 93       	st	X, r24
     c12:	16 97       	sbiw	r26, 0x06	; 6
     c14:	87 81       	ldd	r24, Z+7	; 0x07
     c16:	17 96       	adiw	r26, 0x07	; 7
     c18:	8c 93       	st	X, r24
		if (result < LINK_ON_BARRIER)
		{
			result = 0;
			if (sysState.linksMask & (0x10 << sAdcCnt)) //Previous level was non-zero
				links[sAdcCnt].setLevel(0);
			sysState.linksMask &= ~(0x10 << sAdcCnt); //Clear 'non-zero' bit
     c1a:	60 95       	com	r22
     c1c:	36 23       	and	r19, r22
     c1e:	30 93 20 21 	sts	0x2120, r19	; 0x802120 <sysState+0x15>
     c22:	85 c1       	rjmp	.+778    	; 0xf2e <__vector_34+0x46c>
		}
		else
		{
			result = (result - LINK_1PERC_CODE) / LINK_SCALE;
     c24:	80 59       	subi	r24, 0x90	; 144
     c26:	91 42       	sbci	r25, 0x21	; 33
     c28:	64 e5       	ldi	r22, 0x54	; 84
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	0e 94 ae 09 	call	0x135c	; 0x135c <__divmodhi4>
			if (result < 1)
     c30:	16 16       	cp	r1, r22
     c32:	17 06       	cpc	r1, r23
     c34:	14 f0       	brlt	.+4      	; 0xc3a <__vector_34+0x178>
				result = 1;
     c36:	61 e0       	ldi	r22, 0x01	; 1
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	6f 3f       	cpi	r22, 0xFF	; 255
     c3c:	71 05       	cpc	r23, r1
     c3e:	19 f0       	breq	.+6      	; 0xc46 <__vector_34+0x184>
     c40:	14 f0       	brlt	.+4      	; 0xc46 <__vector_34+0x184>
     c42:	6f ef       	ldi	r22, 0xFF	; 255
     c44:	70 e0       	ldi	r23, 0x00	; 0
			if (result > 255)
				result = 255;
			sysState.linksMask |= (0x10 << sAdcCnt); //Set 'non-zero' bit
     c46:	80 e1       	ldi	r24, 0x10	; 16
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <__vector_34+0x190>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <__vector_34+0x18c>
     c56:	38 2b       	or	r19, r24
     c58:	30 93 20 21 	sts	0x2120, r19	; 0x802120 <sysState+0x15>
			if (sysState.linkLevels[sAdcCnt] != (uint8_t)result) //Update only when level was changed
     c5c:	ab 01       	movw	r20, r22
     c5e:	55 27       	eor	r21, r21
     c60:	f5 01       	movw	r30, r10
     c62:	e5 5f       	subi	r30, 0xF5	; 245
     c64:	fe 4d       	sbci	r31, 0xDE	; 222
     c66:	81 89       	ldd	r24, Z+17	; 0x11
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	84 17       	cp	r24, r20
     c6c:	95 07       	cpc	r25, r21
     c6e:	09 f4       	brne	.+2      	; 0xc72 <__vector_34+0x1b0>
     c70:	5e c1       	rjmp	.+700    	; 0xf2e <__vector_34+0x46c>
				links[sAdcCnt].setLevel((uint8_t)result);
     c72:	06 2f       	mov	r16, r22
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
     c74:	82 e2       	ldi	r24, 0x22	; 34
     c76:	8a 9d       	mul	r24, r10
     c78:	d0 01       	movw	r26, r0
     c7a:	8b 9d       	mul	r24, r11
     c7c:	b0 0d       	add	r27, r0
     c7e:	11 24       	eor	r1, r1
     c80:	ad 5e       	subi	r26, 0xED	; 237
     c82:	bf 4d       	sbci	r27, 0xDF	; 223
     c84:	12 96       	adiw	r26, 0x02	; 2
     c86:	ec 91       	ld	r30, X
     c88:	12 97       	sbiw	r26, 0x02	; 2
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	e5 5f       	subi	r30, 0xF5	; 245
     c8e:	fe 4d       	sbci	r31, 0xDE	; 222
     c90:	61 8b       	std	Z+17, r22	; 0x11
		for (uint8_t i = 0; i < _linkCnt; i++)
     c92:	11 96       	adiw	r26, 0x01	; 1
     c94:	1c 91       	ld	r17, X
     c96:	11 23       	and	r17, r17
     c98:	b9 f1       	breq	.+110    	; 0xd08 <__vector_34+0x246>
     c9a:	f2 e2       	ldi	r31, 0x22	; 34
     c9c:	2f 9f       	mul	r18, r31
     c9e:	d0 01       	movw	r26, r0
     ca0:	11 24       	eor	r1, r1
     ca2:	aa 5e       	subi	r26, 0xEA	; 234
     ca4:	bf 4d       	sbci	r27, 0xDF	; 223
     ca6:	70 e0       	ldi	r23, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     caa:	ed 01       	movw	r28, r26
     cac:	e8 81       	ld	r30, Y
     cae:	11 96       	adiw	r26, 0x01	; 1
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	ee 0f       	add	r30, r30
     cb4:	ff 1f       	adc	r31, r31
     cb6:	e8 5a       	subi	r30, 0xA8	; 168
     cb8:	fe 4d       	sbci	r31, 0xDE	; 222
     cba:	01 90       	ld	r0, Z+
     cbc:	f0 81       	ld	r31, Z
     cbe:	e0 2d       	mov	r30, r0
     cc0:	8b 81       	ldd	r24, Y+3	; 0x03
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	61 e0       	ldi	r22, 0x01	; 1
     cc6:	8e 17       	cp	r24, r30
     cc8:	9f 07       	cpc	r25, r31
     cca:	09 f4       	brne	.+2      	; 0xcce <__vector_34+0x20c>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	76 2b       	or	r23, r22
			if (!level || !_difLvl[i]) //Set zero level directly
     cd0:	00 23       	and	r16, r16
     cd2:	29 f0       	breq	.+10     	; 0xcde <__vector_34+0x21c>
     cd4:	18 96       	adiw	r26, 0x08	; 8
     cd6:	8c 91       	ld	r24, X
     cd8:	18 97       	sbiw	r26, 0x08	; 8
     cda:	81 11       	cpse	r24, r1
     cdc:	04 c0       	rjmp	.+8      	; 0xce6 <__vector_34+0x224>
				_lvl[i] = 0;
     cde:	12 96       	adiw	r26, 0x02	; 2
     ce0:	1c 92       	st	X, r1
     ce2:	12 97       	sbiw	r26, 0x02	; 2
     ce4:	0c c0       	rjmp	.+24     	; 0xcfe <__vector_34+0x23c>
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
     ce6:	84 9f       	mul	r24, r20
     ce8:	f0 01       	movw	r30, r0
     cea:	85 9f       	mul	r24, r21
     cec:	f0 0d       	add	r31, r0
     cee:	11 24       	eor	r1, r1
     cf0:	15 96       	adiw	r26, 0x05	; 5
     cf2:	8c 91       	ld	r24, X
     cf4:	15 97       	sbiw	r26, 0x05	; 5
     cf6:	8f 0f       	add	r24, r31
     cf8:	12 96       	adiw	r26, 0x02	; 2
     cfa:	8c 93       	st	X, r24
     cfc:	12 97       	sbiw	r26, 0x02	; 2

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
		for (uint8_t i = 0; i < _linkCnt; i++)
     cfe:	3f 5f       	subi	r19, 0xFF	; 255
     d00:	13 13       	cpse	r17, r19
     d02:	d3 cf       	rjmp	.-90     	; 0xcaa <__vector_34+0x1e8>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     d04:	71 11       	cpse	r23, r1
     d06:	13 c1       	rjmp	.+550    	; 0xf2e <__vector_34+0x46c>
			_tickLastChg = sysState.sysTick;
     d08:	32 e2       	ldi	r19, 0x22	; 34
     d0a:	3a 9d       	mul	r19, r10
     d0c:	c0 01       	movw	r24, r0
     d0e:	3b 9d       	mul	r19, r11
     d10:	90 0d       	add	r25, r0
     d12:	11 24       	eor	r1, r1
     d14:	ec 01       	movw	r28, r24
     d16:	cd 5e       	subi	r28, 0xED	; 237
     d18:	df 4d       	sbci	r29, 0xDF	; 223
     d1a:	de 01       	movw	r26, r28
     d1c:	52 96       	adiw	r26, 0x12	; 18
     d1e:	eb e0       	ldi	r30, 0x0B	; 11
     d20:	f1 e2       	ldi	r31, 0x21	; 33
     d22:	80 81       	ld	r24, Z
     d24:	8a 8b       	std	Y+18, r24	; 0x12
     d26:	81 81       	ldd	r24, Z+1	; 0x01
     d28:	11 96       	adiw	r26, 0x01	; 1
     d2a:	8c 93       	st	X, r24
     d2c:	11 97       	sbiw	r26, 0x01	; 1
     d2e:	82 81       	ldd	r24, Z+2	; 0x02
     d30:	12 96       	adiw	r26, 0x02	; 2
     d32:	8c 93       	st	X, r24
     d34:	12 97       	sbiw	r26, 0x02	; 2
     d36:	83 81       	ldd	r24, Z+3	; 0x03
     d38:	13 96       	adiw	r26, 0x03	; 3
     d3a:	8c 93       	st	X, r24
     d3c:	13 97       	sbiw	r26, 0x03	; 3
     d3e:	84 81       	ldd	r24, Z+4	; 0x04
     d40:	14 96       	adiw	r26, 0x04	; 4
     d42:	8c 93       	st	X, r24
     d44:	14 97       	sbiw	r26, 0x04	; 4
     d46:	85 81       	ldd	r24, Z+5	; 0x05
     d48:	15 96       	adiw	r26, 0x05	; 5
     d4a:	8c 93       	st	X, r24
     d4c:	15 97       	sbiw	r26, 0x05	; 5
     d4e:	86 81       	ldd	r24, Z+6	; 0x06
     d50:	16 96       	adiw	r26, 0x06	; 6
     d52:	8c 93       	st	X, r24
     d54:	16 97       	sbiw	r26, 0x06	; 6
     d56:	87 81       	ldd	r24, Z+7	; 0x07
     d58:	17 96       	adiw	r26, 0x07	; 7
     d5a:	8c 93       	st	X, r24
     d5c:	e8 c0       	rjmp	.+464    	; 0xf2e <__vector_34+0x46c>
				links[sAdcCnt].setLevel((uint8_t)result);
		}

	}
	else if (sAdcCnt < 4)
		sysState.linksMask &= ~(0x11 << sAdcCnt); //Clear 'valid' and 'non-zero' bits
     d5e:	eb e0       	ldi	r30, 0x0B	; 11
     d60:	f1 e2       	ldi	r31, 0x21	; 33
     d62:	81 e1       	ldi	r24, 0x11	; 17
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	02 2e       	mov	r0, r18
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <__vector_34+0x2ac>
     d6a:	88 0f       	add	r24, r24
     d6c:	99 1f       	adc	r25, r25
     d6e:	0a 94       	dec	r0
     d70:	e2 f7       	brpl	.-8      	; 0xd6a <__vector_34+0x2a8>
     d72:	80 95       	com	r24
     d74:	95 89       	ldd	r25, Z+21	; 0x15
     d76:	89 23       	and	r24, r25
     d78:	85 8b       	std	Z+21, r24	; 0x15
     d7a:	d9 c0       	rjmp	.+434    	; 0xf2e <__vector_34+0x46c>
	else //sAdcCnt == 4: MSEN channel
		msenCh.setLevel((uint8_t)(result >> 6));
     d7c:	08 2e       	mov	r0, r24
     d7e:	89 2f       	mov	r24, r25
     d80:	00 0c       	add	r0, r0
     d82:	88 1f       	adc	r24, r24
     d84:	99 0b       	sbc	r25, r25
     d86:	00 0c       	add	r0, r0
     d88:	88 1f       	adc	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	38 2f       	mov	r19, r24
		_onTime = validConf.msenOnTime > 5 ? validConf.msenOnTime : 6;
		_fTime = _onTime + validConf.msenLowTime;
	}
	void setLevel(uint8_t level)
	{
		if (level < MSEN_VALID_MIN || !validConf.msenOnTime || (sysState.linksMask & (0x10 << _linkNum)))
     d8e:	84 31       	cpi	r24, 0x14	; 20
     d90:	c0 f0       	brcs	.+48     	; 0xdc2 <__vector_34+0x300>
     d92:	40 91 3d 21 	lds	r20, 0x213D	; 0x80213d <validConf+0x1a>
     d96:	44 23       	and	r20, r20
     d98:	a1 f0       	breq	.+40     	; 0xdc2 <__vector_34+0x300>
     d9a:	e0 91 07 20 	lds	r30, 0x2007	; 0x802007 <msenCh+0x2>
     d9e:	ae 2f       	mov	r26, r30
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	40 91 20 21 	lds	r20, 0x2120	; 0x802120 <sysState+0x15>
     da6:	64 2f       	mov	r22, r20
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	40 e1       	ldi	r20, 0x10	; 16
     dac:	50 e0       	ldi	r21, 0x00	; 0
     dae:	0e 2e       	mov	r0, r30
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <__vector_34+0x2f4>
     db2:	44 0f       	add	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	0a 94       	dec	r0
     db8:	e2 f7       	brpl	.-8      	; 0xdb2 <__vector_34+0x2f0>
     dba:	46 23       	and	r20, r22
     dbc:	57 23       	and	r21, r23
     dbe:	45 2b       	or	r20, r21
     dc0:	29 f0       	breq	.+10     	; 0xdcc <__vector_34+0x30a>
		{
			_lvl = 0; //MSEN disconnected, disabled (by zero on time) or there is non-zero level from link
     dc2:	e5 e0       	ldi	r30, 0x05	; 5
     dc4:	f0 e2       	ldi	r31, 0x20	; 32
     dc6:	13 82       	std	Z+3, r1	; 0x03
			cntDown = false;
     dc8:	10 82       	st	Z, r1
     dca:	b1 c0       	rjmp	.+354    	; 0xf2e <__vector_34+0x46c>
			return;
		}
		if (level > MSEN_SEN1_TRIG && _lvl == MSEN_VALID_MIN) //Off to on transition
     dcc:	8a 33       	cpi	r24, 0x3A	; 58
     dce:	08 f4       	brcc	.+2      	; 0xdd2 <__vector_34+0x310>
     dd0:	83 c0       	rjmp	.+262    	; 0xed8 <__vector_34+0x416>
     dd2:	40 91 08 20 	lds	r20, 0x2008	; 0x802008 <msenCh+0x3>
     dd6:	44 31       	cpi	r20, 0x14	; 20
     dd8:	09 f0       	breq	.+2      	; 0xddc <__vector_34+0x31a>
     dda:	7e c0       	rjmp	.+252    	; 0xed8 <__vector_34+0x416>
		{
			_lvl = level;
     ddc:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <msenCh+0x3>
		}
	}

	void setLevel(uint8_t level, bool direction) //Accepts level in the range 0…255
	{
		_dir = direction;
     de0:	82 e2       	ldi	r24, 0x22	; 34
     de2:	8a 9f       	mul	r24, r26
     de4:	e0 01       	movw	r28, r0
     de6:	8b 9f       	mul	r24, r27
     de8:	d0 0d       	add	r29, r0
     dea:	11 24       	eor	r1, r1
     dec:	cd 5e       	subi	r28, 0xED	; 237
     dee:	df 4d       	sbci	r29, 0xDF	; 223
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	37 34       	cpi	r19, 0x47	; 71
     df4:	08 f4       	brcc	.+2      	; 0xdf8 <__vector_34+0x336>
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	88 83       	st	Y, r24
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
     dfa:	32 e2       	ldi	r19, 0x22	; 34
     dfc:	3a 9f       	mul	r19, r26
     dfe:	c0 01       	movw	r24, r0
     e00:	3b 9f       	mul	r19, r27
     e02:	90 0d       	add	r25, r0
     e04:	11 24       	eor	r1, r1
     e06:	8d 5e       	subi	r24, 0xED	; 237
     e08:	9f 4d       	sbci	r25, 0xDF	; 223
     e0a:	ec 01       	movw	r28, r24
     e0c:	3a 81       	ldd	r19, Y+2	; 0x02
     e0e:	c3 2f       	mov	r28, r19
     e10:	d0 e0       	ldi	r29, 0x00	; 0
     e12:	c5 5f       	subi	r28, 0xF5	; 245
     e14:	de 4d       	sbci	r29, 0xDE	; 222
     e16:	3f ef       	ldi	r19, 0xFF	; 255
     e18:	39 8b       	std	Y+17, r19	; 0x11
		for (uint8_t i = 0; i < _linkCnt; i++)
     e1a:	ec 01       	movw	r28, r24
     e1c:	69 81       	ldd	r22, Y+1	; 0x01
     e1e:	66 23       	and	r22, r22
     e20:	69 f1       	breq	.+90     	; 0xe7c <__vector_34+0x3ba>
     e22:	d2 e2       	ldi	r29, 0x22	; 34
     e24:	ed 9f       	mul	r30, r29
     e26:	f0 01       	movw	r30, r0
     e28:	11 24       	eor	r1, r1
     e2a:	ea 5e       	subi	r30, 0xEA	; 234
     e2c:	ff 4d       	sbci	r31, 0xDF	; 223
     e2e:	50 e0       	ldi	r21, 0x00	; 0
     e30:	30 e0       	ldi	r19, 0x00	; 0
				_lvl[i] = 0;
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
     e32:	7f ef       	ldi	r23, 0xFF	; 255
     e34:	cf 01       	movw	r24, r30
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     e36:	40 81       	ld	r20, Z
     e38:	31 96       	adiw	r30, 0x01	; 1
     e3a:	c4 2f       	mov	r28, r20
     e3c:	d0 e0       	ldi	r29, 0x00	; 0
     e3e:	cc 0f       	add	r28, r28
     e40:	dd 1f       	adc	r29, r29
     e42:	c8 5a       	subi	r28, 0xA8	; 168
     e44:	de 4d       	sbci	r29, 0xDE	; 222
     e46:	08 81       	ld	r16, Y
     e48:	19 81       	ldd	r17, Y+1	; 0x01
     e4a:	ec 01       	movw	r28, r24
     e4c:	8b 81       	ldd	r24, Y+3	; 0x03
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	41 e0       	ldi	r20, 0x01	; 1
     e52:	80 17       	cp	r24, r16
     e54:	91 07       	cpc	r25, r17
     e56:	09 f4       	brne	.+2      	; 0xe5a <__vector_34+0x398>
     e58:	40 e0       	ldi	r20, 0x00	; 0
     e5a:	54 2b       	or	r21, r20
			if (!level || !_difLvl[i]) //Set zero level directly
     e5c:	80 85       	ldd	r24, Z+8	; 0x08
     e5e:	81 11       	cpse	r24, r1
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <__vector_34+0x3a4>
				_lvl[i] = 0;
     e62:	12 82       	std	Z+2, r1	; 0x02
     e64:	06 c0       	rjmp	.+12     	; 0xe72 <__vector_34+0x3b0>
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
     e66:	78 9f       	mul	r23, r24
     e68:	c0 01       	movw	r24, r0
     e6a:	11 24       	eor	r1, r1
     e6c:	85 81       	ldd	r24, Z+5	; 0x05
     e6e:	89 0f       	add	r24, r25
     e70:	82 83       	std	Z+2, r24	; 0x02

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
		for (uint8_t i = 0; i < _linkCnt; i++)
     e72:	3f 5f       	subi	r19, 0xFF	; 255
     e74:	36 13       	cpse	r19, r22
     e76:	de cf       	rjmp	.-68     	; 0xe34 <__vector_34+0x372>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     e78:	51 11       	cpse	r21, r1
     e7a:	29 c0       	rjmp	.+82     	; 0xece <__vector_34+0x40c>
			_tickLastChg = sysState.sysTick;
     e7c:	82 e2       	ldi	r24, 0x22	; 34
     e7e:	8a 9f       	mul	r24, r26
     e80:	e0 01       	movw	r28, r0
     e82:	8b 9f       	mul	r24, r27
     e84:	d0 0d       	add	r29, r0
     e86:	11 24       	eor	r1, r1
     e88:	cd 5e       	subi	r28, 0xED	; 237
     e8a:	df 4d       	sbci	r29, 0xDF	; 223
     e8c:	de 01       	movw	r26, r28
     e8e:	52 96       	adiw	r26, 0x12	; 18
     e90:	eb e0       	ldi	r30, 0x0B	; 11
     e92:	f1 e2       	ldi	r31, 0x21	; 33
     e94:	80 81       	ld	r24, Z
     e96:	8a 8b       	std	Y+18, r24	; 0x12
     e98:	81 81       	ldd	r24, Z+1	; 0x01
     e9a:	11 96       	adiw	r26, 0x01	; 1
     e9c:	8c 93       	st	X, r24
     e9e:	11 97       	sbiw	r26, 0x01	; 1
     ea0:	82 81       	ldd	r24, Z+2	; 0x02
     ea2:	12 96       	adiw	r26, 0x02	; 2
     ea4:	8c 93       	st	X, r24
     ea6:	12 97       	sbiw	r26, 0x02	; 2
     ea8:	83 81       	ldd	r24, Z+3	; 0x03
     eaa:	13 96       	adiw	r26, 0x03	; 3
     eac:	8c 93       	st	X, r24
     eae:	13 97       	sbiw	r26, 0x03	; 3
     eb0:	84 81       	ldd	r24, Z+4	; 0x04
     eb2:	14 96       	adiw	r26, 0x04	; 4
     eb4:	8c 93       	st	X, r24
     eb6:	14 97       	sbiw	r26, 0x04	; 4
     eb8:	85 81       	ldd	r24, Z+5	; 0x05
     eba:	15 96       	adiw	r26, 0x05	; 5
     ebc:	8c 93       	st	X, r24
     ebe:	15 97       	sbiw	r26, 0x05	; 5
     ec0:	86 81       	ldd	r24, Z+6	; 0x06
     ec2:	16 96       	adiw	r26, 0x06	; 6
     ec4:	8c 93       	st	X, r24
     ec6:	16 97       	sbiw	r26, 0x06	; 6
     ec8:	87 81       	ldd	r24, Z+7	; 0x07
     eca:	17 96       	adiw	r26, 0x07	; 7
     ecc:	8c 93       	st	X, r24
		}
		if (level > MSEN_SEN1_TRIG && _lvl == MSEN_VALID_MIN) //Off to on transition
		{
			_lvl = level;
			links[_linkNum].setLevel(255, level > MSEN_SEN2_TRIG); //Start from max light level
			ltEnt = cntDown = false;
     ece:	e5 e0       	ldi	r30, 0x05	; 5
     ed0:	f0 e2       	ldi	r31, 0x20	; 32
     ed2:	10 82       	st	Z, r1
     ed4:	11 82       	std	Z+1, r1	; 0x01
     ed6:	2b c0       	rjmp	.+86     	; 0xf2e <__vector_34+0x46c>
			return;
		}
		if (level < MSEN_SEN1_TRIG && _lvl > level) //On to off transition
     ed8:	39 33       	cpi	r19, 0x39	; 57
     eda:	48 f5       	brcc	.+82     	; 0xf2e <__vector_34+0x46c>
     edc:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <msenCh+0x3>
     ee0:	38 17       	cp	r19, r24
     ee2:	28 f5       	brcc	.+74     	; 0xf2e <__vector_34+0x46c>
		{
			_lvl = MSEN_VALID_MIN;
     ee4:	e5 e0       	ldi	r30, 0x05	; 5
     ee6:	f0 e2       	ldi	r31, 0x20	; 32
     ee8:	84 e1       	ldi	r24, 0x14	; 20
     eea:	83 83       	std	Z+3, r24	; 0x03
			_onTimeStamp = sysState.sysTick;
     eec:	ab e0       	ldi	r26, 0x0B	; 11
     eee:	b1 e2       	ldi	r27, 0x21	; 33
     ef0:	8c 91       	ld	r24, X
     ef2:	86 83       	std	Z+6, r24	; 0x06
     ef4:	11 96       	adiw	r26, 0x01	; 1
     ef6:	8c 91       	ld	r24, X
     ef8:	11 97       	sbiw	r26, 0x01	; 1
     efa:	87 83       	std	Z+7, r24	; 0x07
     efc:	12 96       	adiw	r26, 0x02	; 2
     efe:	8c 91       	ld	r24, X
     f00:	12 97       	sbiw	r26, 0x02	; 2
     f02:	80 87       	std	Z+8, r24	; 0x08
     f04:	13 96       	adiw	r26, 0x03	; 3
     f06:	8c 91       	ld	r24, X
     f08:	13 97       	sbiw	r26, 0x03	; 3
     f0a:	81 87       	std	Z+9, r24	; 0x09
     f0c:	14 96       	adiw	r26, 0x04	; 4
     f0e:	8c 91       	ld	r24, X
     f10:	14 97       	sbiw	r26, 0x04	; 4
     f12:	82 87       	std	Z+10, r24	; 0x0a
     f14:	15 96       	adiw	r26, 0x05	; 5
     f16:	8c 91       	ld	r24, X
     f18:	15 97       	sbiw	r26, 0x05	; 5
     f1a:	83 87       	std	Z+11, r24	; 0x0b
     f1c:	16 96       	adiw	r26, 0x06	; 6
     f1e:	8c 91       	ld	r24, X
     f20:	16 97       	sbiw	r26, 0x06	; 6
     f22:	84 87       	std	Z+12, r24	; 0x0c
     f24:	17 96       	adiw	r26, 0x07	; 7
     f26:	8c 91       	ld	r24, X
     f28:	85 87       	std	Z+13, r24	; 0x0d
			cntDown = true;
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	80 83       	st	Z, r24
	else if (sAdcCnt < 4)
		sysState.linksMask &= ~(0x11 << sAdcCnt); //Clear 'valid' and 'non-zero' bits
	else //sAdcCnt == 4: MSEN channel
		msenCh.setLevel((uint8_t)(result >> 6));

	sAdcCnt++;
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	82 0f       	add	r24, r18
     f32:	80 93 03 20 	sts	0x2003, r24	; 0x802003 <_ZZ11__vector_34E7sAdcCnt>
	ADCA.CH0.MUXCTRL = (sAdcCnt + 1) << ADC_CH_MUXPOS_gp;
     f36:	2e 5f       	subi	r18, 0xFE	; 254
     f38:	22 0f       	add	r18, r18
     f3a:	22 0f       	add	r18, r18
     f3c:	22 0f       	add	r18, r18
     f3e:	20 93 21 02 	sts	0x0221, r18	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
	if (sAdcCnt < 5)
     f42:	85 30       	cpi	r24, 0x05	; 5
     f44:	30 f4       	brcc	.+12     	; 0xf52 <__vector_34+0x490>
		ADCA.CTRLA |= ADC_START_bm;
     f46:	e0 e0       	ldi	r30, 0x00	; 0
     f48:	f2 e0       	ldi	r31, 0x02	; 2
     f4a:	80 81       	ld	r24, Z
     f4c:	84 60       	ori	r24, 0x04	; 4
     f4e:	80 83       	st	Z, r24
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <__vector_34+0x494>
	else
		sAdcCnt = 0;
     f52:	10 92 03 20 	sts	0x2003, r1	; 0x802003 <_ZZ11__vector_34E7sAdcCnt>
}
     f56:	ff 91       	pop	r31
     f58:	ef 91       	pop	r30
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	bf 91       	pop	r27
     f60:	af 91       	pop	r26
     f62:	9f 91       	pop	r25
     f64:	8f 91       	pop	r24
     f66:	7f 91       	pop	r23
     f68:	6f 91       	pop	r22
     f6a:	5f 91       	pop	r21
     f6c:	4f 91       	pop	r20
     f6e:	3f 91       	pop	r19
     f70:	2f 91       	pop	r18
     f72:	1f 91       	pop	r17
     f74:	0f 91       	pop	r16
     f76:	ff 90       	pop	r15
     f78:	ef 90       	pop	r14
     f7a:	df 90       	pop	r13
     f7c:	bf 90       	pop	r11
     f7e:	af 90       	pop	r10
     f80:	0f 90       	pop	r0
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	0f 90       	pop	r0
     f86:	1f 90       	pop	r1
     f88:	18 95       	reti

00000f8a <__vector_23>:

ISR(USARTC0_RXC_vect) //Data received from RS485
{
     f8a:	1f 92       	push	r1
     f8c:	0f 92       	push	r0
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	0f 92       	push	r0
     f92:	11 24       	eor	r1, r1
     f94:	2f 93       	push	r18
     f96:	3f 93       	push	r19
     f98:	4f 93       	push	r20
     f9a:	5f 93       	push	r21
     f9c:	6f 93       	push	r22
     f9e:	7f 93       	push	r23
     fa0:	8f 93       	push	r24
     fa2:	9f 93       	push	r25
     fa4:	af 93       	push	r26
     fa6:	bf 93       	push	r27
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	ef 93       	push	r30
     fae:	ff 93       	push	r31
	static uint8_t uCnt;
	static uint8_t *rxBuf;
	uint8_t data = USARTC0.DATA;
     fb0:	e0 ec       	ldi	r30, 0xC0	; 192
     fb2:	f8 e0       	ldi	r31, 0x08	; 8
     fb4:	80 81       	ld	r24, Z
	if (USARTC0.CTRLB & USART_MPCM_bm) //Address listening mode
     fb6:	93 81       	ldd	r25, Z+3	; 0x03
     fb8:	91 ff       	sbrs	r25, 1
     fba:	6e c0       	rjmp	.+220    	; 0x1098 <__vector_23+0x10e>
	{
		if (CmdLC <= data && data <= CmdUC)
     fbc:	9f ed       	ldi	r25, 0xDF	; 223
     fbe:	98 0f       	add	r25, r24
     fc0:	94 30       	cpi	r25, 0x04	; 4
     fc2:	08 f0       	brcs	.+2      	; 0xfc6 <__vector_23+0x3c>
     fc4:	66 c0       	rjmp	.+204    	; 0x1092 <__vector_23+0x108>
		{
			USARTC0.CTRLB &= ~USART_MPCM_bm; //Clear MPCM bit
     fc6:	93 81       	ldd	r25, Z+3	; 0x03
     fc8:	9d 7f       	andi	r25, 0xFD	; 253
     fca:	93 83       	std	Z+3, r25	; 0x03
			rxMode = data;
     fcc:	80 93 56 21 	sts	0x2156, r24	; 0x802156 <rxMode>
			if (data == SetConfig)
     fd0:	83 32       	cpi	r24, 0x23	; 35
     fd2:	51 f4       	brne	.+20     	; 0xfe8 <__vector_23+0x5e>
			{
				uCnt = sizeof(systemConfig); //Bytes to receive
     fd4:	81 e2       	ldi	r24, 0x21	; 33
     fd6:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <_ZZ11__vector_23E4uCnt>
				rxBuf = iobuf; //First byte address in structure
     fda:	8b e9       	ldi	r24, 0x9B	; 155
     fdc:	90 e2       	ldi	r25, 0x20	; 32
     fde:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <_edata>
     fe2:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <_edata+0x1>
     fe6:	84 c0       	rjmp	.+264    	; 0x10f0 <__vector_23+0x166>
0, 30, 96,	//Motion sensor on time, low time, low level
0, 0, 0};	//ninthLvl, rtcCorrect, CRC16

void inline UCTXen()
{
	PORTC.OUTSET = (1 << PIN1_bm);
     fe8:	84 e0       	ldi	r24, 0x04	; 4
     fea:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fee:	85 e1       	ldi	r24, 0x15	; 21
     ff0:	8a 95       	dec	r24
     ff2:	f1 f7       	brne	.-4      	; 0xff0 <__vector_23+0x66>
     ff4:	00 00       	nop
				rxBuf = iobuf; //First byte address in structure
			}
			else //Data transmit request
			{
				UCTXen();
				if (rxMode == GetConfig)
     ff6:	80 91 56 21 	lds	r24, 0x2156	; 0x802156 <rxMode>
     ffa:	82 32       	cpi	r24, 0x22	; 34
     ffc:	59 f4       	brne	.+22     	; 0x1014 <__vector_23+0x8a>
				{
					EDMA.CH1.TRFCNT = sizeof(systemConfig);
     ffe:	e0 e0       	ldi	r30, 0x00	; 0
    1000:	f1 e0       	ldi	r31, 0x01	; 1
    1002:	81 e2       	ldi	r24, 0x21	; 33
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	86 a3       	std	Z+38, r24	; 0x26
    1008:	97 a3       	std	Z+39, r25	; 0x27
					EDMA.CH1.ADDR = (uint16_t)&validConf;
    100a:	83 e2       	ldi	r24, 0x23	; 35
    100c:	91 e2       	ldi	r25, 0x21	; 33
    100e:	80 a7       	std	Z+40, r24	; 0x28
    1010:	91 a7       	std	Z+41, r25	; 0x29
    1012:	39 c0       	rjmp	.+114    	; 0x1086 <__vector_23+0xfc>
				}
				else if (rxMode == GetStatus) //Get state
    1014:	80 91 56 21 	lds	r24, 0x2156	; 0x802156 <rxMode>
    1018:	81 32       	cpi	r24, 0x21	; 33
    101a:	c9 f4       	brne	.+50     	; 0x104e <__vector_23+0xc4>
				{
					memcpy(iobuf, &sysState, sizeof(systemState));
    101c:	cb e9       	ldi	r28, 0x9B	; 155
    101e:	d0 e2       	ldi	r29, 0x20	; 32
    1020:	88 e1       	ldi	r24, 0x18	; 24
    1022:	eb e0       	ldi	r30, 0x0B	; 11
    1024:	f1 e2       	ldi	r31, 0x21	; 33
    1026:	de 01       	movw	r26, r28
    1028:	01 90       	ld	r0, Z+
    102a:	0d 92       	st	X+, r0
    102c:	8a 95       	dec	r24
    102e:	e1 f7       	brne	.-8      	; 0x1028 <__vector_23+0x9e>
					((systemState*)iobuf)->CRC16 = CalculateCRC16(iobuf, sizeof(systemState) - 2);
    1030:	66 e1       	ldi	r22, 0x16	; 22
    1032:	ce 01       	movw	r24, r28
    1034:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pvh>
    1038:	8e 8b       	std	Y+22, r24	; 0x16
    103a:	9f 8b       	std	Y+23, r25	; 0x17
					EDMA.CH1.TRFCNT = sizeof(systemState);
    103c:	e0 e0       	ldi	r30, 0x00	; 0
    103e:	f1 e0       	ldi	r31, 0x01	; 1
    1040:	88 e1       	ldi	r24, 0x18	; 24
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	86 a3       	std	Z+38, r24	; 0x26
    1046:	97 a3       	std	Z+39, r25	; 0x27
					EDMA.CH1.ADDR = (uint16_t)iobuf;
    1048:	c0 a7       	std	Z+40, r28	; 0x28
    104a:	d1 a7       	std	Z+41, r29	; 0x29
    104c:	1c c0       	rjmp	.+56     	; 0x1086 <__vector_23+0xfc>
				}
				else //Get on time
				{
					memcpy(iobuf, &channelOT, sizeof(channelsOnTime));
    104e:	88 e3       	ldi	r24, 0x38	; 56
    1050:	e3 ed       	ldi	r30, 0xD3	; 211
    1052:	f0 e2       	ldi	r31, 0x20	; 32
    1054:	ab e9       	ldi	r26, 0x9B	; 155
    1056:	b0 e2       	ldi	r27, 0x20	; 32
    1058:	01 90       	ld	r0, Z+
    105a:	0d 92       	st	X+, r0
    105c:	8a 95       	dec	r24
    105e:	e1 f7       	brne	.-8      	; 0x1058 <__vector_23+0xce>
					((channelsOnTime*)iobuf)->CRC16 = CalculateCRC16(iobuf, sizeof(channelsOnTime) - 2);
    1060:	66 e3       	ldi	r22, 0x36	; 54
    1062:	8b e9       	ldi	r24, 0x9B	; 155
    1064:	90 e2       	ldi	r25, 0x20	; 32
    1066:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pvh>
    106a:	ab e9       	ldi	r26, 0x9B	; 155
    106c:	b0 e2       	ldi	r27, 0x20	; 32
    106e:	d6 96       	adiw	r26, 0x36	; 54
    1070:	8d 93       	st	X+, r24
    1072:	9c 93       	st	X, r25
    1074:	d7 97       	sbiw	r26, 0x37	; 55
					EDMA.CH1.TRFCNT = sizeof(channelsOnTime);
    1076:	e0 e0       	ldi	r30, 0x00	; 0
    1078:	f1 e0       	ldi	r31, 0x01	; 1
    107a:	88 e3       	ldi	r24, 0x38	; 56
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	86 a3       	std	Z+38, r24	; 0x26
    1080:	97 a3       	std	Z+39, r25	; 0x27
					EDMA.CH1.ADDR = (uint16_t)iobuf;
    1082:	a0 a7       	std	Z+40, r26	; 0x28
    1084:	b1 a7       	std	Z+41, r27	; 0x29
				}
				EDMA.CH1.CTRLA |= EDMA_CH_ENABLE_bm;
    1086:	e0 e0       	ldi	r30, 0x00	; 0
    1088:	f1 e0       	ldi	r31, 0x01	; 1
    108a:	80 a1       	ldd	r24, Z+32	; 0x20
    108c:	80 68       	ori	r24, 0x80	; 128
    108e:	80 a3       	std	Z+32, r24	; 0x20
    1090:	2f c0       	rjmp	.+94     	; 0x10f0 <__vector_23+0x166>
			}
		}
		else
			rxMode = 0;
    1092:	10 92 56 21 	sts	0x2156, r1	; 0x802156 <rxMode>
    1096:	2c c0       	rjmp	.+88     	; 0x10f0 <__vector_23+0x166>
	}
	else if (rxMode == SetConfig)
    1098:	90 91 56 21 	lds	r25, 0x2156	; 0x802156 <rxMode>
    109c:	93 32       	cpi	r25, 0x23	; 35
    109e:	41 f5       	brne	.+80     	; 0x10f0 <__vector_23+0x166>
	{
		*rxBuf++ = data;
    10a0:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <_edata>
    10a4:	f0 91 01 20 	lds	r31, 0x2001	; 0x802001 <_edata+0x1>
    10a8:	9f 01       	movw	r18, r30
    10aa:	2f 5f       	subi	r18, 0xFF	; 255
    10ac:	3f 4f       	sbci	r19, 0xFF	; 255
    10ae:	20 93 00 20 	sts	0x2000, r18	; 0x802000 <_edata>
    10b2:	30 93 01 20 	sts	0x2001, r19	; 0x802001 <_edata+0x1>
    10b6:	80 83       	st	Z, r24
		if (--uCnt == 0) //Packet received
    10b8:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <_ZZ11__vector_23E4uCnt>
    10bc:	81 50       	subi	r24, 0x01	; 1
    10be:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <_ZZ11__vector_23E4uCnt>
    10c2:	81 11       	cpse	r24, r1
    10c4:	15 c0       	rjmp	.+42     	; 0x10f0 <__vector_23+0x166>
		{
			rxMode = 0;
    10c6:	10 92 56 21 	sts	0x2156, r1	; 0x802156 <rxMode>
			USARTC0.CTRLB |= USART_MPCM_bm; //Set MPCM bit
    10ca:	e0 ec       	ldi	r30, 0xC0	; 192
    10cc:	f8 e0       	ldi	r31, 0x08	; 8
    10ce:	83 81       	ldd	r24, Z+3	; 0x03
    10d0:	82 60       	ori	r24, 0x02	; 2
    10d2:	83 83       	std	Z+3, r24	; 0x03
			if (CalculateCRC16(iobuf, sizeof(systemConfig) - 2) == ((systemConfig*)iobuf)->CRC16)
    10d4:	6f e1       	ldi	r22, 0x1F	; 31
    10d6:	8b e9       	ldi	r24, 0x9B	; 155
    10d8:	90 e2       	ldi	r25, 0x20	; 32
    10da:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pvh>
    10de:	20 91 ba 20 	lds	r18, 0x20BA	; 0x8020ba <iobuf+0x1f>
    10e2:	30 91 bb 20 	lds	r19, 0x20BB	; 0x8020bb <iobuf+0x20>
    10e6:	82 17       	cp	r24, r18
    10e8:	93 07       	cpc	r25, r19
    10ea:	11 f4       	brne	.+4      	; 0x10f0 <__vector_23+0x166>
				ApplyConfig();
    10ec:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z11ApplyConfigv>
		}
	}
}
    10f0:	ff 91       	pop	r31
    10f2:	ef 91       	pop	r30
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	bf 91       	pop	r27
    10fa:	af 91       	pop	r26
    10fc:	9f 91       	pop	r25
    10fe:	8f 91       	pop	r24
    1100:	7f 91       	pop	r23
    1102:	6f 91       	pop	r22
    1104:	5f 91       	pop	r21
    1106:	4f 91       	pop	r20
    1108:	3f 91       	pop	r19
    110a:	2f 91       	pop	r18
    110c:	0f 90       	pop	r0
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	0f 90       	pop	r0
    1112:	1f 90       	pop	r1
    1114:	18 95       	reti

00001116 <__vector_4>:

ISR(EDMA_CH1_vect) //Packet has been sent completely over RS485
{
    1116:	1f 92       	push	r1
    1118:	0f 92       	push	r0
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	0f 92       	push	r0
    111e:	11 24       	eor	r1, r1
    1120:	8f 93       	push	r24
    1122:	ef 93       	push	r30
    1124:	ff 93       	push	r31
	UCRXen(); //Set bus in the idle state
    1126:	84 e0       	ldi	r24, 0x04	; 4
    1128:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	rxMode = 0;
    112c:	10 92 56 21 	sts	0x2156, r1	; 0x802156 <rxMode>
	EDMA.CH1.CTRLB |= EDMA_CH_TRNIF_bm | EDMA_CH_ERRIF_bm;
    1130:	e0 e0       	ldi	r30, 0x00	; 0
    1132:	f1 e0       	ldi	r31, 0x01	; 1
    1134:	81 a1       	ldd	r24, Z+33	; 0x21
    1136:	80 63       	ori	r24, 0x30	; 48
    1138:	81 a3       	std	Z+33, r24	; 0x21
}
    113a:	ff 91       	pop	r31
    113c:	ef 91       	pop	r30
    113e:	8f 91       	pop	r24
    1140:	0f 90       	pop	r0
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	0f 90       	pop	r0
    1146:	1f 90       	pop	r1
    1148:	18 95       	reti

0000114a <__vector_5>:

ISR(EDMA_CH2_vect)
{
    114a:	1f 92       	push	r1
    114c:	0f 92       	push	r0
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	0f 92       	push	r0
    1152:	11 24       	eor	r1, r1
    1154:	8f 93       	push	r24
    1156:	ef 93       	push	r30
    1158:	ff 93       	push	r31
	if (!(EDMA.CH2.CTRLB & EDMA_CH_ERRIF_bm))
    115a:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
    115e:	85 fd       	sbrc	r24, 5
    1160:	03 c0       	rjmp	.+6      	; 0x1168 <__vector_5+0x1e>
	PORTC.OUTCLR = PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
    1162:	80 ef       	ldi	r24, 0xF0	; 240
    1164:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	EDMA.CH2.CTRLB |= EDMA_CH_TRNIF_bm | EDMA_CH_ERRIF_bm;
    1168:	e0 e0       	ldi	r30, 0x00	; 0
    116a:	f1 e0       	ldi	r31, 0x01	; 1
    116c:	81 a9       	ldd	r24, Z+49	; 0x31
    116e:	80 63       	ori	r24, 0x30	; 48
    1170:	81 ab       	std	Z+49, r24	; 0x31
}
    1172:	ff 91       	pop	r31
    1174:	ef 91       	pop	r30
    1176:	8f 91       	pop	r24
    1178:	0f 90       	pop	r0
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	0f 90       	pop	r0
    117e:	1f 90       	pop	r1
    1180:	18 95       	reti

00001182 <_Z7mcuInitv>:

inline void mcuInit()
{
	//Port A configuration: 0-5 analog inputs, 7 inverted output
	PORTA.DIRSET = PIN7_bm;
    1182:	e0 e0       	ldi	r30, 0x00	; 0
    1184:	f6 e0       	ldi	r31, 0x06	; 6
    1186:	80 e8       	ldi	r24, 0x80	; 128
    1188:	81 83       	std	Z+1, r24	; 0x01
	PORTCFG.MPCMASK = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm;
    118a:	a0 eb       	ldi	r26, 0xB0	; 176
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	8f e3       	ldi	r24, 0x3F	; 63
    1190:	8c 93       	st	X, r24
	PORTA.PIN0CTRL = PORT_OPC_TOTEM_gc | PORT_ISC_INPUT_DISABLE_gc;
    1192:	87 e0       	ldi	r24, 0x07	; 7
    1194:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN7CTRL = PORT_OPC_TOTEM_gc | PORT_INVEN_bm;
    1196:	80 e4       	ldi	r24, 0x40	; 64
    1198:	87 8b       	std	Z+23, r24	; 0x17
	//Port C configuration: 0-1, 3-7 outputs
	PORTC.DIRSET = PIN0_bm | PIN1_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
    119a:	9b ef       	ldi	r25, 0xFB	; 251
    119c:	90 93 41 06 	sts	0x0641, r25	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
	//Port D configuration: 0-7 inverted outputs
	PORTD.DIRSET = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
    11a0:	e0 e6       	ldi	r30, 0x60	; 96
    11a2:	f6 e0       	ldi	r31, 0x06	; 6
    11a4:	9f ef       	ldi	r25, 0xFF	; 255
    11a6:	91 83       	std	Z+1, r25	; 0x01
	PORTCFG.MPCMASK = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
    11a8:	9c 93       	st	X, r25
	PORTD.PIN0CTRL = PORT_OPC_TOTEM_gc | PORT_INVEN_bm;
    11aa:	80 8b       	std	Z+16, r24	; 0x10
	//Clock configuration: 32MHz RC with DFLL from XOSC 32768Hz
	OSC.XOSCCTRL = OSC_XOSCSEL_32KHz_gc;
    11ac:	e0 e5       	ldi	r30, 0x50	; 80
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	82 e0       	ldi	r24, 0x02	; 2
    11b2:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |= OSC_RC32MEN_bm | OSC_XOSCEN_bm;
    11b4:	80 81       	ld	r24, Z
    11b6:	8a 60       	ori	r24, 0x0A	; 10
    11b8:	80 83       	st	Z, r24
	while (!(OSC.STATUS & OSC_XOSCRDY_bm));
    11ba:	81 81       	ldd	r24, Z+1	; 0x01
    11bc:	83 ff       	sbrs	r24, 3
    11be:	fd cf       	rjmp	.-6      	; 0x11ba <_Z7mcuInitv+0x38>
	while (!(OSC.STATUS & OSC_RC32MRDY_bm));
    11c0:	e0 e5       	ldi	r30, 0x50	; 80
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	81 81       	ldd	r24, Z+1	; 0x01
    11c6:	81 ff       	sbrs	r24, 1
    11c8:	fd cf       	rjmp	.-6      	; 0x11c4 <_Z7mcuInitv+0x42>
	OSC.DFLLCTRL = OSC_RC32MCREF_XOSC32K_gc;
    11ca:	82 e0       	ldi	r24, 0x02	; 2
    11cc:	80 93 56 00 	sts	0x0056, r24	; 0x800056 <__TEXT_REGION_LENGTH__+0x700056>
	DFLLRC32M.CTRL = DFLL_ENABLE_bm;
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
	CCP = CCP_IOREG_gc;
    11d6:	98 ed       	ldi	r25, 0xD8	; 216
    11d8:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
    11da:	e0 e4       	ldi	r30, 0x40	; 64
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 83       	st	Z, r24
	//OSC.CTRL = OSC_RC32MEN_bm | OSC_XOSCEN_bm; //Disable unused clock sources
	CLK.RTCCTRL = CLK_RTCSRC_TOSC_gc | CLK_RTCEN_bm; //1024Hz RTC clock source
    11e0:	83 e0       	ldi	r24, 0x03	; 3
    11e2:	83 83       	std	Z+3, r24	; 0x03
	while (RTC.STATUS & RTC_SYNCBUSY_bm);
    11e4:	e0 e0       	ldi	r30, 0x00	; 0
    11e6:	f4 e0       	ldi	r31, 0x04	; 4
    11e8:	81 81       	ldd	r24, Z+1	; 0x01
    11ea:	80 fd       	sbrc	r24, 0
    11ec:	fd cf       	rjmp	.-6      	; 0x11e8 <_Z7mcuInitv+0x66>
	CCP = CCP_IOREG_gc;
    11ee:	88 ed       	ldi	r24, 0xD8	; 216
    11f0:	84 bf       	out	0x34, r24	; 52
	CLK.LOCK = CLK_LOCK_bm; //Disable further changes in clock system
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	80 93 42 00 	sts	0x0042, r24	; 0x800042 <__TEXT_REGION_LENGTH__+0x700042>
	//PMIC: enable interrupts
	PMIC.CTRL = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
    11f8:	37 e0       	ldi	r19, 0x07	; 7
    11fa:	30 93 a2 00 	sts	0x00A2, r19	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	//RTC configuration: 1024Hz clock, medium level interrupt
	RTC.PER = 16; //32 overflows per second
    11fe:	e0 e0       	ldi	r30, 0x00	; 0
    1200:	f4 e0       	ldi	r31, 0x04	; 4
    1202:	40 e1       	ldi	r20, 0x10	; 16
    1204:	50 e0       	ldi	r21, 0x00	; 0
    1206:	42 87       	std	Z+10, r20	; 0x0a
    1208:	53 87       	std	Z+11, r21	; 0x0b
	RTC.INTCTRL = RTC_OVFINTLVL_MED_gc;
    120a:	22 e0       	ldi	r18, 0x02	; 2
    120c:	22 83       	std	Z+2, r18	; 0x02
	RTC.CTRL = RTC_PRESCALER_DIV2_gc;
    120e:	20 83       	st	Z, r18
	RTC.CNT = 0;
    1210:	10 86       	std	Z+8, r1	; 0x08
    1212:	11 86       	std	Z+9, r1	; 0x09
	//USARTC configuration: start / 9 data / 2 stop; 76.8kbps baud, multi-processor communication
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm | USART_MPCM_bm;
    1214:	e0 ec       	ldi	r30, 0xC0	; 192
    1216:	f8 e0       	ldi	r31, 0x08	; 8
    1218:	9a e1       	ldi	r25, 0x1A	; 26
    121a:	93 83       	std	Z+3, r25	; 0x03
	USARTC0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_SBMODE_bm | USART_CHSIZE_9BIT_gc;
    121c:	9f e0       	ldi	r25, 0x0F	; 15
    121e:	94 83       	std	Z+4, r25	; 0x04
	USARTC0.BAUDCTRLA = 12;
    1220:	9c e0       	ldi	r25, 0x0C	; 12
    1222:	96 83       	std	Z+6, r25	; 0x06
	USARTC0.BAUDCTRLB = 1 << USART_BSCALE_gp;
    1224:	47 83       	std	Z+7, r20	; 0x07
	USARTC0.CTRLA = USART_DRIE_bm | USART_RXCINTLVL_HI_gc;
    1226:	90 e7       	ldi	r25, 0x70	; 112
    1228:	92 83       	std	Z+2, r25	; 0x02
	//ADC configuration: 1MHz, 15bit oversampling
	ADCA.CTRLA = ADC_ENABLE_bm;
    122a:	e0 e0       	ldi	r30, 0x00	; 0
    122c:	f2 e0       	ldi	r31, 0x02	; 2
    122e:	80 83       	st	Z, r24
	ADCA.CTRLB = ADC_CONMODE_bm | ADC_RESOLUTION_MT12BIT_gc; //Signed mode
    1230:	92 e1       	ldi	r25, 0x12	; 18
    1232:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;
    1234:	90 e2       	ldi	r25, 0x20	; 32
    1236:	92 83       	std	Z+2, r25	; 0x02
	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc;
    1238:	53 e0       	ldi	r21, 0x03	; 3
    123a:	54 83       	std	Z+4, r21	; 0x04
	ADCA.SAMPCTRL = 7 << ADC_SAMPVAL_gp;
    123c:	30 87       	std	Z+8, r19	; 0x08
	ADCA.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc | ADC_CH_GAIN_1X_gc;
    123e:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.CH0.INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc;
    1240:	82 a3       	std	Z+34, r24	; 0x22
	ADCA.CH0.AVGCTRL = ADC_CH_SAMPNUM_16X_gc; //This will produce 15 bit result
    1242:	34 e0       	ldi	r19, 0x04	; 4
    1244:	34 a7       	std	Z+44, r19	; 0x2c
	//TCC4 configuration: 8MHz, dual slope 244Hz (heartbeat LED)
	TCC4.CTRLA = TC_CLKSEL_DIV4_gc;
    1246:	e0 e0       	ldi	r30, 0x00	; 0
    1248:	f8 e0       	ldi	r31, 0x08	; 8
    124a:	50 83       	st	Z, r21
	TCC4.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_DSTOP_gc;
    124c:	55 e0       	ldi	r21, 0x05	; 5
    124e:	51 83       	std	Z+1, r21	; 0x01
	TCC4.CTRLC = TC4_POLA_bm;
    1250:	42 83       	std	Z+2, r20	; 0x02
	TCC4.CTRLE = TC_CCAMODE_COMP_gc;
    1252:	84 83       	std	Z+4, r24	; 0x04
	TCC4.PERBUF = 16384;
    1254:	40 e0       	ldi	r20, 0x00	; 0
    1256:	50 e4       	ldi	r21, 0x40	; 64
    1258:	46 ab       	std	Z+54, r20	; 0x36
    125a:	57 ab       	std	Z+55, r21	; 0x37
	TCC4.CCABUF = 0;
    125c:	10 ae       	std	Z+56, r1	; 0x38
    125e:	11 ae       	std	Z+57, r1	; 0x39
	TCC4.CTRLGCLR = TC4_STOP_bm;
    1260:	90 87       	std	Z+8, r25	; 0x08
	//TCD5 configuration: 125kHz, 1202Hz overflow rate
	TCD5.CTRLA = TC_CLKSEL_DIV256_gc;
    1262:	e0 e4       	ldi	r30, 0x40	; 64
    1264:	f9 e0       	ldi	r31, 0x09	; 9
    1266:	46 e0       	ldi	r20, 0x06	; 6
    1268:	40 83       	st	Z, r20
	TCD5.CTRLB = TC_WGMODE_NORMAL_gc;
    126a:	11 82       	std	Z+1, r1	; 0x01
	TCD5.PERBUF = 104;
    126c:	48 e6       	ldi	r20, 0x68	; 104
    126e:	50 e0       	ldi	r21, 0x00	; 0
    1270:	46 ab       	std	Z+54, r20	; 0x36
    1272:	57 ab       	std	Z+55, r21	; 0x37
	TCD5.CTRLGCLR = TC5_STOP_bm;
    1274:	90 87       	std	Z+8, r25	; 0x08
	//EDMA: 1 standard and 2 peripheral channels
	EDMA.CTRL = EDMA_ENABLE_bm | EDMA_CHMODE_STD2_gc | EDMA_DBUFMODE_DISABLE_gc;
    1276:	e0 e0       	ldi	r30, 0x00	; 0
    1278:	f1 e0       	ldi	r31, 0x01	; 1
    127a:	40 ea       	ldi	r20, 0xA0	; 160
    127c:	40 83       	st	Z, r20
	//EDMA peripheral channel 1: USARTC write transfer
	EDMA.CH1.CTRLB = EDMA_CH_TRNINTLVL_MED_gc; //Medium-level interrupt
    127e:	21 a3       	std	Z+33, r18	; 0x21
	EDMA.CH1.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_INC_gc;
    1280:	21 e3       	ldi	r18, 0x31	; 49
    1282:	22 a3       	std	Z+34, r18	; 0x22
	EDMA.CH1.TRIGSRC = EDMA_CH_TRIGSRC_USARTC0_DRE_gc;
    1284:	4d e4       	ldi	r20, 0x4D	; 77
    1286:	44 a3       	std	Z+36, r20	; 0x24
	//EDMA standard channel 2: PORTD.OUT transfer
	EDMA.CH2.CTRLA = EDMA_CH_SINGLE_bm;
    1288:	30 ab       	std	Z+48, r19	; 0x30
	EDMA.CH2.CTRLB = EDMA_CH_TRNINTLVL_LO_gc;
    128a:	81 ab       	std	Z+49, r24	; 0x31
	EDMA.CH2.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_INC_gc;
    128c:	22 ab       	std	Z+50, r18	; 0x32
	EDMA.CH2.DESTADDRCTRL = EDMA_CH_RELOAD_BURST_gc | EDMA_CH_DESTDIR_FIXED_gc;
    128e:	93 ab       	std	Z+51, r25	; 0x33
	EDMA.CH2.TRIGSRC = EDMA_CH_TRIGSRC_TCD5_OVF_gc;
    1290:	96 e6       	ldi	r25, 0x66	; 102
    1292:	94 ab       	std	Z+52, r25	; 0x34
	EDMA.CH2.TRFCNT = 18;
    1294:	22 e1       	ldi	r18, 0x12	; 18
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	26 ab       	std	Z+54, r18	; 0x36
    129a:	37 ab       	std	Z+55, r19	; 0x37
	EDMA.CH2.ADDR = (uint16_t)DSI8xFrames;
    129c:	24 e4       	ldi	r18, 0x44	; 68
    129e:	31 e2       	ldi	r19, 0x21	; 33
    12a0:	20 af       	std	Z+56, r18	; 0x38
    12a2:	31 af       	std	Z+57, r19	; 0x39
	EDMA.CH2.DESTADDR = (uint16_t)&(PORTD.OUT);
    12a4:	24 e6       	ldi	r18, 0x64	; 100
    12a6:	36 e0       	ldi	r19, 0x06	; 6
    12a8:	24 af       	std	Z+60, r18	; 0x3c
    12aa:	35 af       	std	Z+61, r19	; 0x3d
	//CRC: CRC16 mode, source IO interface
	CRC.CTRL = CRC_SOURCE_IO_gc;
    12ac:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
	sei();
    12b0:	78 94       	sei
    12b2:	08 95       	ret

000012b4 <main>:
}

int main(void)
{
	mcuInit();
    12b4:	0e 94 c1 08 	call	0x1182	; 0x1182 <_Z7mcuInitv>
	eeprom_read_block(&channelOT, &savedCOT, sizeof(channelsOnTime));
    12b8:	48 e3       	ldi	r20, 0x38	; 56
    12ba:	50 e0       	ldi	r21, 0x00	; 0
    12bc:	61 e2       	ldi	r22, 0x21	; 33
    12be:	70 e0       	ldi	r23, 0x00	; 0
    12c0:	83 ed       	ldi	r24, 0xD3	; 211
    12c2:	90 e2       	ldi	r25, 0x20	; 32
    12c4:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <eeprom_read_block>
	eeprom_read_block(iobuf, &savedConfig, sizeof(systemConfig) - 2);
    12c8:	4f e1       	ldi	r20, 0x1F	; 31
    12ca:	50 e0       	ldi	r21, 0x00	; 0
    12cc:	60 e0       	ldi	r22, 0x00	; 0
    12ce:	70 e0       	ldi	r23, 0x00	; 0
    12d0:	8b e9       	ldi	r24, 0x9B	; 155
    12d2:	90 e2       	ldi	r25, 0x20	; 32
    12d4:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <eeprom_read_block>
	((systemConfig*)iobuf)->overrideCfg = ((systemConfig*)iobuf)->groupConf = 0; //Ignore saved overrides
    12d8:	cb e9       	ldi	r28, 0x9B	; 155
    12da:	d0 e2       	ldi	r29, 0x20	; 32
    12dc:	1d 8e       	std	Y+29, r1	; 0x1d
    12de:	19 8a       	std	Y+17, r1	; 0x11
	((systemConfig*)iobuf)->CRC16 = CalculateCRC16(iobuf, sizeof(systemConfig) - 2);
    12e0:	6f e1       	ldi	r22, 0x1F	; 31
    12e2:	ce 01       	movw	r24, r28
    12e4:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pvh>
    12e8:	8f 8f       	std	Y+31, r24	; 0x1f
    12ea:	98 a3       	std	Y+32, r25	; 0x20
	ApplyConfig();
    12ec:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z11ApplyConfigv>
    12f0:	ff cf       	rjmp	.-2      	; 0x12f0 <main+0x3c>

000012f2 <_GLOBAL__sub_I_gLevels>:
	uint64_t _tickLastChg, _onTimeStamp;

public:
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    12f2:	e3 e1       	ldi	r30, 0x13	; 19
    12f4:	f0 e2       	ldi	r31, 0x20	; 32
    12f6:	93 e0       	ldi	r25, 0x03	; 3
    12f8:	91 83       	std	Z+1, r25	; 0x01
		_link[0] = posA;
    12fa:	87 e0       	ldi	r24, 0x07	; 7
    12fc:	83 83       	std	Z+3, r24	; 0x03
		_link[1] = posB;
    12fe:	86 e0       	ldi	r24, 0x06	; 6
    1300:	84 83       	std	Z+4, r24	; 0x04
		_link[2] = posC;
    1302:	85 e0       	ldi	r24, 0x05	; 5
    1304:	85 83       	std	Z+5, r24	; 0x05
		_linkNum = num;
    1306:	12 82       	std	Z+2, r1	; 0x02
		_chActMask = 0x10 << num;
    1308:	80 e1       	ldi	r24, 0x10	; 16
    130a:	81 8b       	std	Z+17, r24	; 0x11
	uint64_t _tickLastChg, _onTimeStamp;

public:
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    130c:	93 a3       	std	Z+35, r25	; 0x23
		_link[0] = posA;
    130e:	84 e0       	ldi	r24, 0x04	; 4
    1310:	85 a3       	std	Z+37, r24	; 0x25
		_link[1] = posB;
    1312:	96 a3       	std	Z+38, r25	; 0x26
		_link[2] = posC;
    1314:	82 e0       	ldi	r24, 0x02	; 2
    1316:	87 a3       	std	Z+39, r24	; 0x27
		_linkNum = num;
    1318:	21 e0       	ldi	r18, 0x01	; 1
    131a:	24 a3       	std	Z+36, r18	; 0x24
		_chActMask = 0x10 << num;
    131c:	30 e2       	ldi	r19, 0x20	; 32
    131e:	33 ab       	std	Z+51, r19	; 0x33
	uint64_t _tickLastChg, _onTimeStamp;

public:
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    1320:	80 93 58 20 	sts	0x2058, r24	; 0x802058 <links+0x45>
		_link[0] = posA;
    1324:	20 93 5a 20 	sts	0x205A, r18	; 0x80205a <links+0x47>
		_link[1] = posB;
    1328:	10 92 5b 20 	sts	0x205B, r1	; 0x80205b <links+0x48>
		_link[2] = posC;
    132c:	10 92 5c 20 	sts	0x205C, r1	; 0x80205c <links+0x49>
		_linkNum = num;
    1330:	80 93 59 20 	sts	0x2059, r24	; 0x802059 <links+0x46>
		_chActMask = 0x10 << num;
    1334:	30 e4       	ldi	r19, 0x40	; 64
    1336:	30 93 68 20 	sts	0x2068, r19	; 0x802068 <links+0x55>
	uint64_t _tickLastChg, _onTimeStamp;

public:
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    133a:	20 93 7a 20 	sts	0x207A, r18	; 0x80207a <links+0x67>
		_link[0] = posA;
    133e:	28 e0       	ldi	r18, 0x08	; 8
    1340:	20 93 7c 20 	sts	0x207C, r18	; 0x80207c <links+0x69>
		_link[1] = posB;
    1344:	10 92 7d 20 	sts	0x207D, r1	; 0x80207d <links+0x6a>
		_link[2] = posC;
    1348:	10 92 7e 20 	sts	0x207E, r1	; 0x80207e <links+0x6b>
		_linkNum = num;
    134c:	90 93 7b 20 	sts	0x207B, r25	; 0x80207b <links+0x68>
		_chActMask = 0x10 << num;
    1350:	90 e8       	ldi	r25, 0x80	; 128
    1352:	90 93 8a 20 	sts	0x208A, r25	; 0x80208a <links+0x77>
	uint8_t _onTime, _fTime;
	uint64_t _onTimeStamp;
public:
	Msen(uint8_t actLink)
	{
		_linkNum = actLink;
    1356:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <msenCh+0x2>
    135a:	08 95       	ret

0000135c <__divmodhi4>:
    135c:	97 fb       	bst	r25, 7
    135e:	07 2e       	mov	r0, r23
    1360:	16 f4       	brtc	.+4      	; 0x1366 <__divmodhi4+0xa>
    1362:	00 94       	com	r0
    1364:	07 d0       	rcall	.+14     	; 0x1374 <__divmodhi4_neg1>
    1366:	77 fd       	sbrc	r23, 7
    1368:	09 d0       	rcall	.+18     	; 0x137c <__divmodhi4_neg2>
    136a:	0e 94 ce 09 	call	0x139c	; 0x139c <__udivmodhi4>
    136e:	07 fc       	sbrc	r0, 7
    1370:	05 d0       	rcall	.+10     	; 0x137c <__divmodhi4_neg2>
    1372:	3e f4       	brtc	.+14     	; 0x1382 <__divmodhi4_exit>

00001374 <__divmodhi4_neg1>:
    1374:	90 95       	com	r25
    1376:	81 95       	neg	r24
    1378:	9f 4f       	sbci	r25, 0xFF	; 255
    137a:	08 95       	ret

0000137c <__divmodhi4_neg2>:
    137c:	70 95       	com	r23
    137e:	61 95       	neg	r22
    1380:	7f 4f       	sbci	r23, 0xFF	; 255

00001382 <__divmodhi4_exit>:
    1382:	08 95       	ret

00001384 <__adddi3_s8>:
    1384:	00 24       	eor	r0, r0
    1386:	a7 fd       	sbrc	r26, 7
    1388:	00 94       	com	r0
    138a:	2a 0f       	add	r18, r26
    138c:	30 1d       	adc	r19, r0
    138e:	40 1d       	adc	r20, r0
    1390:	50 1d       	adc	r21, r0
    1392:	60 1d       	adc	r22, r0
    1394:	70 1d       	adc	r23, r0
    1396:	80 1d       	adc	r24, r0
    1398:	90 1d       	adc	r25, r0
    139a:	08 95       	ret

0000139c <__udivmodhi4>:
    139c:	aa 1b       	sub	r26, r26
    139e:	bb 1b       	sub	r27, r27
    13a0:	51 e1       	ldi	r21, 0x11	; 17
    13a2:	07 c0       	rjmp	.+14     	; 0x13b2 <__udivmodhi4_ep>

000013a4 <__udivmodhi4_loop>:
    13a4:	aa 1f       	adc	r26, r26
    13a6:	bb 1f       	adc	r27, r27
    13a8:	a6 17       	cp	r26, r22
    13aa:	b7 07       	cpc	r27, r23
    13ac:	10 f0       	brcs	.+4      	; 0x13b2 <__udivmodhi4_ep>
    13ae:	a6 1b       	sub	r26, r22
    13b0:	b7 0b       	sbc	r27, r23

000013b2 <__udivmodhi4_ep>:
    13b2:	88 1f       	adc	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	5a 95       	dec	r21
    13b8:	a9 f7       	brne	.-22     	; 0x13a4 <__udivmodhi4_loop>
    13ba:	80 95       	com	r24
    13bc:	90 95       	com	r25
    13be:	bc 01       	movw	r22, r24
    13c0:	cd 01       	movw	r24, r26
    13c2:	08 95       	ret

000013c4 <__tablejump2__>:
    13c4:	ee 0f       	add	r30, r30
    13c6:	ff 1f       	adc	r31, r31
    13c8:	05 90       	lpm	r0, Z+
    13ca:	f4 91       	lpm	r31, Z
    13cc:	e0 2d       	mov	r30, r0
    13ce:	09 94       	ijmp

000013d0 <eeprom_read_block>:
    13d0:	60 50       	subi	r22, 0x00	; 0
    13d2:	70 4f       	sbci	r23, 0xF0	; 240
    13d4:	0c 94 25 0a 	jmp	0x144a	; 0x144a <memcpy>

000013d8 <eeprom_update_block>:
    13d8:	dc 01       	movw	r26, r24
    13da:	a4 0f       	add	r26, r20
    13dc:	b5 1f       	adc	r27, r21
    13de:	41 50       	subi	r20, 0x01	; 1
    13e0:	50 40       	sbci	r21, 0x00	; 0
    13e2:	48 f0       	brcs	.+18     	; 0x13f6 <eeprom_update_block+0x1e>
    13e4:	cb 01       	movw	r24, r22
    13e6:	84 0f       	add	r24, r20
    13e8:	95 1f       	adc	r25, r21
    13ea:	2e 91       	ld	r18, -X
    13ec:	0e 94 fd 09 	call	0x13fa	; 0x13fa <eeprom_update_r18>
    13f0:	41 50       	subi	r20, 0x01	; 1
    13f2:	50 40       	sbci	r21, 0x00	; 0
    13f4:	d0 f7       	brcc	.-12     	; 0x13ea <eeprom_update_block+0x12>
    13f6:	08 95       	ret

000013f8 <eeprom_update_byte>:
    13f8:	26 2f       	mov	r18, r22

000013fa <eeprom_update_r18>:
    13fa:	0e 94 21 0a 	call	0x1442	; 0x1442 <eeprom_mapen>
    13fe:	00 80       	ld	r0, Z
    1400:	02 16       	cp	r0, r18
    1402:	19 f0       	breq	.+6      	; 0x140a <eeprom_update_r18+0x10>
    1404:	0e 94 08 0a 	call	0x1410	; 0x1410 <eeprom_write_r18>
    1408:	01 97       	sbiw	r24, 0x01	; 1
    140a:	01 97       	sbiw	r24, 0x01	; 1
    140c:	08 95       	ret

0000140e <eeprom_write_byte>:
    140e:	26 2f       	mov	r18, r22

00001410 <eeprom_write_r18>:
    1410:	af 93       	push	r26
    1412:	bf 93       	push	r27
    1414:	e0 ec       	ldi	r30, 0xC0	; 192
    1416:	f1 e0       	ldi	r31, 0x01	; 1
    1418:	37 85       	ldd	r19, Z+15	; 0x0f
    141a:	37 fd       	sbrc	r19, 7
    141c:	fd cf       	rjmp	.-6      	; 0x1418 <eeprom_write_r18+0x8>
    141e:	dc 01       	movw	r26, r24
    1420:	a0 50       	subi	r26, 0x00	; 0
    1422:	b0 4f       	sbci	r27, 0xF0	; 240
    1424:	2c 93       	st	X, r18
    1426:	25 e3       	ldi	r18, 0x35	; 53
    1428:	22 87       	std	Z+10, r18	; 0x0a
    142a:	28 ed       	ldi	r18, 0xD8	; 216
    142c:	31 e0       	ldi	r19, 0x01	; 1
    142e:	24 bf       	out	0x34, r18	; 52
    1430:	33 87       	std	Z+11, r19	; 0x0b
    1432:	01 96       	adiw	r24, 0x01	; 1
    1434:	bf 91       	pop	r27
    1436:	af 91       	pop	r26
    1438:	08 95       	ret

0000143a <eeprom_read_byte>:
    143a:	03 d0       	rcall	.+6      	; 0x1442 <eeprom_mapen>
    143c:	80 81       	ld	r24, Z
    143e:	99 27       	eor	r25, r25
    1440:	08 95       	ret

00001442 <eeprom_mapen>:
    1442:	fc 01       	movw	r30, r24
    1444:	e0 50       	subi	r30, 0x00	; 0
    1446:	f0 4f       	sbci	r31, 0xF0	; 240
    1448:	08 95       	ret

0000144a <memcpy>:
    144a:	fb 01       	movw	r30, r22
    144c:	dc 01       	movw	r26, r24
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <memcpy+0xa>
    1450:	01 90       	ld	r0, Z+
    1452:	0d 92       	st	X+, r0
    1454:	41 50       	subi	r20, 0x01	; 1
    1456:	50 40       	sbci	r21, 0x00	; 0
    1458:	d8 f7       	brcc	.-10     	; 0x1450 <memcpy+0x6>
    145a:	08 95       	ret

0000145c <_exit>:
    145c:	f8 94       	cli

0000145e <__stop_program>:
    145e:	ff cf       	rjmp	.-2      	; 0x145e <__stop_program>
