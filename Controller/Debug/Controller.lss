
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00001693  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000016e  00802000  00802000  0000163a  2**0
                  ALLOC
  3 .eeprom       00000059  00810000  00810000  0000163a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00001693  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016c4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000110  00000000  00000000  00001708  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004b8e  00000000  00000000  00001818  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001f4a  00000000  00000000  000063a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f91  00000000  00000000  000082f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000318  00000000  00000000  00009284  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003436  00000000  00000000  0000959c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001230  00000000  00000000  0000c9d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000150  00000000  00000000  0000dc02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 57 00 	jmp	0xae	; 0xae <__ctors_end>
       4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       c:	0c 94 f0 08 	jmp	0x11e0	; 0x11e0 <__vector_3>
      10:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__vector_4>
      14:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      18:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      1c:	0c 94 af 01 	jmp	0x35e	; 0x35e <__vector_7>
      20:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      24:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      28:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      2c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      30:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      34:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      38:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      3c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      40:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      44:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      48:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      4c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      50:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      54:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      58:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      5c:	0c 94 50 08 	jmp	0x10a0	; 0x10a0 <__vector_23>
      60:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      68:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      6c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      70:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      74:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      78:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      7c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      80:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      84:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      88:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__vector_34>
      8c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      90:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <__vector_36>
      94:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      98:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      9c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      a0:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      a4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      a8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>

000000ac <__ctors_start>:
      ac:	1c 0a       	sbc	r1, r28

000000ae <__ctors_end>:
      ae:	11 24       	eor	r1, r1
      b0:	1f be       	out	0x3f, r1	; 63
      b2:	cf ef       	ldi	r28, 0xFF	; 255
      b4:	cd bf       	out	0x3d, r28	; 61
      b6:	d7 e2       	ldi	r29, 0x27	; 39
      b8:	de bf       	out	0x3e, r29	; 62

000000ba <__do_clear_bss>:
      ba:	21 e2       	ldi	r18, 0x21	; 33
      bc:	a0 e0       	ldi	r26, 0x00	; 0
      be:	b0 e2       	ldi	r27, 0x20	; 32
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	ae 36       	cpi	r26, 0x6E	; 110
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>

000000ca <__do_global_ctors>:
      ca:	10 e0       	ldi	r17, 0x00	; 0
      cc:	c7 e5       	ldi	r28, 0x57	; 87
      ce:	d0 e0       	ldi	r29, 0x00	; 0
      d0:	04 c0       	rjmp	.+8      	; 0xda <__do_global_ctors+0x10>
      d2:	21 97       	sbiw	r28, 0x01	; 1
      d4:	fe 01       	movw	r30, r28
      d6:	0e 94 85 0a 	call	0x150a	; 0x150a <__tablejump2__>
      da:	c6 35       	cpi	r28, 0x56	; 86
      dc:	d1 07       	cpc	r29, r17
      de:	c9 f7       	brne	.-14     	; 0xd2 <__do_global_ctors+0x8>
      e0:	0e 94 fd 09 	call	0x13fa	; 0x13fa <main>
      e4:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <_exit>

000000e8 <__bad_interrupt>:
      e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ec <_Z14CalculateCRC16Pva>:
}

uint16_t CalculateCRC16(void *arr, int8_t count)
{
	uint8_t *ptr = (uint8_t*)arr;
	CRC.CTRL = CRC_RESET_RESET1_gc;
      ec:	e0 ed       	ldi	r30, 0xD0	; 208
      ee:	f0 e0       	ldi	r31, 0x00	; 0
      f0:	20 ec       	ldi	r18, 0xC0	; 192
      f2:	20 83       	st	Z, r18
	CRC.CTRL = CRC_SOURCE_IO_gc;
      f4:	21 e0       	ldi	r18, 0x01	; 1
      f6:	20 83       	st	Z, r18
	while (--count >= 0)
      f8:	61 50       	subi	r22, 0x01	; 1
      fa:	52 f0       	brmi	.+20     	; 0x110 <_Z14CalculateCRC16Pva+0x24>
      fc:	e8 2f       	mov	r30, r24
      fe:	f9 2f       	mov	r31, r25
		CRC.DATAIN = *ptr++;
     100:	a0 ed       	ldi	r26, 0xD0	; 208
     102:	b0 e0       	ldi	r27, 0x00	; 0
     104:	81 91       	ld	r24, Z+
     106:	13 96       	adiw	r26, 0x03	; 3
     108:	8c 93       	st	X, r24
     10a:	13 97       	sbiw	r26, 0x03	; 3
     10c:	61 50       	subi	r22, 0x01	; 1
uint16_t CalculateCRC16(void *arr, int8_t count)
{
	uint8_t *ptr = (uint8_t*)arr;
	CRC.CTRL = CRC_RESET_RESET1_gc;
	CRC.CTRL = CRC_SOURCE_IO_gc;
	while (--count >= 0)
     10e:	d2 f7       	brpl	.-12     	; 0x104 <_Z14CalculateCRC16Pva+0x18>
		CRC.DATAIN = *ptr++;
	i16i8 result;
	CRC.STATUS = CRC_BUSY_bm;
     110:	e0 ed       	ldi	r30, 0xD0	; 208
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	81 e0       	ldi	r24, 0x01	; 1
     116:	81 83       	std	Z+1, r24	; 0x01
	result.ui8[0] = CRC.CHECKSUM0;
     118:	84 81       	ldd	r24, Z+4	; 0x04
	result.ui8[1] = CRC.CHECKSUM1;
     11a:	95 81       	ldd	r25, Z+5	; 0x05
	CRC.CTRL = CRC_SOURCE_DISABLE_gc;
     11c:	10 82       	st	Z, r1
	return result.ui16;
}
     11e:	08 95       	ret

00000120 <_Z11ApplyConfigv>:

void ApplyConfig()
{
     120:	2f 92       	push	r2
     122:	3f 92       	push	r3
     124:	4f 92       	push	r4
     126:	5f 92       	push	r5
     128:	6f 92       	push	r6
     12a:	7f 92       	push	r7
     12c:	8f 92       	push	r8
     12e:	9f 92       	push	r9
     130:	af 92       	push	r10
     132:	bf 92       	push	r11
     134:	cf 92       	push	r12
     136:	df 92       	push	r13
     138:	ef 92       	push	r14
     13a:	ff 92       	push	r15
     13c:	0f 93       	push	r16
     13e:	1f 93       	push	r17
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
     144:	cd b7       	in	r28, 0x3d	; 61
     146:	de b7       	in	r29, 0x3e	; 62
     148:	28 97       	sbiw	r28, 0x08	; 8
     14a:	cd bf       	out	0x3d, r28	; 61
     14c:	de bf       	out	0x3e, r29	; 62
	systemConfig *temp = (systemConfig*)iobuf;
	//Both bits 7 are set: one of the on-time counters must be rewritten
	if ((temp->groupConf & 0x80) && (temp->overrideCfg & 0x80))
     14e:	e0 90 b8 20 	lds	r14, 0x20B8	; 0x8020b8 <iobuf+0x1d>
     152:	ee 20       	and	r14, r14
     154:	24 f5       	brge	.+72     	; 0x19e <_Z11ApplyConfigv+0x7e>
     156:	80 91 ac 20 	lds	r24, 0x20AC	; 0x8020ac <iobuf+0x11>
     15a:	88 23       	and	r24, r24
     15c:	04 f5       	brge	.+64     	; 0x19e <_Z11ApplyConfigv+0x7e>
	{
		uint8_t j = temp->overrideCfg & 0xF; //Update on-time of link
		channelOT.linkOnTime[j] = *((uint32_t*)temp->minLvl);
     15e:	8f 70       	andi	r24, 0x0F	; 15
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	fc 01       	movw	r30, r24
     164:	ee 0f       	add	r30, r30
     166:	ff 1f       	adc	r31, r31
     168:	ee 0f       	add	r30, r30
     16a:	ff 1f       	adc	r31, r31
     16c:	ed 52       	subi	r30, 0x2D	; 45
     16e:	ff 4d       	sbci	r31, 0xDF	; 223
     170:	ab e9       	ldi	r26, 0x9B	; 155
     172:	b0 e2       	ldi	r27, 0x20	; 32
     174:	4d 91       	ld	r20, X+
     176:	5d 91       	ld	r21, X+
     178:	6d 91       	ld	r22, X+
     17a:	7c 91       	ld	r23, X
     17c:	13 97       	sbiw	r26, 0x03	; 3
     17e:	40 83       	st	Z, r20
     180:	51 83       	std	Z+1, r21	; 0x01
     182:	62 83       	std	Z+2, r22	; 0x02
     184:	73 83       	std	Z+3, r23	; 0x03
		channelOT.linkSwCnt[j] = *((uint16_t*)temp->maxLvl);
     186:	88 0f       	add	r24, r24
     188:	99 1f       	adc	r25, r25
     18a:	fc 01       	movw	r30, r24
     18c:	e9 50       	subi	r30, 0x09	; 9
     18e:	ff 4d       	sbci	r31, 0xDF	; 223
     190:	18 96       	adiw	r26, 0x08	; 8
     192:	8d 91       	ld	r24, X+
     194:	9c 91       	ld	r25, X
     196:	19 97       	sbiw	r26, 0x09	; 9
     198:	80 83       	st	Z, r24
     19a:	91 83       	std	Z+1, r25	; 0x01
		return;
     19c:	ca c0       	rjmp	.+404    	; 0x332 <_Z11ApplyConfigv+0x212>
	}
	memcpy(&validConf, iobuf, sizeof(systemConfig));
     19e:	81 e2       	ldi	r24, 0x21	; 33
     1a0:	eb e9       	ldi	r30, 0x9B	; 155
     1a2:	f0 e2       	ldi	r31, 0x20	; 32
     1a4:	a3 e2       	ldi	r26, 0x23	; 35
     1a6:	b1 e2       	ldi	r27, 0x21	; 33
     1a8:	01 90       	ld	r0, Z+
     1aa:	0d 92       	st	X+, r0
     1ac:	8a 95       	dec	r24
     1ae:	e1 f7       	brne	.-8      	; 0x1a8 <_Z11ApplyConfigv+0x88>
		_fadeRate = (min > 160) ? 160 : min;
		_linkDelay = (max > 63) ? 64 : max + 1;
		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			pos = _link[i];
			if ((pos < 8 && (validConf.overrideCfg & (1 << pos))) || 
     1b0:	00 91 34 21 	lds	r16, 0x2134	; 0x802134 <validConf+0x11>
     1b4:	10 e0       	ldi	r17, 0x00	; 0
				(pos >= 8 && (validConf.groupConf & (1 << 4))))
			{
				if (_lvl[i] == gLevels[pos]) //Refresh saved ticks value only if no dimming in the process right now
					_tickLastChg = sysState.sysTick;
     1b6:	eb e0       	ldi	r30, 0x0B	; 11
     1b8:	f1 e2       	ldi	r31, 0x21	; 33
     1ba:	a0 80       	ld	r10, Z
     1bc:	b1 80       	ldd	r11, Z+1	; 0x01
     1be:	92 80       	ldd	r9, Z+2	; 0x02
     1c0:	83 80       	ldd	r8, Z+3	; 0x03
     1c2:	74 80       	ldd	r7, Z+4	; 0x04
     1c4:	65 80       	ldd	r6, Z+5	; 0x05
     1c6:	56 80       	ldd	r5, Z+6	; 0x06
     1c8:	47 80       	ldd	r4, Z+7	; 0x07
				_lvl[i] = validConf.overrideLvl;
     1ca:	30 91 33 21 	lds	r19, 0x2133	; 0x802133 <validConf+0x10>
     1ce:	6f e0       	ldi	r22, 0x0F	; 15
     1d0:	70 e2       	ldi	r23, 0x20	; 32
     1d2:	0f 2e       	mov	r0, r31
     1d4:	fb e9       	ldi	r31, 0x9B	; 155
     1d6:	2f 2e       	mov	r2, r31
     1d8:	f0 e2       	ldi	r31, 0x20	; 32
     1da:	3f 2e       	mov	r3, r31
     1dc:	f0 2d       	mov	r31, r0
		_linkDelay = (max > 63) ? 64 : max + 1;
		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			pos = _link[i];
			if ((pos < 8 && (validConf.overrideCfg & (1 << pos))) || 
				(pos >= 8 && (validConf.groupConf & (1 << 4))))
     1de:	4e 2d       	mov	r20, r14
     1e0:	40 71       	andi	r20, 0x10	; 16
     1e2:	c4 2e       	mov	r12, r20
					_tickLastChg = sysState.sysTick;
				_lvl[i] = validConf.overrideLvl;
			}
			min = pos > 7 ? 4 : validConf.minLvl[pos];
			max = pos > 7 ? 63 : validConf.maxLvl[pos];
			_minLvl[i] = (min < 222) ? min + 1 : 223;
     1e4:	0f 2e       	mov	r0, r31
     1e6:	ff ed       	ldi	r31, 0xDF	; 223
     1e8:	df 2e       	mov	r13, r31
     1ea:	f0 2d       	mov	r31, r0
     1ec:	6b 83       	std	Y+3, r22	; 0x03
     1ee:	7c 83       	std	Y+4, r23	; 0x04
     1f0:	f3 2e       	mov	r15, r19
     1f2:	2b 81       	ldd	r18, Y+3	; 0x03
     1f4:	3c 81       	ldd	r19, Y+4	; 0x04
		_chActMask = 0x10 << num;
	};

	void setParams()
	{
		uint8_t pos, min = validConf.fadeRate[_linkNum], max = validConf.linkDelay[_linkNum];
     1f6:	d9 01       	movw	r26, r18
     1f8:	12 96       	adiw	r26, 0x02	; 2
     1fa:	ec 91       	ld	r30, X
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	ed 5d       	subi	r30, 0xDD	; 221
     200:	fe 4d       	sbci	r31, 0xDE	; 222
     202:	92 89       	ldd	r25, Z+18	; 0x12
     204:	86 89       	ldd	r24, Z+22	; 0x16
		if (min < 32)
     206:	90 32       	cpi	r25, 0x20	; 32
     208:	08 f4       	brcc	.+2      	; 0x20c <_Z11ApplyConfigv+0xec>
			min = 32;
     20a:	90 e2       	ldi	r25, 0x20	; 32
		_fadeRate = (min > 160) ? 160 : min;
     20c:	91 3a       	cpi	r25, 0xA1	; 161
     20e:	08 f0       	brcs	.+2      	; 0x212 <_Z11ApplyConfigv+0xf2>
     210:	90 ea       	ldi	r25, 0xA0	; 160
     212:	f9 01       	movw	r30, r18
     214:	97 87       	std	Z+15, r25	; 0x0f
		_linkDelay = (max > 63) ? 64 : max + 1;
     216:	80 34       	cpi	r24, 0x40	; 64
     218:	18 f4       	brcc	.+6      	; 0x220 <_Z11ApplyConfigv+0x100>
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	01 96       	adiw	r24, 0x01	; 1
     21e:	02 c0       	rjmp	.+4      	; 0x224 <_Z11ApplyConfigv+0x104>
     220:	80 e4       	ldi	r24, 0x40	; 64
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	d9 01       	movw	r26, r18
     226:	50 96       	adiw	r26, 0x10	; 16
     228:	8d 93       	st	X+, r24
     22a:	9c 93       	st	X, r25
     22c:	51 97       	sbiw	r26, 0x11	; 17
		for (uint8_t i = 0; i < _linkCnt; i++)
     22e:	11 96       	adiw	r26, 0x01	; 1
     230:	9c 91       	ld	r25, X
     232:	99 23       	and	r25, r25
     234:	09 f4       	brne	.+2      	; 0x238 <_Z11ApplyConfigv+0x118>
     236:	59 c0       	rjmp	.+178    	; 0x2ea <_Z11ApplyConfigv+0x1ca>
     238:	ab 81       	ldd	r26, Y+3	; 0x03
     23a:	bc 81       	ldd	r27, Y+4	; 0x04
     23c:	13 96       	adiw	r26, 0x03	; 3
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	29 83       	std	Y+1, r18	; 0x01
     242:	3a 83       	std	Y+2, r19	; 0x02
		{
			pos = _link[i];
     244:	3d 91       	ld	r19, X+
			if ((pos < 8 && (validConf.overrideCfg & (1 << pos))) || 
     246:	38 30       	cpi	r19, 0x08	; 8
     248:	50 f4       	brcc	.+20     	; 0x25e <_Z11ApplyConfigv+0x13e>
     24a:	a8 01       	movw	r20, r16
     24c:	03 2e       	mov	r0, r19
     24e:	02 c0       	rjmp	.+4      	; 0x254 <_Z11ApplyConfigv+0x134>
     250:	55 95       	asr	r21
     252:	47 95       	ror	r20
     254:	0a 94       	dec	r0
     256:	e2 f7       	brpl	.-8      	; 0x250 <_Z11ApplyConfigv+0x130>
     258:	40 fd       	sbrc	r20, 0
     25a:	03 c0       	rjmp	.+6      	; 0x262 <_Z11ApplyConfigv+0x142>
     25c:	23 c0       	rjmp	.+70     	; 0x2a4 <_Z11ApplyConfigv+0x184>
				(pos >= 8 && (validConf.groupConf & (1 << 4))))
     25e:	cc 20       	and	r12, r12
     260:	51 f1       	breq	.+84     	; 0x2b6 <_Z11ApplyConfigv+0x196>
     262:	af 83       	std	Y+7, r26	; 0x07
     264:	b8 87       	std	Y+8, r27	; 0x08
			{
				if (_lvl[i] == gLevels[pos]) //Refresh saved ticks value only if no dimming in the process right now
     266:	63 2f       	mov	r22, r19
     268:	70 e0       	ldi	r23, 0x00	; 0
     26a:	66 0f       	add	r22, r22
     26c:	77 1f       	adc	r23, r23
     26e:	64 5a       	subi	r22, 0xA4	; 164
     270:	7e 4d       	sbci	r23, 0xDE	; 222
     272:	fb 01       	movw	r30, r22
     274:	60 81       	ld	r22, Z
     276:	71 81       	ldd	r23, Z+1	; 0x01
     278:	12 96       	adiw	r26, 0x02	; 2
     27a:	4c 91       	ld	r20, X
     27c:	12 97       	sbiw	r26, 0x02	; 2
     27e:	50 e0       	ldi	r21, 0x00	; 0
     280:	46 17       	cp	r20, r22
     282:	57 07       	cpc	r21, r23
     284:	51 f4       	brne	.+20     	; 0x29a <_Z11ApplyConfigv+0x17a>
					_tickLastChg = sysState.sysTick;
     286:	e9 81       	ldd	r30, Y+1	; 0x01
     288:	fa 81       	ldd	r31, Y+2	; 0x02
     28a:	a3 8a       	std	Z+19, r10	; 0x13
     28c:	b4 8a       	std	Z+20, r11	; 0x14
     28e:	95 8a       	std	Z+21, r9	; 0x15
     290:	86 8a       	std	Z+22, r8	; 0x16
     292:	77 8a       	std	Z+23, r7	; 0x17
     294:	60 8e       	std	Z+24, r6	; 0x18
     296:	51 8e       	std	Z+25, r5	; 0x19
     298:	42 8e       	std	Z+26, r4	; 0x1a
				_lvl[i] = validConf.overrideLvl;
     29a:	ef 81       	ldd	r30, Y+7	; 0x07
     29c:	f8 85       	ldd	r31, Y+8	; 0x08
     29e:	f2 82       	std	Z+2, r15	; 0x02
			}
			min = pos > 7 ? 4 : validConf.minLvl[pos];
     2a0:	38 30       	cpi	r19, 0x08	; 8
     2a2:	60 f4       	brcc	.+24     	; 0x2bc <_Z11ApplyConfigv+0x19c>
     2a4:	e3 2f       	mov	r30, r19
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	ed 5d       	subi	r30, 0xDD	; 221
     2aa:	fe 4d       	sbci	r31, 0xDE	; 222
     2ac:	40 81       	ld	r20, Z
			max = pos > 7 ? 63 : validConf.maxLvl[pos];
     2ae:	50 85       	ldd	r21, Z+8	; 0x08
			_minLvl[i] = (min < 222) ? min + 1 : 223;
     2b0:	4e 3d       	cpi	r20, 0xDE	; 222
     2b2:	40 f4       	brcc	.+16     	; 0x2c4 <_Z11ApplyConfigv+0x1a4>
     2b4:	05 c0       	rjmp	.+10     	; 0x2c0 <_Z11ApplyConfigv+0x1a0>
				if (_lvl[i] == gLevels[pos]) //Refresh saved ticks value only if no dimming in the process right now
					_tickLastChg = sysState.sysTick;
				_lvl[i] = validConf.overrideLvl;
			}
			min = pos > 7 ? 4 : validConf.minLvl[pos];
			max = pos > 7 ? 63 : validConf.maxLvl[pos];
     2b6:	5f e3       	ldi	r21, 0x3F	; 63
			{
				if (_lvl[i] == gLevels[pos]) //Refresh saved ticks value only if no dimming in the process right now
					_tickLastChg = sysState.sysTick;
				_lvl[i] = validConf.overrideLvl;
			}
			min = pos > 7 ? 4 : validConf.minLvl[pos];
     2b8:	44 e0       	ldi	r20, 0x04	; 4
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <_Z11ApplyConfigv+0x1a0>
			max = pos > 7 ? 63 : validConf.maxLvl[pos];
     2bc:	5f e3       	ldi	r21, 0x3F	; 63
			{
				if (_lvl[i] == gLevels[pos]) //Refresh saved ticks value only if no dimming in the process right now
					_tickLastChg = sysState.sysTick;
				_lvl[i] = validConf.overrideLvl;
			}
			min = pos > 7 ? 4 : validConf.minLvl[pos];
     2be:	44 e0       	ldi	r20, 0x04	; 4
			max = pos > 7 ? 63 : validConf.maxLvl[pos];
			_minLvl[i] = (min < 222) ? min + 1 : 223;
     2c0:	4f 5f       	subi	r20, 0xFF	; 255
     2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <_Z11ApplyConfigv+0x1a6>
     2c4:	4d 2d       	mov	r20, r13
     2c6:	fd 01       	movw	r30, r26
     2c8:	15 96       	adiw	r26, 0x05	; 5
     2ca:	4c 93       	st	X, r20
     2cc:	15 97       	sbiw	r26, 0x05	; 5
			_difLvl[i] = max;
			if (max > _minLvl[i])
     2ce:	45 17       	cp	r20, r21
     2d0:	20 f0       	brcs	.+8      	; 0x2da <_Z11ApplyConfigv+0x1ba>
				_lvl[i] = validConf.overrideLvl;
			}
			min = pos > 7 ? 4 : validConf.minLvl[pos];
			max = pos > 7 ? 63 : validConf.maxLvl[pos];
			_minLvl[i] = (min < 222) ? min + 1 : 223;
			_difLvl[i] = max;
     2d2:	18 96       	adiw	r26, 0x08	; 8
     2d4:	5c 93       	st	X, r21
     2d6:	18 97       	sbiw	r26, 0x08	; 8
     2d8:	05 c0       	rjmp	.+10     	; 0x2e4 <_Z11ApplyConfigv+0x1c4>
			if (max > _minLvl[i])
			{
				max -= _minLvl[i];
				_difLvl[i] = (max >= 32) ? max : 32;
     2da:	54 1b       	sub	r21, r20
     2dc:	50 32       	cpi	r21, 0x20	; 32
     2de:	08 f4       	brcc	.+2      	; 0x2e2 <_Z11ApplyConfigv+0x1c2>
     2e0:	50 e2       	ldi	r21, 0x20	; 32
     2e2:	50 87       	std	Z+8, r21	; 0x08
		uint8_t pos, min = validConf.fadeRate[_linkNum], max = validConf.linkDelay[_linkNum];
		if (min < 32)
			min = 32;
		_fadeRate = (min > 160) ? 160 : min;
		_linkDelay = (max > 63) ? 64 : max + 1;
		for (uint8_t i = 0; i < _linkCnt; i++)
     2e4:	8f 5f       	subi	r24, 0xFF	; 255
     2e6:	89 13       	cpse	r24, r25
     2e8:	ad cf       	rjmp	.-166    	; 0x244 <_Z11ApplyConfigv+0x124>
     2ea:	4b 81       	ldd	r20, Y+3	; 0x03
     2ec:	5c 81       	ldd	r21, Y+4	; 0x04
     2ee:	4d 5d       	subi	r20, 0xDD	; 221
     2f0:	5f 4f       	sbci	r21, 0xFF	; 255
     2f2:	4b 83       	std	Y+3, r20	; 0x03
     2f4:	5c 83       	std	Y+4, r21	; 0x04
		channelOT.linkOnTime[j] = *((uint32_t*)temp->minLvl);
		channelOT.linkSwCnt[j] = *((uint16_t*)temp->maxLvl);
		return;
	}
	memcpy(&validConf, iobuf, sizeof(systemConfig));
	for (uint8_t i = 0; i < 4; i++)
     2f6:	42 15       	cp	r20, r2
     2f8:	53 05       	cpc	r21, r3
     2fa:	09 f0       	breq	.+2      	; 0x2fe <_Z11ApplyConfigv+0x1de>
     2fc:	7a cf       	rjmp	.-268    	; 0x1f2 <_Z11ApplyConfigv+0xd2>
	{
		_linkNum = actLink;
	};
	void setParams()
	{
		_onTime = validConf.msenOnTime > 5 ? validConf.msenOnTime : 6;
     2fe:	80 91 3d 21 	lds	r24, 0x213D	; 0x80213d <validConf+0x1a>
     302:	86 30       	cpi	r24, 0x06	; 6
     304:	08 f4       	brcc	.+2      	; 0x308 <_Z11ApplyConfigv+0x1e8>
     306:	86 e0       	ldi	r24, 0x06	; 6
     308:	e1 e0       	ldi	r30, 0x01	; 1
     30a:	f0 e2       	ldi	r31, 0x20	; 32
     30c:	84 83       	std	Z+4, r24	; 0x04
		_fTime = _onTime + validConf.msenLowTime;
     30e:	90 91 3e 21 	lds	r25, 0x213E	; 0x80213e <validConf+0x1b>
     312:	89 0f       	add	r24, r25
     314:	85 83       	std	Z+5, r24	; 0x05
	}
	memcpy(&validConf, iobuf, sizeof(systemConfig));
	for (uint8_t i = 0; i < 4; i++)
		links[i].setParams();
	msenCh.setParams();
	if (validConf.groupConf & (1 << 3)) //Bit 3 is set: save config to EEPROM
     316:	e3 fe       	sbrs	r14, 3
     318:	08 c0       	rjmp	.+16     	; 0x32a <_Z11ApplyConfigv+0x20a>
		eeprom_update_block(&validConf, &savedConfig, sizeof(systemConfig));
     31a:	41 e2       	ldi	r20, 0x21	; 33
     31c:	50 e0       	ldi	r21, 0x00	; 0
     31e:	60 e0       	ldi	r22, 0x00	; 0
     320:	70 e0       	ldi	r23, 0x00	; 0
     322:	83 e2       	ldi	r24, 0x23	; 35
     324:	91 e2       	ldi	r25, 0x21	; 33
     326:	0e 94 8f 0a 	call	0x151e	; 0x151e <eeprom_update_block>
	RTC.CALIB = validConf.rtcCorrect;
     32a:	80 91 41 21 	lds	r24, 0x2141	; 0x802141 <validConf+0x1e>
     32e:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
}
     332:	28 96       	adiw	r28, 0x08	; 8
     334:	cd bf       	out	0x3d, r28	; 61
     336:	de bf       	out	0x3e, r29	; 62
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	1f 91       	pop	r17
     33e:	0f 91       	pop	r16
     340:	ff 90       	pop	r15
     342:	ef 90       	pop	r14
     344:	df 90       	pop	r13
     346:	cf 90       	pop	r12
     348:	bf 90       	pop	r11
     34a:	af 90       	pop	r10
     34c:	9f 90       	pop	r9
     34e:	8f 90       	pop	r8
     350:	7f 90       	pop	r7
     352:	6f 90       	pop	r6
     354:	5f 90       	pop	r5
     356:	4f 90       	pop	r4
     358:	3f 90       	pop	r3
     35a:	2f 90       	pop	r2
     35c:	08 95       	ret

0000035e <__vector_7>:

ISR(RTC_OVF_vect)
{
     35e:	1f 92       	push	r1
     360:	0f 92       	push	r0
     362:	0f b6       	in	r0, 0x3f	; 63
     364:	0f 92       	push	r0
     366:	11 24       	eor	r1, r1
     368:	2f 92       	push	r2
     36a:	3f 92       	push	r3
     36c:	4f 92       	push	r4
     36e:	5f 92       	push	r5
     370:	6f 92       	push	r6
     372:	7f 92       	push	r7
     374:	8f 92       	push	r8
     376:	9f 92       	push	r9
     378:	af 92       	push	r10
     37a:	bf 92       	push	r11
     37c:	cf 92       	push	r12
     37e:	df 92       	push	r13
     380:	ef 92       	push	r14
     382:	ff 92       	push	r15
     384:	0f 93       	push	r16
     386:	1f 93       	push	r17
     388:	2f 93       	push	r18
     38a:	3f 93       	push	r19
     38c:	4f 93       	push	r20
     38e:	5f 93       	push	r21
     390:	6f 93       	push	r22
     392:	7f 93       	push	r23
     394:	8f 93       	push	r24
     396:	9f 93       	push	r25
     398:	af 93       	push	r26
     39a:	bf 93       	push	r27
     39c:	ef 93       	push	r30
     39e:	ff 93       	push	r31
     3a0:	cf 93       	push	r28
     3a2:	df 93       	push	r29
     3a4:	cd b7       	in	r28, 0x3d	; 61
     3a6:	de b7       	in	r29, 0x3e	; 62
     3a8:	2c 97       	sbiw	r28, 0x0c	; 12
     3aa:	cd bf       	out	0x3d, r28	; 61
     3ac:	de bf       	out	0x3e, r29	; 62
	sysState.sysTick++;
     3ae:	eb e0       	ldi	r30, 0x0B	; 11
     3b0:	f1 e2       	ldi	r31, 0x21	; 33
     3b2:	20 81       	ld	r18, Z
     3b4:	31 81       	ldd	r19, Z+1	; 0x01
     3b6:	42 81       	ldd	r20, Z+2	; 0x02
     3b8:	53 81       	ldd	r21, Z+3	; 0x03
     3ba:	64 81       	ldd	r22, Z+4	; 0x04
     3bc:	75 81       	ldd	r23, Z+5	; 0x05
     3be:	86 81       	ldd	r24, Z+6	; 0x06
     3c0:	97 81       	ldd	r25, Z+7	; 0x07
     3c2:	a1 e0       	ldi	r26, 0x01	; 1
     3c4:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__adddi3_s8>
     3c8:	20 83       	st	Z, r18
     3ca:	31 83       	std	Z+1, r19	; 0x01
     3cc:	42 83       	std	Z+2, r20	; 0x02
     3ce:	53 83       	std	Z+3, r21	; 0x03
     3d0:	64 83       	std	Z+4, r22	; 0x04
     3d2:	75 83       	std	Z+5, r23	; 0x05
     3d4:	86 83       	std	Z+6, r24	; 0x06
     3d6:	97 83       	std	Z+7, r25	; 0x07
     3d8:	0f 2e       	mov	r0, r31
     3da:	ff e0       	ldi	r31, 0x0F	; 15
     3dc:	6f 2e       	mov	r6, r31
     3de:	f0 e2       	ldi	r31, 0x20	; 32
     3e0:	7f 2e       	mov	r7, r31
     3e2:	f0 2d       	mov	r31, r0
     3e4:	19 82       	std	Y+1, r1	; 0x01
     3e6:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t i;
	for (i = 0; i < 4; i++)
		links[i].updateLevel();
     3e8:	29 81       	ldd	r18, Y+1	; 0x01
     3ea:	3a 81       	ldd	r19, Y+2	; 0x02
     3ec:	f3 01       	movw	r30, r6
			_tickLastChg = sysState.sysTick;
	}

	void updateLevel()
	{
		int16_t ticksEl = (int16_t)(sysState.sysTick - _tickLastChg); //Elapsed ticks since beginning of dim
     3ee:	ab e0       	ldi	r26, 0x0B	; 11
     3f0:	b1 e2       	ldi	r27, 0x21	; 33
     3f2:	cd 90       	ld	r12, X+
     3f4:	dc 90       	ld	r13, X
     3f6:	83 89       	ldd	r24, Z+19	; 0x13
     3f8:	94 89       	ldd	r25, Z+20	; 0x14
     3fa:	c8 1a       	sub	r12, r24
     3fc:	d9 0a       	sbc	r13, r25
		int16_t delta = (((ticksEl + 1) * _fadeRate) >> 5) - ((ticksEl * _fadeRate) >> 5); //Number of steps
     3fe:	47 85       	ldd	r20, Z+15	; 0x0f
     400:	50 e0       	ldi	r21, 0x00	; 0
     402:	b6 01       	movw	r22, r12
     404:	6f 5f       	subi	r22, 0xFF	; 255
     406:	7f 4f       	sbci	r23, 0xFF	; 255
     408:	64 9f       	mul	r22, r20
     40a:	c0 01       	movw	r24, r0
     40c:	65 9f       	mul	r22, r21
     40e:	90 0d       	add	r25, r0
     410:	74 9f       	mul	r23, r20
     412:	90 0d       	add	r25, r0
     414:	11 24       	eor	r1, r1
     416:	4c 01       	movw	r8, r24
     418:	95 94       	asr	r9
     41a:	87 94       	ror	r8
     41c:	95 94       	asr	r9
     41e:	87 94       	ror	r8
     420:	95 94       	asr	r9
     422:	87 94       	ror	r8
     424:	95 94       	asr	r9
     426:	87 94       	ror	r8
     428:	95 94       	asr	r9
     42a:	87 94       	ror	r8
     42c:	84 1b       	sub	r24, r20
     42e:	95 0b       	sbc	r25, r21
     430:	95 95       	asr	r25
     432:	87 95       	ror	r24
     434:	95 95       	asr	r25
     436:	87 95       	ror	r24
     438:	95 95       	asr	r25
     43a:	87 95       	ror	r24
     43c:	95 95       	asr	r25
     43e:	87 95       	ror	r24
     440:	95 95       	asr	r25
     442:	87 95       	ror	r24
     444:	88 1a       	sub	r8, r24
     446:	99 0a       	sbc	r9, r25
		PORTC.OUTCLR = _chActMask;
     448:	82 89       	ldd	r24, Z+18	; 0x12
     44a:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
		for (int8_t i = 0; i < _linkCnt; i++)
     44e:	41 81       	ldd	r20, Z+1	; 0x01
     450:	44 23       	and	r20, r20
     452:	09 f4       	brne	.+2      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     454:	03 c1       	rjmp	.+518    	; 0x65c <__LOCK_REGION_LENGTH__+0x25c>
     456:	a0 e0       	ldi	r26, 0x00	; 0
     458:	b0 e0       	ldi	r27, 0x00	; 0
     45a:	b1 2c       	mov	r11, r1
		{
			uint8_t s = _dir ? i : _linkCnt - i - 1; //Direction '1' means forward
			uint8_t j = _link[s];
     45c:	53 e2       	ldi	r21, 0x23	; 35
     45e:	52 9f       	mul	r21, r18
     460:	c0 01       	movw	r24, r0
     462:	53 9f       	mul	r21, r19
     464:	90 0d       	add	r25, r0
     466:	11 24       	eor	r1, r1
     468:	9c 01       	movw	r18, r24
     46a:	21 5f       	subi	r18, 0xF1	; 241
     46c:	3f 4d       	sbci	r19, 0xDF	; 223
						channelOT.linkSwCnt[j]++; //Increment switch counter
					}
				}
				else //Level needs to be raised
				{
					tempLvl += ((-tempLvl > delta) ? delta : -tempLvl) + (int16_t)_lvl[s];
     46e:	38 2c       	mov	r3, r8
     470:	29 2c       	mov	r2, r9
     472:	2d 01       	movw	r4, r26
     474:	6b 82       	std	Y+3, r6	; 0x03
     476:	7c 82       	std	Y+4, r7	; 0x04
     478:	2d 83       	std	Y+5, r18	; 0x05
     47a:	3e 83       	std	Y+6, r19	; 0x06
		int16_t ticksEl = (int16_t)(sysState.sysTick - _tickLastChg); //Elapsed ticks since beginning of dim
		int16_t delta = (((ticksEl + 1) * _fadeRate) >> 5) - ((ticksEl * _fadeRate) >> 5); //Number of steps
		PORTC.OUTCLR = _chActMask;
		for (int8_t i = 0; i < _linkCnt; i++)
		{
			uint8_t s = _dir ? i : _linkCnt - i - 1; //Direction '1' means forward
     47c:	80 81       	ld	r24, Z
     47e:	88 23       	and	r24, r24
     480:	11 f0       	breq	.+4      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     482:	4b 2d       	mov	r20, r11
     484:	03 c0       	rjmp	.+6      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     486:	8b 2d       	mov	r24, r11
     488:	80 95       	com	r24
     48a:	48 0f       	add	r20, r24
			uint8_t j = _link[s];
     48c:	50 e0       	ldi	r21, 0x00	; 0
     48e:	0d 81       	ldd	r16, Y+5	; 0x05
     490:	1e 81       	ldd	r17, Y+6	; 0x06
     492:	04 0f       	add	r16, r20
     494:	15 1f       	adc	r17, r21
			int16_t tempLvl = gLevels[j] - _lvl[s]; //Difference between actual and set levels
     496:	d8 01       	movw	r26, r16
     498:	13 96       	adiw	r26, 0x03	; 3
     49a:	ac 90       	ld	r10, X
     49c:	6a 2d       	mov	r22, r10
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	cb 01       	movw	r24, r22
     4a2:	88 0f       	add	r24, r24
     4a4:	99 1f       	adc	r25, r25
     4a6:	84 5a       	subi	r24, 0xA4	; 164
     4a8:	9e 4d       	sbci	r25, 0xDE	; 222
     4aa:	dc 01       	movw	r26, r24
     4ac:	2d 91       	ld	r18, X+
     4ae:	3c 91       	ld	r19, X
     4b0:	d8 01       	movw	r26, r16
     4b2:	16 96       	adiw	r26, 0x06	; 6
     4b4:	8c 91       	ld	r24, X
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	28 1b       	sub	r18, r24
     4ba:	39 0b       	sbc	r19, r25
			bool changed = false;
			if (tempLvl && ticksEl >= i * _linkDelay)
     4bc:	09 f4       	brne	.+2      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     4be:	c0 c0       	rjmp	.+384    	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
     4c0:	e0 88       	ldd	r14, Z+16	; 0x10
     4c2:	f1 88       	ldd	r15, Z+17	; 0x11
     4c4:	4e 9c       	mul	r4, r14
     4c6:	80 01       	movw	r16, r0
     4c8:	4f 9c       	mul	r4, r15
     4ca:	10 0d       	add	r17, r0
     4cc:	5e 9c       	mul	r5, r14
     4ce:	10 0d       	add	r17, r0
     4d0:	11 24       	eor	r1, r1
     4d2:	c0 16       	cp	r12, r16
     4d4:	d1 06       	cpc	r13, r17
     4d6:	0c f4       	brge	.+2      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     4d8:	b3 c0       	rjmp	.+358    	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
			{
				if (tempLvl > 0) //Level needs to be lowered
     4da:	12 16       	cp	r1, r18
     4dc:	13 06       	cpc	r1, r19
     4de:	0c f0       	brlt	.+2      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
     4e0:	61 c0       	rjmp	.+194    	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
				{
					tempLvl -= ((tempLvl > delta) ? delta : tempLvl) - (int16_t)_lvl[s];
     4e2:	a3 2d       	mov	r26, r3
     4e4:	b2 2d       	mov	r27, r2
     4e6:	28 15       	cp	r18, r8
     4e8:	39 05       	cpc	r19, r9
     4ea:	0c f4       	brge	.+2      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     4ec:	d9 01       	movw	r26, r18
     4ee:	a8 1b       	sub	r26, r24
     4f0:	b9 0b       	sbc	r27, r25
     4f2:	2a 1b       	sub	r18, r26
     4f4:	3b 0b       	sbc	r19, r27
					if ((uint8_t)tempLvl < _minLvl[s]) //Actual level became zero
     4f6:	c9 01       	movw	r24, r18
     4f8:	99 27       	eor	r25, r25
     4fa:	ad 81       	ldd	r26, Y+5	; 0x05
     4fc:	be 81       	ldd	r27, Y+6	; 0x06
     4fe:	a4 0f       	add	r26, r20
     500:	b5 1f       	adc	r27, r21
     502:	19 96       	adiw	r26, 0x09	; 9
     504:	4c 91       	ld	r20, X
     506:	50 e0       	ldi	r21, 0x00	; 0
     508:	84 17       	cp	r24, r20
     50a:	95 07       	cpc	r25, r21
     50c:	0c f0       	brlt	.+2      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     50e:	f6 c2       	rjmp	.+1516   	; 0xafc <__LOCK_REGION_LENGTH__+0x6fc>
					{
						changed = true;
						tempLvl = -1 * ((int16_t)_fadeRate << 2); //Subtract 4x fade steps, so off/on delay will be 4s
     510:	87 85       	ldd	r24, Z+15	; 0x0f
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	88 0f       	add	r24, r24
     516:	99 1f       	adc	r25, r25
     518:	88 0f       	add	r24, r24
     51a:	99 1f       	adc	r25, r25
     51c:	91 95       	neg	r25
     51e:	81 95       	neg	r24
     520:	91 09       	sbc	r25, r1
						channelOT.linkOnTime[j] += (uint32_t)(sysState.sysTick - _onTimeStamp) >> 5; //Add seconds
     522:	db 01       	movw	r26, r22
     524:	aa 0f       	add	r26, r26
     526:	bb 1f       	adc	r27, r27
     528:	aa 0f       	add	r26, r26
     52a:	bb 1f       	adc	r27, r27
     52c:	ad 01       	movw	r20, r26
     52e:	4d 52       	subi	r20, 0x2D	; 45
     530:	5f 4d       	sbci	r21, 0xDF	; 223
     532:	ab e0       	ldi	r26, 0x0B	; 11
     534:	b1 e2       	ldi	r27, 0x21	; 33
     536:	0d 91       	ld	r16, X+
     538:	1d 91       	ld	r17, X+
     53a:	2d 91       	ld	r18, X+
     53c:	3c 91       	ld	r19, X
     53e:	43 8c       	ldd	r4, Z+27	; 0x1b
     540:	54 8c       	ldd	r5, Z+28	; 0x1c
     542:	65 8c       	ldd	r6, Z+29	; 0x1d
     544:	76 8c       	ldd	r7, Z+30	; 0x1e
     546:	04 19       	sub	r16, r4
     548:	15 09       	sbc	r17, r5
     54a:	26 09       	sbc	r18, r6
     54c:	37 09       	sbc	r19, r7
     54e:	68 94       	set
     550:	14 f8       	bld	r1, 4
     552:	36 95       	lsr	r19
     554:	27 95       	ror	r18
     556:	17 95       	ror	r17
     558:	07 95       	ror	r16
     55a:	16 94       	lsr	r1
     55c:	d1 f7       	brne	.-12     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
     55e:	da 01       	movw	r26, r20
     560:	4d 90       	ld	r4, X+
     562:	5d 90       	ld	r5, X+
     564:	6d 90       	ld	r6, X+
     566:	7c 90       	ld	r7, X
     568:	13 97       	sbiw	r26, 0x03	; 3
     56a:	04 0d       	add	r16, r4
     56c:	15 1d       	adc	r17, r5
     56e:	26 1d       	adc	r18, r6
     570:	37 1d       	adc	r19, r7
     572:	0d 93       	st	X+, r16
     574:	1d 93       	st	X+, r17
     576:	2d 93       	st	X+, r18
     578:	3c 93       	st	X, r19
     57a:	13 97       	sbiw	r26, 0x03	; 3
						channelOT.linkSwCnt[j]++; //Increment switch counter
     57c:	db 01       	movw	r26, r22
     57e:	aa 0f       	add	r26, r26
     580:	bb 1f       	adc	r27, r27
     582:	a9 50       	subi	r26, 0x09	; 9
     584:	bf 4d       	sbci	r27, 0xDF	; 223
     586:	2d 91       	ld	r18, X+
     588:	3c 91       	ld	r19, X
     58a:	11 97       	sbiw	r26, 0x01	; 1
     58c:	2f 5f       	subi	r18, 0xFF	; 255
     58e:	3f 4f       	sbci	r19, 0xFF	; 255
     590:	2d 93       	st	X+, r18
     592:	3c 93       	st	X, r19
						if ((uint8_t)tempLvl < _minLvl[s])
							tempLvl = _minLvl[s];
						_onTimeStamp = sysState.sysTick;
					}
				}
				gLevels[j] = tempLvl;
     594:	66 0f       	add	r22, r22
     596:	77 1f       	adc	r23, r23
     598:	db 01       	movw	r26, r22
     59a:	a4 5a       	subi	r26, 0xA4	; 164
     59c:	be 4d       	sbci	r27, 0xDE	; 222
     59e:	8d 93       	st	X+, r24
     5a0:	9c 93       	st	X, r25
     5a2:	3f c0       	rjmp	.+126    	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
						channelOT.linkSwCnt[j]++; //Increment switch counter
					}
				}
				else //Level needs to be raised
				{
					tempLvl += ((-tempLvl > delta) ? delta : -tempLvl) + (int16_t)_lvl[s];
     5a4:	aa 27       	eor	r26, r26
     5a6:	bb 27       	eor	r27, r27
     5a8:	a2 1b       	sub	r26, r18
     5aa:	b3 0b       	sbc	r27, r19
     5ac:	8a 16       	cp	r8, r26
     5ae:	9b 06       	cpc	r9, r27
     5b0:	14 f4       	brge	.+4      	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
     5b2:	a3 2d       	mov	r26, r3
     5b4:	b2 2d       	mov	r27, r2
     5b6:	8a 0f       	add	r24, r26
     5b8:	9b 1f       	adc	r25, r27
     5ba:	28 0f       	add	r18, r24
     5bc:	39 1f       	adc	r19, r25
					if (!gLevels[j] && tempLvl > 0) //Lamp has been switched on - remember ticks
     5be:	db 01       	movw	r26, r22
     5c0:	aa 0f       	add	r26, r26
     5c2:	bb 1f       	adc	r27, r27
     5c4:	a4 5a       	subi	r26, 0xA4	; 164
     5c6:	be 4d       	sbci	r27, 0xDE	; 222
     5c8:	8d 91       	ld	r24, X+
     5ca:	9c 91       	ld	r25, X
     5cc:	89 2b       	or	r24, r25
     5ce:	01 f5       	brne	.+64     	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
     5d0:	12 16       	cp	r1, r18
     5d2:	13 06       	cpc	r1, r19
     5d4:	0c f4       	brge	.+2      	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
     5d6:	84 c2       	rjmp	.+1288   	; 0xae0 <__LOCK_REGION_LENGTH__+0x6e0>
     5d8:	1b c0       	rjmp	.+54     	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
					{
						if ((uint8_t)tempLvl < _minLvl[s])
							tempLvl = _minLvl[s];
     5da:	9c 01       	movw	r18, r24
						_onTimeStamp = sysState.sysTick;
     5dc:	ab e0       	ldi	r26, 0x0B	; 11
     5de:	b1 e2       	ldi	r27, 0x21	; 33
     5e0:	8c 91       	ld	r24, X
     5e2:	83 8f       	std	Z+27, r24	; 0x1b
     5e4:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <sysState+0x1>
     5e8:	84 8f       	std	Z+28, r24	; 0x1c
     5ea:	80 91 0d 21 	lds	r24, 0x210D	; 0x80210d <sysState+0x2>
     5ee:	85 8f       	std	Z+29, r24	; 0x1d
     5f0:	80 91 0e 21 	lds	r24, 0x210E	; 0x80210e <sysState+0x3>
     5f4:	86 8f       	std	Z+30, r24	; 0x1e
     5f6:	80 91 0f 21 	lds	r24, 0x210F	; 0x80210f <sysState+0x4>
     5fa:	87 8f       	std	Z+31, r24	; 0x1f
     5fc:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <sysState+0x5>
     600:	80 a3       	std	Z+32, r24	; 0x20
     602:	80 91 11 21 	lds	r24, 0x2111	; 0x802111 <sysState+0x6>
     606:	81 a3       	std	Z+33, r24	; 0x21
     608:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <sysState+0x7>
     60c:	82 a3       	std	Z+34, r24	; 0x22
     60e:	76 c2       	rjmp	.+1260   	; 0xafc <__LOCK_REGION_LENGTH__+0x6fc>
					}
				}
				gLevels[j] = tempLvl;
     610:	66 0f       	add	r22, r22
     612:	77 1f       	adc	r23, r23
     614:	db 01       	movw	r26, r22
     616:	a4 5a       	subi	r26, 0xA4	; 164
     618:	be 4d       	sbci	r27, 0xDE	; 222
     61a:	2d 93       	st	X+, r18
     61c:	3c 93       	st	X, r19
				if (tempLvl >= 0 || changed)
     61e:	33 23       	and	r19, r19
     620:	7c f0       	brlt	.+30     	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
				{
					gLevelChg |= 1 << j;
     622:	20 91 5b 21 	lds	r18, 0x215B	; 0x80215b <gLevelChg>
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	02 c0       	rjmp	.+4      	; 0x630 <__LOCK_REGION_LENGTH__+0x230>
     62c:	88 0f       	add	r24, r24
     62e:	99 1f       	adc	r25, r25
     630:	aa 94       	dec	r10
     632:	e2 f7       	brpl	.-8      	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
     634:	82 2b       	or	r24, r18
     636:	80 93 5b 21 	sts	0x215B, r24	; 0x80215b <gLevelChg>
					PORTC.OUTSET = _chActMask; //Switch on activity LED
     63a:	82 89       	ldd	r24, Z+18	; 0x12
     63c:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     640:	b3 94       	inc	r11
	void updateLevel()
	{
		int16_t ticksEl = (int16_t)(sysState.sysTick - _tickLastChg); //Elapsed ticks since beginning of dim
		int16_t delta = (((ticksEl + 1) * _fadeRate) >> 5) - ((ticksEl * _fadeRate) >> 5); //Number of steps
		PORTC.OUTCLR = _chActMask;
		for (int8_t i = 0; i < _linkCnt; i++)
     642:	4b 2c       	mov	r4, r11
     644:	0b 2c       	mov	r0, r11
     646:	00 0c       	add	r0, r0
     648:	55 08       	sbc	r5, r5
     64a:	41 81       	ldd	r20, Z+1	; 0x01
     64c:	84 2f       	mov	r24, r20
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	48 16       	cp	r4, r24
     652:	59 06       	cpc	r5, r25
     654:	0c f4       	brge	.+2      	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
     656:	12 cf       	rjmp	.-476    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     658:	6b 80       	ldd	r6, Y+3	; 0x03
     65a:	7c 80       	ldd	r7, Y+4	; 0x04
     65c:	e9 81       	ldd	r30, Y+1	; 0x01
     65e:	fa 81       	ldd	r31, Y+2	; 0x02
     660:	31 96       	adiw	r30, 0x01	; 1
     662:	e9 83       	std	Y+1, r30	; 0x01
     664:	fa 83       	std	Y+2, r31	; 0x02
     666:	f3 e2       	ldi	r31, 0x23	; 35
     668:	6f 0e       	add	r6, r31
     66a:	71 1c       	adc	r7, r1

ISR(RTC_OVF_vect)
{
	sysState.sysTick++;
	uint8_t i;
	for (i = 0; i < 4; i++)
     66c:	89 81       	ldd	r24, Y+1	; 0x01
     66e:	9a 81       	ldd	r25, Y+2	; 0x02
     670:	04 97       	sbiw	r24, 0x04	; 4
     672:	09 f0       	breq	.+2      	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     674:	b9 ce       	rjmp	.-654    	; 0x3e8 <__vector_7+0x8a>
			cntDown = true;
		}
	}
	void updateLevel()
	{
		if (cntDown)
     676:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <msenCh>
     67a:	88 23       	and	r24, r24
     67c:	09 f4       	brne	.+2      	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
     67e:	49 c2       	rjmp	.+1170   	; 0xb12 <__LOCK_REGION_LENGTH__+0x712>
		{
			uint16_t ton = (uint16_t)(sysState.sysTick - _onTimeStamp) >> 5;
     680:	2b e0       	ldi	r18, 0x0B	; 11
     682:	31 e2       	ldi	r19, 0x21	; 33
     684:	d9 01       	movw	r26, r18
     686:	bc 91       	ld	r27, X
     688:	bd 83       	std	Y+5, r27	; 0x05
     68a:	f9 01       	movw	r30, r18
     68c:	f1 81       	ldd	r31, Z+1	; 0x01
     68e:	fe 83       	std	Y+6, r31	; 0x06
     690:	d9 01       	movw	r26, r18
     692:	12 96       	adiw	r26, 0x02	; 2
     694:	bc 91       	ld	r27, X
     696:	bf 83       	std	Y+7, r27	; 0x07
     698:	f9 01       	movw	r30, r18
     69a:	f3 81       	ldd	r31, Z+3	; 0x03
     69c:	f8 87       	std	Y+8, r31	; 0x08
     69e:	d9 01       	movw	r26, r18
     6a0:	14 96       	adiw	r26, 0x04	; 4
     6a2:	bc 91       	ld	r27, X
     6a4:	b9 87       	std	Y+9, r27	; 0x09
     6a6:	f9 01       	movw	r30, r18
     6a8:	f5 81       	ldd	r31, Z+5	; 0x05
     6aa:	fa 87       	std	Y+10, r31	; 0x0a
     6ac:	d9 01       	movw	r26, r18
     6ae:	16 96       	adiw	r26, 0x06	; 6
     6b0:	bc 91       	ld	r27, X
     6b2:	bb 87       	std	Y+11, r27	; 0x0b
     6b4:	f9 01       	movw	r30, r18
     6b6:	f7 81       	ldd	r31, Z+7	; 0x07
     6b8:	fc 87       	std	Y+12, r31	; 0x0c
     6ba:	21 e0       	ldi	r18, 0x01	; 1
     6bc:	30 e2       	ldi	r19, 0x20	; 32
			if (ton > _fTime)
     6be:	d9 01       	movw	r26, r18
     6c0:	16 96       	adiw	r26, 0x06	; 6
     6c2:	4d 91       	ld	r20, X+
     6c4:	5c 91       	ld	r21, X
     6c6:	17 97       	sbiw	r26, 0x07	; 7
     6c8:	ed 81       	ldd	r30, Y+5	; 0x05
     6ca:	fe 81       	ldd	r31, Y+6	; 0x06
     6cc:	e4 1b       	sub	r30, r20
     6ce:	f5 0b       	sbc	r31, r21
     6d0:	af 01       	movw	r20, r30
     6d2:	56 95       	lsr	r21
     6d4:	47 95       	ror	r20
     6d6:	52 95       	swap	r21
     6d8:	42 95       	swap	r20
     6da:	4f 70       	andi	r20, 0x0F	; 15
     6dc:	45 27       	eor	r20, r21
     6de:	5f 70       	andi	r21, 0x0F	; 15
     6e0:	45 27       	eor	r20, r21
     6e2:	15 96       	adiw	r26, 0x05	; 5
     6e4:	2c 91       	ld	r18, X
     6e6:	15 97       	sbiw	r26, 0x05	; 5
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	24 17       	cp	r18, r20
     6ec:	35 07       	cpc	r19, r21
     6ee:	08 f0       	brcs	.+2      	; 0x6f2 <__LOCK_REGION_LENGTH__+0x2f2>
     6f0:	81 c0       	rjmp	.+258    	; 0x7f4 <__LOCK_REGION_LENGTH__+0x3f4>
			{
				ltEnt = cntDown = false;
     6f2:	1c 92       	st	X, r1
     6f4:	11 96       	adiw	r26, 0x01	; 1
     6f6:	1c 92       	st	X, r1
     6f8:	11 97       	sbiw	r26, 0x01	; 1
				links[_linkNum].setLevel(0); //Both on and low time are expired, shut down the lamp
     6fa:	12 96       	adiw	r26, 0x02	; 2
     6fc:	4c 91       	ld	r20, X
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		uint8_t oLvl = sysState.linkLevels[_linkNum];
     6fe:	a4 2e       	mov	r10, r20
     700:	b1 2c       	mov	r11, r1
     702:	b3 e2       	ldi	r27, 0x23	; 35
     704:	4b 9f       	mul	r20, r27
     706:	90 01       	movw	r18, r0
     708:	11 24       	eor	r1, r1
     70a:	21 5f       	subi	r18, 0xF1	; 241
     70c:	3f 4d       	sbci	r19, 0xDF	; 223
     70e:	f9 01       	movw	r30, r18
     710:	22 81       	ldd	r18, Z+2	; 0x02
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	b9 01       	movw	r22, r18
     716:	65 5f       	subi	r22, 0xF5	; 245
     718:	7e 4d       	sbci	r23, 0xDE	; 222
     71a:	db 01       	movw	r26, r22
     71c:	51 96       	adiw	r26, 0x11	; 17
     71e:	5c 91       	ld	r21, X
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
     720:	65 2f       	mov	r22, r21
     722:	70 e0       	ldi	r23, 0x00	; 0
     724:	6e 5f       	subi	r22, 0xFE	; 254
     726:	7f 4f       	sbci	r23, 0xFF	; 255
     728:	65 30       	cpi	r22, 0x05	; 5
     72a:	71 05       	cpc	r23, r1
     72c:	18 f4       	brcc	.+6      	; 0x734 <__LOCK_REGION_LENGTH__+0x334>
     72e:	55 23       	and	r21, r21
     730:	09 f4       	brne	.+2      	; 0x734 <__LOCK_REGION_LENGTH__+0x334>
     732:	ef c1       	rjmp	.+990    	; 0xb12 <__LOCK_REGION_LENGTH__+0x712>
			return;
		sysState.linkLevels[_linkNum] = level;
     734:	25 5f       	subi	r18, 0xF5	; 245
     736:	3e 4d       	sbci	r19, 0xDE	; 222
     738:	f9 01       	movw	r30, r18
     73a:	11 8a       	std	Z+17, r1	; 0x11

		for (uint8_t i = 0; i < _linkCnt; i++)
     73c:	53 e2       	ldi	r21, 0x23	; 35
     73e:	5a 9d       	mul	r21, r10
     740:	90 01       	movw	r18, r0
     742:	5b 9d       	mul	r21, r11
     744:	30 0d       	add	r19, r0
     746:	11 24       	eor	r1, r1
     748:	21 5f       	subi	r18, 0xF1	; 241
     74a:	3f 4d       	sbci	r19, 0xDF	; 223
     74c:	d9 01       	movw	r26, r18
     74e:	11 96       	adiw	r26, 0x01	; 1
     750:	cc 90       	ld	r12, X
     752:	cc 20       	and	r12, r12
     754:	19 f1       	breq	.+70     	; 0x79c <__LOCK_REGION_LENGTH__+0x39c>
     756:	b3 e2       	ldi	r27, 0x23	; 35
     758:	4b 9f       	mul	r20, r27
     75a:	a0 01       	movw	r20, r0
     75c:	11 24       	eor	r1, r1
     75e:	4e 5e       	subi	r20, 0xEE	; 238
     760:	5f 4d       	sbci	r21, 0xDF	; 223
     762:	d1 2c       	mov	r13, r1
     764:	f1 2c       	mov	r15, r1
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     766:	fa 01       	movw	r30, r20
     768:	20 81       	ld	r18, Z
     76a:	4f 5f       	subi	r20, 0xFF	; 255
     76c:	5f 4f       	sbci	r21, 0xFF	; 255
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	22 0f       	add	r18, r18
     772:	33 1f       	adc	r19, r19
     774:	24 5a       	subi	r18, 0xA4	; 164
     776:	3e 4d       	sbci	r19, 0xDE	; 222
     778:	d9 01       	movw	r26, r18
     77a:	0d 91       	ld	r16, X+
     77c:	1c 91       	ld	r17, X
     77e:	23 81       	ldd	r18, Z+3	; 0x03
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	61 e0       	ldi	r22, 0x01	; 1
     784:	20 17       	cp	r18, r16
     786:	31 07       	cpc	r19, r17
     788:	09 f4       	brne	.+2      	; 0x78c <__LOCK_REGION_LENGTH__+0x38c>
     78a:	60 e0       	ldi	r22, 0x00	; 0
     78c:	d6 2a       	or	r13, r22
			if (!level || !_difLvl[i]) //Set zero level directly
				_lvl[i] = 0;
     78e:	fa 01       	movw	r30, r20
     790:	12 82       	std	Z+2, r1	; 0x02
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
			return;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
     792:	f3 94       	inc	r15
     794:	fc 10       	cpse	r15, r12
     796:	e7 cf       	rjmp	.-50     	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     798:	d1 10       	cpse	r13, r1
     79a:	bb c1       	rjmp	.+886    	; 0xb12 <__LOCK_REGION_LENGTH__+0x712>
			_tickLastChg = sysState.sysTick;
     79c:	23 e2       	ldi	r18, 0x23	; 35
     79e:	2a 9d       	mul	r18, r10
     7a0:	a0 01       	movw	r20, r0
     7a2:	2b 9d       	mul	r18, r11
     7a4:	50 0d       	add	r21, r0
     7a6:	11 24       	eor	r1, r1
     7a8:	41 5f       	subi	r20, 0xF1	; 241
     7aa:	5f 4d       	sbci	r21, 0xDF	; 223
     7ac:	9a 01       	movw	r18, r20
     7ae:	2d 5e       	subi	r18, 0xED	; 237
     7b0:	3f 4f       	sbci	r19, 0xFF	; 255
     7b2:	ed 81       	ldd	r30, Y+5	; 0x05
     7b4:	da 01       	movw	r26, r20
     7b6:	53 96       	adiw	r26, 0x13	; 19
     7b8:	ec 93       	st	X, r30
     7ba:	ee 81       	ldd	r30, Y+6	; 0x06
     7bc:	d9 01       	movw	r26, r18
     7be:	11 96       	adiw	r26, 0x01	; 1
     7c0:	ec 93       	st	X, r30
     7c2:	11 97       	sbiw	r26, 0x01	; 1
     7c4:	ff 81       	ldd	r31, Y+7	; 0x07
     7c6:	12 96       	adiw	r26, 0x02	; 2
     7c8:	fc 93       	st	X, r31
     7ca:	12 97       	sbiw	r26, 0x02	; 2
     7cc:	58 85       	ldd	r21, Y+8	; 0x08
     7ce:	13 96       	adiw	r26, 0x03	; 3
     7d0:	5c 93       	st	X, r21
     7d2:	13 97       	sbiw	r26, 0x03	; 3
     7d4:	89 85       	ldd	r24, Y+9	; 0x09
     7d6:	14 96       	adiw	r26, 0x04	; 4
     7d8:	8c 93       	st	X, r24
     7da:	14 97       	sbiw	r26, 0x04	; 4
     7dc:	9a 85       	ldd	r25, Y+10	; 0x0a
     7de:	15 96       	adiw	r26, 0x05	; 5
     7e0:	9c 93       	st	X, r25
     7e2:	15 97       	sbiw	r26, 0x05	; 5
     7e4:	eb 85       	ldd	r30, Y+11	; 0x0b
     7e6:	16 96       	adiw	r26, 0x06	; 6
     7e8:	ec 93       	st	X, r30
     7ea:	16 97       	sbiw	r26, 0x06	; 6
     7ec:	fc 85       	ldd	r31, Y+12	; 0x0c
     7ee:	17 96       	adiw	r26, 0x07	; 7
     7f0:	fc 93       	st	X, r31
     7f2:	8f c1       	rjmp	.+798    	; 0xb12 <__LOCK_REGION_LENGTH__+0x712>
			if (ton > _fTime)
			{
				ltEnt = cntDown = false;
				links[_linkNum].setLevel(0); //Both on and low time are expired, shut down the lamp
			}
			else if (!ltEnt && _onTime)
     7f4:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <msenCh+0x1>
     7f8:	21 11       	cpse	r18, r1
     7fa:	8b c1       	rjmp	.+790    	; 0xb12 <__LOCK_REGION_LENGTH__+0x712>
     7fc:	20 91 05 20 	lds	r18, 0x2005	; 0x802005 <msenCh+0x4>
     800:	22 23       	and	r18, r18
     802:	09 f4       	brne	.+2      	; 0x806 <__LOCK_REGION_LENGTH__+0x406>
     804:	86 c1       	rjmp	.+780    	; 0xb12 <__LOCK_REGION_LENGTH__+0x712>
			{
				ltEnt = true;
     806:	21 e0       	ldi	r18, 0x01	; 1
     808:	30 e2       	ldi	r19, 0x20	; 32
     80a:	41 e0       	ldi	r20, 0x01	; 1
     80c:	d9 01       	movw	r26, r18
     80e:	11 96       	adiw	r26, 0x01	; 1
     810:	4c 93       	st	X, r20
     812:	11 97       	sbiw	r26, 0x01	; 1
				links[_linkNum].setLevel(validConf.msenLowLvl);
     814:	f0 90 3f 21 	lds	r15, 0x213F	; 0x80213f <validConf+0x1c>
     818:	12 96       	adiw	r26, 0x02	; 2
     81a:	6c 91       	ld	r22, X
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		uint8_t oLvl = sysState.linkLevels[_linkNum];
     81c:	a6 2e       	mov	r10, r22
     81e:	b1 2c       	mov	r11, r1
     820:	b3 e2       	ldi	r27, 0x23	; 35
     822:	6b 9f       	mul	r22, r27
     824:	90 01       	movw	r18, r0
     826:	11 24       	eor	r1, r1
     828:	21 5f       	subi	r18, 0xF1	; 241
     82a:	3f 4d       	sbci	r19, 0xDF	; 223
     82c:	f9 01       	movw	r30, r18
     82e:	22 81       	ldd	r18, Z+2	; 0x02
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	a9 01       	movw	r20, r18
     834:	45 5f       	subi	r20, 0xF5	; 245
     836:	5e 4d       	sbci	r21, 0xDE	; 222
     838:	da 01       	movw	r26, r20
     83a:	51 96       	adiw	r26, 0x11	; 17
     83c:	7c 91       	ld	r23, X
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
     83e:	47 2f       	mov	r20, r23
     840:	50 e0       	ldi	r21, 0x00	; 0
     842:	4f 19       	sub	r20, r15
     844:	51 09       	sbc	r21, r1
     846:	4e 5f       	subi	r20, 0xFE	; 254
     848:	5f 4f       	sbci	r21, 0xFF	; 255
     84a:	45 30       	cpi	r20, 0x05	; 5
     84c:	51 05       	cpc	r21, r1
     84e:	48 f4       	brcc	.+18     	; 0x862 <__LOCK_REGION_LENGTH__+0x462>
     850:	51 e0       	ldi	r21, 0x01	; 1
     852:	f1 10       	cpse	r15, r1
     854:	01 c0       	rjmp	.+2      	; 0x858 <__LOCK_REGION_LENGTH__+0x458>
     856:	50 e0       	ldi	r21, 0x00	; 0
     858:	41 e0       	ldi	r20, 0x01	; 1
     85a:	71 11       	cpse	r23, r1
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	54 13       	cpse	r21, r20
     860:	58 c1       	rjmp	.+688    	; 0xb12 <__LOCK_REGION_LENGTH__+0x712>
			return;
		sysState.linkLevels[_linkNum] = level;
     862:	a9 01       	movw	r20, r18
     864:	45 5f       	subi	r20, 0xF5	; 245
     866:	5e 4d       	sbci	r21, 0xDE	; 222
     868:	fa 01       	movw	r30, r20
     86a:	f1 8a       	std	Z+17, r15	; 0x11

		for (uint8_t i = 0; i < _linkCnt; i++)
     86c:	43 e2       	ldi	r20, 0x23	; 35
     86e:	4a 9d       	mul	r20, r10
     870:	90 01       	movw	r18, r0
     872:	4b 9d       	mul	r20, r11
     874:	30 0d       	add	r19, r0
     876:	11 24       	eor	r1, r1
     878:	21 5f       	subi	r18, 0xF1	; 241
     87a:	3f 4d       	sbci	r19, 0xDF	; 223
     87c:	d9 01       	movw	r26, r18
     87e:	11 96       	adiw	r26, 0x01	; 1
     880:	ec 90       	ld	r14, X
     882:	ee 20       	and	r14, r14
     884:	b1 f1       	breq	.+108    	; 0x8f2 <__LOCK_REGION_LENGTH__+0x4f2>
     886:	b3 e2       	ldi	r27, 0x23	; 35
     888:	6b 9f       	mul	r22, r27
     88a:	90 01       	movw	r18, r0
     88c:	11 24       	eor	r1, r1
     88e:	2e 5e       	subi	r18, 0xEE	; 238
     890:	3f 4d       	sbci	r19, 0xDF	; 223
     892:	70 e0       	ldi	r23, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
			if (!level || !_difLvl[i]) //Set zero level directly
				_lvl[i] = 0;
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
     896:	cf 2c       	mov	r12, r15
     898:	d1 2c       	mov	r13, r1
			return;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     89a:	f9 01       	movw	r30, r18
     89c:	40 81       	ld	r20, Z
     89e:	2f 5f       	subi	r18, 0xFF	; 255
     8a0:	3f 4f       	sbci	r19, 0xFF	; 255
     8a2:	50 e0       	ldi	r21, 0x00	; 0
     8a4:	44 0f       	add	r20, r20
     8a6:	55 1f       	adc	r21, r21
     8a8:	44 5a       	subi	r20, 0xA4	; 164
     8aa:	5e 4d       	sbci	r21, 0xDE	; 222
     8ac:	da 01       	movw	r26, r20
     8ae:	8d 90       	ld	r8, X+
     8b0:	9c 90       	ld	r9, X
     8b2:	43 81       	ldd	r20, Z+3	; 0x03
     8b4:	50 e0       	ldi	r21, 0x00	; 0
     8b6:	11 e0       	ldi	r17, 0x01	; 1
     8b8:	48 15       	cp	r20, r8
     8ba:	59 05       	cpc	r21, r9
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <__LOCK_REGION_LENGTH__+0x4c0>
     8be:	10 e0       	ldi	r17, 0x00	; 0
     8c0:	71 2b       	or	r23, r17
			if (!level || !_difLvl[i]) //Set zero level directly
     8c2:	ff 20       	and	r15, r15
     8c4:	21 f0       	breq	.+8      	; 0x8ce <__LOCK_REGION_LENGTH__+0x4ce>
     8c6:	f9 01       	movw	r30, r18
     8c8:	40 85       	ldd	r20, Z+8	; 0x08
     8ca:	41 11       	cpse	r20, r1
     8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <__LOCK_REGION_LENGTH__+0x4d6>
				_lvl[i] = 0;
     8ce:	d9 01       	movw	r26, r18
     8d0:	12 96       	adiw	r26, 0x02	; 2
     8d2:	1c 92       	st	X, r1
     8d4:	09 c0       	rjmp	.+18     	; 0x8e8 <__LOCK_REGION_LENGTH__+0x4e8>
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
     8d6:	4c 9d       	mul	r20, r12
     8d8:	80 01       	movw	r16, r0
     8da:	4d 9d       	mul	r20, r13
     8dc:	10 0d       	add	r17, r0
     8de:	11 24       	eor	r1, r1
     8e0:	f9 01       	movw	r30, r18
     8e2:	45 81       	ldd	r20, Z+5	; 0x05
     8e4:	41 0f       	add	r20, r17
     8e6:	42 83       	std	Z+2, r20	; 0x02
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
			return;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
     8e8:	6f 5f       	subi	r22, 0xFF	; 255
     8ea:	6e 11       	cpse	r22, r14
     8ec:	d6 cf       	rjmp	.-84     	; 0x89a <__LOCK_REGION_LENGTH__+0x49a>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     8ee:	71 11       	cpse	r23, r1
     8f0:	10 c1       	rjmp	.+544    	; 0xb12 <__LOCK_REGION_LENGTH__+0x712>
			_tickLastChg = sysState.sysTick;
     8f2:	23 e2       	ldi	r18, 0x23	; 35
     8f4:	2a 9d       	mul	r18, r10
     8f6:	a0 01       	movw	r20, r0
     8f8:	2b 9d       	mul	r18, r11
     8fa:	50 0d       	add	r21, r0
     8fc:	11 24       	eor	r1, r1
     8fe:	41 5f       	subi	r20, 0xF1	; 241
     900:	5f 4d       	sbci	r21, 0xDF	; 223
     902:	9a 01       	movw	r18, r20
     904:	2d 5e       	subi	r18, 0xED	; 237
     906:	3f 4f       	sbci	r19, 0xFF	; 255
     908:	ed 81       	ldd	r30, Y+5	; 0x05
     90a:	da 01       	movw	r26, r20
     90c:	53 96       	adiw	r26, 0x13	; 19
     90e:	ec 93       	st	X, r30
     910:	ee 81       	ldd	r30, Y+6	; 0x06
     912:	d9 01       	movw	r26, r18
     914:	11 96       	adiw	r26, 0x01	; 1
     916:	ec 93       	st	X, r30
     918:	11 97       	sbiw	r26, 0x01	; 1
     91a:	ff 81       	ldd	r31, Y+7	; 0x07
     91c:	12 96       	adiw	r26, 0x02	; 2
     91e:	fc 93       	st	X, r31
     920:	12 97       	sbiw	r26, 0x02	; 2
     922:	58 85       	ldd	r21, Y+8	; 0x08
     924:	13 96       	adiw	r26, 0x03	; 3
     926:	5c 93       	st	X, r21
     928:	13 97       	sbiw	r26, 0x03	; 3
     92a:	89 85       	ldd	r24, Y+9	; 0x09
     92c:	14 96       	adiw	r26, 0x04	; 4
     92e:	8c 93       	st	X, r24
     930:	14 97       	sbiw	r26, 0x04	; 4
     932:	9a 85       	ldd	r25, Y+10	; 0x0a
     934:	15 96       	adiw	r26, 0x05	; 5
     936:	9c 93       	st	X, r25
     938:	15 97       	sbiw	r26, 0x05	; 5
     93a:	eb 85       	ldd	r30, Y+11	; 0x0b
     93c:	16 96       	adiw	r26, 0x06	; 6
     93e:	ec 93       	st	X, r30
     940:	16 97       	sbiw	r26, 0x06	; 6
     942:	fc 85       	ldd	r31, Y+12	; 0x0c
     944:	17 96       	adiw	r26, 0x07	; 7
     946:	fc 93       	st	X, r31
     948:	e4 c0       	rjmp	.+456    	; 0xb12 <__LOCK_REGION_LENGTH__+0x712>
	uint8_t i;
	for (i = 0; i < 4; i++)
		links[i].updateLevel();
	msenCh.updateLevel();
	for (i = 0; i < 9; i++)
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
     94a:	fc 01       	movw	r30, r24
     94c:	ee 0f       	add	r30, r30
     94e:	ff 1f       	adc	r31, r31
     950:	e4 5a       	subi	r30, 0xA4	; 164
     952:	fe 4d       	sbci	r31, 0xDE	; 222
     954:	20 81       	ld	r18, Z
     956:	31 81       	ldd	r19, Z+1	; 0x01
     958:	12 16       	cp	r1, r18
     95a:	13 06       	cpc	r1, r19
     95c:	44 f4       	brge	.+16     	; 0x96e <__LOCK_REGION_LENGTH__+0x56e>
     95e:	fc 01       	movw	r30, r24
     960:	ee 0f       	add	r30, r30
     962:	ff 1f       	adc	r31, r31
     964:	e4 5a       	subi	r30, 0xA4	; 164
     966:	fe 4d       	sbci	r31, 0xDE	; 222
     968:	20 81       	ld	r18, Z
     96a:	31 81       	ldd	r19, Z+1	; 0x01
     96c:	01 c0       	rjmp	.+2      	; 0x970 <__LOCK_REGION_LENGTH__+0x570>
     96e:	20 e0       	ldi	r18, 0x00	; 0
     970:	2d 93       	st	X+, r18
     972:	01 96       	adiw	r24, 0x01	; 1
	sysState.sysTick++;
	uint8_t i;
	for (i = 0; i < 4; i++)
		links[i].updateLevel();
	msenCh.updateLevel();
	for (i = 0; i < 9; i++)
     974:	89 30       	cpi	r24, 0x09	; 9
     976:	91 05       	cpc	r25, r1
     978:	41 f7       	brne	.-48     	; 0x94a <__LOCK_REGION_LENGTH__+0x54a>
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
	DSI8xFrames[0] = gLevelChg; //DSI start bit
     97a:	80 91 5b 21 	lds	r24, 0x215B	; 0x80215b <gLevelChg>
     97e:	80 93 46 21 	sts	0x2146, r24	; 0x802146 <DSI8xFrames>
     982:	19 82       	std	Y+1, r1	; 0x01
     984:	1a 82       	std	Y+2, r1	; 0x02
     986:	68 94       	set
     988:	ee 24       	eor	r14, r14
     98a:	e3 f8       	bld	r14, 3
     98c:	01 e0       	ldi	r16, 0x01	; 1
     98e:	10 e0       	ldi	r17, 0x00	; 0
     990:	d8 01       	movw	r26, r16
     992:	09 80       	ldd	r0, Y+1	; 0x01
     994:	02 c0       	rjmp	.+4      	; 0x99a <__LOCK_REGION_LENGTH__+0x59a>
     996:	aa 0f       	add	r26, r26
     998:	bb 1f       	adc	r27, r27
     99a:	0a 94       	dec	r0
     99c:	e2 f7       	brpl	.-8      	; 0x996 <__LOCK_REGION_LENGTH__+0x596>
     99e:	eb e0       	ldi	r30, 0x0B	; 11
     9a0:	f1 e2       	ldi	r31, 0x21	; 33
		{
			tmp1 >>= 1;
			tmp0 >>= 1;
			if (gLevelChg & (1 << j)) //Particular level has been changed
			{
				if (sysState.setLevels[j] & (1 << i)) //Set upper half-bit
     9a2:	20 e0       	ldi	r18, 0x00	; 0
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	d1 2c       	mov	r13, r1
     9a8:	f1 2c       	mov	r15, r1
	for (i = 0; i < 8; i++) //DSI frame bits 0-7
	{
		uint8_t tmp0 = 0, tmp1 = 0, j;
		for (j = 0; j < 8; j++) //Levels
		{
			tmp1 >>= 1;
     9aa:	6d 2d       	mov	r22, r13
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	75 95       	asr	r23
     9b0:	67 95       	ror	r22
     9b2:	d6 2e       	mov	r13, r22
			tmp0 >>= 1;
     9b4:	4f 2d       	mov	r20, r15
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	55 95       	asr	r21
     9ba:	47 95       	ror	r20
     9bc:	f4 2e       	mov	r15, r20
			if (gLevelChg & (1 << j)) //Particular level has been changed
     9be:	80 91 5b 21 	lds	r24, 0x215B	; 0x80215b <gLevelChg>
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	02 2e       	mov	r0, r18
     9c6:	02 c0       	rjmp	.+4      	; 0x9cc <__LOCK_REGION_LENGTH__+0x5cc>
     9c8:	95 95       	asr	r25
     9ca:	87 95       	ror	r24
     9cc:	0a 94       	dec	r0
     9ce:	e2 f7       	brpl	.-8      	; 0x9c8 <__LOCK_REGION_LENGTH__+0x5c8>
     9d0:	80 ff       	sbrs	r24, 0
     9d2:	0d c0       	rjmp	.+26     	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
			{
				if (sysState.setLevels[j] & (1 << i)) //Set upper half-bit
     9d4:	80 85       	ldd	r24, Z+8	; 0x08
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	8a 23       	and	r24, r26
     9da:	9b 23       	and	r25, r27
     9dc:	89 2b       	or	r24, r25
     9de:	21 f0       	breq	.+8      	; 0x9e8 <__LOCK_REGION_LENGTH__+0x5e8>
					tmp1 |= 0x80;
     9e0:	96 2f       	mov	r25, r22
     9e2:	90 68       	ori	r25, 0x80	; 128
     9e4:	d9 2e       	mov	r13, r25
     9e6:	03 c0       	rjmp	.+6      	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
				else
					tmp0 |= 0x80; //Set lower half-bit (one-zero transition)
     9e8:	84 2f       	mov	r24, r20
     9ea:	80 68       	ori	r24, 0x80	; 128
     9ec:	f8 2e       	mov	r15, r24
     9ee:	2f 5f       	subi	r18, 0xFF	; 255
     9f0:	3f 4f       	sbci	r19, 0xFF	; 255
     9f2:	31 96       	adiw	r30, 0x01	; 1
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
	DSI8xFrames[0] = gLevelChg; //DSI start bit
	for (i = 0; i < 8; i++) //DSI frame bits 0-7
	{
		uint8_t tmp0 = 0, tmp1 = 0, j;
		for (j = 0; j < 8; j++) //Levels
     9f4:	28 30       	cpi	r18, 0x08	; 8
     9f6:	31 05       	cpc	r19, r1
     9f8:	c1 f6       	brne	.-80     	; 0x9aa <__LOCK_REGION_LENGTH__+0x5aa>
				else
					tmp0 |= 0x80; //Set lower half-bit (one-zero transition)
			}
		}
		j = (8 - i) << 1;
		DSI8xFrames[j - 1] = tmp1;
     9fa:	8e 2d       	mov	r24, r14
     9fc:	88 0f       	add	r24, r24
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	fc 01       	movw	r30, r24
     a02:	eb 5b       	subi	r30, 0xBB	; 187
     a04:	fe 4d       	sbci	r31, 0xDE	; 222
     a06:	d0 82       	st	Z, r13
		DSI8xFrames[j] = tmp0; //Manchester coded
     a08:	fc 01       	movw	r30, r24
     a0a:	ea 5b       	subi	r30, 0xBA	; 186
     a0c:	fe 4d       	sbci	r31, 0xDE	; 222
     a0e:	f0 82       	st	Z, r15
     a10:	ea 94       	dec	r14
     a12:	a9 81       	ldd	r26, Y+1	; 0x01
     a14:	ba 81       	ldd	r27, Y+2	; 0x02
     a16:	11 96       	adiw	r26, 0x01	; 1
     a18:	a9 83       	std	Y+1, r26	; 0x01
     a1a:	ba 83       	std	Y+2, r27	; 0x02
		links[i].updateLevel();
	msenCh.updateLevel();
	for (i = 0; i < 9; i++)
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
	DSI8xFrames[0] = gLevelChg; //DSI start bit
	for (i = 0; i < 8; i++) //DSI frame bits 0-7
     a1c:	e1 10       	cpse	r14, r1
     a1e:	b8 cf       	rjmp	.-144    	; 0x990 <__LOCK_REGION_LENGTH__+0x590>
		}
		j = (8 - i) << 1;
		DSI8xFrames[j - 1] = tmp1;
		DSI8xFrames[j] = tmp0; //Manchester coded
	}
	DSI8xFrames[17] = 0; //DSI stop bit
     a20:	10 92 57 21 	sts	0x2157, r1	; 0x802157 <DSI8xFrames+0x11>
	gLevelChg = 0; //Clear flags for changed levels
     a24:	10 92 5b 21 	sts	0x215B, r1	; 0x80215b <gLevelChg>
	if (sysState.setLevels[8] > 0) //On/off channel processing
     a28:	80 91 1b 21 	lds	r24, 0x211B	; 0x80211b <sysState+0x10>
     a2c:	88 23       	and	r24, r24
     a2e:	21 f0       	breq	.+8      	; 0xa38 <__LOCK_REGION_LENGTH__+0x638>
		PORTA.OUTSET = PIN7_bm;
     a30:	80 e8       	ldi	r24, 0x80	; 128
     a32:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
     a36:	03 c0       	rjmp	.+6      	; 0xa3e <__LOCK_REGION_LENGTH__+0x63e>
	else
		PORTA.OUTCLR = PIN7_bm;
     a38:	80 e8       	ldi	r24, 0x80	; 128
     a3a:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>

	if ((char)sysState.sysTick % 4 == 0) //Initialize conversion sequence 8 times per second
     a3e:	80 91 0b 21 	lds	r24, 0x210B	; 0x80210b <sysState>
     a42:	83 70       	andi	r24, 0x03	; 3
     a44:	39 f4       	brne	.+14     	; 0xa54 <__LOCK_REGION_LENGTH__+0x654>
	{
		ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN1_gc;
     a46:	e0 e0       	ldi	r30, 0x00	; 0
     a48:	f2 e0       	ldi	r31, 0x02	; 2
     a4a:	88 e0       	ldi	r24, 0x08	; 8
     a4c:	81 a3       	std	Z+33, r24	; 0x21
		ADCA.CTRLA |= ADC_START_bm; //Start conversion from pin 1 (channel 1)
     a4e:	80 81       	ld	r24, Z
     a50:	84 60       	ori	r24, 0x04	; 4
     a52:	80 83       	st	Z, r24
	}

	if (!((uint8_t)sysState.sysTick & 0x1F))
     a54:	80 91 0b 21 	lds	r24, 0x210B	; 0x80210b <sysState>
     a58:	8f 71       	andi	r24, 0x1F	; 31
     a5a:	19 f4       	brne	.+6      	; 0xa62 <__LOCK_REGION_LENGTH__+0x662>
		PORTC.OUTTGL = PIN0_bm; //Heartbeat LED
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	80 93 47 06 	sts	0x0647, r24	; 0x800647 <__TEXT_REGION_LENGTH__+0x700647>

	if (((uint32_t)sysState.sysTick & 0x7FFFF) == 0) //Save state to EEPROM every 4.5 hrs
     a62:	80 91 0b 21 	lds	r24, 0x210B	; 0x80210b <sysState>
     a66:	90 91 0c 21 	lds	r25, 0x210C	; 0x80210c <sysState+0x1>
     a6a:	a0 91 0d 21 	lds	r26, 0x210D	; 0x80210d <sysState+0x2>
     a6e:	b0 91 0e 21 	lds	r27, 0x210E	; 0x80210e <sysState+0x3>
     a72:	a7 70       	andi	r26, 0x07	; 7
     a74:	bb 27       	eor	r27, r27
     a76:	89 2b       	or	r24, r25
     a78:	8a 2b       	or	r24, r26
     a7a:	8b 2b       	or	r24, r27
     a7c:	41 f4       	brne	.+16     	; 0xa8e <__LOCK_REGION_LENGTH__+0x68e>
		eeprom_update_block(&channelOT, &savedCOT, sizeof(channelsOnTime));
     a7e:	48 e3       	ldi	r20, 0x38	; 56
     a80:	50 e0       	ldi	r21, 0x00	; 0
     a82:	61 e2       	ldi	r22, 0x21	; 33
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	83 ed       	ldi	r24, 0xD3	; 211
     a88:	90 e2       	ldi	r25, 0x20	; 32
     a8a:	0e 94 8f 0a 	call	0x151e	; 0x151e <eeprom_update_block>

	if (rxMode == SetConfig && 2 < ++rxMark) //We are currently receiving data packet
     a8e:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <rxMode>
     a92:	83 33       	cpi	r24, 0x33	; 51
     a94:	b9 f4       	brne	.+46     	; 0xac4 <__LOCK_REGION_LENGTH__+0x6c4>
     a96:	80 91 59 21 	lds	r24, 0x2159	; 0x802159 <rxMark>
     a9a:	8f 5f       	subi	r24, 0xFF	; 255
     a9c:	80 93 59 21 	sts	0x2159, r24	; 0x802159 <rxMark>
     aa0:	83 30       	cpi	r24, 0x03	; 3
     aa2:	80 f0       	brcs	.+32     	; 0xac4 <__LOCK_REGION_LENGTH__+0x6c4>
	{
		EDMA.CH0.CTRLA = 0;
     aa4:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__TEXT_REGION_LENGTH__+0x700110>
		rxMode = 0; //Packet considered lost
     aa8:	10 92 5a 21 	sts	0x215A, r1	; 0x80215a <rxMode>
		USARTC0.CTRLB |= USART_MPCM_bm; //Set MPCM bit
     aac:	e0 ec       	ldi	r30, 0xC0	; 192
     aae:	f8 e0       	ldi	r31, 0x08	; 8
     ab0:	83 81       	ldd	r24, Z+3	; 0x03
     ab2:	82 60       	ori	r24, 0x02	; 2
     ab4:	83 83       	std	Z+3, r24	; 0x03
		USARTC0.CTRLA = USART_DRIE_bm | USART_RXCINTLVL_HI_gc;
     ab6:	80 e7       	ldi	r24, 0x70	; 112
     ab8:	82 83       	std	Z+2, r24	; 0x02
		while (EDMA.CH0.CTRLB & EDMA_CH_CHBUSY_bm);
     aba:	e0 e0       	ldi	r30, 0x00	; 0
     abc:	f1 e0       	ldi	r31, 0x01	; 1
     abe:	81 89       	ldd	r24, Z+17	; 0x11
     ac0:	88 23       	and	r24, r24
     ac2:	ec f3       	brlt	.-6      	; 0xabe <__LOCK_REGION_LENGTH__+0x6be>
	}
	framePtr = DSI8xFrames;
     ac4:	86 e4       	ldi	r24, 0x46	; 70
     ac6:	91 e2       	ldi	r25, 0x21	; 33
     ac8:	80 93 44 21 	sts	0x2144, r24	; 0x802144 <framePtr>
     acc:	90 93 45 21 	sts	0x2145, r25	; 0x802145 <framePtr+0x1>
	TCD5.INTFLAGS |= TC5_OVFIF_bm;
     ad0:	e0 e4       	ldi	r30, 0x40	; 64
     ad2:	f9 e0       	ldi	r31, 0x09	; 9
     ad4:	84 85       	ldd	r24, Z+12	; 0x0c
     ad6:	81 60       	ori	r24, 0x01	; 1
     ad8:	84 87       	std	Z+12, r24	; 0x0c
	TCD5.INTCTRLA = TC_OVFINTLVL_HI_gc;
     ada:	83 e0       	ldi	r24, 0x03	; 3
     adc:	86 83       	std	Z+6, r24	; 0x06
}
     ade:	1e c0       	rjmp	.+60     	; 0xb1c <__LOCK_REGION_LENGTH__+0x71c>
				else //Level needs to be raised
				{
					tempLvl += ((-tempLvl > delta) ? delta : -tempLvl) + (int16_t)_lvl[s];
					if (!gLevels[j] && tempLvl > 0) //Lamp has been switched on - remember ticks
					{
						if ((uint8_t)tempLvl < _minLvl[s])
     ae0:	ad 81       	ldd	r26, Y+5	; 0x05
     ae2:	be 81       	ldd	r27, Y+6	; 0x06
     ae4:	a4 0f       	add	r26, r20
     ae6:	b5 1f       	adc	r27, r21
     ae8:	19 96       	adiw	r26, 0x09	; 9
     aea:	8c 91       	ld	r24, X
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	a9 01       	movw	r20, r18
     af0:	55 27       	eor	r21, r21
     af2:	48 17       	cp	r20, r24
     af4:	59 07       	cpc	r21, r25
     af6:	0c f4       	brge	.+2      	; 0xafa <__LOCK_REGION_LENGTH__+0x6fa>
     af8:	70 cd       	rjmp	.-1312   	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
     afa:	70 cd       	rjmp	.-1312   	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
							tempLvl = _minLvl[s];
						_onTimeStamp = sysState.sysTick;
					}
				}
				gLevels[j] = tempLvl;
     afc:	66 0f       	add	r22, r22
     afe:	77 1f       	adc	r23, r23
     b00:	db 01       	movw	r26, r22
     b02:	a4 5a       	subi	r26, 0xA4	; 164
     b04:	be 4d       	sbci	r27, 0xDE	; 222
     b06:	2d 93       	st	X+, r18
     b08:	3c 93       	st	X, r19
				if (tempLvl >= 0 || changed)
     b0a:	33 23       	and	r19, r19
     b0c:	0c f0       	brlt	.+2      	; 0xb10 <__LOCK_REGION_LENGTH__+0x710>
     b0e:	89 cd       	rjmp	.-1262   	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
     b10:	97 cd       	rjmp	.-1234   	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
     b12:	a3 e1       	ldi	r26, 0x13	; 19
     b14:	b1 e2       	ldi	r27, 0x21	; 33
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
			return;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	17 cf       	rjmp	.-466    	; 0x94a <__LOCK_REGION_LENGTH__+0x54a>
		while (EDMA.CH0.CTRLB & EDMA_CH_CHBUSY_bm);
	}
	framePtr = DSI8xFrames;
	TCD5.INTFLAGS |= TC5_OVFIF_bm;
	TCD5.INTCTRLA = TC_OVFINTLVL_HI_gc;
}
     b1c:	2c 96       	adiw	r28, 0x0c	; 12
     b1e:	cd bf       	out	0x3d, r28	; 61
     b20:	de bf       	out	0x3e, r29	; 62
     b22:	df 91       	pop	r29
     b24:	cf 91       	pop	r28
     b26:	ff 91       	pop	r31
     b28:	ef 91       	pop	r30
     b2a:	bf 91       	pop	r27
     b2c:	af 91       	pop	r26
     b2e:	9f 91       	pop	r25
     b30:	8f 91       	pop	r24
     b32:	7f 91       	pop	r23
     b34:	6f 91       	pop	r22
     b36:	5f 91       	pop	r21
     b38:	4f 91       	pop	r20
     b3a:	3f 91       	pop	r19
     b3c:	2f 91       	pop	r18
     b3e:	1f 91       	pop	r17
     b40:	0f 91       	pop	r16
     b42:	ff 90       	pop	r15
     b44:	ef 90       	pop	r14
     b46:	df 90       	pop	r13
     b48:	cf 90       	pop	r12
     b4a:	bf 90       	pop	r11
     b4c:	af 90       	pop	r10
     b4e:	9f 90       	pop	r9
     b50:	8f 90       	pop	r8
     b52:	7f 90       	pop	r7
     b54:	6f 90       	pop	r6
     b56:	5f 90       	pop	r5
     b58:	4f 90       	pop	r4
     b5a:	3f 90       	pop	r3
     b5c:	2f 90       	pop	r2
     b5e:	0f 90       	pop	r0
     b60:	0f be       	out	0x3f, r0	; 63
     b62:	0f 90       	pop	r0
     b64:	1f 90       	pop	r1
     b66:	18 95       	reti

00000b68 <__vector_34>:

ISR(ADCA_CH0_vect)
{
     b68:	1f 92       	push	r1
     b6a:	0f 92       	push	r0
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	0f 92       	push	r0
     b70:	11 24       	eor	r1, r1
     b72:	af 92       	push	r10
     b74:	bf 92       	push	r11
     b76:	df 92       	push	r13
     b78:	ef 92       	push	r14
     b7a:	ff 92       	push	r15
     b7c:	0f 93       	push	r16
     b7e:	1f 93       	push	r17
     b80:	2f 93       	push	r18
     b82:	3f 93       	push	r19
     b84:	4f 93       	push	r20
     b86:	5f 93       	push	r21
     b88:	6f 93       	push	r22
     b8a:	7f 93       	push	r23
     b8c:	8f 93       	push	r24
     b8e:	9f 93       	push	r25
     b90:	af 93       	push	r26
     b92:	bf 93       	push	r27
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	ef 93       	push	r30
     b9a:	ff 93       	push	r31
	static uint8_t sAdcCnt = 0;
	int16_t result = ADCA.CH0RES;
     b9c:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__TEXT_REGION_LENGTH__+0x700210>
     ba0:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__TEXT_REGION_LENGTH__+0x700211>
	if (sAdcCnt < 4 && LINK_VALID_MIN < result && result < LINK_VALID_MAX)
     ba4:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <_edata>
     ba8:	24 30       	cpi	r18, 0x04	; 4
     baa:	08 f0       	brcs	.+2      	; 0xbae <__vector_34+0x46>
     bac:	5f c1       	rjmp	.+702    	; 0xe6c <__vector_34+0x304>
     bae:	bc 01       	movw	r22, r24
     bb0:	6a 58       	subi	r22, 0x8A	; 138
     bb2:	73 41       	sbci	r23, 0x13	; 19
     bb4:	6f 3c       	cpi	r22, 0xCF	; 207
     bb6:	77 46       	sbci	r23, 0x67	; 103
     bb8:	08 f0       	brcs	.+2      	; 0xbbc <__vector_34+0x54>
     bba:	49 c1       	rjmp	.+658    	; 0xe4e <__vector_34+0x2e6>
	{
		sysState.linksMask |= (1 << sAdcCnt); //Set 'valid' bit
     bbc:	a2 2e       	mov	r10, r18
     bbe:	b1 2c       	mov	r11, r1
     bc0:	eb e0       	ldi	r30, 0x0B	; 11
     bc2:	f1 e2       	ldi	r31, 0x21	; 33
     bc4:	61 e0       	ldi	r22, 0x01	; 1
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	02 2e       	mov	r0, r18
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <__vector_34+0x68>
     bcc:	66 0f       	add	r22, r22
     bce:	77 1f       	adc	r23, r23
     bd0:	0a 94       	dec	r0
     bd2:	e2 f7       	brpl	.-8      	; 0xbcc <__vector_34+0x64>
     bd4:	35 89       	ldd	r19, Z+21	; 0x15
     bd6:	36 2b       	or	r19, r22
     bd8:	35 8b       	std	Z+21, r19	; 0x15
		if (result < LINK_ON_BARRIER)
     bda:	85 34       	cpi	r24, 0x45	; 69
     bdc:	6b e1       	ldi	r22, 0x1B	; 27
     bde:	96 07       	cpc	r25, r22
     be0:	0c f0       	brlt	.+2      	; 0xbe4 <__vector_34+0x7c>
     be2:	88 c0       	rjmp	.+272    	; 0xcf4 <__vector_34+0x18c>
		{
			result = 0;
			if (sysState.linksMask & (0x10 << sAdcCnt)) //Previous level was non-zero
     be4:	80 e1       	ldi	r24, 0x10	; 16
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	02 2e       	mov	r0, r18
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <__vector_34+0x88>
     bec:	88 0f       	add	r24, r24
     bee:	99 1f       	adc	r25, r25
     bf0:	0a 94       	dec	r0
     bf2:	e2 f7       	brpl	.-8      	; 0xbec <__vector_34+0x84>
     bf4:	43 2f       	mov	r20, r19
     bf6:	50 e0       	ldi	r21, 0x00	; 0
     bf8:	48 23       	and	r20, r24
     bfa:	59 23       	and	r21, r25
     bfc:	45 2b       	or	r20, r21
     bfe:	09 f4       	brne	.+2      	; 0xc02 <__vector_34+0x9a>
     c00:	74 c0       	rjmp	.+232    	; 0xcea <__vector_34+0x182>
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		uint8_t oLvl = sysState.linkLevels[_linkNum];
     c02:	43 e2       	ldi	r20, 0x23	; 35
     c04:	4a 9d       	mul	r20, r10
     c06:	f0 01       	movw	r30, r0
     c08:	4b 9d       	mul	r20, r11
     c0a:	f0 0d       	add	r31, r0
     c0c:	11 24       	eor	r1, r1
     c0e:	e1 5f       	subi	r30, 0xF1	; 241
     c10:	ff 4d       	sbci	r31, 0xDF	; 223
     c12:	42 81       	ldd	r20, Z+2	; 0x02
     c14:	50 e0       	ldi	r21, 0x00	; 0
     c16:	fa 01       	movw	r30, r20
     c18:	e5 5f       	subi	r30, 0xF5	; 245
     c1a:	fe 4d       	sbci	r31, 0xDE	; 222
     c1c:	e1 89       	ldd	r30, Z+17	; 0x11
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
     c1e:	6e 2f       	mov	r22, r30
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	6e 5f       	subi	r22, 0xFE	; 254
     c24:	7f 4f       	sbci	r23, 0xFF	; 255
     c26:	65 30       	cpi	r22, 0x05	; 5
     c28:	71 05       	cpc	r23, r1
     c2a:	18 f4       	brcc	.+6      	; 0xc32 <__vector_34+0xca>
     c2c:	ee 23       	and	r30, r30
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__vector_34+0xca>
     c30:	5c c0       	rjmp	.+184    	; 0xcea <__vector_34+0x182>
			return;
		sysState.linkLevels[_linkNum] = level;
     c32:	fa 01       	movw	r30, r20
     c34:	e5 5f       	subi	r30, 0xF5	; 245
     c36:	fe 4d       	sbci	r31, 0xDE	; 222
     c38:	11 8a       	std	Z+17, r1	; 0x11

		for (uint8_t i = 0; i < _linkCnt; i++)
     c3a:	43 e2       	ldi	r20, 0x23	; 35
     c3c:	4a 9d       	mul	r20, r10
     c3e:	f0 01       	movw	r30, r0
     c40:	4b 9d       	mul	r20, r11
     c42:	f0 0d       	add	r31, r0
     c44:	11 24       	eor	r1, r1
     c46:	e1 5f       	subi	r30, 0xF1	; 241
     c48:	ff 4d       	sbci	r31, 0xDF	; 223
     c4a:	d1 80       	ldd	r13, Z+1	; 0x01
     c4c:	dd 20       	and	r13, r13
     c4e:	19 f1       	breq	.+70     	; 0xc96 <__vector_34+0x12e>
     c50:	c3 e2       	ldi	r28, 0x23	; 35
     c52:	2c 9f       	mul	r18, r28
     c54:	a0 01       	movw	r20, r0
     c56:	11 24       	eor	r1, r1
     c58:	4e 5e       	subi	r20, 0xEE	; 238
     c5a:	5f 4d       	sbci	r21, 0xDF	; 223
     c5c:	00 e0       	ldi	r16, 0x00	; 0
     c5e:	10 e0       	ldi	r17, 0x00	; 0
     c60:	da 01       	movw	r26, r20
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     c62:	ec 91       	ld	r30, X
     c64:	4f 5f       	subi	r20, 0xFF	; 255
     c66:	5f 4f       	sbci	r21, 0xFF	; 255
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	ee 0f       	add	r30, r30
     c6c:	ff 1f       	adc	r31, r31
     c6e:	e4 5a       	subi	r30, 0xA4	; 164
     c70:	fe 4d       	sbci	r31, 0xDE	; 222
     c72:	e0 80       	ld	r14, Z
     c74:	f1 80       	ldd	r15, Z+1	; 0x01
     c76:	13 96       	adiw	r26, 0x03	; 3
     c78:	6c 91       	ld	r22, X
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	e1 e0       	ldi	r30, 0x01	; 1
     c7e:	6e 15       	cp	r22, r14
     c80:	7f 05       	cpc	r23, r15
     c82:	09 f4       	brne	.+2      	; 0xc86 <__vector_34+0x11e>
     c84:	e0 e0       	ldi	r30, 0x00	; 0
     c86:	0e 2b       	or	r16, r30
			if (!level || !_difLvl[i]) //Set zero level directly
				_lvl[i] = 0;
     c88:	fa 01       	movw	r30, r20
     c8a:	12 82       	std	Z+2, r1	; 0x02
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
			return;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
     c8c:	1f 5f       	subi	r17, 0xFF	; 255
     c8e:	1d 11       	cpse	r17, r13
     c90:	e7 cf       	rjmp	.-50     	; 0xc60 <__vector_34+0xf8>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     c92:	01 11       	cpse	r16, r1
     c94:	2a c0       	rjmp	.+84     	; 0xcea <__vector_34+0x182>
			_tickLastChg = sysState.sysTick;
     c96:	63 e2       	ldi	r22, 0x23	; 35
     c98:	6a 9d       	mul	r22, r10
     c9a:	a0 01       	movw	r20, r0
     c9c:	6b 9d       	mul	r22, r11
     c9e:	50 0d       	add	r21, r0
     ca0:	11 24       	eor	r1, r1
     ca2:	ea 01       	movw	r28, r20
     ca4:	c1 5f       	subi	r28, 0xF1	; 241
     ca6:	df 4d       	sbci	r29, 0xDF	; 223
     ca8:	de 01       	movw	r26, r28
     caa:	53 96       	adiw	r26, 0x13	; 19
     cac:	eb e0       	ldi	r30, 0x0B	; 11
     cae:	f1 e2       	ldi	r31, 0x21	; 33
     cb0:	40 81       	ld	r20, Z
     cb2:	4b 8b       	std	Y+19, r20	; 0x13
     cb4:	41 81       	ldd	r20, Z+1	; 0x01
     cb6:	11 96       	adiw	r26, 0x01	; 1
     cb8:	4c 93       	st	X, r20
     cba:	11 97       	sbiw	r26, 0x01	; 1
     cbc:	42 81       	ldd	r20, Z+2	; 0x02
     cbe:	12 96       	adiw	r26, 0x02	; 2
     cc0:	4c 93       	st	X, r20
     cc2:	12 97       	sbiw	r26, 0x02	; 2
     cc4:	43 81       	ldd	r20, Z+3	; 0x03
     cc6:	13 96       	adiw	r26, 0x03	; 3
     cc8:	4c 93       	st	X, r20
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	44 81       	ldd	r20, Z+4	; 0x04
     cce:	14 96       	adiw	r26, 0x04	; 4
     cd0:	4c 93       	st	X, r20
     cd2:	14 97       	sbiw	r26, 0x04	; 4
     cd4:	45 81       	ldd	r20, Z+5	; 0x05
     cd6:	15 96       	adiw	r26, 0x05	; 5
     cd8:	4c 93       	st	X, r20
     cda:	15 97       	sbiw	r26, 0x05	; 5
     cdc:	46 81       	ldd	r20, Z+6	; 0x06
     cde:	16 96       	adiw	r26, 0x06	; 6
     ce0:	4c 93       	st	X, r20
     ce2:	16 97       	sbiw	r26, 0x06	; 6
     ce4:	47 81       	ldd	r20, Z+7	; 0x07
     ce6:	17 96       	adiw	r26, 0x07	; 7
     ce8:	4c 93       	st	X, r20
		if (result < LINK_ON_BARRIER)
		{
			result = 0;
			if (sysState.linksMask & (0x10 << sAdcCnt)) //Previous level was non-zero
				links[sAdcCnt].setLevel(0);
			sysState.linksMask &= ~(0x10 << sAdcCnt); //Clear 'non-zero' bit
     cea:	80 95       	com	r24
     cec:	38 23       	and	r19, r24
     cee:	30 93 20 21 	sts	0x2120, r19	; 0x802120 <sysState+0x15>
     cf2:	a8 c1       	rjmp	.+848    	; 0x1044 <__vector_34+0x4dc>
		}
		else
		{
			result = (result - LINK_1PERC_CODE) / LINK_SCALE;
     cf4:	80 59       	subi	r24, 0x90	; 144
     cf6:	91 42       	sbci	r25, 0x21	; 33
     cf8:	64 e5       	ldi	r22, 0x54	; 84
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__divmodhi4>
			if (result < 5)
     d00:	65 30       	cpi	r22, 0x05	; 5
     d02:	71 05       	cpc	r23, r1
     d04:	14 f4       	brge	.+4      	; 0xd0a <__vector_34+0x1a2>
				result = 5;
     d06:	65 e0       	ldi	r22, 0x05	; 5
     d08:	70 e0       	ldi	r23, 0x00	; 0
     d0a:	6f 3f       	cpi	r22, 0xFF	; 255
     d0c:	71 05       	cpc	r23, r1
     d0e:	19 f0       	breq	.+6      	; 0xd16 <__vector_34+0x1ae>
     d10:	14 f0       	brlt	.+4      	; 0xd16 <__vector_34+0x1ae>
     d12:	6f ef       	ldi	r22, 0xFF	; 255
     d14:	70 e0       	ldi	r23, 0x00	; 0
			if (result > 255)
				result = 255;
			sysState.linksMask |= (0x10 << sAdcCnt); //Set 'non-zero' bit
     d16:	80 e1       	ldi	r24, 0x10	; 16
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	02 2e       	mov	r0, r18
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <__vector_34+0x1ba>
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	0a 94       	dec	r0
     d24:	e2 f7       	brpl	.-8      	; 0xd1e <__vector_34+0x1b6>
     d26:	38 2b       	or	r19, r24
     d28:	30 93 20 21 	sts	0x2120, r19	; 0x802120 <sysState+0x15>
			links[sAdcCnt].setLevel((uint8_t)result);
     d2c:	16 2f       	mov	r17, r22
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		uint8_t oLvl = sysState.linkLevels[_linkNum];
     d2e:	83 e2       	ldi	r24, 0x23	; 35
     d30:	8a 9d       	mul	r24, r10
     d32:	f0 01       	movw	r30, r0
     d34:	8b 9d       	mul	r24, r11
     d36:	f0 0d       	add	r31, r0
     d38:	11 24       	eor	r1, r1
     d3a:	e1 5f       	subi	r30, 0xF1	; 241
     d3c:	ff 4d       	sbci	r31, 0xDF	; 223
     d3e:	42 81       	ldd	r20, Z+2	; 0x02
     d40:	50 e0       	ldi	r21, 0x00	; 0
     d42:	fa 01       	movw	r30, r20
     d44:	e5 5f       	subi	r30, 0xF5	; 245
     d46:	fe 4d       	sbci	r31, 0xDE	; 222
     d48:	31 89       	ldd	r19, Z+17	; 0x11
     d4a:	77 27       	eor	r23, r23
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
     d4c:	83 2f       	mov	r24, r19
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	86 1b       	sub	r24, r22
     d52:	97 0b       	sbc	r25, r23
     d54:	02 96       	adiw	r24, 0x02	; 2
     d56:	05 97       	sbiw	r24, 0x05	; 5
     d58:	48 f4       	brcc	.+18     	; 0xd6c <__vector_34+0x204>
     d5a:	91 e0       	ldi	r25, 0x01	; 1
     d5c:	11 11       	cpse	r17, r1
     d5e:	01 c0       	rjmp	.+2      	; 0xd62 <__vector_34+0x1fa>
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	31 11       	cpse	r19, r1
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	98 13       	cpse	r25, r24
     d6a:	6c c1       	rjmp	.+728    	; 0x1044 <__vector_34+0x4dc>
			return;
		sysState.linkLevels[_linkNum] = level;
     d6c:	fa 01       	movw	r30, r20
     d6e:	e5 5f       	subi	r30, 0xF5	; 245
     d70:	fe 4d       	sbci	r31, 0xDE	; 222
     d72:	11 8b       	std	Z+17, r17	; 0x11

		for (uint8_t i = 0; i < _linkCnt; i++)
     d74:	83 e2       	ldi	r24, 0x23	; 35
     d76:	8a 9d       	mul	r24, r10
     d78:	f0 01       	movw	r30, r0
     d7a:	8b 9d       	mul	r24, r11
     d7c:	f0 0d       	add	r31, r0
     d7e:	11 24       	eor	r1, r1
     d80:	e1 5f       	subi	r30, 0xF1	; 241
     d82:	ff 4d       	sbci	r31, 0xDF	; 223
     d84:	01 81       	ldd	r16, Z+1	; 0x01
     d86:	00 23       	and	r16, r16
     d88:	b9 f1       	breq	.+110    	; 0xdf8 <__vector_34+0x290>
     d8a:	f3 e2       	ldi	r31, 0x23	; 35
     d8c:	2f 9f       	mul	r18, r31
     d8e:	d0 01       	movw	r26, r0
     d90:	11 24       	eor	r1, r1
     d92:	ae 5e       	subi	r26, 0xEE	; 238
     d94:	bf 4d       	sbci	r27, 0xDF	; 223
     d96:	50 e0       	ldi	r21, 0x00	; 0
     d98:	30 e0       	ldi	r19, 0x00	; 0
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     d9a:	ed 01       	movw	r28, r26
     d9c:	e8 81       	ld	r30, Y
     d9e:	11 96       	adiw	r26, 0x01	; 1
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	ee 0f       	add	r30, r30
     da4:	ff 1f       	adc	r31, r31
     da6:	e4 5a       	subi	r30, 0xA4	; 164
     da8:	fe 4d       	sbci	r31, 0xDE	; 222
     daa:	01 90       	ld	r0, Z+
     dac:	f0 81       	ld	r31, Z
     dae:	e0 2d       	mov	r30, r0
     db0:	8b 81       	ldd	r24, Y+3	; 0x03
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	41 e0       	ldi	r20, 0x01	; 1
     db6:	8e 17       	cp	r24, r30
     db8:	9f 07       	cpc	r25, r31
     dba:	09 f4       	brne	.+2      	; 0xdbe <__vector_34+0x256>
     dbc:	40 e0       	ldi	r20, 0x00	; 0
     dbe:	54 2b       	or	r21, r20
			if (!level || !_difLvl[i]) //Set zero level directly
     dc0:	11 23       	and	r17, r17
     dc2:	29 f0       	breq	.+10     	; 0xdce <__vector_34+0x266>
     dc4:	18 96       	adiw	r26, 0x08	; 8
     dc6:	8c 91       	ld	r24, X
     dc8:	18 97       	sbiw	r26, 0x08	; 8
     dca:	81 11       	cpse	r24, r1
     dcc:	04 c0       	rjmp	.+8      	; 0xdd6 <__vector_34+0x26e>
				_lvl[i] = 0;
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	1c 92       	st	X, r1
     dd2:	12 97       	sbiw	r26, 0x02	; 2
     dd4:	0c c0       	rjmp	.+24     	; 0xdee <__vector_34+0x286>
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
     dd6:	86 9f       	mul	r24, r22
     dd8:	f0 01       	movw	r30, r0
     dda:	87 9f       	mul	r24, r23
     ddc:	f0 0d       	add	r31, r0
     dde:	11 24       	eor	r1, r1
     de0:	15 96       	adiw	r26, 0x05	; 5
     de2:	8c 91       	ld	r24, X
     de4:	15 97       	sbiw	r26, 0x05	; 5
     de6:	8f 0f       	add	r24, r31
     de8:	12 96       	adiw	r26, 0x02	; 2
     dea:	8c 93       	st	X, r24
     dec:	12 97       	sbiw	r26, 0x02	; 2
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
			return;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
     dee:	3f 5f       	subi	r19, 0xFF	; 255
     df0:	03 13       	cpse	r16, r19
     df2:	d3 cf       	rjmp	.-90     	; 0xd9a <__vector_34+0x232>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     df4:	51 11       	cpse	r21, r1
     df6:	26 c1       	rjmp	.+588    	; 0x1044 <__vector_34+0x4dc>
			_tickLastChg = sysState.sysTick;
     df8:	33 e2       	ldi	r19, 0x23	; 35
     dfa:	3a 9d       	mul	r19, r10
     dfc:	c0 01       	movw	r24, r0
     dfe:	3b 9d       	mul	r19, r11
     e00:	90 0d       	add	r25, r0
     e02:	11 24       	eor	r1, r1
     e04:	ec 01       	movw	r28, r24
     e06:	c1 5f       	subi	r28, 0xF1	; 241
     e08:	df 4d       	sbci	r29, 0xDF	; 223
     e0a:	de 01       	movw	r26, r28
     e0c:	53 96       	adiw	r26, 0x13	; 19
     e0e:	eb e0       	ldi	r30, 0x0B	; 11
     e10:	f1 e2       	ldi	r31, 0x21	; 33
     e12:	80 81       	ld	r24, Z
     e14:	8b 8b       	std	Y+19, r24	; 0x13
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	11 96       	adiw	r26, 0x01	; 1
     e1a:	8c 93       	st	X, r24
     e1c:	11 97       	sbiw	r26, 0x01	; 1
     e1e:	82 81       	ldd	r24, Z+2	; 0x02
     e20:	12 96       	adiw	r26, 0x02	; 2
     e22:	8c 93       	st	X, r24
     e24:	12 97       	sbiw	r26, 0x02	; 2
     e26:	83 81       	ldd	r24, Z+3	; 0x03
     e28:	13 96       	adiw	r26, 0x03	; 3
     e2a:	8c 93       	st	X, r24
     e2c:	13 97       	sbiw	r26, 0x03	; 3
     e2e:	84 81       	ldd	r24, Z+4	; 0x04
     e30:	14 96       	adiw	r26, 0x04	; 4
     e32:	8c 93       	st	X, r24
     e34:	14 97       	sbiw	r26, 0x04	; 4
     e36:	85 81       	ldd	r24, Z+5	; 0x05
     e38:	15 96       	adiw	r26, 0x05	; 5
     e3a:	8c 93       	st	X, r24
     e3c:	15 97       	sbiw	r26, 0x05	; 5
     e3e:	86 81       	ldd	r24, Z+6	; 0x06
     e40:	16 96       	adiw	r26, 0x06	; 6
     e42:	8c 93       	st	X, r24
     e44:	16 97       	sbiw	r26, 0x06	; 6
     e46:	87 81       	ldd	r24, Z+7	; 0x07
     e48:	17 96       	adiw	r26, 0x07	; 7
     e4a:	8c 93       	st	X, r24
     e4c:	fb c0       	rjmp	.+502    	; 0x1044 <__vector_34+0x4dc>
			sysState.linksMask |= (0x10 << sAdcCnt); //Set 'non-zero' bit
			links[sAdcCnt].setLevel((uint8_t)result);
		}
	}
	else if (sAdcCnt < 4)
		sysState.linksMask &= ~(0x11 << sAdcCnt); //Clear 'valid' and 'non-zero' bits
     e4e:	eb e0       	ldi	r30, 0x0B	; 11
     e50:	f1 e2       	ldi	r31, 0x21	; 33
     e52:	81 e1       	ldi	r24, 0x11	; 17
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	02 2e       	mov	r0, r18
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <__vector_34+0x2f6>
     e5a:	88 0f       	add	r24, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	0a 94       	dec	r0
     e60:	e2 f7       	brpl	.-8      	; 0xe5a <__vector_34+0x2f2>
     e62:	80 95       	com	r24
     e64:	95 89       	ldd	r25, Z+21	; 0x15
     e66:	89 23       	and	r24, r25
     e68:	85 8b       	std	Z+21, r24	; 0x15
     e6a:	ec c0       	rjmp	.+472    	; 0x1044 <__vector_34+0x4dc>
	else //sAdcCnt == 4: MSEN channel
		msenCh.setLevel((uint8_t)(result >> 6));
     e6c:	08 2e       	mov	r0, r24
     e6e:	89 2f       	mov	r24, r25
     e70:	00 0c       	add	r0, r0
     e72:	88 1f       	adc	r24, r24
     e74:	99 0b       	sbc	r25, r25
     e76:	00 0c       	add	r0, r0
     e78:	88 1f       	adc	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	38 2f       	mov	r19, r24
		_onTime = validConf.msenOnTime > 5 ? validConf.msenOnTime : 6;
		_fTime = _onTime + validConf.msenLowTime;
	}
	void setLevel(uint8_t level)
	{
		if (level < MSEN_VALID_MIN || !validConf.msenOnTime || (sysState.linksMask & (0x10 << _linkNum)))
     e7e:	84 31       	cpi	r24, 0x14	; 20
     e80:	c0 f0       	brcs	.+48     	; 0xeb2 <__vector_34+0x34a>
     e82:	40 91 3d 21 	lds	r20, 0x213D	; 0x80213d <validConf+0x1a>
     e86:	44 23       	and	r20, r20
     e88:	a1 f0       	breq	.+40     	; 0xeb2 <__vector_34+0x34a>
     e8a:	e0 91 03 20 	lds	r30, 0x2003	; 0x802003 <msenCh+0x2>
     e8e:	ae 2f       	mov	r26, r30
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	40 91 20 21 	lds	r20, 0x2120	; 0x802120 <sysState+0x15>
     e96:	64 2f       	mov	r22, r20
     e98:	70 e0       	ldi	r23, 0x00	; 0
     e9a:	40 e1       	ldi	r20, 0x10	; 16
     e9c:	50 e0       	ldi	r21, 0x00	; 0
     e9e:	0e 2e       	mov	r0, r30
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <__vector_34+0x33e>
     ea2:	44 0f       	add	r20, r20
     ea4:	55 1f       	adc	r21, r21
     ea6:	0a 94       	dec	r0
     ea8:	e2 f7       	brpl	.-8      	; 0xea2 <__vector_34+0x33a>
     eaa:	46 23       	and	r20, r22
     eac:	57 23       	and	r21, r23
     eae:	45 2b       	or	r20, r21
     eb0:	29 f0       	breq	.+10     	; 0xebc <__vector_34+0x354>
		{
			_lvl = 0; //MSEN disconnected, disabled (by zero on time) or there is non-zero level from link
     eb2:	e1 e0       	ldi	r30, 0x01	; 1
     eb4:	f0 e2       	ldi	r31, 0x20	; 32
     eb6:	13 82       	std	Z+3, r1	; 0x03
			cntDown = false;
     eb8:	10 82       	st	Z, r1
     eba:	c4 c0       	rjmp	.+392    	; 0x1044 <__vector_34+0x4dc>
			return;
		}
		if (level > MSEN_SEN1_TRIG && _lvl == MSEN_VALID_MIN) //Off to on transition
     ebc:	8a 33       	cpi	r24, 0x3A	; 58
     ebe:	08 f4       	brcc	.+2      	; 0xec2 <__vector_34+0x35a>
     ec0:	96 c0       	rjmp	.+300    	; 0xfee <__vector_34+0x486>
     ec2:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <msenCh+0x3>
     ec6:	44 31       	cpi	r20, 0x14	; 20
     ec8:	09 f0       	breq	.+2      	; 0xecc <__vector_34+0x364>
     eca:	91 c0       	rjmp	.+290    	; 0xfee <__vector_34+0x486>
		{
			_lvl = level;
     ecc:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <msenCh+0x3>
		}
	}

	void setLevel(uint8_t level, bool direction) //Accepts level in the range 0…255
	{
		_dir = direction;
     ed0:	83 e2       	ldi	r24, 0x23	; 35
     ed2:	8a 9f       	mul	r24, r26
     ed4:	e0 01       	movw	r28, r0
     ed6:	8b 9f       	mul	r24, r27
     ed8:	d0 0d       	add	r29, r0
     eda:	11 24       	eor	r1, r1
     edc:	c1 5f       	subi	r28, 0xF1	; 241
     ede:	df 4d       	sbci	r29, 0xDF	; 223
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	37 34       	cpi	r19, 0x47	; 71
     ee4:	08 f4       	brcc	.+2      	; 0xee8 <__vector_34+0x380>
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	88 83       	st	Y, r24
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		uint8_t oLvl = sysState.linkLevels[_linkNum];
     eea:	83 e2       	ldi	r24, 0x23	; 35
     eec:	8a 9f       	mul	r24, r26
     eee:	e0 01       	movw	r28, r0
     ef0:	8b 9f       	mul	r24, r27
     ef2:	d0 0d       	add	r29, r0
     ef4:	11 24       	eor	r1, r1
     ef6:	c1 5f       	subi	r28, 0xF1	; 241
     ef8:	df 4d       	sbci	r29, 0xDF	; 223
     efa:	8a 81       	ldd	r24, Y+2	; 0x02
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	ec 01       	movw	r28, r24
     f00:	c5 5f       	subi	r28, 0xF5	; 245
     f02:	de 4d       	sbci	r29, 0xDE	; 222
     f04:	39 89       	ldd	r19, Y+17	; 0x11
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
     f06:	43 2f       	mov	r20, r19
     f08:	50 e0       	ldi	r21, 0x00	; 0
     f0a:	4d 5f       	subi	r20, 0xFD	; 253
     f0c:	51 09       	sbc	r21, r1
     f0e:	45 30       	cpi	r20, 0x05	; 5
     f10:	51 05       	cpc	r21, r1
     f12:	10 f4       	brcc	.+4      	; 0xf18 <__vector_34+0x3b0>
     f14:	31 11       	cpse	r19, r1
     f16:	66 c0       	rjmp	.+204    	; 0xfe4 <__vector_34+0x47c>
			return;
		sysState.linkLevels[_linkNum] = level;
     f18:	ec 01       	movw	r28, r24
     f1a:	c5 5f       	subi	r28, 0xF5	; 245
     f1c:	de 4d       	sbci	r29, 0xDE	; 222
     f1e:	3f ef       	ldi	r19, 0xFF	; 255
     f20:	39 8b       	std	Y+17, r19	; 0x11

		for (uint8_t i = 0; i < _linkCnt; i++)
     f22:	83 e2       	ldi	r24, 0x23	; 35
     f24:	8a 9f       	mul	r24, r26
     f26:	e0 01       	movw	r28, r0
     f28:	8b 9f       	mul	r24, r27
     f2a:	d0 0d       	add	r29, r0
     f2c:	11 24       	eor	r1, r1
     f2e:	c1 5f       	subi	r28, 0xF1	; 241
     f30:	df 4d       	sbci	r29, 0xDF	; 223
     f32:	69 81       	ldd	r22, Y+1	; 0x01
     f34:	66 23       	and	r22, r22
     f36:	69 f1       	breq	.+90     	; 0xf92 <__vector_34+0x42a>
     f38:	33 e2       	ldi	r19, 0x23	; 35
     f3a:	e3 9f       	mul	r30, r19
     f3c:	f0 01       	movw	r30, r0
     f3e:	11 24       	eor	r1, r1
     f40:	ee 5e       	subi	r30, 0xEE	; 238
     f42:	ff 4d       	sbci	r31, 0xDF	; 223
     f44:	50 e0       	ldi	r21, 0x00	; 0
     f46:	30 e0       	ldi	r19, 0x00	; 0
				_lvl[i] = 0;
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
     f48:	7f ef       	ldi	r23, 0xFF	; 255
     f4a:	cf 01       	movw	r24, r30
			return;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     f4c:	40 81       	ld	r20, Z
     f4e:	31 96       	adiw	r30, 0x01	; 1
     f50:	c4 2f       	mov	r28, r20
     f52:	d0 e0       	ldi	r29, 0x00	; 0
     f54:	cc 0f       	add	r28, r28
     f56:	dd 1f       	adc	r29, r29
     f58:	c4 5a       	subi	r28, 0xA4	; 164
     f5a:	de 4d       	sbci	r29, 0xDE	; 222
     f5c:	08 81       	ld	r16, Y
     f5e:	19 81       	ldd	r17, Y+1	; 0x01
     f60:	ec 01       	movw	r28, r24
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	41 e0       	ldi	r20, 0x01	; 1
     f68:	80 17       	cp	r24, r16
     f6a:	91 07       	cpc	r25, r17
     f6c:	09 f4       	brne	.+2      	; 0xf70 <__vector_34+0x408>
     f6e:	40 e0       	ldi	r20, 0x00	; 0
     f70:	54 2b       	or	r21, r20
			if (!level || !_difLvl[i]) //Set zero level directly
     f72:	80 85       	ldd	r24, Z+8	; 0x08
     f74:	81 11       	cpse	r24, r1
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <__vector_34+0x414>
				_lvl[i] = 0;
     f78:	12 82       	std	Z+2, r1	; 0x02
     f7a:	06 c0       	rjmp	.+12     	; 0xf88 <__vector_34+0x420>
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
     f7c:	78 9f       	mul	r23, r24
     f7e:	c0 01       	movw	r24, r0
     f80:	11 24       	eor	r1, r1
     f82:	85 81       	ldd	r24, Z+5	; 0x05
     f84:	89 0f       	add	r24, r25
     f86:	82 83       	std	Z+2, r24	; 0x02
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
			return;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
     f88:	3f 5f       	subi	r19, 0xFF	; 255
     f8a:	63 13       	cpse	r22, r19
     f8c:	de cf       	rjmp	.-68     	; 0xf4a <__vector_34+0x3e2>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     f8e:	51 11       	cpse	r21, r1
     f90:	29 c0       	rjmp	.+82     	; 0xfe4 <__vector_34+0x47c>
			_tickLastChg = sysState.sysTick;
     f92:	83 e2       	ldi	r24, 0x23	; 35
     f94:	8a 9f       	mul	r24, r26
     f96:	e0 01       	movw	r28, r0
     f98:	8b 9f       	mul	r24, r27
     f9a:	d0 0d       	add	r29, r0
     f9c:	11 24       	eor	r1, r1
     f9e:	c1 5f       	subi	r28, 0xF1	; 241
     fa0:	df 4d       	sbci	r29, 0xDF	; 223
     fa2:	de 01       	movw	r26, r28
     fa4:	53 96       	adiw	r26, 0x13	; 19
     fa6:	eb e0       	ldi	r30, 0x0B	; 11
     fa8:	f1 e2       	ldi	r31, 0x21	; 33
     faa:	80 81       	ld	r24, Z
     fac:	8b 8b       	std	Y+19, r24	; 0x13
     fae:	81 81       	ldd	r24, Z+1	; 0x01
     fb0:	11 96       	adiw	r26, 0x01	; 1
     fb2:	8c 93       	st	X, r24
     fb4:	11 97       	sbiw	r26, 0x01	; 1
     fb6:	82 81       	ldd	r24, Z+2	; 0x02
     fb8:	12 96       	adiw	r26, 0x02	; 2
     fba:	8c 93       	st	X, r24
     fbc:	12 97       	sbiw	r26, 0x02	; 2
     fbe:	83 81       	ldd	r24, Z+3	; 0x03
     fc0:	13 96       	adiw	r26, 0x03	; 3
     fc2:	8c 93       	st	X, r24
     fc4:	13 97       	sbiw	r26, 0x03	; 3
     fc6:	84 81       	ldd	r24, Z+4	; 0x04
     fc8:	14 96       	adiw	r26, 0x04	; 4
     fca:	8c 93       	st	X, r24
     fcc:	14 97       	sbiw	r26, 0x04	; 4
     fce:	85 81       	ldd	r24, Z+5	; 0x05
     fd0:	15 96       	adiw	r26, 0x05	; 5
     fd2:	8c 93       	st	X, r24
     fd4:	15 97       	sbiw	r26, 0x05	; 5
     fd6:	86 81       	ldd	r24, Z+6	; 0x06
     fd8:	16 96       	adiw	r26, 0x06	; 6
     fda:	8c 93       	st	X, r24
     fdc:	16 97       	sbiw	r26, 0x06	; 6
     fde:	87 81       	ldd	r24, Z+7	; 0x07
     fe0:	17 96       	adiw	r26, 0x07	; 7
     fe2:	8c 93       	st	X, r24
		}
		if (level > MSEN_SEN1_TRIG && _lvl == MSEN_VALID_MIN) //Off to on transition
		{
			_lvl = level;
			links[_linkNum].setLevel(255, level > MSEN_SEN2_TRIG); //Start from max light level
			ltEnt = cntDown = false;
     fe4:	e1 e0       	ldi	r30, 0x01	; 1
     fe6:	f0 e2       	ldi	r31, 0x20	; 32
     fe8:	10 82       	st	Z, r1
     fea:	11 82       	std	Z+1, r1	; 0x01
     fec:	2b c0       	rjmp	.+86     	; 0x1044 <__vector_34+0x4dc>
			return;
		}
		if (level < MSEN_SEN1_TRIG && _lvl > level) //On to off transition
     fee:	39 33       	cpi	r19, 0x39	; 57
     ff0:	48 f5       	brcc	.+82     	; 0x1044 <__vector_34+0x4dc>
     ff2:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <msenCh+0x3>
     ff6:	38 17       	cp	r19, r24
     ff8:	28 f5       	brcc	.+74     	; 0x1044 <__vector_34+0x4dc>
		{
			_lvl = MSEN_VALID_MIN;
     ffa:	e1 e0       	ldi	r30, 0x01	; 1
     ffc:	f0 e2       	ldi	r31, 0x20	; 32
     ffe:	84 e1       	ldi	r24, 0x14	; 20
    1000:	83 83       	std	Z+3, r24	; 0x03
			_onTimeStamp = sysState.sysTick;
    1002:	ab e0       	ldi	r26, 0x0B	; 11
    1004:	b1 e2       	ldi	r27, 0x21	; 33
    1006:	8c 91       	ld	r24, X
    1008:	86 83       	std	Z+6, r24	; 0x06
    100a:	11 96       	adiw	r26, 0x01	; 1
    100c:	8c 91       	ld	r24, X
    100e:	11 97       	sbiw	r26, 0x01	; 1
    1010:	87 83       	std	Z+7, r24	; 0x07
    1012:	12 96       	adiw	r26, 0x02	; 2
    1014:	8c 91       	ld	r24, X
    1016:	12 97       	sbiw	r26, 0x02	; 2
    1018:	80 87       	std	Z+8, r24	; 0x08
    101a:	13 96       	adiw	r26, 0x03	; 3
    101c:	8c 91       	ld	r24, X
    101e:	13 97       	sbiw	r26, 0x03	; 3
    1020:	81 87       	std	Z+9, r24	; 0x09
    1022:	14 96       	adiw	r26, 0x04	; 4
    1024:	8c 91       	ld	r24, X
    1026:	14 97       	sbiw	r26, 0x04	; 4
    1028:	82 87       	std	Z+10, r24	; 0x0a
    102a:	15 96       	adiw	r26, 0x05	; 5
    102c:	8c 91       	ld	r24, X
    102e:	15 97       	sbiw	r26, 0x05	; 5
    1030:	83 87       	std	Z+11, r24	; 0x0b
    1032:	16 96       	adiw	r26, 0x06	; 6
    1034:	8c 91       	ld	r24, X
    1036:	16 97       	sbiw	r26, 0x06	; 6
    1038:	84 87       	std	Z+12, r24	; 0x0c
    103a:	17 96       	adiw	r26, 0x07	; 7
    103c:	8c 91       	ld	r24, X
    103e:	85 87       	std	Z+13, r24	; 0x0d
			cntDown = true;
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	80 83       	st	Z, r24
	else if (sAdcCnt < 4)
		sysState.linksMask &= ~(0x11 << sAdcCnt); //Clear 'valid' and 'non-zero' bits
	else //sAdcCnt == 4: MSEN channel
		msenCh.setLevel((uint8_t)(result >> 6));

	sAdcCnt++;
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	82 0f       	add	r24, r18
    1048:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <_edata>
	ADCA.CH0.MUXCTRL = (sAdcCnt + 1) << ADC_CH_MUXPOS_gp;
    104c:	2e 5f       	subi	r18, 0xFE	; 254
    104e:	22 0f       	add	r18, r18
    1050:	22 0f       	add	r18, r18
    1052:	22 0f       	add	r18, r18
    1054:	20 93 21 02 	sts	0x0221, r18	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
	if (sAdcCnt < 5)
    1058:	85 30       	cpi	r24, 0x05	; 5
    105a:	30 f4       	brcc	.+12     	; 0x1068 <__vector_34+0x500>
		ADCA.CTRLA |= ADC_START_bm;
    105c:	e0 e0       	ldi	r30, 0x00	; 0
    105e:	f2 e0       	ldi	r31, 0x02	; 2
    1060:	80 81       	ld	r24, Z
    1062:	84 60       	ori	r24, 0x04	; 4
    1064:	80 83       	st	Z, r24
    1066:	02 c0       	rjmp	.+4      	; 0x106c <__vector_34+0x504>
	else
		sAdcCnt = 0;
    1068:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <_edata>
}
    106c:	ff 91       	pop	r31
    106e:	ef 91       	pop	r30
    1070:	df 91       	pop	r29
    1072:	cf 91       	pop	r28
    1074:	bf 91       	pop	r27
    1076:	af 91       	pop	r26
    1078:	9f 91       	pop	r25
    107a:	8f 91       	pop	r24
    107c:	7f 91       	pop	r23
    107e:	6f 91       	pop	r22
    1080:	5f 91       	pop	r21
    1082:	4f 91       	pop	r20
    1084:	3f 91       	pop	r19
    1086:	2f 91       	pop	r18
    1088:	1f 91       	pop	r17
    108a:	0f 91       	pop	r16
    108c:	ff 90       	pop	r15
    108e:	ef 90       	pop	r14
    1090:	df 90       	pop	r13
    1092:	bf 90       	pop	r11
    1094:	af 90       	pop	r10
    1096:	0f 90       	pop	r0
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	0f 90       	pop	r0
    109c:	1f 90       	pop	r1
    109e:	18 95       	reti

000010a0 <__vector_23>:

ISR(USARTC0_RXC_vect) //Data received from RS485
{
    10a0:	1f 92       	push	r1
    10a2:	0f 92       	push	r0
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	0f 92       	push	r0
    10a8:	11 24       	eor	r1, r1
    10aa:	2f 93       	push	r18
    10ac:	3f 93       	push	r19
    10ae:	4f 93       	push	r20
    10b0:	5f 93       	push	r21
    10b2:	6f 93       	push	r22
    10b4:	7f 93       	push	r23
    10b6:	8f 93       	push	r24
    10b8:	9f 93       	push	r25
    10ba:	af 93       	push	r26
    10bc:	bf 93       	push	r27
    10be:	cf 93       	push	r28
    10c0:	df 93       	push	r29
    10c2:	ef 93       	push	r30
    10c4:	ff 93       	push	r31
	uint8_t data = USARTC0.DATA;
    10c6:	e0 ec       	ldi	r30, 0xC0	; 192
    10c8:	f8 e0       	ldi	r31, 0x08	; 8
    10ca:	80 81       	ld	r24, Z
	if (USARTC0.CTRLB & USART_MPCM_bm) //Address listening mode
    10cc:	93 81       	ldd	r25, Z+3	; 0x03
    10ce:	91 ff       	sbrs	r25, 1
    10d0:	74 c0       	rjmp	.+232    	; 0x11ba <__vector_23+0x11a>
	{
		if (CmdLC <= data && data <= CmdUC)
    10d2:	9f ec       	ldi	r25, 0xCF	; 207
    10d4:	98 0f       	add	r25, r24
    10d6:	94 30       	cpi	r25, 0x04	; 4
    10d8:	08 f0       	brcs	.+2      	; 0x10dc <__vector_23+0x3c>
    10da:	6d c0       	rjmp	.+218    	; 0x11b6 <__vector_23+0x116>
		{
			USARTC0.CTRLB &= ~USART_MPCM_bm; //Clear MPCM bit
    10dc:	93 81       	ldd	r25, Z+3	; 0x03
    10de:	9d 7f       	andi	r25, 0xFD	; 253
    10e0:	93 83       	std	Z+3, r25	; 0x03
			rxMode = data;
    10e2:	80 93 5a 21 	sts	0x215A, r24	; 0x80215a <rxMode>
			if (data == SetConfig)
    10e6:	83 33       	cpi	r24, 0x33	; 51
    10e8:	89 f4       	brne	.+34     	; 0x110c <__vector_23+0x6c>
			{
				rxMark = 0;
    10ea:	10 92 59 21 	sts	0x2159, r1	; 0x802159 <rxMark>
				EDMA.CH0.ADDR = (register16_t)iobuf;
    10ee:	e0 e0       	ldi	r30, 0x00	; 0
    10f0:	f1 e0       	ldi	r31, 0x01	; 1
    10f2:	8b e9       	ldi	r24, 0x9B	; 155
    10f4:	90 e2       	ldi	r25, 0x20	; 32
    10f6:	80 8f       	std	Z+24, r24	; 0x18
    10f8:	91 8f       	std	Z+25, r25	; 0x19
				EDMA.CH0.TRFCNT = sizeof(systemConfig); //Bytes to receive into iobuf
    10fa:	81 e2       	ldi	r24, 0x21	; 33
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	86 8b       	std	Z+22, r24	; 0x16
    1100:	97 8b       	std	Z+23, r25	; 0x17
				EDMA.CH0.CTRLA = EDMA_CH_ENABLE_bm | EDMA_CH_SINGLE_bm;
    1102:	84 e8       	ldi	r24, 0x84	; 132
    1104:	80 8b       	std	Z+16, r24	; 0x10
				USARTC0.CTRLA = USART_RXCINTLVL_OFF_gc; //Disable interrupt
    1106:	10 92 c2 08 	sts	0x08C2, r1	; 0x8008c2 <__TEXT_REGION_LENGTH__+0x7008c2>
    110a:	57 c0       	rjmp	.+174    	; 0x11ba <__vector_23+0x11a>
0, 30, 96,	//Motion sensor on time, low time, low level
0, 0, 0};	//groupConfig, rtcCorrect, CRC16

void inline UCTXen()
{
	PORTC.OUTSET = PIN1_bm;
    110c:	82 e0       	ldi	r24, 0x02	; 2
    110e:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1112:	8f e6       	ldi	r24, 0x6F	; 111
    1114:	92 e0       	ldi	r25, 0x02	; 2
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	f1 f7       	brne	.-4      	; 0x1116 <__vector_23+0x76>
    111a:	00 c0       	rjmp	.+0      	; 0x111c <__vector_23+0x7c>
    111c:	00 00       	nop
				USARTC0.CTRLA = USART_RXCINTLVL_OFF_gc; //Disable interrupt
			}
			else //Data transmit request
			{
				UCTXen();
				if (rxMode == GetConfig)
    111e:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <rxMode>
    1122:	82 33       	cpi	r24, 0x32	; 50
    1124:	59 f4       	brne	.+22     	; 0x113c <__vector_23+0x9c>
				{
					EDMA.CH1.TRFCNT = sizeof(systemConfig) + 3;
    1126:	e0 e0       	ldi	r30, 0x00	; 0
    1128:	f1 e0       	ldi	r31, 0x01	; 1
    112a:	84 e2       	ldi	r24, 0x24	; 36
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	86 a3       	std	Z+38, r24	; 0x26
    1130:	97 a3       	std	Z+39, r25	; 0x27
					EDMA.CH1.ADDR = (register16_t)&validConf;
    1132:	83 e2       	ldi	r24, 0x23	; 35
    1134:	91 e2       	ldi	r25, 0x21	; 33
    1136:	80 a7       	std	Z+40, r24	; 0x28
    1138:	91 a7       	std	Z+41, r25	; 0x29
    113a:	39 c0       	rjmp	.+114    	; 0x11ae <__vector_23+0x10e>
				}
				else if (rxMode == GetStatus) //Get state
    113c:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <rxMode>
    1140:	81 33       	cpi	r24, 0x31	; 49
    1142:	c9 f4       	brne	.+50     	; 0x1176 <__vector_23+0xd6>
				{
					memcpy(iobuf, &sysState, sizeof(systemState));
    1144:	cb e9       	ldi	r28, 0x9B	; 155
    1146:	d0 e2       	ldi	r29, 0x20	; 32
    1148:	88 e1       	ldi	r24, 0x18	; 24
    114a:	eb e0       	ldi	r30, 0x0B	; 11
    114c:	f1 e2       	ldi	r31, 0x21	; 33
    114e:	de 01       	movw	r26, r28
    1150:	01 90       	ld	r0, Z+
    1152:	0d 92       	st	X+, r0
    1154:	8a 95       	dec	r24
    1156:	e1 f7       	brne	.-8      	; 0x1150 <__vector_23+0xb0>
					((systemState*)iobuf)->CRC16 = CalculateCRC16(iobuf, sizeof(systemState) - 2);
    1158:	66 e1       	ldi	r22, 0x16	; 22
    115a:	ce 01       	movw	r24, r28
    115c:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pva>
    1160:	8e 8b       	std	Y+22, r24	; 0x16
    1162:	9f 8b       	std	Y+23, r25	; 0x17
					EDMA.CH1.TRFCNT = sizeof(systemState) + 3;
    1164:	e0 e0       	ldi	r30, 0x00	; 0
    1166:	f1 e0       	ldi	r31, 0x01	; 1
    1168:	8b e1       	ldi	r24, 0x1B	; 27
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	86 a3       	std	Z+38, r24	; 0x26
    116e:	97 a3       	std	Z+39, r25	; 0x27
					EDMA.CH1.ADDR = (register16_t)iobuf;
    1170:	c0 a7       	std	Z+40, r28	; 0x28
    1172:	d1 a7       	std	Z+41, r29	; 0x29
    1174:	1c c0       	rjmp	.+56     	; 0x11ae <__vector_23+0x10e>
				}
				else //Get on time
				{
					memcpy(iobuf, &channelOT, sizeof(channelsOnTime));
    1176:	88 e3       	ldi	r24, 0x38	; 56
    1178:	e3 ed       	ldi	r30, 0xD3	; 211
    117a:	f0 e2       	ldi	r31, 0x20	; 32
    117c:	ab e9       	ldi	r26, 0x9B	; 155
    117e:	b0 e2       	ldi	r27, 0x20	; 32
    1180:	01 90       	ld	r0, Z+
    1182:	0d 92       	st	X+, r0
    1184:	8a 95       	dec	r24
    1186:	e1 f7       	brne	.-8      	; 0x1180 <__vector_23+0xe0>
					((channelsOnTime*)iobuf)->CRC16 = CalculateCRC16(iobuf, sizeof(channelsOnTime) - 2);
    1188:	66 e3       	ldi	r22, 0x36	; 54
    118a:	8b e9       	ldi	r24, 0x9B	; 155
    118c:	90 e2       	ldi	r25, 0x20	; 32
    118e:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pva>
    1192:	ab e9       	ldi	r26, 0x9B	; 155
    1194:	b0 e2       	ldi	r27, 0x20	; 32
    1196:	d6 96       	adiw	r26, 0x36	; 54
    1198:	8d 93       	st	X+, r24
    119a:	9c 93       	st	X, r25
    119c:	d7 97       	sbiw	r26, 0x37	; 55
					EDMA.CH1.TRFCNT = sizeof(channelsOnTime) + 3;
    119e:	e0 e0       	ldi	r30, 0x00	; 0
    11a0:	f1 e0       	ldi	r31, 0x01	; 1
    11a2:	8b e3       	ldi	r24, 0x3B	; 59
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	86 a3       	std	Z+38, r24	; 0x26
    11a8:	97 a3       	std	Z+39, r25	; 0x27
					EDMA.CH1.ADDR = (register16_t)iobuf;
    11aa:	a0 a7       	std	Z+40, r26	; 0x28
    11ac:	b1 a7       	std	Z+41, r27	; 0x29
				}
				EDMA.CH1.CTRLA = EDMA_CH_ENABLE_bm | EDMA_CH_SINGLE_bm;
    11ae:	84 e8       	ldi	r24, 0x84	; 132
    11b0:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <__vector_23+0x11a>
			}
		}
		else
			rxMode = 0;
    11b6:	10 92 5a 21 	sts	0x215A, r1	; 0x80215a <rxMode>
	}
}
    11ba:	ff 91       	pop	r31
    11bc:	ef 91       	pop	r30
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	bf 91       	pop	r27
    11c4:	af 91       	pop	r26
    11c6:	9f 91       	pop	r25
    11c8:	8f 91       	pop	r24
    11ca:	7f 91       	pop	r23
    11cc:	6f 91       	pop	r22
    11ce:	5f 91       	pop	r21
    11d0:	4f 91       	pop	r20
    11d2:	3f 91       	pop	r19
    11d4:	2f 91       	pop	r18
    11d6:	0f 90       	pop	r0
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	0f 90       	pop	r0
    11dc:	1f 90       	pop	r1
    11de:	18 95       	reti

000011e0 <__vector_3>:

ISR(EDMA_CH0_vect)
{
    11e0:	1f 92       	push	r1
    11e2:	0f 92       	push	r0
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	0f 92       	push	r0
    11e8:	11 24       	eor	r1, r1
    11ea:	2f 93       	push	r18
    11ec:	3f 93       	push	r19
    11ee:	4f 93       	push	r20
    11f0:	5f 93       	push	r21
    11f2:	6f 93       	push	r22
    11f4:	7f 93       	push	r23
    11f6:	8f 93       	push	r24
    11f8:	9f 93       	push	r25
    11fa:	af 93       	push	r26
    11fc:	bf 93       	push	r27
    11fe:	ef 93       	push	r30
    1200:	ff 93       	push	r31
	rxMode = 0;
    1202:	10 92 5a 21 	sts	0x215A, r1	; 0x80215a <rxMode>
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm | USART_MPCM_bm; //Set MPCM bit
    1206:	e0 ec       	ldi	r30, 0xC0	; 192
    1208:	f8 e0       	ldi	r31, 0x08	; 8
    120a:	8a e1       	ldi	r24, 0x1A	; 26
    120c:	83 83       	std	Z+3, r24	; 0x03
	USARTC0.CTRLA = USART_DRIE_bm | USART_RXCINTLVL_MED_gc;
    120e:	80 e6       	ldi	r24, 0x60	; 96
    1210:	82 83       	std	Z+2, r24	; 0x02
	uint16_t crc = CalculateCRC16(iobuf, sizeof(systemConfig) - 2);
    1212:	6f e1       	ldi	r22, 0x1F	; 31
    1214:	8b e9       	ldi	r24, 0x9B	; 155
    1216:	90 e2       	ldi	r25, 0x20	; 32
    1218:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pva>
	if (crc == ((systemConfig*)iobuf)->CRC16)
    121c:	20 91 ba 20 	lds	r18, 0x20BA	; 0x8020ba <iobuf+0x1f>
    1220:	30 91 bb 20 	lds	r19, 0x20BB	; 0x8020bb <iobuf+0x20>
    1224:	82 17       	cp	r24, r18
    1226:	93 07       	cpc	r25, r19
    1228:	11 f4       	brne	.+4      	; 0x122e <__vector_3+0x4e>
		ApplyConfig();
    122a:	0e 94 90 00 	call	0x120	; 0x120 <_Z11ApplyConfigv>
	EDMA.CH0.CTRLA = 0;
    122e:	e0 e0       	ldi	r30, 0x00	; 0
    1230:	f1 e0       	ldi	r31, 0x01	; 1
    1232:	10 8a       	std	Z+16, r1	; 0x10
	EDMA.CH0.CTRLB = EDMA_CH_TRNIF_bm | EDMA_CH_ERRIF_bm | EDMA_CH_TRNINTLVL_LO_gc;
    1234:	81 e3       	ldi	r24, 0x31	; 49
    1236:	81 8b       	std	Z+17, r24	; 0x11
}
    1238:	ff 91       	pop	r31
    123a:	ef 91       	pop	r30
    123c:	bf 91       	pop	r27
    123e:	af 91       	pop	r26
    1240:	9f 91       	pop	r25
    1242:	8f 91       	pop	r24
    1244:	7f 91       	pop	r23
    1246:	6f 91       	pop	r22
    1248:	5f 91       	pop	r21
    124a:	4f 91       	pop	r20
    124c:	3f 91       	pop	r19
    124e:	2f 91       	pop	r18
    1250:	0f 90       	pop	r0
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	0f 90       	pop	r0
    1256:	1f 90       	pop	r1
    1258:	18 95       	reti

0000125a <__vector_4>:

ISR(EDMA_CH1_vect) //Packet has been sent completely over RS485
{
    125a:	1f 92       	push	r1
    125c:	0f 92       	push	r0
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	0f 92       	push	r0
    1262:	11 24       	eor	r1, r1
    1264:	8f 93       	push	r24
    1266:	ef 93       	push	r30
    1268:	ff 93       	push	r31
	UCRXen(); //Set bus in the idle state
    126a:	82 e0       	ldi	r24, 0x02	; 2
    126c:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	rxMode = 0;
    1270:	10 92 5a 21 	sts	0x215A, r1	; 0x80215a <rxMode>
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm | USART_MPCM_bm; //Set MPCM bit
    1274:	8a e1       	ldi	r24, 0x1A	; 26
    1276:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	EDMA.CH1.CTRLA = 0;
    127a:	e0 e0       	ldi	r30, 0x00	; 0
    127c:	f1 e0       	ldi	r31, 0x01	; 1
    127e:	10 a2       	std	Z+32, r1	; 0x20
	EDMA.CH1.CTRLB = EDMA_CH_TRNIF_bm | EDMA_CH_ERRIF_bm | EDMA_CH_TRNINTLVL_LO_gc;
    1280:	81 e3       	ldi	r24, 0x31	; 49
    1282:	81 a3       	std	Z+33, r24	; 0x21
}
    1284:	ff 91       	pop	r31
    1286:	ef 91       	pop	r30
    1288:	8f 91       	pop	r24
    128a:	0f 90       	pop	r0
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	0f 90       	pop	r0
    1290:	1f 90       	pop	r1
    1292:	18 95       	reti

00001294 <__vector_36>:

ISR(TCD5_OVF_vect)
{
    1294:	1f 92       	push	r1
    1296:	0f 92       	push	r0
    1298:	0f b6       	in	r0, 0x3f	; 63
    129a:	0f 92       	push	r0
    129c:	11 24       	eor	r1, r1
    129e:	2f 93       	push	r18
    12a0:	8f 93       	push	r24
    12a2:	9f 93       	push	r25
    12a4:	ef 93       	push	r30
    12a6:	ff 93       	push	r31
	PORTD.OUT = *framePtr++;
    12a8:	e0 91 44 21 	lds	r30, 0x2144	; 0x802144 <framePtr>
    12ac:	f0 91 45 21 	lds	r31, 0x2145	; 0x802145 <framePtr+0x1>
    12b0:	cf 01       	movw	r24, r30
    12b2:	01 96       	adiw	r24, 0x01	; 1
    12b4:	80 93 44 21 	sts	0x2144, r24	; 0x802144 <framePtr>
    12b8:	90 93 45 21 	sts	0x2145, r25	; 0x802145 <framePtr+0x1>
    12bc:	20 81       	ld	r18, Z
    12be:	20 93 64 06 	sts	0x0664, r18	; 0x800664 <__TEXT_REGION_LENGTH__+0x700664>
	if (framePtr == DSI8xFrames + sizeof(DSI8xFrames) - 1)
    12c2:	88 55       	subi	r24, 0x58	; 88
    12c4:	91 42       	sbci	r25, 0x21	; 33
    12c6:	11 f4       	brne	.+4      	; 0x12cc <__vector_36+0x38>
		TCD5.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    12c8:	10 92 46 09 	sts	0x0946, r1	; 0x800946 <__TEXT_REGION_LENGTH__+0x700946>
	TCD5.INTFLAGS = TC5_OVFIF_bm;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <__TEXT_REGION_LENGTH__+0x70094c>
}
    12d2:	ff 91       	pop	r31
    12d4:	ef 91       	pop	r30
    12d6:	9f 91       	pop	r25
    12d8:	8f 91       	pop	r24
    12da:	2f 91       	pop	r18
    12dc:	0f 90       	pop	r0
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	0f 90       	pop	r0
    12e2:	1f 90       	pop	r1
    12e4:	18 95       	reti

000012e6 <_Z7mcuInitv>:

inline void mcuInit()
{
	//Port A configuration: 0-5 analog inputs, 7 inverted output
	PORTA.DIRSET = PIN7_bm;
    12e6:	e0 e0       	ldi	r30, 0x00	; 0
    12e8:	f6 e0       	ldi	r31, 0x06	; 6
    12ea:	80 e8       	ldi	r24, 0x80	; 128
    12ec:	81 83       	std	Z+1, r24	; 0x01
	PORTCFG.MPCMASK = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm;
    12ee:	a0 eb       	ldi	r26, 0xB0	; 176
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	8f e3       	ldi	r24, 0x3F	; 63
    12f4:	8c 93       	st	X, r24
	PORTA.PIN0CTRL = PORT_OPC_TOTEM_gc | PORT_ISC_INPUT_DISABLE_gc;
    12f6:	87 e0       	ldi	r24, 0x07	; 7
    12f8:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN7CTRL = PORT_OPC_TOTEM_gc | PORT_INVEN_bm;
    12fa:	80 e4       	ldi	r24, 0x40	; 64
    12fc:	87 8b       	std	Z+23, r24	; 0x17
	//Port C configuration: 0-1, 3-7 outputs
	PORTC.DIRSET = PIN0_bm | PIN1_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
    12fe:	8b ef       	ldi	r24, 0xFB	; 251
    1300:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
	//Port D configuration: 0-7 inverted outputs
	PORTD.DIRSET = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
    1304:	e0 e6       	ldi	r30, 0x60	; 96
    1306:	f6 e0       	ldi	r31, 0x06	; 6
    1308:	8f ef       	ldi	r24, 0xFF	; 255
    130a:	81 83       	std	Z+1, r24	; 0x01
	PORTCFG.MPCMASK = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
    130c:	8c 93       	st	X, r24
	PORTD.PIN0CTRL = PORT_OPC_TOTEM_gc | PORT_INVEN_bm | PORT_ISC_INPUT_DISABLE_gc;
    130e:	87 e4       	ldi	r24, 0x47	; 71
    1310:	80 8b       	std	Z+16, r24	; 0x10
	//Clock configuration: 32MHz RC with DFLL from XOSC 32768Hz
	OSC.XOSCCTRL = OSC_XOSCSEL_32KHz_gc;
    1312:	e0 e5       	ldi	r30, 0x50	; 80
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	82 e0       	ldi	r24, 0x02	; 2
    1318:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |= OSC_RC32MEN_bm | OSC_XOSCEN_bm;
    131a:	80 81       	ld	r24, Z
    131c:	8a 60       	ori	r24, 0x0A	; 10
    131e:	80 83       	st	Z, r24
	while (!(OSC.STATUS & OSC_XOSCRDY_bm));
    1320:	81 81       	ldd	r24, Z+1	; 0x01
    1322:	83 ff       	sbrs	r24, 3
    1324:	fd cf       	rjmp	.-6      	; 0x1320 <_Z7mcuInitv+0x3a>
	while (!(OSC.STATUS & OSC_RC32MRDY_bm));
    1326:	e0 e5       	ldi	r30, 0x50	; 80
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	81 81       	ldd	r24, Z+1	; 0x01
    132c:	81 ff       	sbrs	r24, 1
    132e:	fd cf       	rjmp	.-6      	; 0x132a <_Z7mcuInitv+0x44>
	OSC.DFLLCTRL = OSC_RC32MCREF_XOSC32K_gc;
    1330:	a0 e5       	ldi	r26, 0x50	; 80
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	82 e0       	ldi	r24, 0x02	; 2
    1336:	16 96       	adiw	r26, 0x06	; 6
    1338:	8c 93       	st	X, r24
    133a:	16 97       	sbiw	r26, 0x06	; 6
	DFLLRC32M.CTRL = DFLL_ENABLE_bm;
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
	CCP = CCP_IOREG_gc;
    1342:	98 ed       	ldi	r25, 0xD8	; 216
    1344:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
    1346:	e0 e4       	ldi	r30, 0x40	; 64
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 83       	st	Z, r24
	OSC.CTRL = OSC_RC32MEN_bm | OSC_XOSCEN_bm; //Disable unused clock sources
    134c:	8a e0       	ldi	r24, 0x0A	; 10
    134e:	8c 93       	st	X, r24
	CLK.RTCCTRL = CLK_RTCSRC_TOSC_gc | CLK_RTCEN_bm; //1024Hz RTC clock source
    1350:	83 e0       	ldi	r24, 0x03	; 3
    1352:	83 83       	std	Z+3, r24	; 0x03
	while (RTC.STATUS & RTC_SYNCBUSY_bm);
    1354:	e0 e0       	ldi	r30, 0x00	; 0
    1356:	f4 e0       	ldi	r31, 0x04	; 4
    1358:	81 81       	ldd	r24, Z+1	; 0x01
    135a:	80 fd       	sbrc	r24, 0
    135c:	fd cf       	rjmp	.-6      	; 0x1358 <_Z7mcuInitv+0x72>
	CCP = CCP_IOREG_gc;
    135e:	88 ed       	ldi	r24, 0xD8	; 216
    1360:	84 bf       	out	0x34, r24	; 52
	CLK.LOCK = CLK_LOCK_bm; //Disable further changes in clock system
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	80 93 42 00 	sts	0x0042, r24	; 0x800042 <__TEXT_REGION_LENGTH__+0x700042>
	//PMIC: enable interrupts
	PMIC.CTRL = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
    1368:	27 e0       	ldi	r18, 0x07	; 7
    136a:	20 93 a2 00 	sts	0x00A2, r18	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	//RTC configuration: 1024 / 2 = 512Hz clock, medium level interrupt
	RTC.PER = 15; //32 overflows per second
    136e:	e0 e0       	ldi	r30, 0x00	; 0
    1370:	f4 e0       	ldi	r31, 0x04	; 4
    1372:	4f e0       	ldi	r20, 0x0F	; 15
    1374:	50 e0       	ldi	r21, 0x00	; 0
    1376:	42 87       	std	Z+10, r20	; 0x0a
    1378:	53 87       	std	Z+11, r21	; 0x0b
	RTC.INTCTRL = RTC_OVFINTLVL_MED_gc;
    137a:	92 e0       	ldi	r25, 0x02	; 2
    137c:	92 83       	std	Z+2, r25	; 0x02
	RTC.CTRL = RTC_PRESCALER_DIV2_gc;
    137e:	90 83       	st	Z, r25
	RTC.CNT = 0;
    1380:	10 86       	std	Z+8, r1	; 0x08
    1382:	11 86       	std	Z+9, r1	; 0x09
	//USARTC configuration: start / 9 data / 2 stop; 76.8kbps baud, multi-processor communication
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm | USART_MPCM_bm;
    1384:	e0 ec       	ldi	r30, 0xC0	; 192
    1386:	f8 e0       	ldi	r31, 0x08	; 8
    1388:	9a e1       	ldi	r25, 0x1A	; 26
    138a:	93 83       	std	Z+3, r25	; 0x03
	USARTC0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_SBMODE_bm | USART_CHSIZE_9BIT_gc;
    138c:	9f e0       	ldi	r25, 0x0F	; 15
    138e:	94 83       	std	Z+4, r25	; 0x04
	USARTC0.BAUDCTRLA = 12 << USART_BSEL_gp;
    1390:	9c e0       	ldi	r25, 0x0C	; 12
    1392:	96 83       	std	Z+6, r25	; 0x06
	USARTC0.BAUDCTRLB = 1 << USART_BSCALE_gp;
    1394:	90 e1       	ldi	r25, 0x10	; 16
    1396:	97 83       	std	Z+7, r25	; 0x07
	USARTC0.CTRLA = USART_DRIE_bm | USART_RXCINTLVL_MED_gc;
    1398:	30 e6       	ldi	r19, 0x60	; 96
    139a:	32 83       	std	Z+2, r19	; 0x02
	//ADC configuration: 1MHz, 15bit oversampling
	ADCA.CTRLA = ADC_ENABLE_bm;
    139c:	e0 e0       	ldi	r30, 0x00	; 0
    139e:	f2 e0       	ldi	r31, 0x02	; 2
    13a0:	80 83       	st	Z, r24
	ADCA.CTRLB = ADC_CONMODE_bm | ADC_RESOLUTION_MT12BIT_gc; //Signed mode
    13a2:	32 e1       	ldi	r19, 0x12	; 18
    13a4:	31 83       	std	Z+1, r19	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;
    13a6:	30 e2       	ldi	r19, 0x20	; 32
    13a8:	32 83       	std	Z+2, r19	; 0x02
	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc;
    13aa:	43 e0       	ldi	r20, 0x03	; 3
    13ac:	44 83       	std	Z+4, r20	; 0x04
	ADCA.SAMPCTRL = 7 << ADC_SAMPVAL_gp;
    13ae:	20 87       	std	Z+8, r18	; 0x08
	ADCA.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc | ADC_CH_GAIN_1X_gc;
    13b0:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.CH0.INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc;
    13b2:	82 a3       	std	Z+34, r24	; 0x22
	ADCA.CH0.AVGCTRL = ADC_CH_SAMPNUM_16X_gc; //This will produce 15 bit result
    13b4:	24 e0       	ldi	r18, 0x04	; 4
    13b6:	24 a7       	std	Z+44, r18	; 0x2c
	//TCD5 configuration: 500kHz, 1199Hz overflow rate
	TCD5.CTRLA = TC_CLKSEL_DIV64_gc;
    13b8:	e0 e4       	ldi	r30, 0x40	; 64
    13ba:	f9 e0       	ldi	r31, 0x09	; 9
    13bc:	25 e0       	ldi	r18, 0x05	; 5
    13be:	20 83       	st	Z, r18
	TCD5.CTRLB = TC_WGMODE_NORMAL_gc;
    13c0:	11 82       	std	Z+1, r1	; 0x01
	TCD5.PERBUF = 417;
    13c2:	41 ea       	ldi	r20, 0xA1	; 161
    13c4:	51 e0       	ldi	r21, 0x01	; 1
    13c6:	46 ab       	std	Z+54, r20	; 0x36
    13c8:	57 ab       	std	Z+55, r21	; 0x37
	TCD5.CTRLGCLR = TC5_STOP_bm;
    13ca:	30 87       	std	Z+8, r19	; 0x08
	//EDMA peripheral channel 0: USARTC read transfer
	EDMA.CH0.CTRLB = EDMA_CH_TRNINTLVL_LO_gc;
    13cc:	e0 e0       	ldi	r30, 0x00	; 0
    13ce:	f1 e0       	ldi	r31, 0x01	; 1
    13d0:	81 8b       	std	Z+17, r24	; 0x11
	EDMA.CH0.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_INC_gc;
    13d2:	31 e3       	ldi	r19, 0x31	; 49
    13d4:	32 8b       	std	Z+18, r19	; 0x12
	EDMA.CH0.TRIGSRC = EDMA_CH_TRIGSRC_USARTC0_RXC_gc;
    13d6:	4c e4       	ldi	r20, 0x4C	; 76
    13d8:	44 8b       	std	Z+20, r20	; 0x14
	//EDMA peripheral channel 1: USARTC write transfer
	EDMA.CH1.CTRLB = EDMA_CH_TRNINTLVL_LO_gc; //Low-level interrupt
    13da:	81 a3       	std	Z+33, r24	; 0x21
	EDMA.CH1.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_INC_gc;
    13dc:	32 a3       	std	Z+34, r19	; 0x22
	EDMA.CH1.TRIGSRC = EDMA_CH_TRIGSRC_USARTC0_DRE_gc;
    13de:	8d e4       	ldi	r24, 0x4D	; 77
    13e0:	84 a3       	std	Z+36, r24	; 0x24
	//EDMA: 1 standard and 2 peripheral channels
	EDMA.CTRL = EDMA_ENABLE_bm | EDMA_CHMODE_STD2_gc | EDMA_DBUFMODE_DISABLE_gc | EDMA_PRIMODE_RR0123_gc;
    13e2:	80 ea       	ldi	r24, 0xA0	; 160
    13e4:	80 83       	st	Z, r24
	//Power reduction
	PR.PRGEN = PR_XCL_bm | PR_EVSYS_bm;
    13e6:	e0 e7       	ldi	r30, 0x70	; 112
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	82 e8       	ldi	r24, 0x82	; 130
    13ec:	80 83       	st	Z, r24
	PR.PRPA = PR_DAC_bm | PR_AC_bm;
    13ee:	21 83       	std	Z+1, r18	; 0x01
	PR.PRPC = PR_TWI_bm | PR_SPI_bm | PR_HIRES_bm | PR_TC5_bm | PR_TC4_bm;
    13f0:	8f e4       	ldi	r24, 0x4F	; 79
    13f2:	83 83       	std	Z+3, r24	; 0x03
	PR.PRPD = PR_USART0_bm;
    13f4:	94 83       	std	Z+4, r25	; 0x04
	sei();
    13f6:	78 94       	sei
    13f8:	08 95       	ret

000013fa <main>:
}

int main(void)
{
	mcuInit();
    13fa:	0e 94 73 09 	call	0x12e6	; 0x12e6 <_Z7mcuInitv>
	eeprom_read_block(&channelOT, &savedCOT, sizeof(channelsOnTime));
    13fe:	48 e3       	ldi	r20, 0x38	; 56
    1400:	50 e0       	ldi	r21, 0x00	; 0
    1402:	61 e2       	ldi	r22, 0x21	; 33
    1404:	70 e0       	ldi	r23, 0x00	; 0
    1406:	83 ed       	ldi	r24, 0xD3	; 211
    1408:	90 e2       	ldi	r25, 0x20	; 32
    140a:	0e 94 8b 0a 	call	0x1516	; 0x1516 <eeprom_read_block>
	eeprom_read_block(iobuf, &savedConfig, sizeof(systemConfig) - 2);
    140e:	4f e1       	ldi	r20, 0x1F	; 31
    1410:	50 e0       	ldi	r21, 0x00	; 0
    1412:	60 e0       	ldi	r22, 0x00	; 0
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	8b e9       	ldi	r24, 0x9B	; 155
    1418:	90 e2       	ldi	r25, 0x20	; 32
    141a:	0e 94 8b 0a 	call	0x1516	; 0x1516 <eeprom_read_block>
	((systemConfig*)iobuf)->overrideCfg = ((systemConfig*)iobuf)->groupConf = 0; //Ignore saved overrides
    141e:	cb e9       	ldi	r28, 0x9B	; 155
    1420:	d0 e2       	ldi	r29, 0x20	; 32
    1422:	1d 8e       	std	Y+29, r1	; 0x1d
    1424:	19 8a       	std	Y+17, r1	; 0x11
	((systemConfig*)iobuf)->CRC16 = CalculateCRC16(iobuf, sizeof(systemConfig) - 2);
    1426:	6f e1       	ldi	r22, 0x1F	; 31
    1428:	ce 01       	movw	r24, r28
    142a:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pva>
    142e:	8f 8f       	std	Y+31, r24	; 0x1f
    1430:	98 a3       	std	Y+32, r25	; 0x20
	ApplyConfig();
    1432:	0e 94 90 00 	call	0x120	; 0x120 <_Z11ApplyConfigv>
    1436:	ff cf       	rjmp	.-2      	; 0x1436 <main+0x3c>

00001438 <_GLOBAL__sub_I_gLevels>:
	uint64_t _tickLastChg, _onTimeStamp;

public:
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    1438:	ef e0       	ldi	r30, 0x0F	; 15
    143a:	f0 e2       	ldi	r31, 0x20	; 32
    143c:	93 e0       	ldi	r25, 0x03	; 3
    143e:	91 83       	std	Z+1, r25	; 0x01
		_link[0] = posA;
    1440:	87 e0       	ldi	r24, 0x07	; 7
    1442:	83 83       	std	Z+3, r24	; 0x03
		_link[1] = posB;
    1444:	86 e0       	ldi	r24, 0x06	; 6
    1446:	84 83       	std	Z+4, r24	; 0x04
		_link[2] = posC;
    1448:	85 e0       	ldi	r24, 0x05	; 5
    144a:	85 83       	std	Z+5, r24	; 0x05
		_linkNum = num;
    144c:	12 82       	std	Z+2, r1	; 0x02
		_chActMask = 0x10 << num;
    144e:	80 e1       	ldi	r24, 0x10	; 16
    1450:	82 8b       	std	Z+18, r24	; 0x12
	uint64_t _tickLastChg, _onTimeStamp;

public:
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    1452:	94 a3       	std	Z+36, r25	; 0x24
		_link[0] = posA;
    1454:	84 e0       	ldi	r24, 0x04	; 4
    1456:	86 a3       	std	Z+38, r24	; 0x26
		_link[1] = posB;
    1458:	97 a3       	std	Z+39, r25	; 0x27
		_link[2] = posC;
    145a:	82 e0       	ldi	r24, 0x02	; 2
    145c:	80 a7       	std	Z+40, r24	; 0x28
		_linkNum = num;
    145e:	21 e0       	ldi	r18, 0x01	; 1
    1460:	25 a3       	std	Z+37, r18	; 0x25
		_chActMask = 0x10 << num;
    1462:	30 e2       	ldi	r19, 0x20	; 32
    1464:	35 ab       	std	Z+53, r19	; 0x35
	uint64_t _tickLastChg, _onTimeStamp;

public:
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    1466:	80 93 56 20 	sts	0x2056, r24	; 0x802056 <links+0x47>
		_link[0] = posA;
    146a:	20 93 58 20 	sts	0x2058, r18	; 0x802058 <links+0x49>
		_link[1] = posB;
    146e:	10 92 59 20 	sts	0x2059, r1	; 0x802059 <links+0x4a>
		_link[2] = posC;
    1472:	10 92 5a 20 	sts	0x205A, r1	; 0x80205a <links+0x4b>
		_linkNum = num;
    1476:	80 93 57 20 	sts	0x2057, r24	; 0x802057 <links+0x48>
		_chActMask = 0x10 << num;
    147a:	30 e4       	ldi	r19, 0x40	; 64
    147c:	30 93 67 20 	sts	0x2067, r19	; 0x802067 <links+0x58>
	uint64_t _tickLastChg, _onTimeStamp;

public:
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    1480:	20 93 79 20 	sts	0x2079, r18	; 0x802079 <links+0x6a>
		_link[0] = posA;
    1484:	28 e0       	ldi	r18, 0x08	; 8
    1486:	20 93 7b 20 	sts	0x207B, r18	; 0x80207b <links+0x6c>
		_link[1] = posB;
    148a:	10 92 7c 20 	sts	0x207C, r1	; 0x80207c <links+0x6d>
		_link[2] = posC;
    148e:	10 92 7d 20 	sts	0x207D, r1	; 0x80207d <links+0x6e>
		_linkNum = num;
    1492:	90 93 7a 20 	sts	0x207A, r25	; 0x80207a <links+0x6b>
		_chActMask = 0x10 << num;
    1496:	90 e8       	ldi	r25, 0x80	; 128
    1498:	90 93 8a 20 	sts	0x208A, r25	; 0x80208a <links+0x7b>
	uint8_t _onTime, _fTime;
	uint64_t _onTimeStamp;
public:
	Msen(uint8_t actLink)
	{
		_linkNum = actLink;
    149c:	80 93 03 20 	sts	0x2003, r24	; 0x802003 <msenCh+0x2>
    14a0:	08 95       	ret

000014a2 <__divmodhi4>:
    14a2:	97 fb       	bst	r25, 7
    14a4:	07 2e       	mov	r0, r23
    14a6:	16 f4       	brtc	.+4      	; 0x14ac <__divmodhi4+0xa>
    14a8:	00 94       	com	r0
    14aa:	07 d0       	rcall	.+14     	; 0x14ba <__divmodhi4_neg1>
    14ac:	77 fd       	sbrc	r23, 7
    14ae:	09 d0       	rcall	.+18     	; 0x14c2 <__divmodhi4_neg2>
    14b0:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <__udivmodhi4>
    14b4:	07 fc       	sbrc	r0, 7
    14b6:	05 d0       	rcall	.+10     	; 0x14c2 <__divmodhi4_neg2>
    14b8:	3e f4       	brtc	.+14     	; 0x14c8 <__divmodhi4_exit>

000014ba <__divmodhi4_neg1>:
    14ba:	90 95       	com	r25
    14bc:	81 95       	neg	r24
    14be:	9f 4f       	sbci	r25, 0xFF	; 255
    14c0:	08 95       	ret

000014c2 <__divmodhi4_neg2>:
    14c2:	70 95       	com	r23
    14c4:	61 95       	neg	r22
    14c6:	7f 4f       	sbci	r23, 0xFF	; 255

000014c8 <__divmodhi4_exit>:
    14c8:	08 95       	ret

000014ca <__adddi3_s8>:
    14ca:	00 24       	eor	r0, r0
    14cc:	a7 fd       	sbrc	r26, 7
    14ce:	00 94       	com	r0
    14d0:	2a 0f       	add	r18, r26
    14d2:	30 1d       	adc	r19, r0
    14d4:	40 1d       	adc	r20, r0
    14d6:	50 1d       	adc	r21, r0
    14d8:	60 1d       	adc	r22, r0
    14da:	70 1d       	adc	r23, r0
    14dc:	80 1d       	adc	r24, r0
    14de:	90 1d       	adc	r25, r0
    14e0:	08 95       	ret

000014e2 <__udivmodhi4>:
    14e2:	aa 1b       	sub	r26, r26
    14e4:	bb 1b       	sub	r27, r27
    14e6:	51 e1       	ldi	r21, 0x11	; 17
    14e8:	07 c0       	rjmp	.+14     	; 0x14f8 <__udivmodhi4_ep>

000014ea <__udivmodhi4_loop>:
    14ea:	aa 1f       	adc	r26, r26
    14ec:	bb 1f       	adc	r27, r27
    14ee:	a6 17       	cp	r26, r22
    14f0:	b7 07       	cpc	r27, r23
    14f2:	10 f0       	brcs	.+4      	; 0x14f8 <__udivmodhi4_ep>
    14f4:	a6 1b       	sub	r26, r22
    14f6:	b7 0b       	sbc	r27, r23

000014f8 <__udivmodhi4_ep>:
    14f8:	88 1f       	adc	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	5a 95       	dec	r21
    14fe:	a9 f7       	brne	.-22     	; 0x14ea <__udivmodhi4_loop>
    1500:	80 95       	com	r24
    1502:	90 95       	com	r25
    1504:	bc 01       	movw	r22, r24
    1506:	cd 01       	movw	r24, r26
    1508:	08 95       	ret

0000150a <__tablejump2__>:
    150a:	ee 0f       	add	r30, r30
    150c:	ff 1f       	adc	r31, r31
    150e:	05 90       	lpm	r0, Z+
    1510:	f4 91       	lpm	r31, Z
    1512:	e0 2d       	mov	r30, r0
    1514:	09 94       	ijmp

00001516 <eeprom_read_block>:
    1516:	60 50       	subi	r22, 0x00	; 0
    1518:	70 4f       	sbci	r23, 0xF0	; 240
    151a:	0c 94 c8 0a 	jmp	0x1590	; 0x1590 <memcpy>

0000151e <eeprom_update_block>:
    151e:	dc 01       	movw	r26, r24
    1520:	a4 0f       	add	r26, r20
    1522:	b5 1f       	adc	r27, r21
    1524:	41 50       	subi	r20, 0x01	; 1
    1526:	50 40       	sbci	r21, 0x00	; 0
    1528:	48 f0       	brcs	.+18     	; 0x153c <eeprom_update_block+0x1e>
    152a:	cb 01       	movw	r24, r22
    152c:	84 0f       	add	r24, r20
    152e:	95 1f       	adc	r25, r21
    1530:	2e 91       	ld	r18, -X
    1532:	0e 94 a0 0a 	call	0x1540	; 0x1540 <eeprom_update_r18>
    1536:	41 50       	subi	r20, 0x01	; 1
    1538:	50 40       	sbci	r21, 0x00	; 0
    153a:	d0 f7       	brcc	.-12     	; 0x1530 <eeprom_update_block+0x12>
    153c:	08 95       	ret

0000153e <eeprom_update_byte>:
    153e:	26 2f       	mov	r18, r22

00001540 <eeprom_update_r18>:
    1540:	0e 94 c4 0a 	call	0x1588	; 0x1588 <eeprom_mapen>
    1544:	00 80       	ld	r0, Z
    1546:	02 16       	cp	r0, r18
    1548:	19 f0       	breq	.+6      	; 0x1550 <eeprom_update_r18+0x10>
    154a:	0e 94 ab 0a 	call	0x1556	; 0x1556 <eeprom_write_r18>
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	08 95       	ret

00001554 <eeprom_write_byte>:
    1554:	26 2f       	mov	r18, r22

00001556 <eeprom_write_r18>:
    1556:	af 93       	push	r26
    1558:	bf 93       	push	r27
    155a:	e0 ec       	ldi	r30, 0xC0	; 192
    155c:	f1 e0       	ldi	r31, 0x01	; 1
    155e:	37 85       	ldd	r19, Z+15	; 0x0f
    1560:	37 fd       	sbrc	r19, 7
    1562:	fd cf       	rjmp	.-6      	; 0x155e <eeprom_write_r18+0x8>
    1564:	dc 01       	movw	r26, r24
    1566:	a0 50       	subi	r26, 0x00	; 0
    1568:	b0 4f       	sbci	r27, 0xF0	; 240
    156a:	2c 93       	st	X, r18
    156c:	25 e3       	ldi	r18, 0x35	; 53
    156e:	22 87       	std	Z+10, r18	; 0x0a
    1570:	28 ed       	ldi	r18, 0xD8	; 216
    1572:	31 e0       	ldi	r19, 0x01	; 1
    1574:	24 bf       	out	0x34, r18	; 52
    1576:	33 87       	std	Z+11, r19	; 0x0b
    1578:	01 96       	adiw	r24, 0x01	; 1
    157a:	bf 91       	pop	r27
    157c:	af 91       	pop	r26
    157e:	08 95       	ret

00001580 <eeprom_read_byte>:
    1580:	03 d0       	rcall	.+6      	; 0x1588 <eeprom_mapen>
    1582:	80 81       	ld	r24, Z
    1584:	99 27       	eor	r25, r25
    1586:	08 95       	ret

00001588 <eeprom_mapen>:
    1588:	fc 01       	movw	r30, r24
    158a:	e0 50       	subi	r30, 0x00	; 0
    158c:	f0 4f       	sbci	r31, 0xF0	; 240
    158e:	08 95       	ret

00001590 <memcpy>:
    1590:	fb 01       	movw	r30, r22
    1592:	dc 01       	movw	r26, r24
    1594:	02 c0       	rjmp	.+4      	; 0x159a <memcpy+0xa>
    1596:	01 90       	ld	r0, Z+
    1598:	0d 92       	st	X+, r0
    159a:	41 50       	subi	r20, 0x01	; 1
    159c:	50 40       	sbci	r21, 0x00	; 0
    159e:	d8 f7       	brcc	.-10     	; 0x1596 <memcpy+0x6>
    15a0:	08 95       	ret

000015a2 <_exit>:
    15a2:	f8 94       	cli

000015a4 <__stop_program>:
    15a4:	ff cf       	rjmp	.-2      	; 0x15a4 <__stop_program>
