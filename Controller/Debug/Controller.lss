
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001450  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000153d  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000016e  00802000  00802000  000014e4  2**0
                  ALLOC
  3 .eeprom       00000059  00810000  00810000  000014e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000153d  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001570  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000108  00000000  00000000  000015b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000053b1  00000000  00000000  000016b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001f59  00000000  00000000  00006a69  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f08  00000000  00000000  000089c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002b8  00000000  00000000  000098cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003d1d  00000000  00000000  00009b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000fd4  00000000  00000000  0000d8a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000190  00000000  00000000  0000e875  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 57 00 	jmp	0xae	; 0xae <__ctors_end>
       4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      10:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__vector_4>
      14:	0c 94 97 08 	jmp	0x112e	; 0x112e <__vector_5>
      18:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      1c:	0c 94 b8 01 	jmp	0x370	; 0x370 <__vector_7>
      20:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      24:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      28:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      2c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      30:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      34:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      38:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      3c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      40:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      44:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      48:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      4c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      50:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      54:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      58:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      5c:	0c 94 b7 07 	jmp	0xf6e	; 0xf6e <__vector_23>
      60:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      68:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      6c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      70:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      74:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      78:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      7c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      80:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      84:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      88:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__vector_34>
      8c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      90:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      94:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      98:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      9c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      a0:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      a4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      a8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>

000000ac <__ctors_start>:
      ac:	71 09       	sbc	r23, r1

000000ae <__ctors_end>:
      ae:	11 24       	eor	r1, r1
      b0:	1f be       	out	0x3f, r1	; 63
      b2:	cf ef       	ldi	r28, 0xFF	; 255
      b4:	cd bf       	out	0x3d, r28	; 61
      b6:	d7 e2       	ldi	r29, 0x27	; 39
      b8:	de bf       	out	0x3e, r29	; 62

000000ba <__do_clear_bss>:
      ba:	21 e2       	ldi	r18, 0x21	; 33
      bc:	a0 e0       	ldi	r26, 0x00	; 0
      be:	b0 e2       	ldi	r27, 0x20	; 32
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	ae 36       	cpi	r26, 0x6E	; 110
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>

000000ca <__do_global_ctors>:
      ca:	10 e0       	ldi	r17, 0x00	; 0
      cc:	c7 e5       	ldi	r28, 0x57	; 87
      ce:	d0 e0       	ldi	r29, 0x00	; 0
      d0:	04 c0       	rjmp	.+8      	; 0xda <__do_global_ctors+0x10>
      d2:	21 97       	sbiw	r28, 0x01	; 1
      d4:	fe 01       	movw	r30, r28
      d6:	0e 94 da 09 	call	0x13b4	; 0x13b4 <__tablejump2__>
      da:	c6 35       	cpi	r28, 0x56	; 86
      dc:	d1 07       	cpc	r29, r17
      de:	c9 f7       	brne	.-14     	; 0xd2 <__do_global_ctors+0x8>
      e0:	0e 94 52 09 	call	0x12a4	; 0x12a4 <main>
      e4:	0c 94 26 0a 	jmp	0x144c	; 0x144c <_exit>

000000e8 <__bad_interrupt>:
      e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ec <_Z14CalculateCRC16Pvh>:
}

uint16_t CalculateCRC16(void *arr, uint8_t count)
{
	uint8_t *ptr = (uint8_t*)arr;
	CRC.CTRL |= CRC_RESET_RESET0_gc;
      ec:	e0 ed       	ldi	r30, 0xD0	; 208
      ee:	f0 e0       	ldi	r31, 0x00	; 0
      f0:	20 81       	ld	r18, Z
      f2:	20 68       	ori	r18, 0x80	; 128
      f4:	20 83       	st	Z, r18
	while (--count)
      f6:	61 50       	subi	r22, 0x01	; 1
      f8:	51 f0       	breq	.+20     	; 0x10e <_Z14CalculateCRC16Pvh+0x22>
      fa:	e8 2f       	mov	r30, r24
      fc:	f9 2f       	mov	r31, r25
		CRC.DATAIN = *ptr++;
      fe:	a0 ed       	ldi	r26, 0xD0	; 208
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	81 91       	ld	r24, Z+
     104:	13 96       	adiw	r26, 0x03	; 3
     106:	8c 93       	st	X, r24
     108:	13 97       	sbiw	r26, 0x03	; 3

uint16_t CalculateCRC16(void *arr, uint8_t count)
{
	uint8_t *ptr = (uint8_t*)arr;
	CRC.CTRL |= CRC_RESET_RESET0_gc;
	while (--count)
     10a:	61 50       	subi	r22, 0x01	; 1
     10c:	d1 f7       	brne	.-12     	; 0x102 <_Z14CalculateCRC16Pvh+0x16>
		CRC.DATAIN = *ptr++;
	return ((uint16_t)CRC.CHECKSUM1 << 8) | CRC.CHECKSUM0;
     10e:	e0 ed       	ldi	r30, 0xD0	; 208
     110:	f0 e0       	ldi	r31, 0x00	; 0
     112:	25 81       	ldd	r18, Z+5	; 0x05
     114:	84 81       	ldd	r24, Z+4	; 0x04
     116:	90 e0       	ldi	r25, 0x00	; 0
}
     118:	92 2b       	or	r25, r18
     11a:	08 95       	ret

0000011c <_Z11ApplyConfigv>:

void ApplyConfig()
{
     11c:	2f 92       	push	r2
     11e:	3f 92       	push	r3
     120:	4f 92       	push	r4
     122:	5f 92       	push	r5
     124:	6f 92       	push	r6
     126:	7f 92       	push	r7
     128:	8f 92       	push	r8
     12a:	9f 92       	push	r9
     12c:	af 92       	push	r10
     12e:	bf 92       	push	r11
     130:	cf 92       	push	r12
     132:	df 92       	push	r13
     134:	ef 92       	push	r14
     136:	ff 92       	push	r15
     138:	0f 93       	push	r16
     13a:	1f 93       	push	r17
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
     140:	cd b7       	in	r28, 0x3d	; 61
     142:	de b7       	in	r29, 0x3e	; 62
     144:	25 97       	sbiw	r28, 0x05	; 5
     146:	cd bf       	out	0x3d, r28	; 61
     148:	de bf       	out	0x3e, r29	; 62
	systemConfig *temp = (systemConfig*)iobuf;
	//Both bits 7 are set: one of the on-time counters must be rewritten
	if ((temp->groupConf & 0x80) && (temp->overrideCfg & 0x80))
     14a:	00 91 bc 20 	lds	r16, 0x20BC	; 0x8020bc <iobuf+0x1d>
     14e:	00 23       	and	r16, r16
     150:	24 f5       	brge	.+72     	; 0x19a <_Z11ApplyConfigv+0x7e>
     152:	80 91 b0 20 	lds	r24, 0x20B0	; 0x8020b0 <iobuf+0x11>
     156:	88 23       	and	r24, r24
     158:	04 f5       	brge	.+64     	; 0x19a <_Z11ApplyConfigv+0x7e>
	{
		uint8_t j = temp->overrideCfg & 0xF; //Update on-time of link
		channelOT.linkOnTime[j] = *((uint32_t*)temp->minLvl);
     15a:	8f 70       	andi	r24, 0x0F	; 15
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	fc 01       	movw	r30, r24
     160:	ee 0f       	add	r30, r30
     162:	ff 1f       	adc	r31, r31
     164:	ee 0f       	add	r30, r30
     166:	ff 1f       	adc	r31, r31
     168:	e9 52       	subi	r30, 0x29	; 41
     16a:	ff 4d       	sbci	r31, 0xDF	; 223
     16c:	af e9       	ldi	r26, 0x9F	; 159
     16e:	b0 e2       	ldi	r27, 0x20	; 32
     170:	4d 91       	ld	r20, X+
     172:	5d 91       	ld	r21, X+
     174:	6d 91       	ld	r22, X+
     176:	7c 91       	ld	r23, X
     178:	13 97       	sbiw	r26, 0x03	; 3
     17a:	40 83       	st	Z, r20
     17c:	51 83       	std	Z+1, r21	; 0x01
     17e:	62 83       	std	Z+2, r22	; 0x02
     180:	73 83       	std	Z+3, r23	; 0x03
		channelOT.linkSwCnt[j] = *((uint16_t*)temp->maxLvl);
     182:	88 0f       	add	r24, r24
     184:	99 1f       	adc	r25, r25
     186:	fc 01       	movw	r30, r24
     188:	e5 50       	subi	r30, 0x05	; 5
     18a:	ff 4d       	sbci	r31, 0xDF	; 223
     18c:	18 96       	adiw	r26, 0x08	; 8
     18e:	8d 91       	ld	r24, X+
     190:	9c 91       	ld	r25, X
     192:	19 97       	sbiw	r26, 0x09	; 9
     194:	80 83       	st	Z, r24
     196:	91 83       	std	Z+1, r25	; 0x01
		return;
     198:	d5 c0       	rjmp	.+426    	; 0x344 <_Z11ApplyConfigv+0x228>
	}
	memcpy(&validConf, iobuf, sizeof(systemConfig));
     19a:	81 e2       	ldi	r24, 0x21	; 33
     19c:	ef e9       	ldi	r30, 0x9F	; 159
     19e:	f0 e2       	ldi	r31, 0x20	; 32
     1a0:	a7 e2       	ldi	r26, 0x27	; 39
     1a2:	b1 e2       	ldi	r27, 0x21	; 33
     1a4:	01 90       	ld	r0, Z+
     1a6:	0d 92       	st	X+, r0
     1a8:	8a 95       	dec	r24
     1aa:	e1 f7       	brne	.-8      	; 0x1a4 <_Z11ApplyConfigv+0x88>
		bool dimInProcess = false;
		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			uint8_t j = _link[i];
			dimInProcess |= (_lvl[i] != gLevels[j]);
			_lvl[i] = validConf.overrideLvl;
     1ac:	90 91 37 21 	lds	r25, 0x2137	; 0x802137 <validConf+0x10>
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
			_tickLastChg = sysState.sysTick;
     1b0:	ef e0       	ldi	r30, 0x0F	; 15
     1b2:	f1 e2       	ldi	r31, 0x21	; 33
     1b4:	a0 80       	ld	r10, Z
     1b6:	b1 80       	ldd	r11, Z+1	; 0x01
     1b8:	c2 80       	ldd	r12, Z+2	; 0x02
     1ba:	d3 80       	ldd	r13, Z+3	; 0x03
     1bc:	e4 80       	ldd	r14, Z+4	; 0x04
     1be:	75 80       	ldd	r7, Z+5	; 0x05
     1c0:	66 80       	ldd	r6, Z+6	; 0x06
     1c2:	27 80       	ldd	r2, Z+7	; 0x07
     1c4:	43 e1       	ldi	r20, 0x13	; 19
     1c6:	50 e2       	ldi	r21, 0x20	; 32
     1c8:	26 e1       	ldi	r18, 0x16	; 22
     1ca:	30 e2       	ldi	r19, 0x20	; 32
     1cc:	0f 2e       	mov	r0, r31
     1ce:	ff e9       	ldi	r31, 0x9F	; 159
     1d0:	4f 2e       	mov	r4, r31
     1d2:	f0 e2       	ldi	r31, 0x20	; 32
     1d4:	5f 2e       	mov	r5, r31
     1d6:	f0 2d       	mov	r31, r0
	void setParams()
	{
		uint8_t pos, min = validConf.fadeRate[_linkNum], max = validConf.linkDelay[_linkNum];
		if (min < 32)
			min = 32;
		_fadeRate = (min > 160) ? 160 : min;
     1d8:	0f 2e       	mov	r0, r31
     1da:	f0 ea       	ldi	r31, 0xA0	; 160
     1dc:	3f 2e       	mov	r3, r31
     1de:	f0 2d       	mov	r31, r0
		_linkDelay = (max > 63) ? 64 : max + 1;
     1e0:	70 e0       	ldi	r23, 0x00	; 0
		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			pos = _link[i];
			min = validConf.minLvl[pos];
			max = validConf.maxLvl[pos];
			_minLvl[i] = (min < 222) ? min + 1 : 223;
     1e2:	0f 2e       	mov	r0, r31
     1e4:	ff ed       	ldi	r31, 0xDF	; 223
     1e6:	ff 2e       	mov	r15, r31
     1e8:	f0 2d       	mov	r31, r0
     1ea:	49 83       	std	Y+1, r20	; 0x01
     1ec:	5a 83       	std	Y+2, r21	; 0x02
     1ee:	9a 2c       	mov	r9, r10
     1f0:	ab 2c       	mov	r10, r11
     1f2:	bc 2c       	mov	r11, r12
     1f4:	82 2c       	mov	r8, r2
     1f6:	3b 82       	std	Y+3, r3	; 0x03
     1f8:	19 01       	movw	r2, r18
     1fa:	29 81       	ldd	r18, Y+1	; 0x01
     1fc:	3a 81       	ldd	r19, Y+2	; 0x02
     1fe:	2c 83       	std	Y+4, r18	; 0x04
     200:	3d 83       	std	Y+5, r19	; 0x05
		_chActMask = 0x10 << num;
	};

	void setParams()
	{
		uint8_t pos, min = validConf.fadeRate[_linkNum], max = validConf.linkDelay[_linkNum];
     202:	d9 01       	movw	r26, r18
     204:	12 96       	adiw	r26, 0x02	; 2
     206:	ec 91       	ld	r30, X
     208:	f0 e0       	ldi	r31, 0x00	; 0
     20a:	e9 5d       	subi	r30, 0xD9	; 217
     20c:	fe 4d       	sbci	r31, 0xDE	; 222
     20e:	82 89       	ldd	r24, Z+18	; 0x12
     210:	26 89       	ldd	r18, Z+22	; 0x16
		if (min < 32)
     212:	80 32       	cpi	r24, 0x20	; 32
     214:	08 f4       	brcc	.+2      	; 0x218 <_Z11ApplyConfigv+0xfc>
			min = 32;
     216:	80 e2       	ldi	r24, 0x20	; 32
		_fadeRate = (min > 160) ? 160 : min;
     218:	81 3a       	cpi	r24, 0xA1	; 161
     21a:	08 f0       	brcs	.+2      	; 0x21e <_Z11ApplyConfigv+0x102>
     21c:	8b 81       	ldd	r24, Y+3	; 0x03
     21e:	ec 81       	ldd	r30, Y+4	; 0x04
     220:	fd 81       	ldd	r31, Y+5	; 0x05
     222:	87 87       	std	Z+15, r24	; 0x0f
		_linkDelay = (max > 63) ? 64 : max + 1;
     224:	20 34       	cpi	r18, 0x40	; 64
     226:	20 f4       	brcc	.+8      	; 0x230 <_Z11ApplyConfigv+0x114>
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	2f 5f       	subi	r18, 0xFF	; 255
     22c:	3f 4f       	sbci	r19, 0xFF	; 255
     22e:	02 c0       	rjmp	.+4      	; 0x234 <_Z11ApplyConfigv+0x118>
     230:	20 e4       	ldi	r18, 0x40	; 64
     232:	37 2f       	mov	r19, r23
     234:	ac 81       	ldd	r26, Y+4	; 0x04
     236:	bd 81       	ldd	r27, Y+5	; 0x05
     238:	50 96       	adiw	r26, 0x10	; 16
     23a:	2d 93       	st	X+, r18
     23c:	3c 93       	st	X, r19
     23e:	51 97       	sbiw	r26, 0x11	; 17
		for (uint8_t i = 0; i < _linkCnt; i++)
     240:	11 96       	adiw	r26, 0x01	; 1
     242:	8c 91       	ld	r24, X
     244:	88 23       	and	r24, r24
     246:	e9 f1       	breq	.+122    	; 0x2c2 <_Z11ApplyConfigv+0x1a6>
     248:	d1 01       	movw	r26, r2
     24a:	30 e0       	ldi	r19, 0x00	; 0
		{
			pos = _link[i];
     24c:	ed 91       	ld	r30, X+
			min = validConf.minLvl[pos];
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	e9 5d       	subi	r30, 0xD9	; 217
     252:	fe 4d       	sbci	r31, 0xDE	; 222
     254:	20 81       	ld	r18, Z
			max = validConf.maxLvl[pos];
     256:	40 85       	ldd	r20, Z+8	; 0x08
			_minLvl[i] = (min < 222) ? min + 1 : 223;
     258:	2e 3d       	cpi	r18, 0xDE	; 222
     25a:	10 f4       	brcc	.+4      	; 0x260 <_Z11ApplyConfigv+0x144>
     25c:	2f 5f       	subi	r18, 0xFF	; 255
     25e:	01 c0       	rjmp	.+2      	; 0x262 <_Z11ApplyConfigv+0x146>
     260:	2f 2d       	mov	r18, r15
     262:	fd 01       	movw	r30, r26
     264:	15 96       	adiw	r26, 0x05	; 5
     266:	2c 93       	st	X, r18
     268:	15 97       	sbiw	r26, 0x05	; 5
			_difLvl[i] = max;
			if (max > _minLvl[i])
     26a:	24 17       	cp	r18, r20
     26c:	20 f0       	brcs	.+8      	; 0x276 <_Z11ApplyConfigv+0x15a>
		{
			pos = _link[i];
			min = validConf.minLvl[pos];
			max = validConf.maxLvl[pos];
			_minLvl[i] = (min < 222) ? min + 1 : 223;
			_difLvl[i] = max;
     26e:	18 96       	adiw	r26, 0x08	; 8
     270:	4c 93       	st	X, r20
     272:	18 97       	sbiw	r26, 0x08	; 8
     274:	05 c0       	rjmp	.+10     	; 0x280 <_Z11ApplyConfigv+0x164>
			if (max > _minLvl[i])
			{
				max -= _minLvl[i];
				_difLvl[i] = (max >= 32) ? max : 32;
     276:	42 1b       	sub	r20, r18
     278:	40 32       	cpi	r20, 0x20	; 32
     27a:	08 f4       	brcc	.+2      	; 0x27e <_Z11ApplyConfigv+0x162>
     27c:	40 e2       	ldi	r20, 0x20	; 32
     27e:	40 87       	std	Z+8, r20	; 0x08
		uint8_t pos, min = validConf.fadeRate[_linkNum], max = validConf.linkDelay[_linkNum];
		if (min < 32)
			min = 32;
		_fadeRate = (min > 160) ? 160 : min;
		_linkDelay = (max > 63) ? 64 : max + 1;
		for (uint8_t i = 0; i < _linkCnt; i++)
     280:	3f 5f       	subi	r19, 0xFF	; 255
     282:	38 13       	cpse	r19, r24
     284:	e3 cf       	rjmp	.-58     	; 0x24c <_Z11ApplyConfigv+0x130>
     286:	d1 01       	movw	r26, r2
     288:	c1 2c       	mov	r12, r1
     28a:	60 e0       	ldi	r22, 0x00	; 0
	void overrideCheck()
	{
		bool dimInProcess = false;
		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			uint8_t j = _link[i];
     28c:	ed 91       	ld	r30, X+
     28e:	ad 01       	movw	r20, r26
			dimInProcess |= (_lvl[i] != gLevels[j]);
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	ee 0f       	add	r30, r30
     294:	ff 1f       	adc	r31, r31
     296:	e4 5a       	subi	r30, 0xA4	; 164
     298:	fe 4d       	sbci	r31, 0xDE	; 222
     29a:	01 90       	ld	r0, Z+
     29c:	f0 81       	ld	r31, Z
     29e:	e0 2d       	mov	r30, r0
     2a0:	12 96       	adiw	r26, 0x02	; 2
     2a2:	2c 91       	ld	r18, X
     2a4:	12 97       	sbiw	r26, 0x02	; 2
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	11 e0       	ldi	r17, 0x01	; 1
     2aa:	2e 17       	cp	r18, r30
     2ac:	3f 07       	cpc	r19, r31
     2ae:	09 f4       	brne	.+2      	; 0x2b2 <_Z11ApplyConfigv+0x196>
     2b0:	10 e0       	ldi	r17, 0x00	; 0
     2b2:	c1 2a       	or	r12, r17
			_lvl[i] = validConf.overrideLvl;
     2b4:	fa 01       	movw	r30, r20
     2b6:	92 83       	std	Z+2, r25	; 0x02
	}

	void overrideCheck()
	{
		bool dimInProcess = false;
		for (uint8_t i = 0; i < _linkCnt; i++)
     2b8:	6f 5f       	subi	r22, 0xFF	; 255
     2ba:	68 13       	cpse	r22, r24
     2bc:	e7 cf       	rjmp	.-50     	; 0x28c <_Z11ApplyConfigv+0x170>
		{
			uint8_t j = _link[i];
			dimInProcess |= (_lvl[i] != gLevels[j]);
			_lvl[i] = validConf.overrideLvl;
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     2be:	c1 10       	cpse	r12, r1
     2c0:	19 c0       	rjmp	.+50     	; 0x2f4 <_Z11ApplyConfigv+0x1d8>
			_tickLastChg = sysState.sysTick;
     2c2:	ac 81       	ldd	r26, Y+4	; 0x04
     2c4:	bd 81       	ldd	r27, Y+5	; 0x05
     2c6:	53 96       	adiw	r26, 0x13	; 19
     2c8:	9c 92       	st	X, r9
     2ca:	53 97       	sbiw	r26, 0x13	; 19
     2cc:	54 96       	adiw	r26, 0x14	; 20
     2ce:	ac 92       	st	X, r10
     2d0:	54 97       	sbiw	r26, 0x14	; 20
     2d2:	55 96       	adiw	r26, 0x15	; 21
     2d4:	bc 92       	st	X, r11
     2d6:	55 97       	sbiw	r26, 0x15	; 21
     2d8:	56 96       	adiw	r26, 0x16	; 22
     2da:	dc 92       	st	X, r13
     2dc:	56 97       	sbiw	r26, 0x16	; 22
     2de:	57 96       	adiw	r26, 0x17	; 23
     2e0:	ec 92       	st	X, r14
     2e2:	57 97       	sbiw	r26, 0x17	; 23
     2e4:	58 96       	adiw	r26, 0x18	; 24
     2e6:	7c 92       	st	X, r7
     2e8:	58 97       	sbiw	r26, 0x18	; 24
     2ea:	59 96       	adiw	r26, 0x19	; 25
     2ec:	6c 92       	st	X, r6
     2ee:	59 97       	sbiw	r26, 0x19	; 25
     2f0:	5a 96       	adiw	r26, 0x1a	; 26
     2f2:	8c 92       	st	X, r8
     2f4:	e9 81       	ldd	r30, Y+1	; 0x01
     2f6:	fa 81       	ldd	r31, Y+2	; 0x02
     2f8:	b3 96       	adiw	r30, 0x23	; 35
     2fa:	e9 83       	std	Y+1, r30	; 0x01
     2fc:	fa 83       	std	Y+2, r31	; 0x02
     2fe:	f3 e2       	ldi	r31, 0x23	; 35
     300:	2f 0e       	add	r2, r31
     302:	31 1c       	adc	r3, r1
		channelOT.linkOnTime[j] = *((uint32_t*)temp->minLvl);
		channelOT.linkSwCnt[j] = *((uint16_t*)temp->maxLvl);
		return;
	}
	memcpy(&validConf, iobuf, sizeof(systemConfig));
	for (uint8_t i = 0; i < 4; i++)
     304:	29 81       	ldd	r18, Y+1	; 0x01
     306:	3a 81       	ldd	r19, Y+2	; 0x02
     308:	24 15       	cp	r18, r4
     30a:	35 05       	cpc	r19, r5
     30c:	09 f0       	breq	.+2      	; 0x310 <_Z11ApplyConfigv+0x1f4>
     30e:	75 cf       	rjmp	.-278    	; 0x1fa <_Z11ApplyConfigv+0xde>
	{
		_linkNum = actLink;
	};
	void setParams()
	{
		_onTime = validConf.msenOnTime > 5 ? validConf.msenOnTime : 6;
     310:	80 91 41 21 	lds	r24, 0x2141	; 0x802141 <validConf+0x1a>
     314:	86 30       	cpi	r24, 0x06	; 6
     316:	08 f4       	brcc	.+2      	; 0x31a <_Z11ApplyConfigv+0x1fe>
     318:	86 e0       	ldi	r24, 0x06	; 6
     31a:	e5 e0       	ldi	r30, 0x05	; 5
     31c:	f0 e2       	ldi	r31, 0x20	; 32
     31e:	84 83       	std	Z+4, r24	; 0x04
		_fTime = _onTime + validConf.msenLowTime;
     320:	90 91 42 21 	lds	r25, 0x2142	; 0x802142 <validConf+0x1b>
     324:	89 0f       	add	r24, r25
     326:	85 83       	std	Z+5, r24	; 0x05
	{
		links[i].setParams();
		links[i].overrideCheck();
	}
	msenCh.setParams();
	if (validConf.groupConf & 0x08) //Bit 3 is set: save config to EEPROM
     328:	03 ff       	sbrs	r16, 3
     32a:	08 c0       	rjmp	.+16     	; 0x33c <_Z11ApplyConfigv+0x220>
		eeprom_update_block(&validConf, &savedConfig, sizeof(systemConfig));
     32c:	41 e2       	ldi	r20, 0x21	; 33
     32e:	50 e0       	ldi	r21, 0x00	; 0
     330:	60 e0       	ldi	r22, 0x00	; 0
     332:	70 e0       	ldi	r23, 0x00	; 0
     334:	87 e2       	ldi	r24, 0x27	; 39
     336:	91 e2       	ldi	r25, 0x21	; 33
     338:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <eeprom_update_block>
	RTC.CALIB = validConf.rtcCorrect;
     33c:	80 91 45 21 	lds	r24, 0x2145	; 0x802145 <validConf+0x1e>
     340:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
}
     344:	25 96       	adiw	r28, 0x05	; 5
     346:	cd bf       	out	0x3d, r28	; 61
     348:	de bf       	out	0x3e, r29	; 62
     34a:	df 91       	pop	r29
     34c:	cf 91       	pop	r28
     34e:	1f 91       	pop	r17
     350:	0f 91       	pop	r16
     352:	ff 90       	pop	r15
     354:	ef 90       	pop	r14
     356:	df 90       	pop	r13
     358:	cf 90       	pop	r12
     35a:	bf 90       	pop	r11
     35c:	af 90       	pop	r10
     35e:	9f 90       	pop	r9
     360:	8f 90       	pop	r8
     362:	7f 90       	pop	r7
     364:	6f 90       	pop	r6
     366:	5f 90       	pop	r5
     368:	4f 90       	pop	r4
     36a:	3f 90       	pop	r3
     36c:	2f 90       	pop	r2
     36e:	08 95       	ret

00000370 <__vector_7>:

ISR(RTC_OVF_vect)
{
     370:	1f 92       	push	r1
     372:	0f 92       	push	r0
     374:	0f b6       	in	r0, 0x3f	; 63
     376:	0f 92       	push	r0
     378:	11 24       	eor	r1, r1
     37a:	2f 92       	push	r2
     37c:	3f 92       	push	r3
     37e:	4f 92       	push	r4
     380:	5f 92       	push	r5
     382:	6f 92       	push	r6
     384:	7f 92       	push	r7
     386:	8f 92       	push	r8
     388:	9f 92       	push	r9
     38a:	af 92       	push	r10
     38c:	bf 92       	push	r11
     38e:	cf 92       	push	r12
     390:	df 92       	push	r13
     392:	ef 92       	push	r14
     394:	ff 92       	push	r15
     396:	0f 93       	push	r16
     398:	1f 93       	push	r17
     39a:	2f 93       	push	r18
     39c:	3f 93       	push	r19
     39e:	4f 93       	push	r20
     3a0:	5f 93       	push	r21
     3a2:	6f 93       	push	r22
     3a4:	7f 93       	push	r23
     3a6:	8f 93       	push	r24
     3a8:	9f 93       	push	r25
     3aa:	af 93       	push	r26
     3ac:	bf 93       	push	r27
     3ae:	ef 93       	push	r30
     3b0:	ff 93       	push	r31
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	cd b7       	in	r28, 0x3d	; 61
     3b8:	de b7       	in	r29, 0x3e	; 62
     3ba:	62 97       	sbiw	r28, 0x12	; 18
     3bc:	cd bf       	out	0x3d, r28	; 61
     3be:	de bf       	out	0x3e, r29	; 62
	sysState.sysTick++;
     3c0:	ef e0       	ldi	r30, 0x0F	; 15
     3c2:	f1 e2       	ldi	r31, 0x21	; 33
     3c4:	20 81       	ld	r18, Z
     3c6:	31 81       	ldd	r19, Z+1	; 0x01
     3c8:	42 81       	ldd	r20, Z+2	; 0x02
     3ca:	53 81       	ldd	r21, Z+3	; 0x03
     3cc:	64 81       	ldd	r22, Z+4	; 0x04
     3ce:	75 81       	ldd	r23, Z+5	; 0x05
     3d0:	86 81       	ldd	r24, Z+6	; 0x06
     3d2:	97 81       	ldd	r25, Z+7	; 0x07
     3d4:	a1 e0       	ldi	r26, 0x01	; 1
     3d6:	0e 94 ba 09 	call	0x1374	; 0x1374 <__adddi3_s8>
     3da:	20 83       	st	Z, r18
     3dc:	31 83       	std	Z+1, r19	; 0x01
     3de:	42 83       	std	Z+2, r20	; 0x02
     3e0:	53 83       	std	Z+3, r21	; 0x03
     3e2:	64 83       	std	Z+4, r22	; 0x04
     3e4:	75 83       	std	Z+5, r23	; 0x05
     3e6:	86 83       	std	Z+6, r24	; 0x06
     3e8:	97 83       	std	Z+7, r25	; 0x07
     3ea:	0f 2e       	mov	r0, r31
     3ec:	f3 e1       	ldi	r31, 0x13	; 19
     3ee:	2f 2e       	mov	r2, r31
     3f0:	f0 e2       	ldi	r31, 0x20	; 32
     3f2:	3f 2e       	mov	r3, r31
     3f4:	f0 2d       	mov	r31, r0
     3f6:	19 82       	std	Y+1, r1	; 0x01
     3f8:	1a 82       	std	Y+2, r1	; 0x02
					tempLvl += ((-tempLvl < delta) ? delta : -tempLvl) + (int16_t)_lvl[s];
					if (!gLevels[j]) //Lamp has been switched on - remember ticks
						_onTimeStamp = sysState.sysTick;
				}
				gLevels[j] = tempLvl;
				gLevelChg |= 1 << j;
     3fa:	88 24       	eor	r8, r8
     3fc:	83 94       	inc	r8
     3fe:	91 2c       	mov	r9, r1
{
	sysState.sysTick++;
	static bool rs485busy = false;
	int8_t i;
	for (i = 0; i < 4; i++)
		links[i].updateLevel();
     400:	49 81       	ldd	r20, Y+1	; 0x01
     402:	5a 81       	ldd	r21, Y+2	; 0x02
     404:	f1 01       	movw	r30, r2
			_tickLastChg = sysState.sysTick;
	}

	void updateLevel()
	{
		int16_t ticksEl = (int16_t)(sysState.sysTick - _tickLastChg); //Elapsed ticks since beginning of dim
     406:	af e0       	ldi	r26, 0x0F	; 15
     408:	b1 e2       	ldi	r27, 0x21	; 33
     40a:	ed 90       	ld	r14, X+
     40c:	fc 90       	ld	r15, X
     40e:	83 89       	ldd	r24, Z+19	; 0x13
     410:	94 89       	ldd	r25, Z+20	; 0x14
     412:	e8 1a       	sub	r14, r24
     414:	f9 0a       	sbc	r15, r25
		int16_t delta = (((ticksEl + 1) * _fadeRate) >> 5) - ((ticksEl * _fadeRate) >> 5); //Number of steps
     416:	27 85       	ldd	r18, Z+15	; 0x0f
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	b7 01       	movw	r22, r14
     41c:	6f 5f       	subi	r22, 0xFF	; 255
     41e:	7f 4f       	sbci	r23, 0xFF	; 255
     420:	62 9f       	mul	r22, r18
     422:	c0 01       	movw	r24, r0
     424:	63 9f       	mul	r22, r19
     426:	90 0d       	add	r25, r0
     428:	72 9f       	mul	r23, r18
     42a:	90 0d       	add	r25, r0
     42c:	11 24       	eor	r1, r1
     42e:	6c 01       	movw	r12, r24
     430:	d5 94       	asr	r13
     432:	c7 94       	ror	r12
     434:	d5 94       	asr	r13
     436:	c7 94       	ror	r12
     438:	d5 94       	asr	r13
     43a:	c7 94       	ror	r12
     43c:	d5 94       	asr	r13
     43e:	c7 94       	ror	r12
     440:	d5 94       	asr	r13
     442:	c7 94       	ror	r12
     444:	82 1b       	sub	r24, r18
     446:	93 0b       	sbc	r25, r19
     448:	95 95       	asr	r25
     44a:	87 95       	ror	r24
     44c:	95 95       	asr	r25
     44e:	87 95       	ror	r24
     450:	95 95       	asr	r25
     452:	87 95       	ror	r24
     454:	95 95       	asr	r25
     456:	87 95       	ror	r24
     458:	95 95       	asr	r25
     45a:	87 95       	ror	r24
     45c:	c8 1a       	sub	r12, r24
     45e:	d9 0a       	sbc	r13, r25
		if (_linkNum == 2)
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	82 30       	cpi	r24, 0x02	; 2
     464:	19 f4       	brne	.+6      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
			PORTC.OUTSET = PIN7_bm;
     466:	b0 e8       	ldi	r27, 0x80	; 128
     468:	b0 93 45 06 	sts	0x0645, r27	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
		for (int8_t i = 0; i < _linkCnt; i++)
     46c:	21 81       	ldd	r18, Z+1	; 0x01
     46e:	22 23       	and	r18, r18
     470:	09 f4       	brne	.+2      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     472:	df c0       	rjmp	.+446    	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
     474:	60 e0       	ldi	r22, 0x00	; 0
     476:	70 e0       	ldi	r23, 0x00	; 0
     478:	b1 2c       	mov	r11, r1
		{
			uint8_t s = _dir ? i : _linkCnt - i - 1; //Direction '1' means forward
			uint8_t j = _link[s];
     47a:	83 e2       	ldi	r24, 0x23	; 35
     47c:	84 9f       	mul	r24, r20
     47e:	d0 01       	movw	r26, r0
     480:	85 9f       	mul	r24, r21
     482:	b0 0d       	add	r27, r0
     484:	11 24       	eor	r1, r1
     486:	ad 5e       	subi	r26, 0xED	; 237
     488:	bf 4d       	sbci	r27, 0xDF	; 223
						channelOT.linkSwCnt[j]++; //Increment switch counter
					}
				}
				else //Level needs to be raised
				{
					tempLvl += ((-tempLvl < delta) ? delta : -tempLvl) + (int16_t)_lvl[s];
     48a:	cb 82       	std	Y+3, r12	; 0x03
     48c:	dc 82       	std	Y+4, r13	; 0x04
     48e:	a9 8b       	std	Y+17, r26	; 0x11
     490:	ba 8b       	std	Y+18, r27	; 0x12
		int16_t delta = (((ticksEl + 1) * _fadeRate) >> 5) - ((ticksEl * _fadeRate) >> 5); //Number of steps
		if (_linkNum == 2)
			PORTC.OUTSET = PIN7_bm;
		for (int8_t i = 0; i < _linkCnt; i++)
		{
			uint8_t s = _dir ? i : _linkCnt - i - 1; //Direction '1' means forward
     492:	80 81       	ld	r24, Z
     494:	88 23       	and	r24, r24
     496:	11 f0       	breq	.+4      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     498:	2b 2d       	mov	r18, r11
     49a:	03 c0       	rjmp	.+6      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     49c:	8b 2d       	mov	r24, r11
     49e:	80 95       	com	r24
     4a0:	28 0f       	add	r18, r24
			uint8_t j = _link[s];
     4a2:	09 89       	ldd	r16, Y+17	; 0x11
     4a4:	1a 89       	ldd	r17, Y+18	; 0x12
     4a6:	02 0f       	add	r16, r18
     4a8:	11 1d       	adc	r17, r1
			int16_t tempLvl = gLevels[j];
     4aa:	d8 01       	movw	r26, r16
     4ac:	13 96       	adiw	r26, 0x03	; 3
     4ae:	ac 90       	ld	r10, X
     4b0:	4a 2d       	mov	r20, r10
     4b2:	50 e0       	ldi	r21, 0x00	; 0
     4b4:	ca 01       	movw	r24, r20
     4b6:	88 0f       	add	r24, r24
     4b8:	99 1f       	adc	r25, r25
     4ba:	84 5a       	subi	r24, 0xA4	; 164
     4bc:	9e 4d       	sbci	r25, 0xDE	; 222
     4be:	dc 01       	movw	r26, r24
     4c0:	2d 91       	ld	r18, X+
     4c2:	3c 91       	ld	r19, X
			tempLvl -= _lvl[s]; //Difference between actual and set levels
     4c4:	d8 01       	movw	r26, r16
     4c6:	16 96       	adiw	r26, 0x06	; 6
     4c8:	8c 91       	ld	r24, X
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	28 1b       	sub	r18, r24
     4ce:	39 0b       	sbc	r19, r25
			if (tempLvl && ticksEl > i * _linkDelay)
     4d0:	09 f4       	brne	.+2      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
     4d2:	a3 c0       	rjmp	.+326    	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
     4d4:	00 89       	ldd	r16, Z+16	; 0x10
     4d6:	11 89       	ldd	r17, Z+17	; 0x11
     4d8:	60 9f       	mul	r22, r16
     4da:	30 01       	movw	r6, r0
     4dc:	61 9f       	mul	r22, r17
     4de:	70 0c       	add	r7, r0
     4e0:	70 9f       	mul	r23, r16
     4e2:	70 0c       	add	r7, r0
     4e4:	11 24       	eor	r1, r1
     4e6:	6e 14       	cp	r6, r14
     4e8:	7f 04       	cpc	r7, r15
     4ea:	0c f0       	brlt	.+2      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     4ec:	96 c0       	rjmp	.+300    	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
			{
				if (tempLvl >= 0) //Level needs to be lowered
     4ee:	33 23       	and	r19, r19
     4f0:	0c f4       	brge	.+2      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     4f2:	4e c0       	rjmp	.+156    	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
				{
					tempLvl -= ((tempLvl > delta) ? delta : tempLvl) - (int16_t)_lvl[s];
     4f4:	6b 81       	ldd	r22, Y+3	; 0x03
     4f6:	7c 81       	ldd	r23, Y+4	; 0x04
     4f8:	2c 15       	cp	r18, r12
     4fa:	3d 05       	cpc	r19, r13
     4fc:	0c f4       	brge	.+2      	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     4fe:	b9 01       	movw	r22, r18
     500:	68 1b       	sub	r22, r24
     502:	79 0b       	sbc	r23, r25
     504:	26 1b       	sub	r18, r22
     506:	37 0b       	sbc	r19, r23
					if (!tempLvl) //Actual level became zero
     508:	09 f0       	breq	.+2      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     50a:	72 c0       	rjmp	.+228    	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
					{
						tempLvl -= (int16_t)_fadeRate << 2; //Subtract 4x fade steps, so off/on delay will be 4s
     50c:	27 85       	ldd	r18, Z+15	; 0x0f
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	22 0f       	add	r18, r18
     512:	33 1f       	adc	r19, r19
     514:	22 0f       	add	r18, r18
     516:	33 1f       	adc	r19, r19
     518:	31 95       	neg	r19
     51a:	21 95       	neg	r18
     51c:	31 09       	sbc	r19, r1
						channelOT.linkOnTime[j] += (uint32_t)(sysState.sysTick - _onTimeStamp) >> 5; //Add seconds
     51e:	8a 01       	movw	r16, r20
     520:	00 0f       	add	r16, r16
     522:	11 1f       	adc	r17, r17
     524:	00 0f       	add	r16, r16
     526:	11 1f       	adc	r17, r17
     528:	09 52       	subi	r16, 0x29	; 41
     52a:	1f 4d       	sbci	r17, 0xDF	; 223
     52c:	af e0       	ldi	r26, 0x0F	; 15
     52e:	b1 e2       	ldi	r27, 0x21	; 33
     530:	6d 91       	ld	r22, X+
     532:	7d 91       	ld	r23, X+
     534:	8d 91       	ld	r24, X+
     536:	9c 91       	ld	r25, X
     538:	43 8c       	ldd	r4, Z+27	; 0x1b
     53a:	54 8c       	ldd	r5, Z+28	; 0x1c
     53c:	65 8c       	ldd	r6, Z+29	; 0x1d
     53e:	76 8c       	ldd	r7, Z+30	; 0x1e
     540:	64 19       	sub	r22, r4
     542:	75 09       	sbc	r23, r5
     544:	86 09       	sbc	r24, r6
     546:	97 09       	sbc	r25, r7
     548:	68 94       	set
     54a:	14 f8       	bld	r1, 4
     54c:	96 95       	lsr	r25
     54e:	87 95       	ror	r24
     550:	77 95       	ror	r23
     552:	67 95       	ror	r22
     554:	16 94       	lsr	r1
     556:	d1 f7       	brne	.-12     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
     558:	d8 01       	movw	r26, r16
     55a:	4d 90       	ld	r4, X+
     55c:	5d 90       	ld	r5, X+
     55e:	6d 90       	ld	r6, X+
     560:	7c 90       	ld	r7, X
     562:	13 97       	sbiw	r26, 0x03	; 3
     564:	46 0e       	add	r4, r22
     566:	57 1e       	adc	r5, r23
     568:	68 1e       	adc	r6, r24
     56a:	79 1e       	adc	r7, r25
     56c:	4d 92       	st	X+, r4
     56e:	5d 92       	st	X+, r5
     570:	6d 92       	st	X+, r6
     572:	7c 92       	st	X, r7
     574:	13 97       	sbiw	r26, 0x03	; 3
						channelOT.linkSwCnt[j]++; //Increment switch counter
     576:	ba 01       	movw	r22, r20
     578:	66 0f       	add	r22, r22
     57a:	77 1f       	adc	r23, r23
     57c:	65 50       	subi	r22, 0x05	; 5
     57e:	7f 4d       	sbci	r23, 0xDF	; 223
     580:	db 01       	movw	r26, r22
     582:	8d 91       	ld	r24, X+
     584:	9c 91       	ld	r25, X
     586:	11 97       	sbiw	r26, 0x01	; 1
     588:	01 96       	adiw	r24, 0x01	; 1
     58a:	8d 93       	st	X+, r24
     58c:	9c 93       	st	X, r25
     58e:	30 c0       	rjmp	.+96     	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
					}
				}
				else //Level needs to be raised
				{
					tempLvl += ((-tempLvl < delta) ? delta : -tempLvl) + (int16_t)_lvl[s];
     590:	66 27       	eor	r22, r22
     592:	77 27       	eor	r23, r23
     594:	62 1b       	sub	r22, r18
     596:	73 0b       	sbc	r23, r19
     598:	6c 15       	cp	r22, r12
     59a:	7d 05       	cpc	r23, r13
     59c:	14 f4       	brge	.+4      	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     59e:	6b 81       	ldd	r22, Y+3	; 0x03
     5a0:	7c 81       	ldd	r23, Y+4	; 0x04
     5a2:	86 0f       	add	r24, r22
     5a4:	97 1f       	adc	r25, r23
     5a6:	28 0f       	add	r18, r24
     5a8:	39 1f       	adc	r19, r25
					if (!gLevels[j]) //Lamp has been switched on - remember ticks
     5aa:	ba 01       	movw	r22, r20
     5ac:	66 0f       	add	r22, r22
     5ae:	77 1f       	adc	r23, r23
     5b0:	64 5a       	subi	r22, 0xA4	; 164
     5b2:	7e 4d       	sbci	r23, 0xDE	; 222
     5b4:	db 01       	movw	r26, r22
     5b6:	8d 91       	ld	r24, X+
     5b8:	9c 91       	ld	r25, X
     5ba:	89 2b       	or	r24, r25
     5bc:	c9 f4       	brne	.+50     	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
						_onTimeStamp = sysState.sysTick;
     5be:	af e0       	ldi	r26, 0x0F	; 15
     5c0:	b1 e2       	ldi	r27, 0x21	; 33
     5c2:	8c 91       	ld	r24, X
     5c4:	83 8f       	std	Z+27, r24	; 0x1b
     5c6:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <sysState+0x1>
     5ca:	84 8f       	std	Z+28, r24	; 0x1c
     5cc:	80 91 11 21 	lds	r24, 0x2111	; 0x802111 <sysState+0x2>
     5d0:	85 8f       	std	Z+29, r24	; 0x1d
     5d2:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <sysState+0x3>
     5d6:	86 8f       	std	Z+30, r24	; 0x1e
     5d8:	80 91 13 21 	lds	r24, 0x2113	; 0x802113 <sysState+0x4>
     5dc:	87 8f       	std	Z+31, r24	; 0x1f
     5de:	80 91 14 21 	lds	r24, 0x2114	; 0x802114 <sysState+0x5>
     5e2:	80 a3       	std	Z+32, r24	; 0x20
     5e4:	80 91 15 21 	lds	r24, 0x2115	; 0x802115 <sysState+0x6>
     5e8:	81 a3       	std	Z+33, r24	; 0x21
     5ea:	80 91 16 21 	lds	r24, 0x2116	; 0x802116 <sysState+0x7>
     5ee:	82 a3       	std	Z+34, r24	; 0x22
				}
				gLevels[j] = tempLvl;
     5f0:	44 0f       	add	r20, r20
     5f2:	55 1f       	adc	r21, r21
     5f4:	44 5a       	subi	r20, 0xA4	; 164
     5f6:	5e 4d       	sbci	r21, 0xDE	; 222
     5f8:	da 01       	movw	r26, r20
     5fa:	2d 93       	st	X+, r18
     5fc:	3c 93       	st	X, r19
				gLevelChg |= 1 << j;
     5fe:	20 91 5b 21 	lds	r18, 0x215B	; 0x80215b <gLevelChg>
     602:	c4 01       	movw	r24, r8
     604:	02 c0       	rjmp	.+4      	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
     606:	88 0f       	add	r24, r24
     608:	99 1f       	adc	r25, r25
     60a:	aa 94       	dec	r10
     60c:	e2 f7       	brpl	.-8      	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
     60e:	82 2b       	or	r24, r18
     610:	80 93 5b 21 	sts	0x215B, r24	; 0x80215b <gLevelChg>
				PORTC.OUTSET = _chActMask; //Switch on activity LED
     614:	82 89       	ldd	r24, Z+18	; 0x12
     616:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     61a:	b3 94       	inc	r11
	{
		int16_t ticksEl = (int16_t)(sysState.sysTick - _tickLastChg); //Elapsed ticks since beginning of dim
		int16_t delta = (((ticksEl + 1) * _fadeRate) >> 5) - ((ticksEl * _fadeRate) >> 5); //Number of steps
		if (_linkNum == 2)
			PORTC.OUTSET = PIN7_bm;
		for (int8_t i = 0; i < _linkCnt; i++)
     61c:	6b 2d       	mov	r22, r11
     61e:	0b 2c       	mov	r0, r11
     620:	00 0c       	add	r0, r0
     622:	77 0b       	sbc	r23, r23
     624:	21 81       	ldd	r18, Z+1	; 0x01
     626:	82 2f       	mov	r24, r18
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	68 17       	cp	r22, r24
     62c:	79 07       	cpc	r23, r25
     62e:	0c f4       	brge	.+2      	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
     630:	30 cf       	rjmp	.-416    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     632:	e9 81       	ldd	r30, Y+1	; 0x01
     634:	fa 81       	ldd	r31, Y+2	; 0x02
     636:	31 96       	adiw	r30, 0x01	; 1
     638:	e9 83       	std	Y+1, r30	; 0x01
     63a:	fa 83       	std	Y+2, r31	; 0x02
     63c:	f3 e2       	ldi	r31, 0x23	; 35
     63e:	2f 0e       	add	r2, r31
     640:	31 1c       	adc	r3, r1
ISR(RTC_OVF_vect)
{
	sysState.sysTick++;
	static bool rs485busy = false;
	int8_t i;
	for (i = 0; i < 4; i++)
     642:	69 81       	ldd	r22, Y+1	; 0x01
     644:	7a 81       	ldd	r23, Y+2	; 0x02
     646:	64 30       	cpi	r22, 0x04	; 4
     648:	71 05       	cpc	r23, r1
     64a:	09 f0       	breq	.+2      	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
     64c:	d9 ce       	rjmp	.-590    	; 0x400 <__LOCK_REGION_LENGTH__>
			cntDown = true;
		}
	}
	void updateLevel()
	{
		if (cntDown)
     64e:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <msenCh>
     652:	88 23       	and	r24, r24
     654:	09 f4       	brne	.+2      	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
     656:	fc c1       	rjmp	.+1016   	; 0xa50 <__LOCK_REGION_LENGTH__+0x650>
		{
			uint16_t ton = (uint16_t)(sysState.sysTick - _onTimeStamp) >> 5;
     658:	2f e0       	ldi	r18, 0x0F	; 15
     65a:	31 e2       	ldi	r19, 0x21	; 33
     65c:	d9 01       	movw	r26, r18
     65e:	bc 91       	ld	r27, X
     660:	bd 83       	std	Y+5, r27	; 0x05
     662:	f9 01       	movw	r30, r18
     664:	f1 81       	ldd	r31, Z+1	; 0x01
     666:	fe 83       	std	Y+6, r31	; 0x06
     668:	d9 01       	movw	r26, r18
     66a:	12 96       	adiw	r26, 0x02	; 2
     66c:	bc 91       	ld	r27, X
     66e:	bf 83       	std	Y+7, r27	; 0x07
     670:	f9 01       	movw	r30, r18
     672:	f3 81       	ldd	r31, Z+3	; 0x03
     674:	f8 87       	std	Y+8, r31	; 0x08
     676:	d9 01       	movw	r26, r18
     678:	14 96       	adiw	r26, 0x04	; 4
     67a:	bc 91       	ld	r27, X
     67c:	b9 87       	std	Y+9, r27	; 0x09
     67e:	f9 01       	movw	r30, r18
     680:	f5 81       	ldd	r31, Z+5	; 0x05
     682:	fa 87       	std	Y+10, r31	; 0x0a
     684:	d9 01       	movw	r26, r18
     686:	16 96       	adiw	r26, 0x06	; 6
     688:	bc 91       	ld	r27, X
     68a:	bb 87       	std	Y+11, r27	; 0x0b
     68c:	f9 01       	movw	r30, r18
     68e:	f7 81       	ldd	r31, Z+7	; 0x07
     690:	fc 87       	std	Y+12, r31	; 0x0c
     692:	25 e0       	ldi	r18, 0x05	; 5
     694:	30 e2       	ldi	r19, 0x20	; 32
			if (ton > _fTime)
     696:	d9 01       	movw	r26, r18
     698:	16 96       	adiw	r26, 0x06	; 6
     69a:	4d 91       	ld	r20, X+
     69c:	5c 91       	ld	r21, X
     69e:	17 97       	sbiw	r26, 0x07	; 7
     6a0:	ed 81       	ldd	r30, Y+5	; 0x05
     6a2:	fe 81       	ldd	r31, Y+6	; 0x06
     6a4:	e4 1b       	sub	r30, r20
     6a6:	f5 0b       	sbc	r31, r21
     6a8:	af 01       	movw	r20, r30
     6aa:	56 95       	lsr	r21
     6ac:	47 95       	ror	r20
     6ae:	52 95       	swap	r21
     6b0:	42 95       	swap	r20
     6b2:	4f 70       	andi	r20, 0x0F	; 15
     6b4:	45 27       	eor	r20, r21
     6b6:	5f 70       	andi	r21, 0x0F	; 15
     6b8:	45 27       	eor	r20, r21
     6ba:	15 96       	adiw	r26, 0x05	; 5
     6bc:	2c 91       	ld	r18, X
     6be:	15 97       	sbiw	r26, 0x05	; 5
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	24 17       	cp	r18, r20
     6c4:	35 07       	cpc	r19, r21
     6c6:	08 f0       	brcs	.+2      	; 0x6ca <__LOCK_REGION_LENGTH__+0x2ca>
     6c8:	68 c0       	rjmp	.+208    	; 0x79a <__LOCK_REGION_LENGTH__+0x39a>
			{
				ltEnt = cntDown = false;
     6ca:	1c 92       	st	X, r1
     6cc:	11 96       	adiw	r26, 0x01	; 1
     6ce:	1c 92       	st	X, r1
     6d0:	11 97       	sbiw	r26, 0x01	; 1
				links[_linkNum].setLevel(0); //Both on and low time are expired, shut down the lamp
     6d2:	12 96       	adiw	r26, 0x02	; 2
     6d4:	4c 91       	ld	r20, X
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
     6d6:	a4 2e       	mov	r10, r20
     6d8:	b1 2c       	mov	r11, r1
     6da:	b3 e2       	ldi	r27, 0x23	; 35
     6dc:	4b 9f       	mul	r20, r27
     6de:	b0 01       	movw	r22, r0
     6e0:	11 24       	eor	r1, r1
     6e2:	6d 5e       	subi	r22, 0xED	; 237
     6e4:	7f 4d       	sbci	r23, 0xDF	; 223
     6e6:	fb 01       	movw	r30, r22
     6e8:	22 81       	ldd	r18, Z+2	; 0x02
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	21 5f       	subi	r18, 0xF1	; 241
     6ee:	3e 4d       	sbci	r19, 0xDE	; 222
     6f0:	d9 01       	movw	r26, r18
     6f2:	51 96       	adiw	r26, 0x11	; 17
     6f4:	1c 92       	st	X, r1
		for (uint8_t i = 0; i < _linkCnt; i++)
     6f6:	c1 80       	ldd	r12, Z+1	; 0x01
     6f8:	cc 20       	and	r12, r12
     6fa:	19 f1       	breq	.+70     	; 0x742 <__LOCK_REGION_LENGTH__+0x342>
     6fc:	b3 e2       	ldi	r27, 0x23	; 35
     6fe:	4b 9f       	mul	r20, r27
     700:	a0 01       	movw	r20, r0
     702:	11 24       	eor	r1, r1
     704:	4a 5e       	subi	r20, 0xEA	; 234
     706:	5f 4d       	sbci	r21, 0xDF	; 223
     708:	d1 2c       	mov	r13, r1
     70a:	f1 2c       	mov	r15, r1
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     70c:	fa 01       	movw	r30, r20
     70e:	20 81       	ld	r18, Z
     710:	4f 5f       	subi	r20, 0xFF	; 255
     712:	5f 4f       	sbci	r21, 0xFF	; 255
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	22 0f       	add	r18, r18
     718:	33 1f       	adc	r19, r19
     71a:	24 5a       	subi	r18, 0xA4	; 164
     71c:	3e 4d       	sbci	r19, 0xDE	; 222
     71e:	d9 01       	movw	r26, r18
     720:	0d 91       	ld	r16, X+
     722:	1c 91       	ld	r17, X
     724:	23 81       	ldd	r18, Z+3	; 0x03
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	61 e0       	ldi	r22, 0x01	; 1
     72a:	20 17       	cp	r18, r16
     72c:	31 07       	cpc	r19, r17
     72e:	09 f4       	brne	.+2      	; 0x732 <__LOCK_REGION_LENGTH__+0x332>
     730:	60 e0       	ldi	r22, 0x00	; 0
     732:	d6 2a       	or	r13, r22
			if (!level || !_difLvl[i]) //Set zero level directly
				_lvl[i] = 0;
     734:	fa 01       	movw	r30, r20
     736:	12 82       	std	Z+2, r1	; 0x02

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
		for (uint8_t i = 0; i < _linkCnt; i++)
     738:	f3 94       	inc	r15
     73a:	fc 10       	cpse	r15, r12
     73c:	e7 cf       	rjmp	.-50     	; 0x70c <__LOCK_REGION_LENGTH__+0x30c>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     73e:	d1 10       	cpse	r13, r1
     740:	87 c1       	rjmp	.+782    	; 0xa50 <__LOCK_REGION_LENGTH__+0x650>
			_tickLastChg = sysState.sysTick;
     742:	23 e2       	ldi	r18, 0x23	; 35
     744:	2a 9d       	mul	r18, r10
     746:	a0 01       	movw	r20, r0
     748:	2b 9d       	mul	r18, r11
     74a:	50 0d       	add	r21, r0
     74c:	11 24       	eor	r1, r1
     74e:	4d 5e       	subi	r20, 0xED	; 237
     750:	5f 4d       	sbci	r21, 0xDF	; 223
     752:	9a 01       	movw	r18, r20
     754:	2d 5e       	subi	r18, 0xED	; 237
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	ed 81       	ldd	r30, Y+5	; 0x05
     75a:	da 01       	movw	r26, r20
     75c:	53 96       	adiw	r26, 0x13	; 19
     75e:	ec 93       	st	X, r30
     760:	ee 81       	ldd	r30, Y+6	; 0x06
     762:	d9 01       	movw	r26, r18
     764:	11 96       	adiw	r26, 0x01	; 1
     766:	ec 93       	st	X, r30
     768:	11 97       	sbiw	r26, 0x01	; 1
     76a:	ff 81       	ldd	r31, Y+7	; 0x07
     76c:	12 96       	adiw	r26, 0x02	; 2
     76e:	fc 93       	st	X, r31
     770:	12 97       	sbiw	r26, 0x02	; 2
     772:	e8 84       	ldd	r14, Y+8	; 0x08
     774:	13 96       	adiw	r26, 0x03	; 3
     776:	ec 92       	st	X, r14
     778:	13 97       	sbiw	r26, 0x03	; 3
     77a:	f9 84       	ldd	r15, Y+9	; 0x09
     77c:	14 96       	adiw	r26, 0x04	; 4
     77e:	fc 92       	st	X, r15
     780:	14 97       	sbiw	r26, 0x04	; 4
     782:	6a 85       	ldd	r22, Y+10	; 0x0a
     784:	15 96       	adiw	r26, 0x05	; 5
     786:	6c 93       	st	X, r22
     788:	15 97       	sbiw	r26, 0x05	; 5
     78a:	7b 85       	ldd	r23, Y+11	; 0x0b
     78c:	16 96       	adiw	r26, 0x06	; 6
     78e:	7c 93       	st	X, r23
     790:	16 97       	sbiw	r26, 0x06	; 6
     792:	8c 85       	ldd	r24, Y+12	; 0x0c
     794:	17 96       	adiw	r26, 0x07	; 7
     796:	8c 93       	st	X, r24
     798:	5b c1       	rjmp	.+694    	; 0xa50 <__LOCK_REGION_LENGTH__+0x650>
			if (ton > _fTime)
			{
				ltEnt = cntDown = false;
				links[_linkNum].setLevel(0); //Both on and low time are expired, shut down the lamp
			}
			else if (!ltEnt && _onTime)
     79a:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <msenCh+0x1>
     79e:	21 11       	cpse	r18, r1
     7a0:	57 c1       	rjmp	.+686    	; 0xa50 <__LOCK_REGION_LENGTH__+0x650>
     7a2:	20 91 09 20 	lds	r18, 0x2009	; 0x802009 <msenCh+0x4>
     7a6:	22 23       	and	r18, r18
     7a8:	09 f4       	brne	.+2      	; 0x7ac <__LOCK_REGION_LENGTH__+0x3ac>
     7aa:	52 c1       	rjmp	.+676    	; 0xa50 <__LOCK_REGION_LENGTH__+0x650>
			{
				ltEnt = true;
     7ac:	25 e0       	ldi	r18, 0x05	; 5
     7ae:	30 e2       	ldi	r19, 0x20	; 32
     7b0:	41 e0       	ldi	r20, 0x01	; 1
     7b2:	d9 01       	movw	r26, r18
     7b4:	11 96       	adiw	r26, 0x01	; 1
     7b6:	4c 93       	st	X, r20
     7b8:	11 97       	sbiw	r26, 0x01	; 1
				links[_linkNum].setLevel(validConf.msenLowLvl);
     7ba:	f0 90 43 21 	lds	r15, 0x2143	; 0x802143 <validConf+0x1c>
     7be:	12 96       	adiw	r26, 0x02	; 2
     7c0:	2c 91       	ld	r18, X
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
     7c2:	a2 2e       	mov	r10, r18
     7c4:	b1 2c       	mov	r11, r1
     7c6:	b3 e2       	ldi	r27, 0x23	; 35
     7c8:	2b 9f       	mul	r18, r27
     7ca:	b0 01       	movw	r22, r0
     7cc:	11 24       	eor	r1, r1
     7ce:	6d 5e       	subi	r22, 0xED	; 237
     7d0:	7f 4d       	sbci	r23, 0xDF	; 223
     7d2:	fb 01       	movw	r30, r22
     7d4:	42 81       	ldd	r20, Z+2	; 0x02
     7d6:	50 e0       	ldi	r21, 0x00	; 0
     7d8:	41 5f       	subi	r20, 0xF1	; 241
     7da:	5e 4d       	sbci	r21, 0xDE	; 222
     7dc:	da 01       	movw	r26, r20
     7de:	51 96       	adiw	r26, 0x11	; 17
     7e0:	fc 92       	st	X, r15
		for (uint8_t i = 0; i < _linkCnt; i++)
     7e2:	e1 80       	ldd	r14, Z+1	; 0x01
     7e4:	ee 20       	and	r14, r14
     7e6:	b1 f1       	breq	.+108    	; 0x854 <__LOCK_REGION_LENGTH__+0x454>
     7e8:	b3 e2       	ldi	r27, 0x23	; 35
     7ea:	2b 9f       	mul	r18, r27
     7ec:	90 01       	movw	r18, r0
     7ee:	11 24       	eor	r1, r1
     7f0:	2a 5e       	subi	r18, 0xEA	; 234
     7f2:	3f 4d       	sbci	r19, 0xDF	; 223
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	60 e0       	ldi	r22, 0x00	; 0
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
			if (!level || !_difLvl[i]) //Set zero level directly
				_lvl[i] = 0;
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
     7f8:	cf 2c       	mov	r12, r15
     7fa:	d1 2c       	mov	r13, r1
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     7fc:	f9 01       	movw	r30, r18
     7fe:	40 81       	ld	r20, Z
     800:	2f 5f       	subi	r18, 0xFF	; 255
     802:	3f 4f       	sbci	r19, 0xFF	; 255
     804:	50 e0       	ldi	r21, 0x00	; 0
     806:	44 0f       	add	r20, r20
     808:	55 1f       	adc	r21, r21
     80a:	44 5a       	subi	r20, 0xA4	; 164
     80c:	5e 4d       	sbci	r21, 0xDE	; 222
     80e:	da 01       	movw	r26, r20
     810:	8d 90       	ld	r8, X+
     812:	9c 90       	ld	r9, X
     814:	43 81       	ldd	r20, Z+3	; 0x03
     816:	50 e0       	ldi	r21, 0x00	; 0
     818:	11 e0       	ldi	r17, 0x01	; 1
     81a:	48 15       	cp	r20, r8
     81c:	59 05       	cpc	r21, r9
     81e:	09 f4       	brne	.+2      	; 0x822 <__LOCK_REGION_LENGTH__+0x422>
     820:	10 e0       	ldi	r17, 0x00	; 0
     822:	71 2b       	or	r23, r17
			if (!level || !_difLvl[i]) //Set zero level directly
     824:	ff 20       	and	r15, r15
     826:	21 f0       	breq	.+8      	; 0x830 <__LOCK_REGION_LENGTH__+0x430>
     828:	f9 01       	movw	r30, r18
     82a:	40 85       	ldd	r20, Z+8	; 0x08
     82c:	41 11       	cpse	r20, r1
     82e:	04 c0       	rjmp	.+8      	; 0x838 <__LOCK_REGION_LENGTH__+0x438>
				_lvl[i] = 0;
     830:	d9 01       	movw	r26, r18
     832:	12 96       	adiw	r26, 0x02	; 2
     834:	1c 92       	st	X, r1
     836:	09 c0       	rjmp	.+18     	; 0x84a <__LOCK_REGION_LENGTH__+0x44a>
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
     838:	4c 9d       	mul	r20, r12
     83a:	80 01       	movw	r16, r0
     83c:	4d 9d       	mul	r20, r13
     83e:	10 0d       	add	r17, r0
     840:	11 24       	eor	r1, r1
     842:	f9 01       	movw	r30, r18
     844:	45 81       	ldd	r20, Z+5	; 0x05
     846:	41 0f       	add	r20, r17
     848:	42 83       	std	Z+2, r20	; 0x02

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
		for (uint8_t i = 0; i < _linkCnt; i++)
     84a:	6f 5f       	subi	r22, 0xFF	; 255
     84c:	6e 11       	cpse	r22, r14
     84e:	d6 cf       	rjmp	.-84     	; 0x7fc <__LOCK_REGION_LENGTH__+0x3fc>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     850:	71 11       	cpse	r23, r1
     852:	fe c0       	rjmp	.+508    	; 0xa50 <__LOCK_REGION_LENGTH__+0x650>
			_tickLastChg = sysState.sysTick;
     854:	23 e2       	ldi	r18, 0x23	; 35
     856:	2a 9d       	mul	r18, r10
     858:	a0 01       	movw	r20, r0
     85a:	2b 9d       	mul	r18, r11
     85c:	50 0d       	add	r21, r0
     85e:	11 24       	eor	r1, r1
     860:	4d 5e       	subi	r20, 0xED	; 237
     862:	5f 4d       	sbci	r21, 0xDF	; 223
     864:	9a 01       	movw	r18, r20
     866:	2d 5e       	subi	r18, 0xED	; 237
     868:	3f 4f       	sbci	r19, 0xFF	; 255
     86a:	ed 81       	ldd	r30, Y+5	; 0x05
     86c:	da 01       	movw	r26, r20
     86e:	53 96       	adiw	r26, 0x13	; 19
     870:	ec 93       	st	X, r30
     872:	ee 81       	ldd	r30, Y+6	; 0x06
     874:	d9 01       	movw	r26, r18
     876:	11 96       	adiw	r26, 0x01	; 1
     878:	ec 93       	st	X, r30
     87a:	11 97       	sbiw	r26, 0x01	; 1
     87c:	ff 81       	ldd	r31, Y+7	; 0x07
     87e:	12 96       	adiw	r26, 0x02	; 2
     880:	fc 93       	st	X, r31
     882:	12 97       	sbiw	r26, 0x02	; 2
     884:	e8 84       	ldd	r14, Y+8	; 0x08
     886:	13 96       	adiw	r26, 0x03	; 3
     888:	ec 92       	st	X, r14
     88a:	13 97       	sbiw	r26, 0x03	; 3
     88c:	f9 84       	ldd	r15, Y+9	; 0x09
     88e:	14 96       	adiw	r26, 0x04	; 4
     890:	fc 92       	st	X, r15
     892:	14 97       	sbiw	r26, 0x04	; 4
     894:	6a 85       	ldd	r22, Y+10	; 0x0a
     896:	15 96       	adiw	r26, 0x05	; 5
     898:	6c 93       	st	X, r22
     89a:	15 97       	sbiw	r26, 0x05	; 5
     89c:	7b 85       	ldd	r23, Y+11	; 0x0b
     89e:	16 96       	adiw	r26, 0x06	; 6
     8a0:	7c 93       	st	X, r23
     8a2:	16 97       	sbiw	r26, 0x06	; 6
     8a4:	8c 85       	ldd	r24, Y+12	; 0x0c
     8a6:	17 96       	adiw	r26, 0x07	; 7
     8a8:	8c 93       	st	X, r24
     8aa:	d2 c0       	rjmp	.+420    	; 0xa50 <__LOCK_REGION_LENGTH__+0x650>
	int8_t i;
	for (i = 0; i < 4; i++)
		links[i].updateLevel();
	msenCh.updateLevel();
	for (i = 0; i < 9; i++)
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
     8ac:	fc 01       	movw	r30, r24
     8ae:	ee 0f       	add	r30, r30
     8b0:	ff 1f       	adc	r31, r31
     8b2:	e4 5a       	subi	r30, 0xA4	; 164
     8b4:	fe 4d       	sbci	r31, 0xDE	; 222
     8b6:	20 81       	ld	r18, Z
     8b8:	31 81       	ldd	r19, Z+1	; 0x01
     8ba:	12 16       	cp	r1, r18
     8bc:	13 06       	cpc	r1, r19
     8be:	44 f4       	brge	.+16     	; 0x8d0 <__LOCK_REGION_LENGTH__+0x4d0>
     8c0:	fc 01       	movw	r30, r24
     8c2:	ee 0f       	add	r30, r30
     8c4:	ff 1f       	adc	r31, r31
     8c6:	e4 5a       	subi	r30, 0xA4	; 164
     8c8:	fe 4d       	sbci	r31, 0xDE	; 222
     8ca:	20 81       	ld	r18, Z
     8cc:	31 81       	ldd	r19, Z+1	; 0x01
     8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <__LOCK_REGION_LENGTH__+0x4d2>
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	2d 93       	st	X+, r18
     8d4:	01 96       	adiw	r24, 0x01	; 1
	static bool rs485busy = false;
	int8_t i;
	for (i = 0; i < 4; i++)
		links[i].updateLevel();
	msenCh.updateLevel();
	for (i = 0; i < 9; i++)
     8d6:	89 30       	cpi	r24, 0x09	; 9
     8d8:	91 05       	cpc	r25, r1
     8da:	41 f7       	brne	.-48     	; 0x8ac <__LOCK_REGION_LENGTH__+0x4ac>
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
	DSI8xFrames[0] = gLevelChg; //DSI start bit
     8dc:	80 91 5b 21 	lds	r24, 0x215B	; 0x80215b <gLevelChg>
     8e0:	80 93 48 21 	sts	0x2148, r24	; 0x802148 <_ZL11DSI8xFrames>
     8e4:	11 e0       	ldi	r17, 0x01	; 1
     8e6:	67 e0       	ldi	r22, 0x07	; 7
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	a1 e0       	ldi	r26, 0x01	; 1
     8ec:	b0 e0       	ldi	r27, 0x00	; 0
     8ee:	fd 01       	movw	r30, r26
     8f0:	06 2e       	mov	r0, r22
     8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <__LOCK_REGION_LENGTH__+0x4f8>
     8f4:	ee 0f       	add	r30, r30
     8f6:	ff 1f       	adc	r31, r31
     8f8:	0a 94       	dec	r0
     8fa:	e2 f7       	brpl	.-8      	; 0x8f4 <__LOCK_REGION_LENGTH__+0x4f4>
     8fc:	e9 83       	std	Y+1, r30	; 0x01
     8fe:	fa 83       	std	Y+2, r31	; 0x02
     900:	ef e0       	ldi	r30, 0x0F	; 15
     902:	f1 e2       	ldi	r31, 0x21	; 33
		uint8_t tmp0 = 0, tmp1 = 0, j;
		for (j = 0; j < 8; j++) //Levels
		{
			if (gLevelChg & (1 << j)) //Particular level has been changed
			{
				if (sysState.setLevels[j] & (1 << i)) //Set upper half-bit
     904:	20 e0       	ldi	r18, 0x00	; 0
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	40 e0       	ldi	r20, 0x00	; 0
     90a:	50 e0       	ldi	r21, 0x00	; 0
	for (i = 7; i >= 0; i--) //DSI frame bits 7-0
	{
		uint8_t tmp0 = 0, tmp1 = 0, j;
		for (j = 0; j < 8; j++) //Levels
		{
			if (gLevelChg & (1 << j)) //Particular level has been changed
     90c:	80 91 5b 21 	lds	r24, 0x215B	; 0x80215b <gLevelChg>
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	02 2e       	mov	r0, r18
     914:	02 c0       	rjmp	.+4      	; 0x91a <__LOCK_REGION_LENGTH__+0x51a>
     916:	95 95       	asr	r25
     918:	87 95       	ror	r24
     91a:	0a 94       	dec	r0
     91c:	e2 f7       	brpl	.-8      	; 0x916 <__LOCK_REGION_LENGTH__+0x516>
     91e:	80 ff       	sbrs	r24, 0
     920:	0b c0       	rjmp	.+22     	; 0x938 <__LOCK_REGION_LENGTH__+0x538>
			{
				if (sysState.setLevels[j] & (1 << i)) //Set upper half-bit
     922:	80 85       	ldd	r24, Z+8	; 0x08
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	e9 80       	ldd	r14, Y+1	; 0x01
     928:	fa 80       	ldd	r15, Y+2	; 0x02
     92a:	8e 21       	and	r24, r14
     92c:	9f 21       	and	r25, r15
     92e:	89 2b       	or	r24, r25
     930:	11 f0       	breq	.+4      	; 0x936 <__LOCK_REGION_LENGTH__+0x536>
					tmp1 |= 1;
     932:	41 60       	ori	r20, 0x01	; 1
     934:	01 c0       	rjmp	.+2      	; 0x938 <__LOCK_REGION_LENGTH__+0x538>
				else
					tmp0 |= 1; //Set lower half-bit (one-zero transition)
     936:	51 60       	ori	r21, 0x01	; 1
			}
			tmp1 <<= 1;
     938:	44 0f       	add	r20, r20
			tmp0 <<= 1;
     93a:	55 0f       	add	r21, r21
     93c:	2f 5f       	subi	r18, 0xFF	; 255
     93e:	3f 4f       	sbci	r19, 0xFF	; 255
     940:	31 96       	adiw	r30, 0x01	; 1
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
	DSI8xFrames[0] = gLevelChg; //DSI start bit
	for (i = 7; i >= 0; i--) //DSI frame bits 7-0
	{
		uint8_t tmp0 = 0, tmp1 = 0, j;
		for (j = 0; j < 8; j++) //Levels
     942:	28 30       	cpi	r18, 0x08	; 8
     944:	31 05       	cpc	r19, r1
     946:	11 f7       	brne	.-60     	; 0x90c <__LOCK_REGION_LENGTH__+0x50c>
			}
			tmp1 <<= 1;
			tmp0 <<= 1;
		}
		j = (8 - i) << 1;
		DSI8xFrames[j - 1] = tmp0;
     948:	81 2f       	mov	r24, r17
     94a:	88 0f       	add	r24, r24
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	fc 01       	movw	r30, r24
     950:	e9 5b       	subi	r30, 0xB9	; 185
     952:	fe 4d       	sbci	r31, 0xDE	; 222
     954:	50 83       	st	Z, r21
		DSI8xFrames[j] = tmp1; //Manchester coded
     956:	fc 01       	movw	r30, r24
     958:	e8 5b       	subi	r30, 0xB8	; 184
     95a:	fe 4d       	sbci	r31, 0xDE	; 222
     95c:	40 83       	st	Z, r20
     95e:	61 50       	subi	r22, 0x01	; 1
     960:	71 09       	sbc	r23, r1
     962:	1f 5f       	subi	r17, 0xFF	; 255
		links[i].updateLevel();
	msenCh.updateLevel();
	for (i = 0; i < 9; i++)
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
	DSI8xFrames[0] = gLevelChg; //DSI start bit
	for (i = 7; i >= 0; i--) //DSI frame bits 7-0
     964:	19 30       	cpi	r17, 0x09	; 9
     966:	19 f6       	brne	.-122    	; 0x8ee <__LOCK_REGION_LENGTH__+0x4ee>
		}
		j = (8 - i) << 1;
		DSI8xFrames[j - 1] = tmp0;
		DSI8xFrames[j] = tmp1; //Manchester coded
	}
	DSI8xFrames[17] = 0; //DSI stop bit
     968:	10 92 59 21 	sts	0x2159, r1	; 0x802159 <_ZL11DSI8xFrames+0x11>
	gLevelChg = 0; //Clear flags for changed levels
     96c:	10 92 5b 21 	sts	0x215B, r1	; 0x80215b <gLevelChg>
	EDMA.CH2.CTRLA |= EDMA_CH_ENABLE_bm; //Initialize EDMA transfer sequence
     970:	e0 e0       	ldi	r30, 0x00	; 0
     972:	f1 e0       	ldi	r31, 0x01	; 1
     974:	80 a9       	ldd	r24, Z+48	; 0x30
     976:	80 68       	ori	r24, 0x80	; 128
     978:	80 ab       	std	Z+48, r24	; 0x30
	TCD5.INTFLAGS |= TC5_OVFIF_bm;
     97a:	e0 e4       	ldi	r30, 0x40	; 64
     97c:	f9 e0       	ldi	r31, 0x09	; 9
     97e:	84 85       	ldd	r24, Z+12	; 0x0c
     980:	81 60       	ori	r24, 0x01	; 1
     982:	84 87       	std	Z+12, r24	; 0x0c
	TCD5.CTRLGCLR = TC5_STOP_bm;
     984:	80 e2       	ldi	r24, 0x20	; 32
     986:	80 87       	std	Z+8, r24	; 0x08

	if (sysState.setLevels[8] > 0) //On/off channel processing
     988:	80 91 1f 21 	lds	r24, 0x211F	; 0x80211f <sysState+0x10>
     98c:	88 23       	and	r24, r24
     98e:	21 f0       	breq	.+8      	; 0x998 <__LOCK_REGION_LENGTH__+0x598>
		PORTA.OUTSET = PIN7_bm;
     990:	80 e8       	ldi	r24, 0x80	; 128
     992:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
     996:	03 c0       	rjmp	.+6      	; 0x99e <__LOCK_REGION_LENGTH__+0x59e>
	else
		PORTA.OUTCLR = PIN7_bm;
     998:	80 e8       	ldi	r24, 0x80	; 128
     99a:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>

	if ((char)sysState.sysTick % 4 == 0) //Initialize conversion sequence 8 times per second
     99e:	80 91 0f 21 	lds	r24, 0x210F	; 0x80210f <sysState>
     9a2:	83 70       	andi	r24, 0x03	; 3
     9a4:	39 f4       	brne	.+14     	; 0x9b4 <__LOCK_REGION_LENGTH__+0x5b4>
	{
		ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN1_gc;
     9a6:	e0 e0       	ldi	r30, 0x00	; 0
     9a8:	f2 e0       	ldi	r31, 0x02	; 2
     9aa:	88 e0       	ldi	r24, 0x08	; 8
     9ac:	81 a3       	std	Z+33, r24	; 0x21
		ADCA.CTRLA |= ADC_START_bm; //Start conversion from pin 1 (channel 1)
     9ae:	80 81       	ld	r24, Z
     9b0:	84 60       	ori	r24, 0x04	; 4
     9b2:	80 83       	st	Z, r24
	}

	int16_t h = (int8_t)sysState.sysTick;
     9b4:	2f e0       	ldi	r18, 0x0F	; 15
     9b6:	31 e2       	ldi	r19, 0x21	; 33
     9b8:	d9 01       	movw	r26, r18
     9ba:	bc 91       	ld	r27, X
     9bc:	bd 83       	std	Y+5, r27	; 0x05
     9be:	f9 01       	movw	r30, r18
     9c0:	f1 81       	ldd	r31, Z+1	; 0x01
     9c2:	fe 83       	std	Y+6, r31	; 0x06
     9c4:	d9 01       	movw	r26, r18
     9c6:	12 96       	adiw	r26, 0x02	; 2
     9c8:	bc 91       	ld	r27, X
     9ca:	bf 83       	std	Y+7, r27	; 0x07
     9cc:	f9 01       	movw	r30, r18
     9ce:	f3 81       	ldd	r31, Z+3	; 0x03
     9d0:	f8 87       	std	Y+8, r31	; 0x08
     9d2:	d9 01       	movw	r26, r18
     9d4:	14 96       	adiw	r26, 0x04	; 4
     9d6:	bc 91       	ld	r27, X
     9d8:	b9 87       	std	Y+9, r27	; 0x09
     9da:	f9 01       	movw	r30, r18
     9dc:	f5 81       	ldd	r31, Z+5	; 0x05
     9de:	fa 87       	std	Y+10, r31	; 0x0a
     9e0:	d9 01       	movw	r26, r18
     9e2:	16 96       	adiw	r26, 0x06	; 6
     9e4:	bc 91       	ld	r27, X
     9e6:	bb 87       	std	Y+11, r27	; 0x0b
     9e8:	f9 01       	movw	r30, r18
     9ea:	f7 81       	ldd	r31, Z+7	; 0x07
     9ec:	fc 87       	std	Y+12, r31	; 0x0c
	TCC4.CCABUF = h * h; //This will produce slow fading of HB LED (4s up/down)
     9ee:	6d 81       	ldd	r22, Y+5	; 0x05
     9f0:	66 02       	muls	r22, r22
     9f2:	90 01       	movw	r18, r0
     9f4:	11 24       	eor	r1, r1
     9f6:	20 93 38 08 	sts	0x0838, r18	; 0x800838 <__TEXT_REGION_LENGTH__+0x700838>
     9fa:	30 93 39 08 	sts	0x0839, r19	; 0x800839 <__TEXT_REGION_LENGTH__+0x700839>

	if (((uint32_t)sysState.sysTick & 0x7FFFF) == 0) //Save state to EEPROM every 4.5 hrs
     9fe:	8d 81       	ldd	r24, Y+5	; 0x05
     a00:	9e 81       	ldd	r25, Y+6	; 0x06
     a02:	af 81       	ldd	r26, Y+7	; 0x07
     a04:	b8 85       	ldd	r27, Y+8	; 0x08
     a06:	a7 70       	andi	r26, 0x07	; 7
     a08:	bb 27       	eor	r27, r27
     a0a:	89 2b       	or	r24, r25
     a0c:	8a 2b       	or	r24, r26
     a0e:	8b 2b       	or	r24, r27
     a10:	41 f4       	brne	.+16     	; 0xa22 <__LOCK_REGION_LENGTH__+0x622>
		eeprom_update_block(&channelOT, &savedCOT, sizeof(channelsOnTime));
     a12:	48 e3       	ldi	r20, 0x38	; 56
     a14:	50 e0       	ldi	r21, 0x00	; 0
     a16:	61 e2       	ldi	r22, 0x21	; 33
     a18:	70 e0       	ldi	r23, 0x00	; 0
     a1a:	87 ed       	ldi	r24, 0xD7	; 215
     a1c:	90 e2       	ldi	r25, 0x20	; 32
     a1e:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <eeprom_update_block>

	if (rxMode == SetConfig) //We are currently receiving data packet
     a22:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <rxMode>
     a26:	83 32       	cpi	r24, 0x23	; 35
     a28:	81 f4       	brne	.+32     	; 0xa4a <__LOCK_REGION_LENGTH__+0x64a>
	{
		if (rs485busy) //Second tick in a row detected
     a2a:	80 91 04 20 	lds	r24, 0x2004	; 0x802004 <_ZZ10__vector_7E9rs485busy>
     a2e:	88 23       	and	r24, r24
     a30:	41 f0       	breq	.+16     	; 0xa42 <__LOCK_REGION_LENGTH__+0x642>
		{
			rxMode = 0; //Packet considered lost
     a32:	10 92 5a 21 	sts	0x215A, r1	; 0x80215a <rxMode>
			USARTC0.CTRLB |= USART_MPCM_bm; //Set MPCM bit
     a36:	e0 ec       	ldi	r30, 0xC0	; 192
     a38:	f8 e0       	ldi	r31, 0x08	; 8
     a3a:	83 81       	ldd	r24, Z+3	; 0x03
     a3c:	82 60       	ori	r24, 0x02	; 2
     a3e:	83 83       	std	Z+3, r24	; 0x03
     a40:	0c c0       	rjmp	.+24     	; 0xa5a <__LOCK_REGION_LENGTH__+0x65a>
		}
		else
			rs485busy = true;
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <_ZZ10__vector_7E9rs485busy>
     a48:	08 c0       	rjmp	.+16     	; 0xa5a <__LOCK_REGION_LENGTH__+0x65a>
	}
	else
		rs485busy = false;
     a4a:	10 92 04 20 	sts	0x2004, r1	; 0x802004 <_ZZ10__vector_7E9rs485busy>
}
     a4e:	05 c0       	rjmp	.+10     	; 0xa5a <__LOCK_REGION_LENGTH__+0x65a>
     a50:	a7 e1       	ldi	r26, 0x17	; 23
     a52:	b1 e2       	ldi	r27, 0x21	; 33

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
		for (uint8_t i = 0; i < _linkCnt; i++)
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	29 cf       	rjmp	.-430    	; 0x8ac <__LOCK_REGION_LENGTH__+0x4ac>
		else
			rs485busy = true;
	}
	else
		rs485busy = false;
}
     a5a:	62 96       	adiw	r28, 0x12	; 18
     a5c:	cd bf       	out	0x3d, r28	; 61
     a5e:	de bf       	out	0x3e, r29	; 62
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	ff 91       	pop	r31
     a66:	ef 91       	pop	r30
     a68:	bf 91       	pop	r27
     a6a:	af 91       	pop	r26
     a6c:	9f 91       	pop	r25
     a6e:	8f 91       	pop	r24
     a70:	7f 91       	pop	r23
     a72:	6f 91       	pop	r22
     a74:	5f 91       	pop	r21
     a76:	4f 91       	pop	r20
     a78:	3f 91       	pop	r19
     a7a:	2f 91       	pop	r18
     a7c:	1f 91       	pop	r17
     a7e:	0f 91       	pop	r16
     a80:	ff 90       	pop	r15
     a82:	ef 90       	pop	r14
     a84:	df 90       	pop	r13
     a86:	cf 90       	pop	r12
     a88:	bf 90       	pop	r11
     a8a:	af 90       	pop	r10
     a8c:	9f 90       	pop	r9
     a8e:	8f 90       	pop	r8
     a90:	7f 90       	pop	r7
     a92:	6f 90       	pop	r6
     a94:	5f 90       	pop	r5
     a96:	4f 90       	pop	r4
     a98:	3f 90       	pop	r3
     a9a:	2f 90       	pop	r2
     a9c:	0f 90       	pop	r0
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	0f 90       	pop	r0
     aa2:	1f 90       	pop	r1
     aa4:	18 95       	reti

00000aa6 <__vector_34>:

ISR(ADCA_CH0_vect)
{
     aa6:	1f 92       	push	r1
     aa8:	0f 92       	push	r0
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	0f 92       	push	r0
     aae:	11 24       	eor	r1, r1
     ab0:	af 92       	push	r10
     ab2:	bf 92       	push	r11
     ab4:	df 92       	push	r13
     ab6:	ef 92       	push	r14
     ab8:	ff 92       	push	r15
     aba:	0f 93       	push	r16
     abc:	1f 93       	push	r17
     abe:	2f 93       	push	r18
     ac0:	3f 93       	push	r19
     ac2:	4f 93       	push	r20
     ac4:	5f 93       	push	r21
     ac6:	6f 93       	push	r22
     ac8:	7f 93       	push	r23
     aca:	8f 93       	push	r24
     acc:	9f 93       	push	r25
     ace:	af 93       	push	r26
     ad0:	bf 93       	push	r27
     ad2:	cf 93       	push	r28
     ad4:	df 93       	push	r29
     ad6:	ef 93       	push	r30
     ad8:	ff 93       	push	r31
	static uint8_t sAdcCnt = 0;
	int16_t result = ADCA.CH0RES;
     ada:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__TEXT_REGION_LENGTH__+0x700210>
     ade:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__TEXT_REGION_LENGTH__+0x700211>
	if (sAdcCnt < 4 && LINK_VALID_MIN < result && result < LINK_VALID_MAX)
     ae2:	20 91 03 20 	lds	r18, 0x2003	; 0x802003 <_ZZ11__vector_34E7sAdcCnt>
     ae6:	24 30       	cpi	r18, 0x04	; 4
     ae8:	08 f0       	brcs	.+2      	; 0xaec <__vector_34+0x46>
     aea:	3a c1       	rjmp	.+628    	; 0xd60 <__vector_34+0x2ba>
     aec:	bc 01       	movw	r22, r24
     aee:	6e 5e       	subi	r22, 0xEE	; 238
     af0:	73 41       	sbci	r23, 0x13	; 19
     af2:	6b 36       	cpi	r22, 0x6B	; 107
     af4:	77 46       	sbci	r23, 0x67	; 103
     af6:	08 f0       	brcs	.+2      	; 0xafa <__vector_34+0x54>
     af8:	24 c1       	rjmp	.+584    	; 0xd42 <__vector_34+0x29c>
	{
		sysState.linksMask |= (1 << sAdcCnt); //Set 'valid' bit
     afa:	a2 2e       	mov	r10, r18
     afc:	b1 2c       	mov	r11, r1
     afe:	ef e0       	ldi	r30, 0x0F	; 15
     b00:	f1 e2       	ldi	r31, 0x21	; 33
     b02:	61 e0       	ldi	r22, 0x01	; 1
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	02 2e       	mov	r0, r18
     b08:	02 c0       	rjmp	.+4      	; 0xb0e <__vector_34+0x68>
     b0a:	66 0f       	add	r22, r22
     b0c:	77 1f       	adc	r23, r23
     b0e:	0a 94       	dec	r0
     b10:	e2 f7       	brpl	.-8      	; 0xb0a <__vector_34+0x64>
     b12:	35 89       	ldd	r19, Z+21	; 0x15
     b14:	36 2b       	or	r19, r22
     b16:	35 8b       	std	Z+21, r19	; 0x15
		if (result < LINK_ON_BARRIER)
     b18:	85 34       	cpi	r24, 0x45	; 69
     b1a:	6b e1       	ldi	r22, 0x1B	; 27
     b1c:	96 07       	cpc	r25, r22
     b1e:	0c f0       	brlt	.+2      	; 0xb22 <__vector_34+0x7c>
     b20:	73 c0       	rjmp	.+230    	; 0xc08 <__vector_34+0x162>
		{
			result = 0;
			if (sysState.linksMask & (0x10 << sAdcCnt)) //Previous level was non-zero
     b22:	60 e1       	ldi	r22, 0x10	; 16
     b24:	70 e0       	ldi	r23, 0x00	; 0
     b26:	02 2e       	mov	r0, r18
     b28:	02 c0       	rjmp	.+4      	; 0xb2e <__vector_34+0x88>
     b2a:	66 0f       	add	r22, r22
     b2c:	77 1f       	adc	r23, r23
     b2e:	0a 94       	dec	r0
     b30:	e2 f7       	brpl	.-8      	; 0xb2a <__vector_34+0x84>
     b32:	83 2f       	mov	r24, r19
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	86 23       	and	r24, r22
     b38:	97 23       	and	r25, r23
     b3a:	89 2b       	or	r24, r25
     b3c:	09 f4       	brne	.+2      	; 0xb40 <__vector_34+0x9a>
     b3e:	5f c0       	rjmp	.+190    	; 0xbfe <__vector_34+0x158>
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
     b40:	83 e2       	ldi	r24, 0x23	; 35
     b42:	8a 9d       	mul	r24, r10
     b44:	d0 01       	movw	r26, r0
     b46:	8b 9d       	mul	r24, r11
     b48:	b0 0d       	add	r27, r0
     b4a:	11 24       	eor	r1, r1
     b4c:	ad 5e       	subi	r26, 0xED	; 237
     b4e:	bf 4d       	sbci	r27, 0xDF	; 223
     b50:	12 96       	adiw	r26, 0x02	; 2
     b52:	ec 91       	ld	r30, X
     b54:	12 97       	sbiw	r26, 0x02	; 2
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	e1 5f       	subi	r30, 0xF1	; 241
     b5a:	fe 4d       	sbci	r31, 0xDE	; 222
     b5c:	11 8a       	std	Z+17, r1	; 0x11
		for (uint8_t i = 0; i < _linkCnt; i++)
     b5e:	11 96       	adiw	r26, 0x01	; 1
     b60:	dc 90       	ld	r13, X
     b62:	dd 20       	and	r13, r13
     b64:	11 f1       	breq	.+68     	; 0xbaa <__vector_34+0x104>
     b66:	c3 e2       	ldi	r28, 0x23	; 35
     b68:	2c 9f       	mul	r18, r28
     b6a:	c0 01       	movw	r24, r0
     b6c:	11 24       	eor	r1, r1
     b6e:	8a 5e       	subi	r24, 0xEA	; 234
     b70:	9f 4d       	sbci	r25, 0xDF	; 223
     b72:	00 e0       	ldi	r16, 0x00	; 0
     b74:	10 e0       	ldi	r17, 0x00	; 0
     b76:	dc 01       	movw	r26, r24
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     b78:	ec 91       	ld	r30, X
     b7a:	01 96       	adiw	r24, 0x01	; 1
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	ee 0f       	add	r30, r30
     b80:	ff 1f       	adc	r31, r31
     b82:	e4 5a       	subi	r30, 0xA4	; 164
     b84:	fe 4d       	sbci	r31, 0xDE	; 222
     b86:	e0 80       	ld	r14, Z
     b88:	f1 80       	ldd	r15, Z+1	; 0x01
     b8a:	13 96       	adiw	r26, 0x03	; 3
     b8c:	4c 91       	ld	r20, X
     b8e:	50 e0       	ldi	r21, 0x00	; 0
     b90:	e1 e0       	ldi	r30, 0x01	; 1
     b92:	4e 15       	cp	r20, r14
     b94:	5f 05       	cpc	r21, r15
     b96:	09 f4       	brne	.+2      	; 0xb9a <__vector_34+0xf4>
     b98:	e0 e0       	ldi	r30, 0x00	; 0
     b9a:	0e 2b       	or	r16, r30
			if (!level || !_difLvl[i]) //Set zero level directly
				_lvl[i] = 0;
     b9c:	fc 01       	movw	r30, r24
     b9e:	12 82       	std	Z+2, r1	; 0x02

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
		for (uint8_t i = 0; i < _linkCnt; i++)
     ba0:	1f 5f       	subi	r17, 0xFF	; 255
     ba2:	1d 11       	cpse	r17, r13
     ba4:	e8 cf       	rjmp	.-48     	; 0xb76 <__vector_34+0xd0>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     ba6:	01 11       	cpse	r16, r1
     ba8:	2a c0       	rjmp	.+84     	; 0xbfe <__vector_34+0x158>
			_tickLastChg = sysState.sysTick;
     baa:	43 e2       	ldi	r20, 0x23	; 35
     bac:	4a 9d       	mul	r20, r10
     bae:	c0 01       	movw	r24, r0
     bb0:	4b 9d       	mul	r20, r11
     bb2:	90 0d       	add	r25, r0
     bb4:	11 24       	eor	r1, r1
     bb6:	ec 01       	movw	r28, r24
     bb8:	cd 5e       	subi	r28, 0xED	; 237
     bba:	df 4d       	sbci	r29, 0xDF	; 223
     bbc:	de 01       	movw	r26, r28
     bbe:	53 96       	adiw	r26, 0x13	; 19
     bc0:	ef e0       	ldi	r30, 0x0F	; 15
     bc2:	f1 e2       	ldi	r31, 0x21	; 33
     bc4:	80 81       	ld	r24, Z
     bc6:	8b 8b       	std	Y+19, r24	; 0x13
     bc8:	81 81       	ldd	r24, Z+1	; 0x01
     bca:	11 96       	adiw	r26, 0x01	; 1
     bcc:	8c 93       	st	X, r24
     bce:	11 97       	sbiw	r26, 0x01	; 1
     bd0:	82 81       	ldd	r24, Z+2	; 0x02
     bd2:	12 96       	adiw	r26, 0x02	; 2
     bd4:	8c 93       	st	X, r24
     bd6:	12 97       	sbiw	r26, 0x02	; 2
     bd8:	83 81       	ldd	r24, Z+3	; 0x03
     bda:	13 96       	adiw	r26, 0x03	; 3
     bdc:	8c 93       	st	X, r24
     bde:	13 97       	sbiw	r26, 0x03	; 3
     be0:	84 81       	ldd	r24, Z+4	; 0x04
     be2:	14 96       	adiw	r26, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	14 97       	sbiw	r26, 0x04	; 4
     be8:	85 81       	ldd	r24, Z+5	; 0x05
     bea:	15 96       	adiw	r26, 0x05	; 5
     bec:	8c 93       	st	X, r24
     bee:	15 97       	sbiw	r26, 0x05	; 5
     bf0:	86 81       	ldd	r24, Z+6	; 0x06
     bf2:	16 96       	adiw	r26, 0x06	; 6
     bf4:	8c 93       	st	X, r24
     bf6:	16 97       	sbiw	r26, 0x06	; 6
     bf8:	87 81       	ldd	r24, Z+7	; 0x07
     bfa:	17 96       	adiw	r26, 0x07	; 7
     bfc:	8c 93       	st	X, r24
		if (result < LINK_ON_BARRIER)
		{
			result = 0;
			if (sysState.linksMask & (0x10 << sAdcCnt)) //Previous level was non-zero
				links[sAdcCnt].setLevel(0);
			sysState.linksMask &= ~(0x10 << sAdcCnt); //Clear 'non-zero' bit
     bfe:	60 95       	com	r22
     c00:	36 23       	and	r19, r22
     c02:	30 93 24 21 	sts	0x2124, r19	; 0x802124 <sysState+0x15>
     c06:	85 c1       	rjmp	.+778    	; 0xf12 <__vector_34+0x46c>
		}
		else
		{
			result = (result - LINK_1PERC_CODE) / LINK_SCALE;
     c08:	80 59       	subi	r24, 0x90	; 144
     c0a:	91 42       	sbci	r25, 0x21	; 33
     c0c:	64 e5       	ldi	r22, 0x54	; 84
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	0e 94 a6 09 	call	0x134c	; 0x134c <__divmodhi4>
			if (result < 1)
     c14:	16 16       	cp	r1, r22
     c16:	17 06       	cpc	r1, r23
     c18:	14 f0       	brlt	.+4      	; 0xc1e <__vector_34+0x178>
				result = 1;
     c1a:	61 e0       	ldi	r22, 0x01	; 1
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	6f 3f       	cpi	r22, 0xFF	; 255
     c20:	71 05       	cpc	r23, r1
     c22:	19 f0       	breq	.+6      	; 0xc2a <__vector_34+0x184>
     c24:	14 f0       	brlt	.+4      	; 0xc2a <__vector_34+0x184>
     c26:	6f ef       	ldi	r22, 0xFF	; 255
     c28:	70 e0       	ldi	r23, 0x00	; 0
			if (result > 255)
				result = 255;
			sysState.linksMask |= (0x10 << sAdcCnt); //Set 'non-zero' bit
     c2a:	80 e1       	ldi	r24, 0x10	; 16
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	02 2e       	mov	r0, r18
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <__vector_34+0x190>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	0a 94       	dec	r0
     c38:	e2 f7       	brpl	.-8      	; 0xc32 <__vector_34+0x18c>
     c3a:	38 2b       	or	r19, r24
     c3c:	30 93 24 21 	sts	0x2124, r19	; 0x802124 <sysState+0x15>
			if (sysState.linkLevels[sAdcCnt] != (uint8_t)result) //Update only when level was changed
     c40:	ab 01       	movw	r20, r22
     c42:	55 27       	eor	r21, r21
     c44:	f5 01       	movw	r30, r10
     c46:	e1 5f       	subi	r30, 0xF1	; 241
     c48:	fe 4d       	sbci	r31, 0xDE	; 222
     c4a:	81 89       	ldd	r24, Z+17	; 0x11
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	84 17       	cp	r24, r20
     c50:	95 07       	cpc	r25, r21
     c52:	09 f4       	brne	.+2      	; 0xc56 <__vector_34+0x1b0>
     c54:	5e c1       	rjmp	.+700    	; 0xf12 <__vector_34+0x46c>
				links[sAdcCnt].setLevel((uint8_t)result);
     c56:	06 2f       	mov	r16, r22
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
     c58:	83 e2       	ldi	r24, 0x23	; 35
     c5a:	8a 9d       	mul	r24, r10
     c5c:	d0 01       	movw	r26, r0
     c5e:	8b 9d       	mul	r24, r11
     c60:	b0 0d       	add	r27, r0
     c62:	11 24       	eor	r1, r1
     c64:	ad 5e       	subi	r26, 0xED	; 237
     c66:	bf 4d       	sbci	r27, 0xDF	; 223
     c68:	12 96       	adiw	r26, 0x02	; 2
     c6a:	ec 91       	ld	r30, X
     c6c:	12 97       	sbiw	r26, 0x02	; 2
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	e1 5f       	subi	r30, 0xF1	; 241
     c72:	fe 4d       	sbci	r31, 0xDE	; 222
     c74:	61 8b       	std	Z+17, r22	; 0x11
		for (uint8_t i = 0; i < _linkCnt; i++)
     c76:	11 96       	adiw	r26, 0x01	; 1
     c78:	1c 91       	ld	r17, X
     c7a:	11 23       	and	r17, r17
     c7c:	b9 f1       	breq	.+110    	; 0xcec <__vector_34+0x246>
     c7e:	f3 e2       	ldi	r31, 0x23	; 35
     c80:	2f 9f       	mul	r18, r31
     c82:	d0 01       	movw	r26, r0
     c84:	11 24       	eor	r1, r1
     c86:	aa 5e       	subi	r26, 0xEA	; 234
     c88:	bf 4d       	sbci	r27, 0xDF	; 223
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	30 e0       	ldi	r19, 0x00	; 0
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     c8e:	ed 01       	movw	r28, r26
     c90:	e8 81       	ld	r30, Y
     c92:	11 96       	adiw	r26, 0x01	; 1
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	ee 0f       	add	r30, r30
     c98:	ff 1f       	adc	r31, r31
     c9a:	e4 5a       	subi	r30, 0xA4	; 164
     c9c:	fe 4d       	sbci	r31, 0xDE	; 222
     c9e:	01 90       	ld	r0, Z+
     ca0:	f0 81       	ld	r31, Z
     ca2:	e0 2d       	mov	r30, r0
     ca4:	8b 81       	ldd	r24, Y+3	; 0x03
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	61 e0       	ldi	r22, 0x01	; 1
     caa:	8e 17       	cp	r24, r30
     cac:	9f 07       	cpc	r25, r31
     cae:	09 f4       	brne	.+2      	; 0xcb2 <__vector_34+0x20c>
     cb0:	60 e0       	ldi	r22, 0x00	; 0
     cb2:	76 2b       	or	r23, r22
			if (!level || !_difLvl[i]) //Set zero level directly
     cb4:	00 23       	and	r16, r16
     cb6:	29 f0       	breq	.+10     	; 0xcc2 <__vector_34+0x21c>
     cb8:	18 96       	adiw	r26, 0x08	; 8
     cba:	8c 91       	ld	r24, X
     cbc:	18 97       	sbiw	r26, 0x08	; 8
     cbe:	81 11       	cpse	r24, r1
     cc0:	04 c0       	rjmp	.+8      	; 0xcca <__vector_34+0x224>
				_lvl[i] = 0;
     cc2:	12 96       	adiw	r26, 0x02	; 2
     cc4:	1c 92       	st	X, r1
     cc6:	12 97       	sbiw	r26, 0x02	; 2
     cc8:	0c c0       	rjmp	.+24     	; 0xce2 <__vector_34+0x23c>
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
     cca:	84 9f       	mul	r24, r20
     ccc:	f0 01       	movw	r30, r0
     cce:	85 9f       	mul	r24, r21
     cd0:	f0 0d       	add	r31, r0
     cd2:	11 24       	eor	r1, r1
     cd4:	15 96       	adiw	r26, 0x05	; 5
     cd6:	8c 91       	ld	r24, X
     cd8:	15 97       	sbiw	r26, 0x05	; 5
     cda:	8f 0f       	add	r24, r31
     cdc:	12 96       	adiw	r26, 0x02	; 2
     cde:	8c 93       	st	X, r24
     ce0:	12 97       	sbiw	r26, 0x02	; 2

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
		for (uint8_t i = 0; i < _linkCnt; i++)
     ce2:	3f 5f       	subi	r19, 0xFF	; 255
     ce4:	13 13       	cpse	r17, r19
     ce6:	d3 cf       	rjmp	.-90     	; 0xc8e <__vector_34+0x1e8>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     ce8:	71 11       	cpse	r23, r1
     cea:	13 c1       	rjmp	.+550    	; 0xf12 <__vector_34+0x46c>
			_tickLastChg = sysState.sysTick;
     cec:	33 e2       	ldi	r19, 0x23	; 35
     cee:	3a 9d       	mul	r19, r10
     cf0:	c0 01       	movw	r24, r0
     cf2:	3b 9d       	mul	r19, r11
     cf4:	90 0d       	add	r25, r0
     cf6:	11 24       	eor	r1, r1
     cf8:	ec 01       	movw	r28, r24
     cfa:	cd 5e       	subi	r28, 0xED	; 237
     cfc:	df 4d       	sbci	r29, 0xDF	; 223
     cfe:	de 01       	movw	r26, r28
     d00:	53 96       	adiw	r26, 0x13	; 19
     d02:	ef e0       	ldi	r30, 0x0F	; 15
     d04:	f1 e2       	ldi	r31, 0x21	; 33
     d06:	80 81       	ld	r24, Z
     d08:	8b 8b       	std	Y+19, r24	; 0x13
     d0a:	81 81       	ldd	r24, Z+1	; 0x01
     d0c:	11 96       	adiw	r26, 0x01	; 1
     d0e:	8c 93       	st	X, r24
     d10:	11 97       	sbiw	r26, 0x01	; 1
     d12:	82 81       	ldd	r24, Z+2	; 0x02
     d14:	12 96       	adiw	r26, 0x02	; 2
     d16:	8c 93       	st	X, r24
     d18:	12 97       	sbiw	r26, 0x02	; 2
     d1a:	83 81       	ldd	r24, Z+3	; 0x03
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	8c 93       	st	X, r24
     d20:	13 97       	sbiw	r26, 0x03	; 3
     d22:	84 81       	ldd	r24, Z+4	; 0x04
     d24:	14 96       	adiw	r26, 0x04	; 4
     d26:	8c 93       	st	X, r24
     d28:	14 97       	sbiw	r26, 0x04	; 4
     d2a:	85 81       	ldd	r24, Z+5	; 0x05
     d2c:	15 96       	adiw	r26, 0x05	; 5
     d2e:	8c 93       	st	X, r24
     d30:	15 97       	sbiw	r26, 0x05	; 5
     d32:	86 81       	ldd	r24, Z+6	; 0x06
     d34:	16 96       	adiw	r26, 0x06	; 6
     d36:	8c 93       	st	X, r24
     d38:	16 97       	sbiw	r26, 0x06	; 6
     d3a:	87 81       	ldd	r24, Z+7	; 0x07
     d3c:	17 96       	adiw	r26, 0x07	; 7
     d3e:	8c 93       	st	X, r24
     d40:	e8 c0       	rjmp	.+464    	; 0xf12 <__vector_34+0x46c>
				links[sAdcCnt].setLevel((uint8_t)result);
		}

	}
	else if (sAdcCnt < 4)
		sysState.linksMask &= ~(0x11 << sAdcCnt); //Clear 'valid' and 'non-zero' bits
     d42:	ef e0       	ldi	r30, 0x0F	; 15
     d44:	f1 e2       	ldi	r31, 0x21	; 33
     d46:	81 e1       	ldi	r24, 0x11	; 17
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	02 2e       	mov	r0, r18
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <__vector_34+0x2ac>
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	0a 94       	dec	r0
     d54:	e2 f7       	brpl	.-8      	; 0xd4e <__vector_34+0x2a8>
     d56:	80 95       	com	r24
     d58:	95 89       	ldd	r25, Z+21	; 0x15
     d5a:	89 23       	and	r24, r25
     d5c:	85 8b       	std	Z+21, r24	; 0x15
     d5e:	d9 c0       	rjmp	.+434    	; 0xf12 <__vector_34+0x46c>
	else //sAdcCnt == 4: MSEN channel
		msenCh.setLevel((uint8_t)(result >> 6));
     d60:	08 2e       	mov	r0, r24
     d62:	89 2f       	mov	r24, r25
     d64:	00 0c       	add	r0, r0
     d66:	88 1f       	adc	r24, r24
     d68:	99 0b       	sbc	r25, r25
     d6a:	00 0c       	add	r0, r0
     d6c:	88 1f       	adc	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	38 2f       	mov	r19, r24
		_onTime = validConf.msenOnTime > 5 ? validConf.msenOnTime : 6;
		_fTime = _onTime + validConf.msenLowTime;
	}
	void setLevel(uint8_t level)
	{
		if (level < MSEN_VALID_MIN || !validConf.msenOnTime || (sysState.linksMask & (0x10 << _linkNum)))
     d72:	84 31       	cpi	r24, 0x14	; 20
     d74:	c0 f0       	brcs	.+48     	; 0xda6 <__vector_34+0x300>
     d76:	40 91 41 21 	lds	r20, 0x2141	; 0x802141 <validConf+0x1a>
     d7a:	44 23       	and	r20, r20
     d7c:	a1 f0       	breq	.+40     	; 0xda6 <__vector_34+0x300>
     d7e:	e0 91 07 20 	lds	r30, 0x2007	; 0x802007 <msenCh+0x2>
     d82:	ae 2f       	mov	r26, r30
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	40 91 24 21 	lds	r20, 0x2124	; 0x802124 <sysState+0x15>
     d8a:	64 2f       	mov	r22, r20
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	40 e1       	ldi	r20, 0x10	; 16
     d90:	50 e0       	ldi	r21, 0x00	; 0
     d92:	0e 2e       	mov	r0, r30
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <__vector_34+0x2f4>
     d96:	44 0f       	add	r20, r20
     d98:	55 1f       	adc	r21, r21
     d9a:	0a 94       	dec	r0
     d9c:	e2 f7       	brpl	.-8      	; 0xd96 <__vector_34+0x2f0>
     d9e:	46 23       	and	r20, r22
     da0:	57 23       	and	r21, r23
     da2:	45 2b       	or	r20, r21
     da4:	29 f0       	breq	.+10     	; 0xdb0 <__vector_34+0x30a>
		{
			_lvl = 0; //MSEN disconnected, disabled (by zero on time) or there is non-zero level from link
     da6:	e5 e0       	ldi	r30, 0x05	; 5
     da8:	f0 e2       	ldi	r31, 0x20	; 32
     daa:	13 82       	std	Z+3, r1	; 0x03
			cntDown = false;
     dac:	10 82       	st	Z, r1
     dae:	b1 c0       	rjmp	.+354    	; 0xf12 <__vector_34+0x46c>
			return;
		}
		if (level > MSEN_SEN1_TRIG && _lvl == MSEN_VALID_MIN) //Off to on transition
     db0:	8a 33       	cpi	r24, 0x3A	; 58
     db2:	08 f4       	brcc	.+2      	; 0xdb6 <__vector_34+0x310>
     db4:	83 c0       	rjmp	.+262    	; 0xebc <__vector_34+0x416>
     db6:	40 91 08 20 	lds	r20, 0x2008	; 0x802008 <msenCh+0x3>
     dba:	44 31       	cpi	r20, 0x14	; 20
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <__vector_34+0x31a>
     dbe:	7e c0       	rjmp	.+252    	; 0xebc <__vector_34+0x416>
		{
			_lvl = level;
     dc0:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <msenCh+0x3>
		}
	}

	void setLevel(uint8_t level, bool direction) //Accepts level in the range 0…255
	{
		_dir = direction;
     dc4:	83 e2       	ldi	r24, 0x23	; 35
     dc6:	8a 9f       	mul	r24, r26
     dc8:	e0 01       	movw	r28, r0
     dca:	8b 9f       	mul	r24, r27
     dcc:	d0 0d       	add	r29, r0
     dce:	11 24       	eor	r1, r1
     dd0:	cd 5e       	subi	r28, 0xED	; 237
     dd2:	df 4d       	sbci	r29, 0xDF	; 223
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	37 34       	cpi	r19, 0x47	; 71
     dd8:	08 f4       	brcc	.+2      	; 0xddc <__vector_34+0x336>
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	88 83       	st	Y, r24
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
     dde:	33 e2       	ldi	r19, 0x23	; 35
     de0:	3a 9f       	mul	r19, r26
     de2:	c0 01       	movw	r24, r0
     de4:	3b 9f       	mul	r19, r27
     de6:	90 0d       	add	r25, r0
     de8:	11 24       	eor	r1, r1
     dea:	8d 5e       	subi	r24, 0xED	; 237
     dec:	9f 4d       	sbci	r25, 0xDF	; 223
     dee:	ec 01       	movw	r28, r24
     df0:	3a 81       	ldd	r19, Y+2	; 0x02
     df2:	c3 2f       	mov	r28, r19
     df4:	d0 e0       	ldi	r29, 0x00	; 0
     df6:	c1 5f       	subi	r28, 0xF1	; 241
     df8:	de 4d       	sbci	r29, 0xDE	; 222
     dfa:	3f ef       	ldi	r19, 0xFF	; 255
     dfc:	39 8b       	std	Y+17, r19	; 0x11
		for (uint8_t i = 0; i < _linkCnt; i++)
     dfe:	ec 01       	movw	r28, r24
     e00:	69 81       	ldd	r22, Y+1	; 0x01
     e02:	66 23       	and	r22, r22
     e04:	69 f1       	breq	.+90     	; 0xe60 <__vector_34+0x3ba>
     e06:	d3 e2       	ldi	r29, 0x23	; 35
     e08:	ed 9f       	mul	r30, r29
     e0a:	f0 01       	movw	r30, r0
     e0c:	11 24       	eor	r1, r1
     e0e:	ea 5e       	subi	r30, 0xEA	; 234
     e10:	ff 4d       	sbci	r31, 0xDF	; 223
     e12:	50 e0       	ldi	r21, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
				_lvl[i] = 0;
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
     e16:	7f ef       	ldi	r23, 0xFF	; 255
     e18:	cf 01       	movw	r24, r30
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     e1a:	40 81       	ld	r20, Z
     e1c:	31 96       	adiw	r30, 0x01	; 1
     e1e:	c4 2f       	mov	r28, r20
     e20:	d0 e0       	ldi	r29, 0x00	; 0
     e22:	cc 0f       	add	r28, r28
     e24:	dd 1f       	adc	r29, r29
     e26:	c4 5a       	subi	r28, 0xA4	; 164
     e28:	de 4d       	sbci	r29, 0xDE	; 222
     e2a:	08 81       	ld	r16, Y
     e2c:	19 81       	ldd	r17, Y+1	; 0x01
     e2e:	ec 01       	movw	r28, r24
     e30:	8b 81       	ldd	r24, Y+3	; 0x03
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	41 e0       	ldi	r20, 0x01	; 1
     e36:	80 17       	cp	r24, r16
     e38:	91 07       	cpc	r25, r17
     e3a:	09 f4       	brne	.+2      	; 0xe3e <__vector_34+0x398>
     e3c:	40 e0       	ldi	r20, 0x00	; 0
     e3e:	54 2b       	or	r21, r20
			if (!level || !_difLvl[i]) //Set zero level directly
     e40:	80 85       	ldd	r24, Z+8	; 0x08
     e42:	81 11       	cpse	r24, r1
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <__vector_34+0x3a4>
				_lvl[i] = 0;
     e46:	12 82       	std	Z+2, r1	; 0x02
     e48:	06 c0       	rjmp	.+12     	; 0xe56 <__vector_34+0x3b0>
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
     e4a:	78 9f       	mul	r23, r24
     e4c:	c0 01       	movw	r24, r0
     e4e:	11 24       	eor	r1, r1
     e50:	85 81       	ldd	r24, Z+5	; 0x05
     e52:	89 0f       	add	r24, r25
     e54:	82 83       	std	Z+2, r24	; 0x02

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		sysState.linkLevels[_linkNum] = level;
		for (uint8_t i = 0; i < _linkCnt; i++)
     e56:	3f 5f       	subi	r19, 0xFF	; 255
     e58:	36 13       	cpse	r19, r22
     e5a:	de cf       	rjmp	.-68     	; 0xe18 <__vector_34+0x372>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     e5c:	51 11       	cpse	r21, r1
     e5e:	29 c0       	rjmp	.+82     	; 0xeb2 <__vector_34+0x40c>
			_tickLastChg = sysState.sysTick;
     e60:	83 e2       	ldi	r24, 0x23	; 35
     e62:	8a 9f       	mul	r24, r26
     e64:	e0 01       	movw	r28, r0
     e66:	8b 9f       	mul	r24, r27
     e68:	d0 0d       	add	r29, r0
     e6a:	11 24       	eor	r1, r1
     e6c:	cd 5e       	subi	r28, 0xED	; 237
     e6e:	df 4d       	sbci	r29, 0xDF	; 223
     e70:	de 01       	movw	r26, r28
     e72:	53 96       	adiw	r26, 0x13	; 19
     e74:	ef e0       	ldi	r30, 0x0F	; 15
     e76:	f1 e2       	ldi	r31, 0x21	; 33
     e78:	80 81       	ld	r24, Z
     e7a:	8b 8b       	std	Y+19, r24	; 0x13
     e7c:	81 81       	ldd	r24, Z+1	; 0x01
     e7e:	11 96       	adiw	r26, 0x01	; 1
     e80:	8c 93       	st	X, r24
     e82:	11 97       	sbiw	r26, 0x01	; 1
     e84:	82 81       	ldd	r24, Z+2	; 0x02
     e86:	12 96       	adiw	r26, 0x02	; 2
     e88:	8c 93       	st	X, r24
     e8a:	12 97       	sbiw	r26, 0x02	; 2
     e8c:	83 81       	ldd	r24, Z+3	; 0x03
     e8e:	13 96       	adiw	r26, 0x03	; 3
     e90:	8c 93       	st	X, r24
     e92:	13 97       	sbiw	r26, 0x03	; 3
     e94:	84 81       	ldd	r24, Z+4	; 0x04
     e96:	14 96       	adiw	r26, 0x04	; 4
     e98:	8c 93       	st	X, r24
     e9a:	14 97       	sbiw	r26, 0x04	; 4
     e9c:	85 81       	ldd	r24, Z+5	; 0x05
     e9e:	15 96       	adiw	r26, 0x05	; 5
     ea0:	8c 93       	st	X, r24
     ea2:	15 97       	sbiw	r26, 0x05	; 5
     ea4:	86 81       	ldd	r24, Z+6	; 0x06
     ea6:	16 96       	adiw	r26, 0x06	; 6
     ea8:	8c 93       	st	X, r24
     eaa:	16 97       	sbiw	r26, 0x06	; 6
     eac:	87 81       	ldd	r24, Z+7	; 0x07
     eae:	17 96       	adiw	r26, 0x07	; 7
     eb0:	8c 93       	st	X, r24
		}
		if (level > MSEN_SEN1_TRIG && _lvl == MSEN_VALID_MIN) //Off to on transition
		{
			_lvl = level;
			links[_linkNum].setLevel(255, level > MSEN_SEN2_TRIG); //Start from max light level
			ltEnt = cntDown = false;
     eb2:	e5 e0       	ldi	r30, 0x05	; 5
     eb4:	f0 e2       	ldi	r31, 0x20	; 32
     eb6:	10 82       	st	Z, r1
     eb8:	11 82       	std	Z+1, r1	; 0x01
     eba:	2b c0       	rjmp	.+86     	; 0xf12 <__vector_34+0x46c>
			return;
		}
		if (level < MSEN_SEN1_TRIG && _lvl > level) //On to off transition
     ebc:	39 33       	cpi	r19, 0x39	; 57
     ebe:	48 f5       	brcc	.+82     	; 0xf12 <__vector_34+0x46c>
     ec0:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <msenCh+0x3>
     ec4:	38 17       	cp	r19, r24
     ec6:	28 f5       	brcc	.+74     	; 0xf12 <__vector_34+0x46c>
		{
			_lvl = MSEN_VALID_MIN;
     ec8:	e5 e0       	ldi	r30, 0x05	; 5
     eca:	f0 e2       	ldi	r31, 0x20	; 32
     ecc:	84 e1       	ldi	r24, 0x14	; 20
     ece:	83 83       	std	Z+3, r24	; 0x03
			_onTimeStamp = sysState.sysTick;
     ed0:	af e0       	ldi	r26, 0x0F	; 15
     ed2:	b1 e2       	ldi	r27, 0x21	; 33
     ed4:	8c 91       	ld	r24, X
     ed6:	86 83       	std	Z+6, r24	; 0x06
     ed8:	11 96       	adiw	r26, 0x01	; 1
     eda:	8c 91       	ld	r24, X
     edc:	11 97       	sbiw	r26, 0x01	; 1
     ede:	87 83       	std	Z+7, r24	; 0x07
     ee0:	12 96       	adiw	r26, 0x02	; 2
     ee2:	8c 91       	ld	r24, X
     ee4:	12 97       	sbiw	r26, 0x02	; 2
     ee6:	80 87       	std	Z+8, r24	; 0x08
     ee8:	13 96       	adiw	r26, 0x03	; 3
     eea:	8c 91       	ld	r24, X
     eec:	13 97       	sbiw	r26, 0x03	; 3
     eee:	81 87       	std	Z+9, r24	; 0x09
     ef0:	14 96       	adiw	r26, 0x04	; 4
     ef2:	8c 91       	ld	r24, X
     ef4:	14 97       	sbiw	r26, 0x04	; 4
     ef6:	82 87       	std	Z+10, r24	; 0x0a
     ef8:	15 96       	adiw	r26, 0x05	; 5
     efa:	8c 91       	ld	r24, X
     efc:	15 97       	sbiw	r26, 0x05	; 5
     efe:	83 87       	std	Z+11, r24	; 0x0b
     f00:	16 96       	adiw	r26, 0x06	; 6
     f02:	8c 91       	ld	r24, X
     f04:	16 97       	sbiw	r26, 0x06	; 6
     f06:	84 87       	std	Z+12, r24	; 0x0c
     f08:	17 96       	adiw	r26, 0x07	; 7
     f0a:	8c 91       	ld	r24, X
     f0c:	85 87       	std	Z+13, r24	; 0x0d
			cntDown = true;
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	80 83       	st	Z, r24
	else if (sAdcCnt < 4)
		sysState.linksMask &= ~(0x11 << sAdcCnt); //Clear 'valid' and 'non-zero' bits
	else //sAdcCnt == 4: MSEN channel
		msenCh.setLevel((uint8_t)(result >> 6));

	sAdcCnt++;
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	82 0f       	add	r24, r18
     f16:	80 93 03 20 	sts	0x2003, r24	; 0x802003 <_ZZ11__vector_34E7sAdcCnt>
	ADCA.CH0.MUXCTRL = (sAdcCnt + 1) << ADC_CH_MUXPOS_gp;
     f1a:	2e 5f       	subi	r18, 0xFE	; 254
     f1c:	22 0f       	add	r18, r18
     f1e:	22 0f       	add	r18, r18
     f20:	22 0f       	add	r18, r18
     f22:	20 93 21 02 	sts	0x0221, r18	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
	if (sAdcCnt < 5)
     f26:	85 30       	cpi	r24, 0x05	; 5
     f28:	30 f4       	brcc	.+12     	; 0xf36 <__vector_34+0x490>
		ADCA.CTRLA |= ADC_START_bm;
     f2a:	e0 e0       	ldi	r30, 0x00	; 0
     f2c:	f2 e0       	ldi	r31, 0x02	; 2
     f2e:	80 81       	ld	r24, Z
     f30:	84 60       	ori	r24, 0x04	; 4
     f32:	80 83       	st	Z, r24
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <__vector_34+0x494>
	else
		sAdcCnt = 0;
     f36:	10 92 03 20 	sts	0x2003, r1	; 0x802003 <_ZZ11__vector_34E7sAdcCnt>
}
     f3a:	ff 91       	pop	r31
     f3c:	ef 91       	pop	r30
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	bf 91       	pop	r27
     f44:	af 91       	pop	r26
     f46:	9f 91       	pop	r25
     f48:	8f 91       	pop	r24
     f4a:	7f 91       	pop	r23
     f4c:	6f 91       	pop	r22
     f4e:	5f 91       	pop	r21
     f50:	4f 91       	pop	r20
     f52:	3f 91       	pop	r19
     f54:	2f 91       	pop	r18
     f56:	1f 91       	pop	r17
     f58:	0f 91       	pop	r16
     f5a:	ff 90       	pop	r15
     f5c:	ef 90       	pop	r14
     f5e:	df 90       	pop	r13
     f60:	bf 90       	pop	r11
     f62:	af 90       	pop	r10
     f64:	0f 90       	pop	r0
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	0f 90       	pop	r0
     f6a:	1f 90       	pop	r1
     f6c:	18 95       	reti

00000f6e <__vector_23>:

ISR(USARTC0_RXC_vect) //Data received from RS485
{
     f6e:	1f 92       	push	r1
     f70:	0f 92       	push	r0
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	0f 92       	push	r0
     f76:	11 24       	eor	r1, r1
     f78:	2f 93       	push	r18
     f7a:	3f 93       	push	r19
     f7c:	4f 93       	push	r20
     f7e:	5f 93       	push	r21
     f80:	6f 93       	push	r22
     f82:	7f 93       	push	r23
     f84:	8f 93       	push	r24
     f86:	9f 93       	push	r25
     f88:	af 93       	push	r26
     f8a:	bf 93       	push	r27
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
     f90:	ef 93       	push	r30
     f92:	ff 93       	push	r31
	static uint8_t uCnt;
	static uint8_t *rxBuf;
	uint8_t data = USARTC0.DATA;
     f94:	e0 ec       	ldi	r30, 0xC0	; 192
     f96:	f8 e0       	ldi	r31, 0x08	; 8
     f98:	80 81       	ld	r24, Z
	if (USARTC0.CTRLB & USART_MPCM_bm) //Address listening mode
     f9a:	93 81       	ldd	r25, Z+3	; 0x03
     f9c:	91 ff       	sbrs	r25, 1
     f9e:	6e c0       	rjmp	.+220    	; 0x107c <__vector_23+0x10e>
	{
		if (CmdLC <= data && data <= CmdUC)
     fa0:	9f ed       	ldi	r25, 0xDF	; 223
     fa2:	98 0f       	add	r25, r24
     fa4:	94 30       	cpi	r25, 0x04	; 4
     fa6:	08 f0       	brcs	.+2      	; 0xfaa <__vector_23+0x3c>
     fa8:	66 c0       	rjmp	.+204    	; 0x1076 <__vector_23+0x108>
		{
			USARTC0.CTRLB &= ~USART_MPCM_bm; //Clear MPCM bit
     faa:	93 81       	ldd	r25, Z+3	; 0x03
     fac:	9d 7f       	andi	r25, 0xFD	; 253
     fae:	93 83       	std	Z+3, r25	; 0x03
			rxMode = data;
     fb0:	80 93 5a 21 	sts	0x215A, r24	; 0x80215a <rxMode>
			if (data == SetConfig)
     fb4:	83 32       	cpi	r24, 0x23	; 35
     fb6:	51 f4       	brne	.+20     	; 0xfcc <__vector_23+0x5e>
			{
				uCnt = sizeof(systemConfig); //Bytes to receive
     fb8:	81 e2       	ldi	r24, 0x21	; 33
     fba:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <_ZZ11__vector_23E4uCnt>
				rxBuf = iobuf; //First byte address in structure
     fbe:	8f e9       	ldi	r24, 0x9F	; 159
     fc0:	90 e2       	ldi	r25, 0x20	; 32
     fc2:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <_edata>
     fc6:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <_edata+0x1>
     fca:	84 c0       	rjmp	.+264    	; 0x10d4 <__vector_23+0x166>
0, 30, 96,	//Motion sensor on time, low time, low level
0, 0, 0};	//ninthLvl, rtcCorrect, CRC16

void inline UCTXen()
{
	PORTC.OUTSET = (1 << PIN1_bm);
     fcc:	84 e0       	ldi	r24, 0x04	; 4
     fce:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fd2:	85 e1       	ldi	r24, 0x15	; 21
     fd4:	8a 95       	dec	r24
     fd6:	f1 f7       	brne	.-4      	; 0xfd4 <__vector_23+0x66>
     fd8:	00 00       	nop
				rxBuf = iobuf; //First byte address in structure
			}
			else //Data transmit request
			{
				UCTXen();
				if (rxMode == GetConfig)
     fda:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <rxMode>
     fde:	82 32       	cpi	r24, 0x22	; 34
     fe0:	59 f4       	brne	.+22     	; 0xff8 <__vector_23+0x8a>
				{
					EDMA.CH1.TRFCNT = sizeof(systemConfig);
     fe2:	e0 e0       	ldi	r30, 0x00	; 0
     fe4:	f1 e0       	ldi	r31, 0x01	; 1
     fe6:	81 e2       	ldi	r24, 0x21	; 33
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	86 a3       	std	Z+38, r24	; 0x26
     fec:	97 a3       	std	Z+39, r25	; 0x27
					EDMA.CH1.ADDR = (uint16_t)&validConf;
     fee:	87 e2       	ldi	r24, 0x27	; 39
     ff0:	91 e2       	ldi	r25, 0x21	; 33
     ff2:	80 a7       	std	Z+40, r24	; 0x28
     ff4:	91 a7       	std	Z+41, r25	; 0x29
     ff6:	39 c0       	rjmp	.+114    	; 0x106a <__vector_23+0xfc>
				}
				else if (rxMode == GetStatus) //Get state
     ff8:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <rxMode>
     ffc:	81 32       	cpi	r24, 0x21	; 33
     ffe:	c9 f4       	brne	.+50     	; 0x1032 <__vector_23+0xc4>
				{
					memcpy(iobuf, &sysState, sizeof(systemState));
    1000:	cf e9       	ldi	r28, 0x9F	; 159
    1002:	d0 e2       	ldi	r29, 0x20	; 32
    1004:	88 e1       	ldi	r24, 0x18	; 24
    1006:	ef e0       	ldi	r30, 0x0F	; 15
    1008:	f1 e2       	ldi	r31, 0x21	; 33
    100a:	de 01       	movw	r26, r28
    100c:	01 90       	ld	r0, Z+
    100e:	0d 92       	st	X+, r0
    1010:	8a 95       	dec	r24
    1012:	e1 f7       	brne	.-8      	; 0x100c <__vector_23+0x9e>
					((systemState*)iobuf)->CRC16 = CalculateCRC16(iobuf, sizeof(systemState) - 2);
    1014:	66 e1       	ldi	r22, 0x16	; 22
    1016:	ce 01       	movw	r24, r28
    1018:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pvh>
    101c:	8e 8b       	std	Y+22, r24	; 0x16
    101e:	9f 8b       	std	Y+23, r25	; 0x17
					EDMA.CH1.TRFCNT = sizeof(systemState);
    1020:	e0 e0       	ldi	r30, 0x00	; 0
    1022:	f1 e0       	ldi	r31, 0x01	; 1
    1024:	88 e1       	ldi	r24, 0x18	; 24
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	86 a3       	std	Z+38, r24	; 0x26
    102a:	97 a3       	std	Z+39, r25	; 0x27
					EDMA.CH1.ADDR = (uint16_t)iobuf;
    102c:	c0 a7       	std	Z+40, r28	; 0x28
    102e:	d1 a7       	std	Z+41, r29	; 0x29
    1030:	1c c0       	rjmp	.+56     	; 0x106a <__vector_23+0xfc>
				}
				else //Get on time
				{
					memcpy(iobuf, &channelOT, sizeof(channelsOnTime));
    1032:	88 e3       	ldi	r24, 0x38	; 56
    1034:	e7 ed       	ldi	r30, 0xD7	; 215
    1036:	f0 e2       	ldi	r31, 0x20	; 32
    1038:	af e9       	ldi	r26, 0x9F	; 159
    103a:	b0 e2       	ldi	r27, 0x20	; 32
    103c:	01 90       	ld	r0, Z+
    103e:	0d 92       	st	X+, r0
    1040:	8a 95       	dec	r24
    1042:	e1 f7       	brne	.-8      	; 0x103c <__vector_23+0xce>
					((channelsOnTime*)iobuf)->CRC16 = CalculateCRC16(iobuf, sizeof(channelsOnTime) - 2);
    1044:	66 e3       	ldi	r22, 0x36	; 54
    1046:	8f e9       	ldi	r24, 0x9F	; 159
    1048:	90 e2       	ldi	r25, 0x20	; 32
    104a:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pvh>
    104e:	af e9       	ldi	r26, 0x9F	; 159
    1050:	b0 e2       	ldi	r27, 0x20	; 32
    1052:	d6 96       	adiw	r26, 0x36	; 54
    1054:	8d 93       	st	X+, r24
    1056:	9c 93       	st	X, r25
    1058:	d7 97       	sbiw	r26, 0x37	; 55
					EDMA.CH1.TRFCNT = sizeof(channelsOnTime);
    105a:	e0 e0       	ldi	r30, 0x00	; 0
    105c:	f1 e0       	ldi	r31, 0x01	; 1
    105e:	88 e3       	ldi	r24, 0x38	; 56
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	86 a3       	std	Z+38, r24	; 0x26
    1064:	97 a3       	std	Z+39, r25	; 0x27
					EDMA.CH1.ADDR = (uint16_t)iobuf;
    1066:	a0 a7       	std	Z+40, r26	; 0x28
    1068:	b1 a7       	std	Z+41, r27	; 0x29
				}
				EDMA.CH1.CTRLA |= EDMA_CH_ENABLE_bm;
    106a:	e0 e0       	ldi	r30, 0x00	; 0
    106c:	f1 e0       	ldi	r31, 0x01	; 1
    106e:	80 a1       	ldd	r24, Z+32	; 0x20
    1070:	80 68       	ori	r24, 0x80	; 128
    1072:	80 a3       	std	Z+32, r24	; 0x20
    1074:	2f c0       	rjmp	.+94     	; 0x10d4 <__vector_23+0x166>
			}
		}
		else
			rxMode = 0;
    1076:	10 92 5a 21 	sts	0x215A, r1	; 0x80215a <rxMode>
    107a:	2c c0       	rjmp	.+88     	; 0x10d4 <__vector_23+0x166>
	}
	else if (rxMode == SetConfig)
    107c:	90 91 5a 21 	lds	r25, 0x215A	; 0x80215a <rxMode>
    1080:	93 32       	cpi	r25, 0x23	; 35
    1082:	41 f5       	brne	.+80     	; 0x10d4 <__vector_23+0x166>
	{
		*rxBuf++ = data;
    1084:	e0 91 00 20 	lds	r30, 0x2000	; 0x802000 <_edata>
    1088:	f0 91 01 20 	lds	r31, 0x2001	; 0x802001 <_edata+0x1>
    108c:	9f 01       	movw	r18, r30
    108e:	2f 5f       	subi	r18, 0xFF	; 255
    1090:	3f 4f       	sbci	r19, 0xFF	; 255
    1092:	20 93 00 20 	sts	0x2000, r18	; 0x802000 <_edata>
    1096:	30 93 01 20 	sts	0x2001, r19	; 0x802001 <_edata+0x1>
    109a:	80 83       	st	Z, r24
		if (--uCnt == 0) //Packet received
    109c:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <_ZZ11__vector_23E4uCnt>
    10a0:	81 50       	subi	r24, 0x01	; 1
    10a2:	80 93 02 20 	sts	0x2002, r24	; 0x802002 <_ZZ11__vector_23E4uCnt>
    10a6:	81 11       	cpse	r24, r1
    10a8:	15 c0       	rjmp	.+42     	; 0x10d4 <__vector_23+0x166>
		{
			rxMode = 0;
    10aa:	10 92 5a 21 	sts	0x215A, r1	; 0x80215a <rxMode>
			USARTC0.CTRLB |= USART_MPCM_bm; //Set MPCM bit
    10ae:	e0 ec       	ldi	r30, 0xC0	; 192
    10b0:	f8 e0       	ldi	r31, 0x08	; 8
    10b2:	83 81       	ldd	r24, Z+3	; 0x03
    10b4:	82 60       	ori	r24, 0x02	; 2
    10b6:	83 83       	std	Z+3, r24	; 0x03
			if (CalculateCRC16(iobuf, sizeof(systemConfig) - 2) == ((systemConfig*)iobuf)->CRC16)
    10b8:	6f e1       	ldi	r22, 0x1F	; 31
    10ba:	8f e9       	ldi	r24, 0x9F	; 159
    10bc:	90 e2       	ldi	r25, 0x20	; 32
    10be:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pvh>
    10c2:	20 91 be 20 	lds	r18, 0x20BE	; 0x8020be <iobuf+0x1f>
    10c6:	30 91 bf 20 	lds	r19, 0x20BF	; 0x8020bf <iobuf+0x20>
    10ca:	82 17       	cp	r24, r18
    10cc:	93 07       	cpc	r25, r19
    10ce:	11 f4       	brne	.+4      	; 0x10d4 <__vector_23+0x166>
				ApplyConfig();
    10d0:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z11ApplyConfigv>
		}
	}
}
    10d4:	ff 91       	pop	r31
    10d6:	ef 91       	pop	r30
    10d8:	df 91       	pop	r29
    10da:	cf 91       	pop	r28
    10dc:	bf 91       	pop	r27
    10de:	af 91       	pop	r26
    10e0:	9f 91       	pop	r25
    10e2:	8f 91       	pop	r24
    10e4:	7f 91       	pop	r23
    10e6:	6f 91       	pop	r22
    10e8:	5f 91       	pop	r21
    10ea:	4f 91       	pop	r20
    10ec:	3f 91       	pop	r19
    10ee:	2f 91       	pop	r18
    10f0:	0f 90       	pop	r0
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	0f 90       	pop	r0
    10f6:	1f 90       	pop	r1
    10f8:	18 95       	reti

000010fa <__vector_4>:

ISR(EDMA_CH1_vect) //Packet has been sent completely over RS485
{
    10fa:	1f 92       	push	r1
    10fc:	0f 92       	push	r0
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	0f 92       	push	r0
    1102:	11 24       	eor	r1, r1
    1104:	8f 93       	push	r24
    1106:	ef 93       	push	r30
    1108:	ff 93       	push	r31
	UCRXen(); //Set bus in the idle state
    110a:	84 e0       	ldi	r24, 0x04	; 4
    110c:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	rxMode = 0;
    1110:	10 92 5a 21 	sts	0x215A, r1	; 0x80215a <rxMode>
	EDMA.CH1.CTRLB |= EDMA_CH_TRNIF_bm;
    1114:	e0 e0       	ldi	r30, 0x00	; 0
    1116:	f1 e0       	ldi	r31, 0x01	; 1
    1118:	81 a1       	ldd	r24, Z+33	; 0x21
    111a:	80 61       	ori	r24, 0x10	; 16
    111c:	81 a3       	std	Z+33, r24	; 0x21
}
    111e:	ff 91       	pop	r31
    1120:	ef 91       	pop	r30
    1122:	8f 91       	pop	r24
    1124:	0f 90       	pop	r0
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	0f 90       	pop	r0
    112a:	1f 90       	pop	r1
    112c:	18 95       	reti

0000112e <__vector_5>:

ISR(EDMA_CH2_vect)
{
    112e:	1f 92       	push	r1
    1130:	0f 92       	push	r0
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	0f 92       	push	r0
    1136:	11 24       	eor	r1, r1
    1138:	8f 93       	push	r24
    113a:	ef 93       	push	r30
    113c:	ff 93       	push	r31
	PORTC.OUTCLR = PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
    113e:	80 ef       	ldi	r24, 0xF0	; 240
    1140:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	TCD5.CTRLGSET = TC5_STOP_bm;
    1144:	80 e2       	ldi	r24, 0x20	; 32
    1146:	80 93 49 09 	sts	0x0949, r24	; 0x800949 <__TEXT_REGION_LENGTH__+0x700949>
	EDMA.CH2.CTRLB |= EDMA_CH_TRNIF_bm;
    114a:	e0 e0       	ldi	r30, 0x00	; 0
    114c:	f1 e0       	ldi	r31, 0x01	; 1
    114e:	81 a9       	ldd	r24, Z+49	; 0x31
    1150:	80 61       	ori	r24, 0x10	; 16
    1152:	81 ab       	std	Z+49, r24	; 0x31
}
    1154:	ff 91       	pop	r31
    1156:	ef 91       	pop	r30
    1158:	8f 91       	pop	r24
    115a:	0f 90       	pop	r0
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	0f 90       	pop	r0
    1160:	1f 90       	pop	r1
    1162:	18 95       	reti

00001164 <_Z7mcuInitv>:

inline void mcuInit()
{
	//Port A configuration: 0-5 analog inputs, 7 inverted output
	PORTA.DIRSET = PIN7_bm;
    1164:	e0 e0       	ldi	r30, 0x00	; 0
    1166:	f6 e0       	ldi	r31, 0x06	; 6
    1168:	80 e8       	ldi	r24, 0x80	; 128
    116a:	81 83       	std	Z+1, r24	; 0x01
	PORTCFG.MPCMASK = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm;
    116c:	a0 eb       	ldi	r26, 0xB0	; 176
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	8f e3       	ldi	r24, 0x3F	; 63
    1172:	8c 93       	st	X, r24
	PORTA.PIN0CTRL = PORT_OPC_TOTEM_gc | PORT_ISC_INPUT_DISABLE_gc;
    1174:	87 e0       	ldi	r24, 0x07	; 7
    1176:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN7CTRL = PORT_OPC_TOTEM_gc | PORT_INVEN_bm;
    1178:	80 e4       	ldi	r24, 0x40	; 64
    117a:	87 8b       	std	Z+23, r24	; 0x17
	//Port C configuration: 0-1, 3-7 outputs
	PORTC.DIRSET = PIN0_bm | PIN1_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
    117c:	9b ef       	ldi	r25, 0xFB	; 251
    117e:	90 93 41 06 	sts	0x0641, r25	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
	//Port D configuration: 0-7 inverted outputs
	PORTD.DIRSET = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
    1182:	e0 e6       	ldi	r30, 0x60	; 96
    1184:	f6 e0       	ldi	r31, 0x06	; 6
    1186:	9f ef       	ldi	r25, 0xFF	; 255
    1188:	91 83       	std	Z+1, r25	; 0x01
	PORTCFG.MPCMASK = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
    118a:	9c 93       	st	X, r25
	PORTD.PIN0CTRL = PORT_OPC_TOTEM_gc | PORT_INVEN_bm;
    118c:	80 8b       	std	Z+16, r24	; 0x10
	//Clock configuration: 32MHz RC with DFLL from XOSC 32768Hz
	OSC.XOSCCTRL = OSC_XOSCSEL_32KHz_gc;
    118e:	e0 e5       	ldi	r30, 0x50	; 80
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	82 e0       	ldi	r24, 0x02	; 2
    1194:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |= OSC_RC32MEN_bm | OSC_XOSCEN_bm;
    1196:	80 81       	ld	r24, Z
    1198:	8a 60       	ori	r24, 0x0A	; 10
    119a:	80 83       	st	Z, r24
	while (!(OSC.STATUS & OSC_XOSCRDY_bm));
    119c:	81 81       	ldd	r24, Z+1	; 0x01
    119e:	83 ff       	sbrs	r24, 3
    11a0:	fd cf       	rjmp	.-6      	; 0x119c <_Z7mcuInitv+0x38>
	while (!(OSC.STATUS & OSC_RC32MRDY_bm));
    11a2:	e0 e5       	ldi	r30, 0x50	; 80
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	81 81       	ldd	r24, Z+1	; 0x01
    11a8:	81 ff       	sbrs	r24, 1
    11aa:	fd cf       	rjmp	.-6      	; 0x11a6 <_Z7mcuInitv+0x42>
	OSC.DFLLCTRL = OSC_RC32MCREF_XOSC32K_gc;
    11ac:	a0 e5       	ldi	r26, 0x50	; 80
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	82 e0       	ldi	r24, 0x02	; 2
    11b2:	16 96       	adiw	r26, 0x06	; 6
    11b4:	8c 93       	st	X, r24
    11b6:	16 97       	sbiw	r26, 0x06	; 6
	DFLLRC32M.CTRL = DFLL_ENABLE_bm;
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
	CCP = CCP_IOREG_gc;
    11be:	98 ed       	ldi	r25, 0xD8	; 216
    11c0:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
    11c2:	e0 e4       	ldi	r30, 0x40	; 64
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 83       	st	Z, r24
	OSC.CTRL = OSC_RC32MEN_bm | OSC_XOSCEN_bm; //Disable unused clock sources
    11c8:	8a e0       	ldi	r24, 0x0A	; 10
    11ca:	8c 93       	st	X, r24
	CLK.RTCCTRL = CLK_RTCSRC_TOSC_gc | CLK_RTCEN_bm; //1024Hz RTC clock source
    11cc:	83 e0       	ldi	r24, 0x03	; 3
    11ce:	83 83       	std	Z+3, r24	; 0x03
	while (RTC.STATUS & RTC_SYNCBUSY_bm);
    11d0:	e0 e0       	ldi	r30, 0x00	; 0
    11d2:	f4 e0       	ldi	r31, 0x04	; 4
    11d4:	81 81       	ldd	r24, Z+1	; 0x01
    11d6:	80 fd       	sbrc	r24, 0
    11d8:	fd cf       	rjmp	.-6      	; 0x11d4 <_Z7mcuInitv+0x70>
	CCP = CCP_IOREG_gc;
    11da:	58 ed       	ldi	r21, 0xD8	; 216
    11dc:	54 bf       	out	0x34, r21	; 52
	CLK.LOCK = CLK_LOCK_bm; //Disable further changes in clock system
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	80 93 42 00 	sts	0x0042, r24	; 0x800042 <__TEXT_REGION_LENGTH__+0x700042>
	//PMIC: enable interrupts
	PMIC.CTRL = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
    11e4:	47 e0       	ldi	r20, 0x07	; 7
    11e6:	40 93 a2 00 	sts	0x00A2, r20	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	//RTC configuration: 1024 / 2 = 512Hz clock, medium level interrupt
	RTC.PER = 16; //32 overflows per second
    11ea:	e0 e0       	ldi	r30, 0x00	; 0
    11ec:	f4 e0       	ldi	r31, 0x04	; 4
    11ee:	20 e1       	ldi	r18, 0x10	; 16
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	22 87       	std	Z+10, r18	; 0x0a
    11f4:	33 87       	std	Z+11, r19	; 0x0b
	RTC.INTCTRL = RTC_OVFINTLVL_MED_gc;
    11f6:	92 e0       	ldi	r25, 0x02	; 2
    11f8:	92 83       	std	Z+2, r25	; 0x02
	RTC.CTRL = RTC_PRESCALER_DIV2_gc;
    11fa:	90 83       	st	Z, r25
	RTC.CNT = 0;
    11fc:	10 86       	std	Z+8, r1	; 0x08
    11fe:	11 86       	std	Z+9, r1	; 0x09
	//USARTC configuration: start / 9 data / 2 stop; 76.8kbps baud, multi-processor communication
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm | USART_MPCM_bm;
    1200:	e0 ec       	ldi	r30, 0xC0	; 192
    1202:	f8 e0       	ldi	r31, 0x08	; 8
    1204:	2a e1       	ldi	r18, 0x1A	; 26
    1206:	23 83       	std	Z+3, r18	; 0x03
	USARTC0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_SBMODE_bm | USART_CHSIZE_9BIT_gc;
    1208:	2f e0       	ldi	r18, 0x0F	; 15
    120a:	24 83       	std	Z+4, r18	; 0x04
	USARTC0.BAUDCTRLA = 12;
    120c:	2c e0       	ldi	r18, 0x0C	; 12
    120e:	26 83       	std	Z+6, r18	; 0x06
	USARTC0.BAUDCTRLB = 1 << USART_BSCALE_gp;
    1210:	60 e1       	ldi	r22, 0x10	; 16
    1212:	67 83       	std	Z+7, r22	; 0x07
	USARTC0.CTRLA = USART_DRIE_bm | USART_RXCINTLVL_HI_gc;
    1214:	20 e7       	ldi	r18, 0x70	; 112
    1216:	22 83       	std	Z+2, r18	; 0x02
	//ADC configuration: 1MHz, 15bit oversampling
	ADCA.CTRLA = ADC_ENABLE_bm;
    1218:	e0 e0       	ldi	r30, 0x00	; 0
    121a:	f2 e0       	ldi	r31, 0x02	; 2
    121c:	80 83       	st	Z, r24
	ADCA.CTRLB = ADC_CONMODE_bm | ADC_RESOLUTION_MT12BIT_gc; //Signed mode
    121e:	22 e1       	ldi	r18, 0x12	; 18
    1220:	21 83       	std	Z+1, r18	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;
    1222:	30 e2       	ldi	r19, 0x20	; 32
    1224:	32 83       	std	Z+2, r19	; 0x02
	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc;
    1226:	23 e0       	ldi	r18, 0x03	; 3
    1228:	24 83       	std	Z+4, r18	; 0x04
	ADCA.SAMPCTRL = 7 << ADC_SAMPVAL_gp;
    122a:	40 87       	std	Z+8, r20	; 0x08
	ADCA.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc | ADC_CH_GAIN_1X_gc;
    122c:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.CH0.INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc;
    122e:	82 a3       	std	Z+34, r24	; 0x22
	ADCA.CH0.AVGCTRL = ADC_CH_SAMPNUM_16X_gc; //This will produce 15 bit result
    1230:	44 e0       	ldi	r20, 0x04	; 4
    1232:	44 a7       	std	Z+44, r20	; 0x2c
	//TCC4 configuration: 8MHz, dual slope 244Hz (heartbeat LED)
	TCC4.CTRLA = TC_CLKSEL_DIV4_gc;
    1234:	e0 e0       	ldi	r30, 0x00	; 0
    1236:	f8 e0       	ldi	r31, 0x08	; 8
    1238:	20 83       	st	Z, r18
	TCC4.CTRLB = TC_BYTEM_NORMAL_gc | TC_CIRCEN_DISABLE_gc | TC_WGMODE_DSTOP_gc;
    123a:	75 e0       	ldi	r23, 0x05	; 5
    123c:	71 83       	std	Z+1, r23	; 0x01
	TCC4.CTRLC = TC4_POLA_bm;
    123e:	62 83       	std	Z+2, r22	; 0x02
	TCC4.CTRLE = TC_CCAMODE_COMP_gc;
    1240:	84 83       	std	Z+4, r24	; 0x04
	TCC4.PERBUF = 16384;
    1242:	60 e0       	ldi	r22, 0x00	; 0
    1244:	70 e4       	ldi	r23, 0x40	; 64
    1246:	66 ab       	std	Z+54, r22	; 0x36
    1248:	77 ab       	std	Z+55, r23	; 0x37
	TCC4.CCABUF = 0;
    124a:	10 ae       	std	Z+56, r1	; 0x38
    124c:	11 ae       	std	Z+57, r1	; 0x39
	TCC4.CTRLGCLR = TC4_STOP_bm;
    124e:	30 87       	std	Z+8, r19	; 0x08
	//TCD5 configuration: 125kHz, 1202Hz overflow rate
	TCD5.CTRLA = TC_CLKSEL_DIV256_gc;
    1250:	e0 e4       	ldi	r30, 0x40	; 64
    1252:	f9 e0       	ldi	r31, 0x09	; 9
    1254:	66 e0       	ldi	r22, 0x06	; 6
    1256:	60 83       	st	Z, r22
	TCD5.CTRLB = TC_WGMODE_NORMAL_gc;
    1258:	11 82       	std	Z+1, r1	; 0x01
	TCD5.PERBUF = 104;
    125a:	68 e6       	ldi	r22, 0x68	; 104
    125c:	70 e0       	ldi	r23, 0x00	; 0
    125e:	66 ab       	std	Z+54, r22	; 0x36
    1260:	77 ab       	std	Z+55, r23	; 0x37
	TCD5.CTRLGCLR = TC5_STOP_bm;
    1262:	30 87       	std	Z+8, r19	; 0x08
	EVSYS.CH2MUX = EVSYS_CHMUX_TCD5_OVF_gc;
    1264:	50 93 82 01 	sts	0x0182, r21	; 0x800182 <__TEXT_REGION_LENGTH__+0x700182>
	//EDMA peripheral channel 1: USARTC write transfer
	EDMA.CH1.CTRLB = EDMA_CH_TRNINTLVL_MED_gc; //Medium-level interrupt
    1268:	e0 e0       	ldi	r30, 0x00	; 0
    126a:	f1 e0       	ldi	r31, 0x01	; 1
    126c:	91 a3       	std	Z+33, r25	; 0x21
	EDMA.CH1.ADDRCTRL = EDMA_CH_RELOAD_BLOCK_gc | EDMA_CH_DIR_INC_gc;
    126e:	91 e1       	ldi	r25, 0x11	; 17
    1270:	92 a3       	std	Z+34, r25	; 0x22
	EDMA.CH1.TRIGSRC = EDMA_CH_TRIGSRC_USARTC0_DRE_gc;
    1272:	3d e4       	ldi	r19, 0x4D	; 77
    1274:	34 a3       	std	Z+36, r19	; 0x24
	//EDMA standard channel 2: PORTD.OUT transfer
	EDMA.CH2.ADDRCTRL = EDMA_CH_RELOAD_BLOCK_gc | EDMA_CH_DIR_INC_gc;
    1276:	92 ab       	std	Z+50, r25	; 0x32
	EDMA.CH2.DESTADDRCTRL = EDMA_CH_RELOAD_NONE_gc | EDMA_CH_DESTDIR_FIXED_gc;
    1278:	13 aa       	std	Z+51, r1	; 0x33
	EDMA.CH2.TRIGSRC = EDMA_CH_TRIGSRC_EVSYS_CH2_gc;
    127a:	24 ab       	std	Z+52, r18	; 0x34
	EDMA.CH2.TRFCNT = sizeof(DSI8xFrames);
    127c:	22 e1       	ldi	r18, 0x12	; 18
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	26 ab       	std	Z+54, r18	; 0x36
    1282:	37 ab       	std	Z+55, r19	; 0x37
	EDMA.CH2.ADDR = (uint16_t)DSI8xFrames;
    1284:	28 e4       	ldi	r18, 0x48	; 72
    1286:	31 e2       	ldi	r19, 0x21	; 33
    1288:	20 af       	std	Z+56, r18	; 0x38
    128a:	31 af       	std	Z+57, r19	; 0x39
	EDMA.CH2.DESTADDR = (uint16_t)&(PORTD.OUT);
    128c:	24 e6       	ldi	r18, 0x64	; 100
    128e:	36 e0       	ldi	r19, 0x06	; 6
    1290:	24 af       	std	Z+60, r18	; 0x3c
    1292:	35 af       	std	Z+61, r19	; 0x3d
	EDMA.CH2.CTRLA = EDMA_CH_SINGLE_bm;
    1294:	40 ab       	std	Z+48, r20	; 0x30
	EDMA.CH2.CTRLB = EDMA_CH_TRNIF_bm | EDMA_CH_TRNINTLVL_LO_gc;
    1296:	91 ab       	std	Z+49, r25	; 0x31
	//EDMA: 1 standard and 2 peripheral channels
	EDMA.CTRL = EDMA_ENABLE_bm | EDMA_CHMODE_STD2_gc | EDMA_DBUFMODE_DISABLE_gc;
    1298:	90 ea       	ldi	r25, 0xA0	; 160
    129a:	90 83       	st	Z, r25
	//CRC: CRC16 mode, source IO interface
	CRC.CTRL = CRC_SOURCE_IO_gc;
    129c:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7000d0>
	sei();
    12a0:	78 94       	sei
    12a2:	08 95       	ret

000012a4 <main>:
}

int main(void)
{
	mcuInit();
    12a4:	0e 94 b2 08 	call	0x1164	; 0x1164 <_Z7mcuInitv>
	eeprom_read_block(&channelOT, &savedCOT, sizeof(channelsOnTime));
    12a8:	48 e3       	ldi	r20, 0x38	; 56
    12aa:	50 e0       	ldi	r21, 0x00	; 0
    12ac:	61 e2       	ldi	r22, 0x21	; 33
    12ae:	70 e0       	ldi	r23, 0x00	; 0
    12b0:	87 ed       	ldi	r24, 0xD7	; 215
    12b2:	90 e2       	ldi	r25, 0x20	; 32
    12b4:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <eeprom_read_block>
	eeprom_read_block(iobuf, &savedConfig, sizeof(systemConfig) - 2);
    12b8:	4f e1       	ldi	r20, 0x1F	; 31
    12ba:	50 e0       	ldi	r21, 0x00	; 0
    12bc:	60 e0       	ldi	r22, 0x00	; 0
    12be:	70 e0       	ldi	r23, 0x00	; 0
    12c0:	8f e9       	ldi	r24, 0x9F	; 159
    12c2:	90 e2       	ldi	r25, 0x20	; 32
    12c4:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <eeprom_read_block>
	((systemConfig*)iobuf)->overrideCfg = ((systemConfig*)iobuf)->groupConf = 0; //Ignore saved overrides
    12c8:	cf e9       	ldi	r28, 0x9F	; 159
    12ca:	d0 e2       	ldi	r29, 0x20	; 32
    12cc:	1d 8e       	std	Y+29, r1	; 0x1d
    12ce:	19 8a       	std	Y+17, r1	; 0x11
	((systemConfig*)iobuf)->CRC16 = CalculateCRC16(iobuf, sizeof(systemConfig) - 2);
    12d0:	6f e1       	ldi	r22, 0x1F	; 31
    12d2:	ce 01       	movw	r24, r28
    12d4:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pvh>
    12d8:	8f 8f       	std	Y+31, r24	; 0x1f
    12da:	98 a3       	std	Y+32, r25	; 0x20
	ApplyConfig();
    12dc:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z11ApplyConfigv>
    12e0:	ff cf       	rjmp	.-2      	; 0x12e0 <main+0x3c>

000012e2 <_GLOBAL__sub_I_gLevels>:
	uint64_t _tickLastChg, _onTimeStamp;

public:
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    12e2:	e3 e1       	ldi	r30, 0x13	; 19
    12e4:	f0 e2       	ldi	r31, 0x20	; 32
    12e6:	93 e0       	ldi	r25, 0x03	; 3
    12e8:	91 83       	std	Z+1, r25	; 0x01
		_link[0] = posA;
    12ea:	87 e0       	ldi	r24, 0x07	; 7
    12ec:	83 83       	std	Z+3, r24	; 0x03
		_link[1] = posB;
    12ee:	86 e0       	ldi	r24, 0x06	; 6
    12f0:	84 83       	std	Z+4, r24	; 0x04
		_link[2] = posC;
    12f2:	85 e0       	ldi	r24, 0x05	; 5
    12f4:	85 83       	std	Z+5, r24	; 0x05
		_linkNum = num;
    12f6:	12 82       	std	Z+2, r1	; 0x02
		_chActMask = 0x10 << num;
    12f8:	80 e1       	ldi	r24, 0x10	; 16
    12fa:	82 8b       	std	Z+18, r24	; 0x12
	uint64_t _tickLastChg, _onTimeStamp;

public:
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    12fc:	94 a3       	std	Z+36, r25	; 0x24
		_link[0] = posA;
    12fe:	84 e0       	ldi	r24, 0x04	; 4
    1300:	86 a3       	std	Z+38, r24	; 0x26
		_link[1] = posB;
    1302:	97 a3       	std	Z+39, r25	; 0x27
		_link[2] = posC;
    1304:	82 e0       	ldi	r24, 0x02	; 2
    1306:	80 a7       	std	Z+40, r24	; 0x28
		_linkNum = num;
    1308:	21 e0       	ldi	r18, 0x01	; 1
    130a:	25 a3       	std	Z+37, r18	; 0x25
		_chActMask = 0x10 << num;
    130c:	30 e2       	ldi	r19, 0x20	; 32
    130e:	35 ab       	std	Z+53, r19	; 0x35
	uint64_t _tickLastChg, _onTimeStamp;

public:
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    1310:	80 93 5a 20 	sts	0x205A, r24	; 0x80205a <links+0x47>
		_link[0] = posA;
    1314:	20 93 5c 20 	sts	0x205C, r18	; 0x80205c <links+0x49>
		_link[1] = posB;
    1318:	10 92 5d 20 	sts	0x205D, r1	; 0x80205d <links+0x4a>
		_link[2] = posC;
    131c:	10 92 5e 20 	sts	0x205E, r1	; 0x80205e <links+0x4b>
		_linkNum = num;
    1320:	80 93 5b 20 	sts	0x205B, r24	; 0x80205b <links+0x48>
		_chActMask = 0x10 << num;
    1324:	30 e4       	ldi	r19, 0x40	; 64
    1326:	30 93 6b 20 	sts	0x206B, r19	; 0x80206b <links+0x58>
	uint64_t _tickLastChg, _onTimeStamp;

public:
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    132a:	20 93 7d 20 	sts	0x207D, r18	; 0x80207d <links+0x6a>
		_link[0] = posA;
    132e:	28 e0       	ldi	r18, 0x08	; 8
    1330:	20 93 7f 20 	sts	0x207F, r18	; 0x80207f <links+0x6c>
		_link[1] = posB;
    1334:	10 92 80 20 	sts	0x2080, r1	; 0x802080 <links+0x6d>
		_link[2] = posC;
    1338:	10 92 81 20 	sts	0x2081, r1	; 0x802081 <links+0x6e>
		_linkNum = num;
    133c:	90 93 7e 20 	sts	0x207E, r25	; 0x80207e <links+0x6b>
		_chActMask = 0x10 << num;
    1340:	90 e8       	ldi	r25, 0x80	; 128
    1342:	90 93 8e 20 	sts	0x208E, r25	; 0x80208e <links+0x7b>
	uint8_t _onTime, _fTime;
	uint64_t _onTimeStamp;
public:
	Msen(uint8_t actLink)
	{
		_linkNum = actLink;
    1346:	80 93 07 20 	sts	0x2007, r24	; 0x802007 <msenCh+0x2>
    134a:	08 95       	ret

0000134c <__divmodhi4>:
    134c:	97 fb       	bst	r25, 7
    134e:	07 2e       	mov	r0, r23
    1350:	16 f4       	brtc	.+4      	; 0x1356 <__divmodhi4+0xa>
    1352:	00 94       	com	r0
    1354:	07 d0       	rcall	.+14     	; 0x1364 <__divmodhi4_neg1>
    1356:	77 fd       	sbrc	r23, 7
    1358:	09 d0       	rcall	.+18     	; 0x136c <__divmodhi4_neg2>
    135a:	0e 94 c6 09 	call	0x138c	; 0x138c <__udivmodhi4>
    135e:	07 fc       	sbrc	r0, 7
    1360:	05 d0       	rcall	.+10     	; 0x136c <__divmodhi4_neg2>
    1362:	3e f4       	brtc	.+14     	; 0x1372 <__divmodhi4_exit>

00001364 <__divmodhi4_neg1>:
    1364:	90 95       	com	r25
    1366:	81 95       	neg	r24
    1368:	9f 4f       	sbci	r25, 0xFF	; 255
    136a:	08 95       	ret

0000136c <__divmodhi4_neg2>:
    136c:	70 95       	com	r23
    136e:	61 95       	neg	r22
    1370:	7f 4f       	sbci	r23, 0xFF	; 255

00001372 <__divmodhi4_exit>:
    1372:	08 95       	ret

00001374 <__adddi3_s8>:
    1374:	00 24       	eor	r0, r0
    1376:	a7 fd       	sbrc	r26, 7
    1378:	00 94       	com	r0
    137a:	2a 0f       	add	r18, r26
    137c:	30 1d       	adc	r19, r0
    137e:	40 1d       	adc	r20, r0
    1380:	50 1d       	adc	r21, r0
    1382:	60 1d       	adc	r22, r0
    1384:	70 1d       	adc	r23, r0
    1386:	80 1d       	adc	r24, r0
    1388:	90 1d       	adc	r25, r0
    138a:	08 95       	ret

0000138c <__udivmodhi4>:
    138c:	aa 1b       	sub	r26, r26
    138e:	bb 1b       	sub	r27, r27
    1390:	51 e1       	ldi	r21, 0x11	; 17
    1392:	07 c0       	rjmp	.+14     	; 0x13a2 <__udivmodhi4_ep>

00001394 <__udivmodhi4_loop>:
    1394:	aa 1f       	adc	r26, r26
    1396:	bb 1f       	adc	r27, r27
    1398:	a6 17       	cp	r26, r22
    139a:	b7 07       	cpc	r27, r23
    139c:	10 f0       	brcs	.+4      	; 0x13a2 <__udivmodhi4_ep>
    139e:	a6 1b       	sub	r26, r22
    13a0:	b7 0b       	sbc	r27, r23

000013a2 <__udivmodhi4_ep>:
    13a2:	88 1f       	adc	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	5a 95       	dec	r21
    13a8:	a9 f7       	brne	.-22     	; 0x1394 <__udivmodhi4_loop>
    13aa:	80 95       	com	r24
    13ac:	90 95       	com	r25
    13ae:	bc 01       	movw	r22, r24
    13b0:	cd 01       	movw	r24, r26
    13b2:	08 95       	ret

000013b4 <__tablejump2__>:
    13b4:	ee 0f       	add	r30, r30
    13b6:	ff 1f       	adc	r31, r31
    13b8:	05 90       	lpm	r0, Z+
    13ba:	f4 91       	lpm	r31, Z
    13bc:	e0 2d       	mov	r30, r0
    13be:	09 94       	ijmp

000013c0 <eeprom_read_block>:
    13c0:	60 50       	subi	r22, 0x00	; 0
    13c2:	70 4f       	sbci	r23, 0xF0	; 240
    13c4:	0c 94 1d 0a 	jmp	0x143a	; 0x143a <memcpy>

000013c8 <eeprom_update_block>:
    13c8:	dc 01       	movw	r26, r24
    13ca:	a4 0f       	add	r26, r20
    13cc:	b5 1f       	adc	r27, r21
    13ce:	41 50       	subi	r20, 0x01	; 1
    13d0:	50 40       	sbci	r21, 0x00	; 0
    13d2:	48 f0       	brcs	.+18     	; 0x13e6 <eeprom_update_block+0x1e>
    13d4:	cb 01       	movw	r24, r22
    13d6:	84 0f       	add	r24, r20
    13d8:	95 1f       	adc	r25, r21
    13da:	2e 91       	ld	r18, -X
    13dc:	0e 94 f5 09 	call	0x13ea	; 0x13ea <eeprom_update_r18>
    13e0:	41 50       	subi	r20, 0x01	; 1
    13e2:	50 40       	sbci	r21, 0x00	; 0
    13e4:	d0 f7       	brcc	.-12     	; 0x13da <eeprom_update_block+0x12>
    13e6:	08 95       	ret

000013e8 <eeprom_update_byte>:
    13e8:	26 2f       	mov	r18, r22

000013ea <eeprom_update_r18>:
    13ea:	0e 94 19 0a 	call	0x1432	; 0x1432 <eeprom_mapen>
    13ee:	00 80       	ld	r0, Z
    13f0:	02 16       	cp	r0, r18
    13f2:	19 f0       	breq	.+6      	; 0x13fa <eeprom_update_r18+0x10>
    13f4:	0e 94 00 0a 	call	0x1400	; 0x1400 <eeprom_write_r18>
    13f8:	01 97       	sbiw	r24, 0x01	; 1
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	08 95       	ret

000013fe <eeprom_write_byte>:
    13fe:	26 2f       	mov	r18, r22

00001400 <eeprom_write_r18>:
    1400:	af 93       	push	r26
    1402:	bf 93       	push	r27
    1404:	e0 ec       	ldi	r30, 0xC0	; 192
    1406:	f1 e0       	ldi	r31, 0x01	; 1
    1408:	37 85       	ldd	r19, Z+15	; 0x0f
    140a:	37 fd       	sbrc	r19, 7
    140c:	fd cf       	rjmp	.-6      	; 0x1408 <eeprom_write_r18+0x8>
    140e:	dc 01       	movw	r26, r24
    1410:	a0 50       	subi	r26, 0x00	; 0
    1412:	b0 4f       	sbci	r27, 0xF0	; 240
    1414:	2c 93       	st	X, r18
    1416:	25 e3       	ldi	r18, 0x35	; 53
    1418:	22 87       	std	Z+10, r18	; 0x0a
    141a:	28 ed       	ldi	r18, 0xD8	; 216
    141c:	31 e0       	ldi	r19, 0x01	; 1
    141e:	24 bf       	out	0x34, r18	; 52
    1420:	33 87       	std	Z+11, r19	; 0x0b
    1422:	01 96       	adiw	r24, 0x01	; 1
    1424:	bf 91       	pop	r27
    1426:	af 91       	pop	r26
    1428:	08 95       	ret

0000142a <eeprom_read_byte>:
    142a:	03 d0       	rcall	.+6      	; 0x1432 <eeprom_mapen>
    142c:	80 81       	ld	r24, Z
    142e:	99 27       	eor	r25, r25
    1430:	08 95       	ret

00001432 <eeprom_mapen>:
    1432:	fc 01       	movw	r30, r24
    1434:	e0 50       	subi	r30, 0x00	; 0
    1436:	f0 4f       	sbci	r31, 0xF0	; 240
    1438:	08 95       	ret

0000143a <memcpy>:
    143a:	fb 01       	movw	r30, r22
    143c:	dc 01       	movw	r26, r24
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <memcpy+0xa>
    1440:	01 90       	ld	r0, Z+
    1442:	0d 92       	st	X+, r0
    1444:	41 50       	subi	r20, 0x01	; 1
    1446:	50 40       	sbci	r21, 0x00	; 0
    1448:	d8 f7       	brcc	.-10     	; 0x1440 <memcpy+0x6>
    144a:	08 95       	ret

0000144c <_exit>:
    144c:	f8 94       	cli

0000144e <__stop_program>:
    144e:	ff cf       	rjmp	.-2      	; 0x144e <__stop_program>
