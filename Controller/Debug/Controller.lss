
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000159a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00001687  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000016f  00802000  00802000  0000162e  2**0
                  ALLOC
  3 .eeprom       00000059  00810000  00810000  0000162e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00001687  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016b8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000110  00000000  00000000  000016f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004b4e  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001f62  00000000  00000000  00006356  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f9f  00000000  00000000  000082b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000318  00000000  00000000  00009258  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003438  00000000  00000000  00009570  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001214  00000000  00000000  0000c9a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000188  00000000  00000000  0000dbbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 57 00 	jmp	0xae	; 0xae <__ctors_end>
       4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
       c:	0c 94 e3 08 	jmp	0x11c6	; 0x11c6 <__vector_3>
      10:	0c 94 23 09 	jmp	0x1246	; 0x1246 <__vector_4>
      14:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      18:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      1c:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__vector_7>
      20:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      24:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      28:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      2c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      30:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      34:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      38:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      3c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      40:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      44:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      48:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      4c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      50:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      54:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      58:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      5c:	0c 94 42 08 	jmp	0x1084	; 0x1084 <__vector_23>
      60:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      64:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      68:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      6c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      70:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      74:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      78:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      7c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      80:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      84:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      88:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <__vector_34>
      8c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      90:	0c 94 40 09 	jmp	0x1280	; 0x1280 <__vector_36>
      94:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      98:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      9c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      a0:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      a4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      a8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>

000000ac <__ctors_start>:
      ac:	16 0a       	sbc	r1, r22

000000ae <__ctors_end>:
      ae:	11 24       	eor	r1, r1
      b0:	1f be       	out	0x3f, r1	; 63
      b2:	cf ef       	ldi	r28, 0xFF	; 255
      b4:	cd bf       	out	0x3d, r28	; 61
      b6:	d7 e2       	ldi	r29, 0x27	; 39
      b8:	de bf       	out	0x3e, r29	; 62

000000ba <__do_clear_bss>:
      ba:	21 e2       	ldi	r18, 0x21	; 33
      bc:	a0 e0       	ldi	r26, 0x00	; 0
      be:	b0 e2       	ldi	r27, 0x20	; 32
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	af 36       	cpi	r26, 0x6F	; 111
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>

000000ca <__do_global_ctors>:
      ca:	10 e0       	ldi	r17, 0x00	; 0
      cc:	c7 e5       	ldi	r28, 0x57	; 87
      ce:	d0 e0       	ldi	r29, 0x00	; 0
      d0:	04 c0       	rjmp	.+8      	; 0xda <__do_global_ctors+0x10>
      d2:	21 97       	sbiw	r28, 0x01	; 1
      d4:	fe 01       	movw	r30, r28
      d6:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__tablejump2__>
      da:	c6 35       	cpi	r28, 0x56	; 86
      dc:	d1 07       	cpc	r29, r17
      de:	c9 f7       	brne	.-14     	; 0xd2 <__do_global_ctors+0x8>
      e0:	0e 94 f7 09 	call	0x13ee	; 0x13ee <main>
      e4:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <_exit>

000000e8 <__bad_interrupt>:
      e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ec <_Z14CalculateCRC16Pva>:
}

uint16_t CalculateCRC16(void *arr, int8_t count)
{
	uint8_t *ptr = (uint8_t*)arr;
	CRC.CTRL = CRC_RESET_RESET1_gc;
      ec:	e0 ed       	ldi	r30, 0xD0	; 208
      ee:	f0 e0       	ldi	r31, 0x00	; 0
      f0:	20 ec       	ldi	r18, 0xC0	; 192
      f2:	20 83       	st	Z, r18
	CRC.CTRL = CRC_SOURCE_IO_gc;
      f4:	21 e0       	ldi	r18, 0x01	; 1
      f6:	20 83       	st	Z, r18
	while (--count >= 0)
      f8:	61 50       	subi	r22, 0x01	; 1
      fa:	52 f0       	brmi	.+20     	; 0x110 <_Z14CalculateCRC16Pva+0x24>
      fc:	e8 2f       	mov	r30, r24
      fe:	f9 2f       	mov	r31, r25
		CRC.DATAIN = *ptr++;
     100:	a0 ed       	ldi	r26, 0xD0	; 208
     102:	b0 e0       	ldi	r27, 0x00	; 0
     104:	81 91       	ld	r24, Z+
     106:	13 96       	adiw	r26, 0x03	; 3
     108:	8c 93       	st	X, r24
     10a:	13 97       	sbiw	r26, 0x03	; 3
     10c:	61 50       	subi	r22, 0x01	; 1
uint16_t CalculateCRC16(void *arr, int8_t count)
{
	uint8_t *ptr = (uint8_t*)arr;
	CRC.CTRL = CRC_RESET_RESET1_gc;
	CRC.CTRL = CRC_SOURCE_IO_gc;
	while (--count >= 0)
     10e:	d2 f7       	brpl	.-12     	; 0x104 <_Z14CalculateCRC16Pva+0x18>
		CRC.DATAIN = *ptr++;
	i16i8 result;
	CRC.STATUS = CRC_BUSY_bm;
     110:	e0 ed       	ldi	r30, 0xD0	; 208
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	81 e0       	ldi	r24, 0x01	; 1
     116:	81 83       	std	Z+1, r24	; 0x01
	result.ui8[0] = CRC.CHECKSUM0;
     118:	84 81       	ldd	r24, Z+4	; 0x04
	result.ui8[1] = CRC.CHECKSUM1;
     11a:	95 81       	ldd	r25, Z+5	; 0x05
	CRC.CTRL = CRC_SOURCE_DISABLE_gc;
     11c:	10 82       	st	Z, r1
	return result.ui16;
}
     11e:	08 95       	ret

00000120 <_Z11ApplyConfigv>:

void ApplyConfig()
{
     120:	2f 92       	push	r2
     122:	3f 92       	push	r3
     124:	4f 92       	push	r4
     126:	5f 92       	push	r5
     128:	6f 92       	push	r6
     12a:	7f 92       	push	r7
     12c:	8f 92       	push	r8
     12e:	9f 92       	push	r9
     130:	af 92       	push	r10
     132:	bf 92       	push	r11
     134:	cf 92       	push	r12
     136:	df 92       	push	r13
     138:	ef 92       	push	r14
     13a:	ff 92       	push	r15
     13c:	0f 93       	push	r16
     13e:	1f 93       	push	r17
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
     144:	cd b7       	in	r28, 0x3d	; 61
     146:	de b7       	in	r29, 0x3e	; 62
     148:	26 97       	sbiw	r28, 0x06	; 6
     14a:	cd bf       	out	0x3d, r28	; 61
     14c:	de bf       	out	0x3e, r29	; 62
	systemConfig *temp = (systemConfig*)iobuf;
	//Both bits 7 are set: one of the on-time counters must be rewritten
	if ((temp->groupConf & 0x80) && (temp->overrideCfg & 0x80))
     14e:	20 91 b9 20 	lds	r18, 0x20B9	; 0x8020b9 <iobuf+0x1d>
     152:	29 83       	std	Y+1, r18	; 0x01
     154:	22 23       	and	r18, r18
     156:	24 f5       	brge	.+72     	; 0x1a0 <_Z11ApplyConfigv+0x80>
     158:	80 91 ad 20 	lds	r24, 0x20AD	; 0x8020ad <iobuf+0x11>
     15c:	88 23       	and	r24, r24
     15e:	04 f5       	brge	.+64     	; 0x1a0 <_Z11ApplyConfigv+0x80>
	{
		uint8_t j = temp->overrideCfg & 0xF; //Update on-time of link
		channelOT.linkOnTime[j] = *((uint32_t*)temp->minLvl);
     160:	8f 70       	andi	r24, 0x0F	; 15
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	fc 01       	movw	r30, r24
     166:	ee 0f       	add	r30, r30
     168:	ff 1f       	adc	r31, r31
     16a:	ee 0f       	add	r30, r30
     16c:	ff 1f       	adc	r31, r31
     16e:	ec 52       	subi	r30, 0x2C	; 44
     170:	ff 4d       	sbci	r31, 0xDF	; 223
     172:	ac e9       	ldi	r26, 0x9C	; 156
     174:	b0 e2       	ldi	r27, 0x20	; 32
     176:	4d 91       	ld	r20, X+
     178:	5d 91       	ld	r21, X+
     17a:	6d 91       	ld	r22, X+
     17c:	7c 91       	ld	r23, X
     17e:	13 97       	sbiw	r26, 0x03	; 3
     180:	40 83       	st	Z, r20
     182:	51 83       	std	Z+1, r21	; 0x01
     184:	62 83       	std	Z+2, r22	; 0x02
     186:	73 83       	std	Z+3, r23	; 0x03
		channelOT.linkSwCnt[j] = *((uint16_t*)temp->maxLvl);
     188:	88 0f       	add	r24, r24
     18a:	99 1f       	adc	r25, r25
     18c:	fc 01       	movw	r30, r24
     18e:	e8 50       	subi	r30, 0x08	; 8
     190:	ff 4d       	sbci	r31, 0xDF	; 223
     192:	18 96       	adiw	r26, 0x08	; 8
     194:	8d 91       	ld	r24, X+
     196:	9c 91       	ld	r25, X
     198:	19 97       	sbiw	r26, 0x09	; 9
     19a:	80 83       	st	Z, r24
     19c:	91 83       	std	Z+1, r25	; 0x01
		return;
     19e:	d9 c0       	rjmp	.+434    	; 0x352 <_Z11ApplyConfigv+0x232>
	}
	memcpy(&validConf, iobuf, sizeof(systemConfig));
     1a0:	81 e2       	ldi	r24, 0x21	; 33
     1a2:	ec e9       	ldi	r30, 0x9C	; 156
     1a4:	f0 e2       	ldi	r31, 0x20	; 32
     1a6:	a4 e2       	ldi	r26, 0x24	; 36
     1a8:	b1 e2       	ldi	r27, 0x21	; 33
     1aa:	01 90       	ld	r0, Z+
     1ac:	0d 92       	st	X+, r0
     1ae:	8a 95       	dec	r24
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <_Z11ApplyConfigv+0x8a>
		_fadeRate = (min > 160) ? 160 : min;
		_linkDelay = (max > 63) ? 64 : max + 1;
		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			pos = _link[i];
			if ((pos < 8 && validConf.overrideCfg == (1 << pos)) || 
     1b2:	60 91 35 21 	lds	r22, 0x2135	; 0x802135 <validConf+0x11>
     1b6:	70 e0       	ldi	r23, 0x00	; 0
				(pos == 8 && validConf.groupConf == (1 << 4)))
			{
				if (_lvl[i] == gLevels[pos]) //Refresh saved ticks value only if no dimming in the process right now
					_tickLastChg = sysState.sysTick;
     1b8:	ec e0       	ldi	r30, 0x0C	; 12
     1ba:	f1 e2       	ldi	r31, 0x21	; 33
     1bc:	30 81       	ld	r19, Z
     1be:	3c 83       	std	Y+4, r19	; 0x04
     1c0:	81 81       	ldd	r24, Z+1	; 0x01
     1c2:	8d 83       	std	Y+5, r24	; 0x05
     1c4:	72 80       	ldd	r7, Z+2	; 0x02
     1c6:	63 80       	ldd	r6, Z+3	; 0x03
     1c8:	54 80       	ldd	r5, Z+4	; 0x04
     1ca:	45 80       	ldd	r4, Z+5	; 0x05
     1cc:	36 80       	ldd	r3, Z+6	; 0x06
     1ce:	27 80       	ldd	r2, Z+7	; 0x07
				_lvl[i] = validConf.overrideLvl;
     1d0:	a0 90 34 21 	lds	r10, 0x2134	; 0x802134 <validConf+0x10>
     1d4:	a0 e1       	ldi	r26, 0x10	; 16
     1d6:	b0 e2       	ldi	r27, 0x20	; 32
     1d8:	0f 2e       	mov	r0, r31
     1da:	fc e9       	ldi	r31, 0x9C	; 156
     1dc:	8f 2e       	mov	r8, r31
     1de:	f0 e2       	ldi	r31, 0x20	; 32
     1e0:	9f 2e       	mov	r9, r31
     1e2:	f0 2d       	mov	r31, r0
		_fadeRate = (min > 160) ? 160 : min;
		_linkDelay = (max > 63) ? 64 : max + 1;
		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			pos = _link[i];
			if ((pos < 8 && validConf.overrideCfg == (1 << pos)) || 
     1e4:	01 e0       	ldi	r16, 0x01	; 1
     1e6:	10 e0       	ldi	r17, 0x00	; 0
					_tickLastChg = sysState.sysTick;
				_lvl[i] = validConf.overrideLvl;
			}
			min = pos > 7 ? 4 : validConf.minLvl[pos];
			max = pos > 7 ? 63 : validConf.maxLvl[pos];
			_minLvl[i] = (min < 222) ? min + 1 : 223;
     1e8:	0f 2e       	mov	r0, r31
     1ea:	ff ed       	ldi	r31, 0xDF	; 223
     1ec:	bf 2e       	mov	r11, r31
     1ee:	f0 2d       	mov	r31, r0
     1f0:	aa 83       	std	Y+2, r26	; 0x02
     1f2:	bb 83       	std	Y+3, r27	; 0x03
     1f4:	ca 80       	ldd	r12, Y+2	; 0x02
     1f6:	db 80       	ldd	r13, Y+3	; 0x03
		_chActMask = 0x10 << num;
	};

	void setParams()
	{
		uint8_t pos, min = validConf.fadeRate[_linkNum], max = validConf.linkDelay[_linkNum];
     1f8:	d6 01       	movw	r26, r12
     1fa:	12 96       	adiw	r26, 0x02	; 2
     1fc:	ec 91       	ld	r30, X
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	ec 5d       	subi	r30, 0xDC	; 220
     202:	fe 4d       	sbci	r31, 0xDE	; 222
     204:	92 89       	ldd	r25, Z+18	; 0x12
     206:	86 89       	ldd	r24, Z+22	; 0x16
		if (min < 32)
     208:	90 32       	cpi	r25, 0x20	; 32
     20a:	08 f4       	brcc	.+2      	; 0x20e <_Z11ApplyConfigv+0xee>
			min = 32;
     20c:	90 e2       	ldi	r25, 0x20	; 32
		_fadeRate = (min > 160) ? 160 : min;
     20e:	91 3a       	cpi	r25, 0xA1	; 161
     210:	08 f0       	brcs	.+2      	; 0x214 <_Z11ApplyConfigv+0xf4>
     212:	90 ea       	ldi	r25, 0xA0	; 160
     214:	f6 01       	movw	r30, r12
     216:	97 87       	std	Z+15, r25	; 0x0f
		_linkDelay = (max > 63) ? 64 : max + 1;
     218:	80 34       	cpi	r24, 0x40	; 64
     21a:	18 f4       	brcc	.+6      	; 0x222 <_Z11ApplyConfigv+0x102>
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	01 96       	adiw	r24, 0x01	; 1
     220:	02 c0       	rjmp	.+4      	; 0x226 <_Z11ApplyConfigv+0x106>
     222:	80 e4       	ldi	r24, 0x40	; 64
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	d6 01       	movw	r26, r12
     228:	50 96       	adiw	r26, 0x10	; 16
     22a:	8d 93       	st	X+, r24
     22c:	9c 93       	st	X, r25
     22e:	51 97       	sbiw	r26, 0x11	; 17
		for (uint8_t i = 0; i < _linkCnt; i++)
     230:	11 96       	adiw	r26, 0x01	; 1
     232:	9c 91       	ld	r25, X
     234:	99 23       	and	r25, r25
     236:	09 f4       	brne	.+2      	; 0x23a <_Z11ApplyConfigv+0x11a>
     238:	5c c0       	rjmp	.+184    	; 0x2f2 <_Z11ApplyConfigv+0x1d2>
     23a:	aa 81       	ldd	r26, Y+2	; 0x02
     23c:	bb 81       	ldd	r27, Y+3	; 0x03
     23e:	13 96       	adiw	r26, 0x03	; 3
     240:	80 e0       	ldi	r24, 0x00	; 0
		{
			pos = _link[i];
     242:	fd 91       	ld	r31, X+
     244:	fe 83       	std	Y+6, r31	; 0x06
			if ((pos < 8 && validConf.overrideCfg == (1 << pos)) || 
     246:	f8 30       	cpi	r31, 0x08	; 8
     248:	58 f4       	brcc	.+22     	; 0x260 <_Z11ApplyConfigv+0x140>
     24a:	98 01       	movw	r18, r16
     24c:	02 c0       	rjmp	.+4      	; 0x252 <_Z11ApplyConfigv+0x132>
     24e:	22 0f       	add	r18, r18
     250:	33 1f       	adc	r19, r19
     252:	fa 95       	dec	r31
     254:	e2 f7       	brpl	.-8      	; 0x24e <_Z11ApplyConfigv+0x12e>
     256:	62 17       	cp	r22, r18
     258:	73 07       	cpc	r23, r19
     25a:	09 f0       	breq	.+2      	; 0x25e <_Z11ApplyConfigv+0x13e>
     25c:	6f c0       	rjmp	.+222    	; 0x33c <_Z11ApplyConfigv+0x21c>
     25e:	07 c0       	rjmp	.+14     	; 0x26e <_Z11ApplyConfigv+0x14e>
     260:	2e 81       	ldd	r18, Y+6	; 0x06
     262:	28 30       	cpi	r18, 0x08	; 8
     264:	09 f4       	brne	.+2      	; 0x268 <_Z11ApplyConfigv+0x148>
     266:	6e c0       	rjmp	.+220    	; 0x344 <_Z11ApplyConfigv+0x224>
			{
				if (_lvl[i] == gLevels[pos]) //Refresh saved ticks value only if no dimming in the process right now
					_tickLastChg = sysState.sysTick;
				_lvl[i] = validConf.overrideLvl;
			}
			min = pos > 7 ? 4 : validConf.minLvl[pos];
     268:	24 e0       	ldi	r18, 0x04	; 4
			max = pos > 7 ? 63 : validConf.maxLvl[pos];
     26a:	3f e3       	ldi	r19, 0x3F	; 63
     26c:	28 c0       	rjmp	.+80     	; 0x2be <_Z11ApplyConfigv+0x19e>
     26e:	ad 01       	movw	r20, r26
		{
			pos = _link[i];
			if ((pos < 8 && validConf.overrideCfg == (1 << pos)) || 
				(pos == 8 && validConf.groupConf == (1 << 4)))
			{
				if (_lvl[i] == gLevels[pos]) //Refresh saved ticks value only if no dimming in the process right now
     270:	3e 81       	ldd	r19, Y+6	; 0x06
     272:	e3 2f       	mov	r30, r19
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	ee 0f       	add	r30, r30
     278:	ff 1f       	adc	r31, r31
     27a:	e3 5a       	subi	r30, 0xA3	; 163
     27c:	fe 4d       	sbci	r31, 0xDE	; 222
     27e:	e0 80       	ld	r14, Z
     280:	f1 80       	ldd	r15, Z+1	; 0x01
     282:	12 96       	adiw	r26, 0x02	; 2
     284:	2c 91       	ld	r18, X
     286:	12 97       	sbiw	r26, 0x02	; 2
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	2e 15       	cp	r18, r14
     28c:	3f 05       	cpc	r19, r15
     28e:	59 f4       	brne	.+22     	; 0x2a6 <_Z11ApplyConfigv+0x186>
					_tickLastChg = sysState.sysTick;
     290:	2c 81       	ldd	r18, Y+4	; 0x04
     292:	f6 01       	movw	r30, r12
     294:	23 8b       	std	Z+19, r18	; 0x13
     296:	3d 81       	ldd	r19, Y+5	; 0x05
     298:	34 8b       	std	Z+20, r19	; 0x14
     29a:	75 8a       	std	Z+21, r7	; 0x15
     29c:	66 8a       	std	Z+22, r6	; 0x16
     29e:	57 8a       	std	Z+23, r5	; 0x17
     2a0:	40 8e       	std	Z+24, r4	; 0x18
     2a2:	31 8e       	std	Z+25, r3	; 0x19
     2a4:	22 8e       	std	Z+26, r2	; 0x1a
				_lvl[i] = validConf.overrideLvl;
     2a6:	fa 01       	movw	r30, r20
     2a8:	a2 82       	std	Z+2, r10	; 0x02
			}
			min = pos > 7 ? 4 : validConf.minLvl[pos];
     2aa:	fe 81       	ldd	r31, Y+6	; 0x06
     2ac:	f8 30       	cpi	r31, 0x08	; 8
     2ae:	50 f4       	brcc	.+20     	; 0x2c4 <_Z11ApplyConfigv+0x1a4>
     2b0:	2e 81       	ldd	r18, Y+6	; 0x06
     2b2:	e2 2f       	mov	r30, r18
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	ec 5d       	subi	r30, 0xDC	; 220
     2b8:	fe 4d       	sbci	r31, 0xDE	; 222
     2ba:	20 81       	ld	r18, Z
			max = pos > 7 ? 63 : validConf.maxLvl[pos];
     2bc:	30 85       	ldd	r19, Z+8	; 0x08
			_minLvl[i] = (min < 222) ? min + 1 : 223;
     2be:	2e 3d       	cpi	r18, 0xDE	; 222
     2c0:	28 f4       	brcc	.+10     	; 0x2cc <_Z11ApplyConfigv+0x1ac>
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <_Z11ApplyConfigv+0x1a8>
				if (_lvl[i] == gLevels[pos]) //Refresh saved ticks value only if no dimming in the process right now
					_tickLastChg = sysState.sysTick;
				_lvl[i] = validConf.overrideLvl;
			}
			min = pos > 7 ? 4 : validConf.minLvl[pos];
			max = pos > 7 ? 63 : validConf.maxLvl[pos];
     2c4:	3f e3       	ldi	r19, 0x3F	; 63
			{
				if (_lvl[i] == gLevels[pos]) //Refresh saved ticks value only if no dimming in the process right now
					_tickLastChg = sysState.sysTick;
				_lvl[i] = validConf.overrideLvl;
			}
			min = pos > 7 ? 4 : validConf.minLvl[pos];
     2c6:	24 e0       	ldi	r18, 0x04	; 4
			max = pos > 7 ? 63 : validConf.maxLvl[pos];
			_minLvl[i] = (min < 222) ? min + 1 : 223;
     2c8:	2f 5f       	subi	r18, 0xFF	; 255
     2ca:	01 c0       	rjmp	.+2      	; 0x2ce <_Z11ApplyConfigv+0x1ae>
     2cc:	2b 2d       	mov	r18, r11
     2ce:	fd 01       	movw	r30, r26
     2d0:	15 96       	adiw	r26, 0x05	; 5
     2d2:	2c 93       	st	X, r18
     2d4:	15 97       	sbiw	r26, 0x05	; 5
			_difLvl[i] = max;
			if (max > _minLvl[i])
     2d6:	23 17       	cp	r18, r19
     2d8:	20 f0       	brcs	.+8      	; 0x2e2 <_Z11ApplyConfigv+0x1c2>
				_lvl[i] = validConf.overrideLvl;
			}
			min = pos > 7 ? 4 : validConf.minLvl[pos];
			max = pos > 7 ? 63 : validConf.maxLvl[pos];
			_minLvl[i] = (min < 222) ? min + 1 : 223;
			_difLvl[i] = max;
     2da:	18 96       	adiw	r26, 0x08	; 8
     2dc:	3c 93       	st	X, r19
     2de:	18 97       	sbiw	r26, 0x08	; 8
     2e0:	05 c0       	rjmp	.+10     	; 0x2ec <_Z11ApplyConfigv+0x1cc>
			if (max > _minLvl[i])
			{
				max -= _minLvl[i];
				_difLvl[i] = (max >= 32) ? max : 32;
     2e2:	32 1b       	sub	r19, r18
     2e4:	30 32       	cpi	r19, 0x20	; 32
     2e6:	08 f4       	brcc	.+2      	; 0x2ea <_Z11ApplyConfigv+0x1ca>
     2e8:	30 e2       	ldi	r19, 0x20	; 32
     2ea:	30 87       	std	Z+8, r19	; 0x08
		uint8_t pos, min = validConf.fadeRate[_linkNum], max = validConf.linkDelay[_linkNum];
		if (min < 32)
			min = 32;
		_fadeRate = (min > 160) ? 160 : min;
		_linkDelay = (max > 63) ? 64 : max + 1;
		for (uint8_t i = 0; i < _linkCnt; i++)
     2ec:	8f 5f       	subi	r24, 0xFF	; 255
     2ee:	89 13       	cpse	r24, r25
     2f0:	a8 cf       	rjmp	.-176    	; 0x242 <_Z11ApplyConfigv+0x122>
     2f2:	aa 81       	ldd	r26, Y+2	; 0x02
     2f4:	bb 81       	ldd	r27, Y+3	; 0x03
     2f6:	93 96       	adiw	r26, 0x23	; 35
     2f8:	aa 83       	std	Y+2, r26	; 0x02
     2fa:	bb 83       	std	Y+3, r27	; 0x03
		channelOT.linkOnTime[j] = *((uint32_t*)temp->minLvl);
		channelOT.linkSwCnt[j] = *((uint16_t*)temp->maxLvl);
		return;
	}
	memcpy(&validConf, iobuf, sizeof(systemConfig));
	for (uint8_t i = 0; i < 4; i++)
     2fc:	a8 15       	cp	r26, r8
     2fe:	b9 05       	cpc	r27, r9
     300:	09 f0       	breq	.+2      	; 0x304 <_Z11ApplyConfigv+0x1e4>
     302:	78 cf       	rjmp	.-272    	; 0x1f4 <_Z11ApplyConfigv+0xd4>
	{
		_linkNum = actLink;
	};
	void setParams()
	{
		_onTime = validConf.msenOnTime > 5 ? validConf.msenOnTime : 6;
     304:	80 91 3e 21 	lds	r24, 0x213E	; 0x80213e <validConf+0x1a>
     308:	86 30       	cpi	r24, 0x06	; 6
     30a:	08 f4       	brcc	.+2      	; 0x30e <_Z11ApplyConfigv+0x1ee>
     30c:	86 e0       	ldi	r24, 0x06	; 6
     30e:	e2 e0       	ldi	r30, 0x02	; 2
     310:	f0 e2       	ldi	r31, 0x20	; 32
     312:	84 83       	std	Z+4, r24	; 0x04
		_fTime = _onTime + validConf.msenLowTime;
     314:	90 91 3f 21 	lds	r25, 0x213F	; 0x80213f <validConf+0x1b>
     318:	89 0f       	add	r24, r25
     31a:	85 83       	std	Z+5, r24	; 0x05
	}
	memcpy(&validConf, iobuf, sizeof(systemConfig));
	for (uint8_t i = 0; i < 4; i++)
		links[i].setParams();
	msenCh.setParams();
	if (validConf.groupConf & 0x08) //Bit 3 is set: save config to EEPROM
     31c:	29 81       	ldd	r18, Y+1	; 0x01
     31e:	23 ff       	sbrs	r18, 3
     320:	08 c0       	rjmp	.+16     	; 0x332 <_Z11ApplyConfigv+0x212>
		eeprom_update_block(&validConf, &savedConfig, sizeof(systemConfig));
     322:	41 e2       	ldi	r20, 0x21	; 33
     324:	50 e0       	ldi	r21, 0x00	; 0
     326:	60 e0       	ldi	r22, 0x00	; 0
     328:	70 e0       	ldi	r23, 0x00	; 0
     32a:	84 e2       	ldi	r24, 0x24	; 36
     32c:	91 e2       	ldi	r25, 0x21	; 33
     32e:	0e 94 89 0a 	call	0x1512	; 0x1512 <eeprom_update_block>
	RTC.CALIB = validConf.rtcCorrect;
     332:	80 91 42 21 	lds	r24, 0x2142	; 0x802142 <validConf+0x1e>
     336:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <__TEXT_REGION_LENGTH__+0x700406>
     33a:	0b c0       	rjmp	.+22     	; 0x352 <_Z11ApplyConfigv+0x232>
		_fadeRate = (min > 160) ? 160 : min;
		_linkDelay = (max > 63) ? 64 : max + 1;
		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			pos = _link[i];
			if ((pos < 8 && validConf.overrideCfg == (1 << pos)) || 
     33c:	3e 81       	ldd	r19, Y+6	; 0x06
     33e:	38 30       	cpi	r19, 0x08	; 8
     340:	09 f0       	breq	.+2      	; 0x344 <_Z11ApplyConfigv+0x224>
     342:	b6 cf       	rjmp	.-148    	; 0x2b0 <_Z11ApplyConfigv+0x190>
				(pos == 8 && validConf.groupConf == (1 << 4)))
     344:	29 81       	ldd	r18, Y+1	; 0x01
     346:	20 31       	cpi	r18, 0x10	; 16
     348:	09 f4       	brne	.+2      	; 0x34c <_Z11ApplyConfigv+0x22c>
     34a:	91 cf       	rjmp	.-222    	; 0x26e <_Z11ApplyConfigv+0x14e>
				if (_lvl[i] == gLevels[pos]) //Refresh saved ticks value only if no dimming in the process right now
					_tickLastChg = sysState.sysTick;
				_lvl[i] = validConf.overrideLvl;
			}
			min = pos > 7 ? 4 : validConf.minLvl[pos];
			max = pos > 7 ? 63 : validConf.maxLvl[pos];
     34c:	3f e3       	ldi	r19, 0x3F	; 63
			{
				if (_lvl[i] == gLevels[pos]) //Refresh saved ticks value only if no dimming in the process right now
					_tickLastChg = sysState.sysTick;
				_lvl[i] = validConf.overrideLvl;
			}
			min = pos > 7 ? 4 : validConf.minLvl[pos];
     34e:	24 e0       	ldi	r18, 0x04	; 4
     350:	bb cf       	rjmp	.-138    	; 0x2c8 <_Z11ApplyConfigv+0x1a8>
		links[i].setParams();
	msenCh.setParams();
	if (validConf.groupConf & 0x08) //Bit 3 is set: save config to EEPROM
		eeprom_update_block(&validConf, &savedConfig, sizeof(systemConfig));
	RTC.CALIB = validConf.rtcCorrect;
}
     352:	26 96       	adiw	r28, 0x06	; 6
     354:	cd bf       	out	0x3d, r28	; 61
     356:	de bf       	out	0x3e, r29	; 62
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	1f 91       	pop	r17
     35e:	0f 91       	pop	r16
     360:	ff 90       	pop	r15
     362:	ef 90       	pop	r14
     364:	df 90       	pop	r13
     366:	cf 90       	pop	r12
     368:	bf 90       	pop	r11
     36a:	af 90       	pop	r10
     36c:	9f 90       	pop	r9
     36e:	8f 90       	pop	r8
     370:	7f 90       	pop	r7
     372:	6f 90       	pop	r6
     374:	5f 90       	pop	r5
     376:	4f 90       	pop	r4
     378:	3f 90       	pop	r3
     37a:	2f 90       	pop	r2
     37c:	08 95       	ret

0000037e <__vector_7>:

ISR(RTC_OVF_vect)
{
     37e:	1f 92       	push	r1
     380:	0f 92       	push	r0
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	0f 92       	push	r0
     386:	11 24       	eor	r1, r1
     388:	2f 92       	push	r2
     38a:	3f 92       	push	r3
     38c:	4f 92       	push	r4
     38e:	5f 92       	push	r5
     390:	6f 92       	push	r6
     392:	7f 92       	push	r7
     394:	8f 92       	push	r8
     396:	9f 92       	push	r9
     398:	af 92       	push	r10
     39a:	bf 92       	push	r11
     39c:	cf 92       	push	r12
     39e:	df 92       	push	r13
     3a0:	ef 92       	push	r14
     3a2:	ff 92       	push	r15
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
     3a8:	2f 93       	push	r18
     3aa:	3f 93       	push	r19
     3ac:	4f 93       	push	r20
     3ae:	5f 93       	push	r21
     3b0:	6f 93       	push	r22
     3b2:	7f 93       	push	r23
     3b4:	8f 93       	push	r24
     3b6:	9f 93       	push	r25
     3b8:	af 93       	push	r26
     3ba:	bf 93       	push	r27
     3bc:	ef 93       	push	r30
     3be:	ff 93       	push	r31
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	cd b7       	in	r28, 0x3d	; 61
     3c6:	de b7       	in	r29, 0x3e	; 62
     3c8:	2e 97       	sbiw	r28, 0x0e	; 14
     3ca:	cd bf       	out	0x3d, r28	; 61
     3cc:	de bf       	out	0x3e, r29	; 62
	sysState.sysTick++;
     3ce:	ec e0       	ldi	r30, 0x0C	; 12
     3d0:	f1 e2       	ldi	r31, 0x21	; 33
     3d2:	20 81       	ld	r18, Z
     3d4:	31 81       	ldd	r19, Z+1	; 0x01
     3d6:	42 81       	ldd	r20, Z+2	; 0x02
     3d8:	53 81       	ldd	r21, Z+3	; 0x03
     3da:	64 81       	ldd	r22, Z+4	; 0x04
     3dc:	75 81       	ldd	r23, Z+5	; 0x05
     3de:	86 81       	ldd	r24, Z+6	; 0x06
     3e0:	97 81       	ldd	r25, Z+7	; 0x07
     3e2:	a1 e0       	ldi	r26, 0x01	; 1
     3e4:	0e 94 5f 0a 	call	0x14be	; 0x14be <__adddi3_s8>
     3e8:	20 83       	st	Z, r18
     3ea:	31 83       	std	Z+1, r19	; 0x01
     3ec:	42 83       	std	Z+2, r20	; 0x02
     3ee:	53 83       	std	Z+3, r21	; 0x03
     3f0:	64 83       	std	Z+4, r22	; 0x04
     3f2:	75 83       	std	Z+5, r23	; 0x05
     3f4:	86 83       	std	Z+6, r24	; 0x06
     3f6:	97 83       	std	Z+7, r25	; 0x07
     3f8:	0f 2e       	mov	r0, r31
     3fa:	f0 e1       	ldi	r31, 0x10	; 16
     3fc:	2f 2e       	mov	r2, r31
     3fe:	f0 e2       	ldi	r31, 0x20	; 32
     400:	3f 2e       	mov	r3, r31
     402:	f0 2d       	mov	r31, r0
     404:	81 2c       	mov	r8, r1
     406:	91 2c       	mov	r9, r1
	static uint8_t rs485busy = 0;
	uint8_t i;
	for (i = 0; i < 4; i++)
		links[i].updateLevel();
     408:	94 01       	movw	r18, r8
     40a:	f1 01       	movw	r30, r2
			_tickLastChg = sysState.sysTick;
	}

	void updateLevel()
	{
		int16_t ticksEl = (int16_t)(sysState.sysTick - _tickLastChg); //Elapsed ticks since beginning of dim
     40c:	ac e0       	ldi	r26, 0x0C	; 12
     40e:	b1 e2       	ldi	r27, 0x21	; 33
     410:	ed 90       	ld	r14, X+
     412:	fc 90       	ld	r15, X
     414:	83 89       	ldd	r24, Z+19	; 0x13
     416:	94 89       	ldd	r25, Z+20	; 0x14
     418:	e8 1a       	sub	r14, r24
     41a:	f9 0a       	sbc	r15, r25
		int16_t delta = (((ticksEl + 1) * _fadeRate) >> 5) - ((ticksEl * _fadeRate) >> 5); //Number of steps
     41c:	47 85       	ldd	r20, Z+15	; 0x0f
     41e:	50 e0       	ldi	r21, 0x00	; 0
     420:	b7 01       	movw	r22, r14
     422:	6f 5f       	subi	r22, 0xFF	; 255
     424:	7f 4f       	sbci	r23, 0xFF	; 255
     426:	64 9f       	mul	r22, r20
     428:	c0 01       	movw	r24, r0
     42a:	65 9f       	mul	r22, r21
     42c:	90 0d       	add	r25, r0
     42e:	74 9f       	mul	r23, r20
     430:	90 0d       	add	r25, r0
     432:	11 24       	eor	r1, r1
     434:	6c 01       	movw	r12, r24
     436:	d5 94       	asr	r13
     438:	c7 94       	ror	r12
     43a:	d5 94       	asr	r13
     43c:	c7 94       	ror	r12
     43e:	d5 94       	asr	r13
     440:	c7 94       	ror	r12
     442:	d5 94       	asr	r13
     444:	c7 94       	ror	r12
     446:	d5 94       	asr	r13
     448:	c7 94       	ror	r12
     44a:	84 1b       	sub	r24, r20
     44c:	95 0b       	sbc	r25, r21
     44e:	95 95       	asr	r25
     450:	87 95       	ror	r24
     452:	95 95       	asr	r25
     454:	87 95       	ror	r24
     456:	95 95       	asr	r25
     458:	87 95       	ror	r24
     45a:	95 95       	asr	r25
     45c:	87 95       	ror	r24
     45e:	95 95       	asr	r25
     460:	87 95       	ror	r24
     462:	c8 1a       	sub	r12, r24
     464:	d9 0a       	sbc	r13, r25
		if (_chActMask != PIN4_bm)
     466:	82 89       	ldd	r24, Z+18	; 0x12
     468:	80 31       	cpi	r24, 0x10	; 16
     46a:	11 f0       	breq	.+4      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
			PORTC.OUTCLR = _chActMask;
     46c:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
		for (int8_t i = 0; i < _linkCnt; i++)
     470:	81 81       	ldd	r24, Z+1	; 0x01
     472:	88 23       	and	r24, r24
     474:	09 f4       	brne	.+2      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     476:	d0 c0       	rjmp	.+416    	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
     478:	60 e0       	ldi	r22, 0x00	; 0
     47a:	70 e0       	ldi	r23, 0x00	; 0
     47c:	b1 2c       	mov	r11, r1
		{
			uint8_t s = _dir ? i : _linkCnt - i - 1; //Direction '1' means forward
			uint8_t j = _link[s];
     47e:	93 e2       	ldi	r25, 0x23	; 35
     480:	92 9f       	mul	r25, r18
     482:	d0 01       	movw	r26, r0
     484:	93 9f       	mul	r25, r19
     486:	b0 0d       	add	r27, r0
     488:	11 24       	eor	r1, r1
     48a:	a0 5f       	subi	r26, 0xF0	; 240
     48c:	bf 4d       	sbci	r27, 0xDF	; 223
						channelOT.linkSwCnt[j]++; //Increment switch counter
					}
				}
				else //Level needs to be raised
				{
					tempLvl += ((-tempLvl > delta) ? delta : -tempLvl) + (int16_t)_lvl[s];
     48e:	c9 82       	std	Y+1, r12	; 0x01
     490:	da 82       	std	Y+2, r13	; 0x02
     492:	ad 87       	std	Y+13, r26	; 0x0d
     494:	be 87       	std	Y+14, r27	; 0x0e
		int16_t delta = (((ticksEl + 1) * _fadeRate) >> 5) - ((ticksEl * _fadeRate) >> 5); //Number of steps
		if (_chActMask != PIN4_bm)
			PORTC.OUTCLR = _chActMask;
		for (int8_t i = 0; i < _linkCnt; i++)
		{
			uint8_t s = _dir ? i : _linkCnt - i - 1; //Direction '1' means forward
     496:	90 81       	ld	r25, Z
     498:	99 23       	and	r25, r25
     49a:	11 f0       	breq	.+4      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
     49c:	8b 2d       	mov	r24, r11
     49e:	03 c0       	rjmp	.+6      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     4a0:	9b 2d       	mov	r25, r11
     4a2:	90 95       	com	r25
     4a4:	89 0f       	add	r24, r25
			uint8_t j = _link[s];
     4a6:	0d 85       	ldd	r16, Y+13	; 0x0d
     4a8:	1e 85       	ldd	r17, Y+14	; 0x0e
     4aa:	08 0f       	add	r16, r24
     4ac:	11 1d       	adc	r17, r1
			int16_t tempLvl = gLevels[j] - _lvl[s]; //Difference between actual and set levels
     4ae:	d8 01       	movw	r26, r16
     4b0:	13 96       	adiw	r26, 0x03	; 3
     4b2:	ac 90       	ld	r10, X
     4b4:	4a 2d       	mov	r20, r10
     4b6:	50 e0       	ldi	r21, 0x00	; 0
     4b8:	ca 01       	movw	r24, r20
     4ba:	88 0f       	add	r24, r24
     4bc:	99 1f       	adc	r25, r25
     4be:	83 5a       	subi	r24, 0xA3	; 163
     4c0:	9e 4d       	sbci	r25, 0xDE	; 222
     4c2:	dc 01       	movw	r26, r24
     4c4:	2d 91       	ld	r18, X+
     4c6:	3c 91       	ld	r19, X
     4c8:	d8 01       	movw	r26, r16
     4ca:	16 96       	adiw	r26, 0x06	; 6
     4cc:	8c 91       	ld	r24, X
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	28 1b       	sub	r18, r24
     4d2:	39 0b       	sbc	r19, r25
			if (tempLvl && ticksEl >= i * _linkDelay)
     4d4:	09 f4       	brne	.+2      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     4d6:	94 c0       	rjmp	.+296    	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
     4d8:	00 89       	ldd	r16, Z+16	; 0x10
     4da:	11 89       	ldd	r17, Z+17	; 0x11
     4dc:	60 9f       	mul	r22, r16
     4de:	30 01       	movw	r6, r0
     4e0:	61 9f       	mul	r22, r17
     4e2:	70 0c       	add	r7, r0
     4e4:	70 9f       	mul	r23, r16
     4e6:	70 0c       	add	r7, r0
     4e8:	11 24       	eor	r1, r1
     4ea:	e6 14       	cp	r14, r6
     4ec:	f7 04       	cpc	r15, r7
     4ee:	0c f4       	brge	.+2      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     4f0:	87 c0       	rjmp	.+270    	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
			{
				if (tempLvl > 0) //Level needs to be lowered
     4f2:	12 16       	cp	r1, r18
     4f4:	13 06       	cpc	r1, r19
     4f6:	0c f0       	brlt	.+2      	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
     4f8:	4e c0       	rjmp	.+156    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
				{
					tempLvl -= ((tempLvl > delta) ? delta : tempLvl) - (int16_t)_lvl[s];
     4fa:	69 81       	ldd	r22, Y+1	; 0x01
     4fc:	7a 81       	ldd	r23, Y+2	; 0x02
     4fe:	2c 15       	cp	r18, r12
     500:	3d 05       	cpc	r19, r13
     502:	0c f4       	brge	.+2      	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
     504:	b9 01       	movw	r22, r18
     506:	68 1b       	sub	r22, r24
     508:	79 0b       	sbc	r23, r25
     50a:	26 1b       	sub	r18, r22
     50c:	37 0b       	sbc	r19, r23
					if (!tempLvl) //Actual level became zero
     50e:	09 f0       	breq	.+2      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
     510:	5d c0       	rjmp	.+186    	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
					{
						tempLvl -= (int16_t)_fadeRate << 2; //Subtract 4x fade steps, so off/on delay will be 4s
     512:	27 85       	ldd	r18, Z+15	; 0x0f
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	22 0f       	add	r18, r18
     518:	33 1f       	adc	r19, r19
     51a:	22 0f       	add	r18, r18
     51c:	33 1f       	adc	r19, r19
     51e:	31 95       	neg	r19
     520:	21 95       	neg	r18
     522:	31 09       	sbc	r19, r1
						channelOT.linkOnTime[j] += (uint32_t)(sysState.sysTick - _onTimeStamp) >> 5; //Add seconds
     524:	8a 01       	movw	r16, r20
     526:	00 0f       	add	r16, r16
     528:	11 1f       	adc	r17, r17
     52a:	00 0f       	add	r16, r16
     52c:	11 1f       	adc	r17, r17
     52e:	0c 52       	subi	r16, 0x2C	; 44
     530:	1f 4d       	sbci	r17, 0xDF	; 223
     532:	ac e0       	ldi	r26, 0x0C	; 12
     534:	b1 e2       	ldi	r27, 0x21	; 33
     536:	6d 91       	ld	r22, X+
     538:	7d 91       	ld	r23, X+
     53a:	8d 91       	ld	r24, X+
     53c:	9c 91       	ld	r25, X
     53e:	43 8c       	ldd	r4, Z+27	; 0x1b
     540:	54 8c       	ldd	r5, Z+28	; 0x1c
     542:	65 8c       	ldd	r6, Z+29	; 0x1d
     544:	76 8c       	ldd	r7, Z+30	; 0x1e
     546:	64 19       	sub	r22, r4
     548:	75 09       	sbc	r23, r5
     54a:	86 09       	sbc	r24, r6
     54c:	97 09       	sbc	r25, r7
     54e:	68 94       	set
     550:	14 f8       	bld	r1, 4
     552:	96 95       	lsr	r25
     554:	87 95       	ror	r24
     556:	77 95       	ror	r23
     558:	67 95       	ror	r22
     55a:	16 94       	lsr	r1
     55c:	d1 f7       	brne	.-12     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
     55e:	d8 01       	movw	r26, r16
     560:	4d 90       	ld	r4, X+
     562:	5d 90       	ld	r5, X+
     564:	6d 90       	ld	r6, X+
     566:	7c 90       	ld	r7, X
     568:	13 97       	sbiw	r26, 0x03	; 3
     56a:	46 0e       	add	r4, r22
     56c:	57 1e       	adc	r5, r23
     56e:	68 1e       	adc	r6, r24
     570:	79 1e       	adc	r7, r25
     572:	4d 92       	st	X+, r4
     574:	5d 92       	st	X+, r5
     576:	6d 92       	st	X+, r6
     578:	7c 92       	st	X, r7
     57a:	13 97       	sbiw	r26, 0x03	; 3
						channelOT.linkSwCnt[j]++; //Increment switch counter
     57c:	ba 01       	movw	r22, r20
     57e:	66 0f       	add	r22, r22
     580:	77 1f       	adc	r23, r23
     582:	68 50       	subi	r22, 0x08	; 8
     584:	7f 4d       	sbci	r23, 0xDF	; 223
     586:	db 01       	movw	r26, r22
     588:	8d 91       	ld	r24, X+
     58a:	9c 91       	ld	r25, X
     58c:	11 97       	sbiw	r26, 0x01	; 1
     58e:	01 96       	adiw	r24, 0x01	; 1
     590:	8d 93       	st	X+, r24
     592:	9c 93       	st	X, r25
     594:	1b c0       	rjmp	.+54     	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
					}
				}
				else //Level needs to be raised
				{
					tempLvl += ((-tempLvl > delta) ? delta : -tempLvl) + (int16_t)_lvl[s];
     596:	66 27       	eor	r22, r22
     598:	77 27       	eor	r23, r23
     59a:	62 1b       	sub	r22, r18
     59c:	73 0b       	sbc	r23, r19
     59e:	c6 16       	cp	r12, r22
     5a0:	d7 06       	cpc	r13, r23
     5a2:	14 f4       	brge	.+4      	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
     5a4:	69 81       	ldd	r22, Y+1	; 0x01
     5a6:	7a 81       	ldd	r23, Y+2	; 0x02
     5a8:	86 0f       	add	r24, r22
     5aa:	97 1f       	adc	r25, r23
     5ac:	28 0f       	add	r18, r24
     5ae:	39 1f       	adc	r19, r25
					if (!gLevels[j] && tempLvl > 0) //Lamp has been switched on - remember ticks
     5b0:	ba 01       	movw	r22, r20
     5b2:	66 0f       	add	r22, r22
     5b4:	77 1f       	adc	r23, r23
     5b6:	63 5a       	subi	r22, 0xA3	; 163
     5b8:	7e 4d       	sbci	r23, 0xDE	; 222
     5ba:	db 01       	movw	r26, r22
     5bc:	8d 91       	ld	r24, X+
     5be:	9c 91       	ld	r25, X
     5c0:	89 2b       	or	r24, r25
     5c2:	21 f4       	brne	.+8      	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
     5c4:	12 16       	cp	r1, r18
     5c6:	13 06       	cpc	r1, r19
     5c8:	0c f4       	brge	.+2      	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
     5ca:	74 c2       	rjmp	.+1256   	; 0xab4 <__LOCK_REGION_LENGTH__+0x6b4>
						_onTimeStamp = sysState.sysTick;
				}
				gLevels[j] = tempLvl;
     5cc:	44 0f       	add	r20, r20
     5ce:	55 1f       	adc	r21, r21
     5d0:	43 5a       	subi	r20, 0xA3	; 163
     5d2:	5e 4d       	sbci	r21, 0xDE	; 222
     5d4:	da 01       	movw	r26, r20
     5d6:	2d 93       	st	X+, r18
     5d8:	3c 93       	st	X, r19
				if (tempLvl >= 0)
     5da:	33 23       	and	r19, r19
     5dc:	8c f0       	brlt	.+34     	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
				{
					gLevelChg |= 1 << j;
     5de:	20 91 5c 21 	lds	r18, 0x215C	; 0x80215c <gLevelChg>
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	02 c0       	rjmp	.+4      	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
     5e8:	88 0f       	add	r24, r24
     5ea:	99 1f       	adc	r25, r25
     5ec:	aa 94       	dec	r10
     5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
     5f0:	82 2b       	or	r24, r18
     5f2:	80 93 5c 21 	sts	0x215C, r24	; 0x80215c <gLevelChg>
					if (_chActMask != PIN4_bm)
     5f6:	82 89       	ldd	r24, Z+18	; 0x12
     5f8:	80 31       	cpi	r24, 0x10	; 16
     5fa:	11 f0       	breq	.+4      	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
						PORTC.OUTSET = _chActMask; //Switch on activity LED
     5fc:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
     600:	b3 94       	inc	r11
	{
		int16_t ticksEl = (int16_t)(sysState.sysTick - _tickLastChg); //Elapsed ticks since beginning of dim
		int16_t delta = (((ticksEl + 1) * _fadeRate) >> 5) - ((ticksEl * _fadeRate) >> 5); //Number of steps
		if (_chActMask != PIN4_bm)
			PORTC.OUTCLR = _chActMask;
		for (int8_t i = 0; i < _linkCnt; i++)
     602:	6b 2d       	mov	r22, r11
     604:	0b 2c       	mov	r0, r11
     606:	00 0c       	add	r0, r0
     608:	77 0b       	sbc	r23, r23
     60a:	81 81       	ldd	r24, Z+1	; 0x01
     60c:	28 2f       	mov	r18, r24
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	62 17       	cp	r22, r18
     612:	73 07       	cpc	r23, r19
     614:	0c f4       	brge	.+2      	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
     616:	3f cf       	rjmp	.-386    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     618:	bf ef       	ldi	r27, 0xFF	; 255
     61a:	8b 1a       	sub	r8, r27
     61c:	9b 0a       	sbc	r9, r27
     61e:	e3 e2       	ldi	r30, 0x23	; 35
     620:	2e 0e       	add	r2, r30
     622:	31 1c       	adc	r3, r1
ISR(RTC_OVF_vect)
{
	sysState.sysTick++;
	static uint8_t rs485busy = 0;
	uint8_t i;
	for (i = 0; i < 4; i++)
     624:	f4 e0       	ldi	r31, 0x04	; 4
     626:	8f 16       	cp	r8, r31
     628:	91 04       	cpc	r9, r1
     62a:	09 f0       	breq	.+2      	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
     62c:	ed ce       	rjmp	.-550    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
			cntDown = true;
		}
	}
	void updateLevel()
	{
		if (cntDown)
     62e:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <msenCh>
     632:	88 23       	and	r24, r24
     634:	09 f4       	brne	.+2      	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
     636:	5f c2       	rjmp	.+1214   	; 0xaf6 <__LOCK_REGION_LENGTH__+0x6f6>
		{
			uint16_t ton = (uint16_t)(sysState.sysTick - _onTimeStamp) >> 5;
     638:	2c e0       	ldi	r18, 0x0C	; 12
     63a:	31 e2       	ldi	r19, 0x21	; 33
     63c:	d9 01       	movw	r26, r18
     63e:	bc 91       	ld	r27, X
     640:	bd 83       	std	Y+5, r27	; 0x05
     642:	f9 01       	movw	r30, r18
     644:	f1 81       	ldd	r31, Z+1	; 0x01
     646:	fe 83       	std	Y+6, r31	; 0x06
     648:	d9 01       	movw	r26, r18
     64a:	12 96       	adiw	r26, 0x02	; 2
     64c:	bc 91       	ld	r27, X
     64e:	bf 83       	std	Y+7, r27	; 0x07
     650:	f9 01       	movw	r30, r18
     652:	f3 81       	ldd	r31, Z+3	; 0x03
     654:	f8 87       	std	Y+8, r31	; 0x08
     656:	d9 01       	movw	r26, r18
     658:	14 96       	adiw	r26, 0x04	; 4
     65a:	bc 91       	ld	r27, X
     65c:	b9 87       	std	Y+9, r27	; 0x09
     65e:	f9 01       	movw	r30, r18
     660:	f5 81       	ldd	r31, Z+5	; 0x05
     662:	fa 87       	std	Y+10, r31	; 0x0a
     664:	d9 01       	movw	r26, r18
     666:	16 96       	adiw	r26, 0x06	; 6
     668:	bc 91       	ld	r27, X
     66a:	bb 87       	std	Y+11, r27	; 0x0b
     66c:	f9 01       	movw	r30, r18
     66e:	f7 81       	ldd	r31, Z+7	; 0x07
     670:	fc 87       	std	Y+12, r31	; 0x0c
     672:	22 e0       	ldi	r18, 0x02	; 2
     674:	30 e2       	ldi	r19, 0x20	; 32
			if (ton > _fTime)
     676:	d9 01       	movw	r26, r18
     678:	16 96       	adiw	r26, 0x06	; 6
     67a:	4d 91       	ld	r20, X+
     67c:	5c 91       	ld	r21, X
     67e:	17 97       	sbiw	r26, 0x07	; 7
     680:	ed 81       	ldd	r30, Y+5	; 0x05
     682:	fe 81       	ldd	r31, Y+6	; 0x06
     684:	e4 1b       	sub	r30, r20
     686:	f5 0b       	sbc	r31, r21
     688:	af 01       	movw	r20, r30
     68a:	56 95       	lsr	r21
     68c:	47 95       	ror	r20
     68e:	52 95       	swap	r21
     690:	42 95       	swap	r20
     692:	4f 70       	andi	r20, 0x0F	; 15
     694:	45 27       	eor	r20, r21
     696:	5f 70       	andi	r21, 0x0F	; 15
     698:	45 27       	eor	r20, r21
     69a:	15 96       	adiw	r26, 0x05	; 5
     69c:	2c 91       	ld	r18, X
     69e:	15 97       	sbiw	r26, 0x05	; 5
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	24 17       	cp	r18, r20
     6a4:	35 07       	cpc	r19, r21
     6a6:	08 f0       	brcs	.+2      	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
     6a8:	81 c0       	rjmp	.+258    	; 0x7ac <__LOCK_REGION_LENGTH__+0x3ac>
			{
				ltEnt = cntDown = false;
     6aa:	1c 92       	st	X, r1
     6ac:	11 96       	adiw	r26, 0x01	; 1
     6ae:	1c 92       	st	X, r1
     6b0:	11 97       	sbiw	r26, 0x01	; 1
				links[_linkNum].setLevel(0); //Both on and low time are expired, shut down the lamp
     6b2:	12 96       	adiw	r26, 0x02	; 2
     6b4:	4c 91       	ld	r20, X
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		uint8_t oLvl = sysState.linkLevels[_linkNum];
     6b6:	a4 2e       	mov	r10, r20
     6b8:	b1 2c       	mov	r11, r1
     6ba:	b3 e2       	ldi	r27, 0x23	; 35
     6bc:	4b 9f       	mul	r20, r27
     6be:	90 01       	movw	r18, r0
     6c0:	11 24       	eor	r1, r1
     6c2:	20 5f       	subi	r18, 0xF0	; 240
     6c4:	3f 4d       	sbci	r19, 0xDF	; 223
     6c6:	f9 01       	movw	r30, r18
     6c8:	22 81       	ldd	r18, Z+2	; 0x02
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	b9 01       	movw	r22, r18
     6ce:	64 5f       	subi	r22, 0xF4	; 244
     6d0:	7e 4d       	sbci	r23, 0xDE	; 222
     6d2:	db 01       	movw	r26, r22
     6d4:	51 96       	adiw	r26, 0x11	; 17
     6d6:	5c 91       	ld	r21, X
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
     6d8:	65 2f       	mov	r22, r21
     6da:	70 e0       	ldi	r23, 0x00	; 0
     6dc:	6e 5f       	subi	r22, 0xFE	; 254
     6de:	7f 4f       	sbci	r23, 0xFF	; 255
     6e0:	65 30       	cpi	r22, 0x05	; 5
     6e2:	71 05       	cpc	r23, r1
     6e4:	18 f4       	brcc	.+6      	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
     6e6:	55 23       	and	r21, r21
     6e8:	09 f4       	brne	.+2      	; 0x6ec <__LOCK_REGION_LENGTH__+0x2ec>
     6ea:	05 c2       	rjmp	.+1034   	; 0xaf6 <__LOCK_REGION_LENGTH__+0x6f6>
			return;
		sysState.linkLevels[_linkNum] = level;
     6ec:	24 5f       	subi	r18, 0xF4	; 244
     6ee:	3e 4d       	sbci	r19, 0xDE	; 222
     6f0:	f9 01       	movw	r30, r18
     6f2:	11 8a       	std	Z+17, r1	; 0x11

		for (uint8_t i = 0; i < _linkCnt; i++)
     6f4:	53 e2       	ldi	r21, 0x23	; 35
     6f6:	5a 9d       	mul	r21, r10
     6f8:	90 01       	movw	r18, r0
     6fa:	5b 9d       	mul	r21, r11
     6fc:	30 0d       	add	r19, r0
     6fe:	11 24       	eor	r1, r1
     700:	20 5f       	subi	r18, 0xF0	; 240
     702:	3f 4d       	sbci	r19, 0xDF	; 223
     704:	d9 01       	movw	r26, r18
     706:	11 96       	adiw	r26, 0x01	; 1
     708:	cc 90       	ld	r12, X
     70a:	cc 20       	and	r12, r12
     70c:	19 f1       	breq	.+70     	; 0x754 <__LOCK_REGION_LENGTH__+0x354>
     70e:	b3 e2       	ldi	r27, 0x23	; 35
     710:	4b 9f       	mul	r20, r27
     712:	a0 01       	movw	r20, r0
     714:	11 24       	eor	r1, r1
     716:	4d 5e       	subi	r20, 0xED	; 237
     718:	5f 4d       	sbci	r21, 0xDF	; 223
     71a:	d1 2c       	mov	r13, r1
     71c:	f1 2c       	mov	r15, r1
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     71e:	fa 01       	movw	r30, r20
     720:	20 81       	ld	r18, Z
     722:	4f 5f       	subi	r20, 0xFF	; 255
     724:	5f 4f       	sbci	r21, 0xFF	; 255
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	22 0f       	add	r18, r18
     72a:	33 1f       	adc	r19, r19
     72c:	23 5a       	subi	r18, 0xA3	; 163
     72e:	3e 4d       	sbci	r19, 0xDE	; 222
     730:	d9 01       	movw	r26, r18
     732:	0d 91       	ld	r16, X+
     734:	1c 91       	ld	r17, X
     736:	23 81       	ldd	r18, Z+3	; 0x03
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	61 e0       	ldi	r22, 0x01	; 1
     73c:	20 17       	cp	r18, r16
     73e:	31 07       	cpc	r19, r17
     740:	09 f4       	brne	.+2      	; 0x744 <__LOCK_REGION_LENGTH__+0x344>
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	d6 2a       	or	r13, r22
			if (!level || !_difLvl[i]) //Set zero level directly
				_lvl[i] = 0;
     746:	fa 01       	movw	r30, r20
     748:	12 82       	std	Z+2, r1	; 0x02
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
			return;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
     74a:	f3 94       	inc	r15
     74c:	fc 10       	cpse	r15, r12
     74e:	e7 cf       	rjmp	.-50     	; 0x71e <__LOCK_REGION_LENGTH__+0x31e>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     750:	d1 10       	cpse	r13, r1
     752:	d1 c1       	rjmp	.+930    	; 0xaf6 <__LOCK_REGION_LENGTH__+0x6f6>
			_tickLastChg = sysState.sysTick;
     754:	23 e2       	ldi	r18, 0x23	; 35
     756:	2a 9d       	mul	r18, r10
     758:	a0 01       	movw	r20, r0
     75a:	2b 9d       	mul	r18, r11
     75c:	50 0d       	add	r21, r0
     75e:	11 24       	eor	r1, r1
     760:	40 5f       	subi	r20, 0xF0	; 240
     762:	5f 4d       	sbci	r21, 0xDF	; 223
     764:	9a 01       	movw	r18, r20
     766:	2d 5e       	subi	r18, 0xED	; 237
     768:	3f 4f       	sbci	r19, 0xFF	; 255
     76a:	ed 81       	ldd	r30, Y+5	; 0x05
     76c:	da 01       	movw	r26, r20
     76e:	53 96       	adiw	r26, 0x13	; 19
     770:	ec 93       	st	X, r30
     772:	ee 81       	ldd	r30, Y+6	; 0x06
     774:	d9 01       	movw	r26, r18
     776:	11 96       	adiw	r26, 0x01	; 1
     778:	ec 93       	st	X, r30
     77a:	11 97       	sbiw	r26, 0x01	; 1
     77c:	ff 81       	ldd	r31, Y+7	; 0x07
     77e:	12 96       	adiw	r26, 0x02	; 2
     780:	fc 93       	st	X, r31
     782:	12 97       	sbiw	r26, 0x02	; 2
     784:	68 85       	ldd	r22, Y+8	; 0x08
     786:	13 96       	adiw	r26, 0x03	; 3
     788:	6c 93       	st	X, r22
     78a:	13 97       	sbiw	r26, 0x03	; 3
     78c:	79 85       	ldd	r23, Y+9	; 0x09
     78e:	14 96       	adiw	r26, 0x04	; 4
     790:	7c 93       	st	X, r23
     792:	14 97       	sbiw	r26, 0x04	; 4
     794:	8a 85       	ldd	r24, Y+10	; 0x0a
     796:	15 96       	adiw	r26, 0x05	; 5
     798:	8c 93       	st	X, r24
     79a:	15 97       	sbiw	r26, 0x05	; 5
     79c:	9b 85       	ldd	r25, Y+11	; 0x0b
     79e:	16 96       	adiw	r26, 0x06	; 6
     7a0:	9c 93       	st	X, r25
     7a2:	16 97       	sbiw	r26, 0x06	; 6
     7a4:	ec 85       	ldd	r30, Y+12	; 0x0c
     7a6:	17 96       	adiw	r26, 0x07	; 7
     7a8:	ec 93       	st	X, r30
     7aa:	a5 c1       	rjmp	.+842    	; 0xaf6 <__LOCK_REGION_LENGTH__+0x6f6>
			if (ton > _fTime)
			{
				ltEnt = cntDown = false;
				links[_linkNum].setLevel(0); //Both on and low time are expired, shut down the lamp
			}
			else if (!ltEnt && _onTime)
     7ac:	20 91 03 20 	lds	r18, 0x2003	; 0x802003 <msenCh+0x1>
     7b0:	21 11       	cpse	r18, r1
     7b2:	a1 c1       	rjmp	.+834    	; 0xaf6 <__LOCK_REGION_LENGTH__+0x6f6>
     7b4:	20 91 06 20 	lds	r18, 0x2006	; 0x802006 <msenCh+0x4>
     7b8:	22 23       	and	r18, r18
     7ba:	09 f4       	brne	.+2      	; 0x7be <__LOCK_REGION_LENGTH__+0x3be>
     7bc:	9c c1       	rjmp	.+824    	; 0xaf6 <__LOCK_REGION_LENGTH__+0x6f6>
			{
				ltEnt = true;
     7be:	22 e0       	ldi	r18, 0x02	; 2
     7c0:	30 e2       	ldi	r19, 0x20	; 32
     7c2:	41 e0       	ldi	r20, 0x01	; 1
     7c4:	d9 01       	movw	r26, r18
     7c6:	11 96       	adiw	r26, 0x01	; 1
     7c8:	4c 93       	st	X, r20
     7ca:	11 97       	sbiw	r26, 0x01	; 1
				links[_linkNum].setLevel(validConf.msenLowLvl);
     7cc:	f0 90 40 21 	lds	r15, 0x2140	; 0x802140 <validConf+0x1c>
     7d0:	12 96       	adiw	r26, 0x02	; 2
     7d2:	6c 91       	ld	r22, X
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		uint8_t oLvl = sysState.linkLevels[_linkNum];
     7d4:	a6 2e       	mov	r10, r22
     7d6:	b1 2c       	mov	r11, r1
     7d8:	b3 e2       	ldi	r27, 0x23	; 35
     7da:	6b 9f       	mul	r22, r27
     7dc:	90 01       	movw	r18, r0
     7de:	11 24       	eor	r1, r1
     7e0:	20 5f       	subi	r18, 0xF0	; 240
     7e2:	3f 4d       	sbci	r19, 0xDF	; 223
     7e4:	f9 01       	movw	r30, r18
     7e6:	22 81       	ldd	r18, Z+2	; 0x02
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	a9 01       	movw	r20, r18
     7ec:	44 5f       	subi	r20, 0xF4	; 244
     7ee:	5e 4d       	sbci	r21, 0xDE	; 222
     7f0:	da 01       	movw	r26, r20
     7f2:	51 96       	adiw	r26, 0x11	; 17
     7f4:	7c 91       	ld	r23, X
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
     7f6:	47 2f       	mov	r20, r23
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	4f 19       	sub	r20, r15
     7fc:	51 09       	sbc	r21, r1
     7fe:	4e 5f       	subi	r20, 0xFE	; 254
     800:	5f 4f       	sbci	r21, 0xFF	; 255
     802:	45 30       	cpi	r20, 0x05	; 5
     804:	51 05       	cpc	r21, r1
     806:	48 f4       	brcc	.+18     	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
     808:	51 e0       	ldi	r21, 0x01	; 1
     80a:	f1 10       	cpse	r15, r1
     80c:	01 c0       	rjmp	.+2      	; 0x810 <__LOCK_REGION_LENGTH__+0x410>
     80e:	50 e0       	ldi	r21, 0x00	; 0
     810:	41 e0       	ldi	r20, 0x01	; 1
     812:	71 11       	cpse	r23, r1
     814:	40 e0       	ldi	r20, 0x00	; 0
     816:	54 13       	cpse	r21, r20
     818:	6e c1       	rjmp	.+732    	; 0xaf6 <__LOCK_REGION_LENGTH__+0x6f6>
			return;
		sysState.linkLevels[_linkNum] = level;
     81a:	a9 01       	movw	r20, r18
     81c:	44 5f       	subi	r20, 0xF4	; 244
     81e:	5e 4d       	sbci	r21, 0xDE	; 222
     820:	fa 01       	movw	r30, r20
     822:	f1 8a       	std	Z+17, r15	; 0x11

		for (uint8_t i = 0; i < _linkCnt; i++)
     824:	43 e2       	ldi	r20, 0x23	; 35
     826:	4a 9d       	mul	r20, r10
     828:	90 01       	movw	r18, r0
     82a:	4b 9d       	mul	r20, r11
     82c:	30 0d       	add	r19, r0
     82e:	11 24       	eor	r1, r1
     830:	20 5f       	subi	r18, 0xF0	; 240
     832:	3f 4d       	sbci	r19, 0xDF	; 223
     834:	d9 01       	movw	r26, r18
     836:	11 96       	adiw	r26, 0x01	; 1
     838:	ec 90       	ld	r14, X
     83a:	ee 20       	and	r14, r14
     83c:	b1 f1       	breq	.+108    	; 0x8aa <__LOCK_REGION_LENGTH__+0x4aa>
     83e:	b3 e2       	ldi	r27, 0x23	; 35
     840:	6b 9f       	mul	r22, r27
     842:	90 01       	movw	r18, r0
     844:	11 24       	eor	r1, r1
     846:	2d 5e       	subi	r18, 0xED	; 237
     848:	3f 4d       	sbci	r19, 0xDF	; 223
     84a:	70 e0       	ldi	r23, 0x00	; 0
     84c:	60 e0       	ldi	r22, 0x00	; 0
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
			if (!level || !_difLvl[i]) //Set zero level directly
				_lvl[i] = 0;
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
     84e:	cf 2c       	mov	r12, r15
     850:	d1 2c       	mov	r13, r1
			return;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     852:	f9 01       	movw	r30, r18
     854:	40 81       	ld	r20, Z
     856:	2f 5f       	subi	r18, 0xFF	; 255
     858:	3f 4f       	sbci	r19, 0xFF	; 255
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	44 0f       	add	r20, r20
     85e:	55 1f       	adc	r21, r21
     860:	43 5a       	subi	r20, 0xA3	; 163
     862:	5e 4d       	sbci	r21, 0xDE	; 222
     864:	da 01       	movw	r26, r20
     866:	8d 90       	ld	r8, X+
     868:	9c 90       	ld	r9, X
     86a:	43 81       	ldd	r20, Z+3	; 0x03
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	11 e0       	ldi	r17, 0x01	; 1
     870:	48 15       	cp	r20, r8
     872:	59 05       	cpc	r21, r9
     874:	09 f4       	brne	.+2      	; 0x878 <__LOCK_REGION_LENGTH__+0x478>
     876:	10 e0       	ldi	r17, 0x00	; 0
     878:	71 2b       	or	r23, r17
			if (!level || !_difLvl[i]) //Set zero level directly
     87a:	ff 20       	and	r15, r15
     87c:	21 f0       	breq	.+8      	; 0x886 <__LOCK_REGION_LENGTH__+0x486>
     87e:	f9 01       	movw	r30, r18
     880:	40 85       	ldd	r20, Z+8	; 0x08
     882:	41 11       	cpse	r20, r1
     884:	04 c0       	rjmp	.+8      	; 0x88e <__LOCK_REGION_LENGTH__+0x48e>
				_lvl[i] = 0;
     886:	d9 01       	movw	r26, r18
     888:	12 96       	adiw	r26, 0x02	; 2
     88a:	1c 92       	st	X, r1
     88c:	09 c0       	rjmp	.+18     	; 0x8a0 <__LOCK_REGION_LENGTH__+0x4a0>
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
     88e:	4c 9d       	mul	r20, r12
     890:	80 01       	movw	r16, r0
     892:	4d 9d       	mul	r20, r13
     894:	10 0d       	add	r17, r0
     896:	11 24       	eor	r1, r1
     898:	f9 01       	movw	r30, r18
     89a:	45 81       	ldd	r20, Z+5	; 0x05
     89c:	41 0f       	add	r20, r17
     89e:	42 83       	std	Z+2, r20	; 0x02
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
			return;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
     8a0:	6f 5f       	subi	r22, 0xFF	; 255
     8a2:	6e 11       	cpse	r22, r14
     8a4:	d6 cf       	rjmp	.-84     	; 0x852 <__LOCK_REGION_LENGTH__+0x452>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     8a6:	71 11       	cpse	r23, r1
     8a8:	26 c1       	rjmp	.+588    	; 0xaf6 <__LOCK_REGION_LENGTH__+0x6f6>
			_tickLastChg = sysState.sysTick;
     8aa:	23 e2       	ldi	r18, 0x23	; 35
     8ac:	2a 9d       	mul	r18, r10
     8ae:	a0 01       	movw	r20, r0
     8b0:	2b 9d       	mul	r18, r11
     8b2:	50 0d       	add	r21, r0
     8b4:	11 24       	eor	r1, r1
     8b6:	40 5f       	subi	r20, 0xF0	; 240
     8b8:	5f 4d       	sbci	r21, 0xDF	; 223
     8ba:	9a 01       	movw	r18, r20
     8bc:	2d 5e       	subi	r18, 0xED	; 237
     8be:	3f 4f       	sbci	r19, 0xFF	; 255
     8c0:	ed 81       	ldd	r30, Y+5	; 0x05
     8c2:	da 01       	movw	r26, r20
     8c4:	53 96       	adiw	r26, 0x13	; 19
     8c6:	ec 93       	st	X, r30
     8c8:	ee 81       	ldd	r30, Y+6	; 0x06
     8ca:	d9 01       	movw	r26, r18
     8cc:	11 96       	adiw	r26, 0x01	; 1
     8ce:	ec 93       	st	X, r30
     8d0:	11 97       	sbiw	r26, 0x01	; 1
     8d2:	ff 81       	ldd	r31, Y+7	; 0x07
     8d4:	12 96       	adiw	r26, 0x02	; 2
     8d6:	fc 93       	st	X, r31
     8d8:	12 97       	sbiw	r26, 0x02	; 2
     8da:	68 85       	ldd	r22, Y+8	; 0x08
     8dc:	13 96       	adiw	r26, 0x03	; 3
     8de:	6c 93       	st	X, r22
     8e0:	13 97       	sbiw	r26, 0x03	; 3
     8e2:	79 85       	ldd	r23, Y+9	; 0x09
     8e4:	14 96       	adiw	r26, 0x04	; 4
     8e6:	7c 93       	st	X, r23
     8e8:	14 97       	sbiw	r26, 0x04	; 4
     8ea:	8a 85       	ldd	r24, Y+10	; 0x0a
     8ec:	15 96       	adiw	r26, 0x05	; 5
     8ee:	8c 93       	st	X, r24
     8f0:	15 97       	sbiw	r26, 0x05	; 5
     8f2:	9b 85       	ldd	r25, Y+11	; 0x0b
     8f4:	16 96       	adiw	r26, 0x06	; 6
     8f6:	9c 93       	st	X, r25
     8f8:	16 97       	sbiw	r26, 0x06	; 6
     8fa:	ec 85       	ldd	r30, Y+12	; 0x0c
     8fc:	17 96       	adiw	r26, 0x07	; 7
     8fe:	ec 93       	st	X, r30
     900:	fa c0       	rjmp	.+500    	; 0xaf6 <__LOCK_REGION_LENGTH__+0x6f6>
	uint8_t i;
	for (i = 0; i < 4; i++)
		links[i].updateLevel();
	msenCh.updateLevel();
	for (i = 0; i < 9; i++)
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
     902:	fc 01       	movw	r30, r24
     904:	ee 0f       	add	r30, r30
     906:	ff 1f       	adc	r31, r31
     908:	e3 5a       	subi	r30, 0xA3	; 163
     90a:	fe 4d       	sbci	r31, 0xDE	; 222
     90c:	20 81       	ld	r18, Z
     90e:	31 81       	ldd	r19, Z+1	; 0x01
     910:	12 16       	cp	r1, r18
     912:	13 06       	cpc	r1, r19
     914:	44 f4       	brge	.+16     	; 0x926 <__LOCK_REGION_LENGTH__+0x526>
     916:	fc 01       	movw	r30, r24
     918:	ee 0f       	add	r30, r30
     91a:	ff 1f       	adc	r31, r31
     91c:	e3 5a       	subi	r30, 0xA3	; 163
     91e:	fe 4d       	sbci	r31, 0xDE	; 222
     920:	20 81       	ld	r18, Z
     922:	31 81       	ldd	r19, Z+1	; 0x01
     924:	01 c0       	rjmp	.+2      	; 0x928 <__LOCK_REGION_LENGTH__+0x528>
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	2d 93       	st	X+, r18
     92a:	01 96       	adiw	r24, 0x01	; 1
	static uint8_t rs485busy = 0;
	uint8_t i;
	for (i = 0; i < 4; i++)
		links[i].updateLevel();
	msenCh.updateLevel();
	for (i = 0; i < 9; i++)
     92c:	89 30       	cpi	r24, 0x09	; 9
     92e:	91 05       	cpc	r25, r1
     930:	41 f7       	brne	.-48     	; 0x902 <__LOCK_REGION_LENGTH__+0x502>
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
	DSI8xFrames[0] = gLevelChg; //DSI start bit
     932:	80 91 5c 21 	lds	r24, 0x215C	; 0x80215c <gLevelChg>
     936:	80 93 47 21 	sts	0x2147, r24	; 0x802147 <DSI8xFrames>
     93a:	1b 82       	std	Y+3, r1	; 0x03
     93c:	1c 82       	std	Y+4, r1	; 0x04
     93e:	68 94       	set
     940:	ee 24       	eor	r14, r14
     942:	e3 f8       	bld	r14, 3
     944:	01 e0       	ldi	r16, 0x01	; 1
     946:	10 e0       	ldi	r17, 0x00	; 0
     948:	d8 01       	movw	r26, r16
     94a:	0b 80       	ldd	r0, Y+3	; 0x03
     94c:	02 c0       	rjmp	.+4      	; 0x952 <__LOCK_REGION_LENGTH__+0x552>
     94e:	aa 0f       	add	r26, r26
     950:	bb 1f       	adc	r27, r27
     952:	0a 94       	dec	r0
     954:	e2 f7       	brpl	.-8      	; 0x94e <__LOCK_REGION_LENGTH__+0x54e>
     956:	ec e0       	ldi	r30, 0x0C	; 12
     958:	f1 e2       	ldi	r31, 0x21	; 33
		{
			tmp1 >>= 1;
			tmp0 >>= 1;
			if (gLevelChg & (1 << j)) //Particular level has been changed
			{
				if (sysState.setLevels[j] & (1 << i)) //Set upper half-bit
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	d1 2c       	mov	r13, r1
     960:	f1 2c       	mov	r15, r1
	for (i = 0; i < 8; i++) //DSI frame bits 0-7
	{
		uint8_t tmp0 = 0, tmp1 = 0, j;
		for (j = 0; j < 8; j++) //Levels
		{
			tmp1 >>= 1;
     962:	6d 2d       	mov	r22, r13
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	75 95       	asr	r23
     968:	67 95       	ror	r22
     96a:	d6 2e       	mov	r13, r22
			tmp0 >>= 1;
     96c:	4f 2d       	mov	r20, r15
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	55 95       	asr	r21
     972:	47 95       	ror	r20
     974:	f4 2e       	mov	r15, r20
			if (gLevelChg & (1 << j)) //Particular level has been changed
     976:	80 91 5c 21 	lds	r24, 0x215C	; 0x80215c <gLevelChg>
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	02 2e       	mov	r0, r18
     97e:	02 c0       	rjmp	.+4      	; 0x984 <__LOCK_REGION_LENGTH__+0x584>
     980:	95 95       	asr	r25
     982:	87 95       	ror	r24
     984:	0a 94       	dec	r0
     986:	e2 f7       	brpl	.-8      	; 0x980 <__LOCK_REGION_LENGTH__+0x580>
     988:	80 ff       	sbrs	r24, 0
     98a:	0d c0       	rjmp	.+26     	; 0x9a6 <__LOCK_REGION_LENGTH__+0x5a6>
			{
				if (sysState.setLevels[j] & (1 << i)) //Set upper half-bit
     98c:	80 85       	ldd	r24, Z+8	; 0x08
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	8a 23       	and	r24, r26
     992:	9b 23       	and	r25, r27
     994:	89 2b       	or	r24, r25
     996:	21 f0       	breq	.+8      	; 0x9a0 <__LOCK_REGION_LENGTH__+0x5a0>
					tmp1 |= 0x80;
     998:	86 2f       	mov	r24, r22
     99a:	80 68       	ori	r24, 0x80	; 128
     99c:	d8 2e       	mov	r13, r24
     99e:	03 c0       	rjmp	.+6      	; 0x9a6 <__LOCK_REGION_LENGTH__+0x5a6>
				else
					tmp0 |= 0x80; //Set lower half-bit (one-zero transition)
     9a0:	94 2f       	mov	r25, r20
     9a2:	90 68       	ori	r25, 0x80	; 128
     9a4:	f9 2e       	mov	r15, r25
     9a6:	2f 5f       	subi	r18, 0xFF	; 255
     9a8:	3f 4f       	sbci	r19, 0xFF	; 255
     9aa:	31 96       	adiw	r30, 0x01	; 1
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
	DSI8xFrames[0] = gLevelChg; //DSI start bit
	for (i = 0; i < 8; i++) //DSI frame bits 0-7
	{
		uint8_t tmp0 = 0, tmp1 = 0, j;
		for (j = 0; j < 8; j++) //Levels
     9ac:	28 30       	cpi	r18, 0x08	; 8
     9ae:	31 05       	cpc	r19, r1
     9b0:	c1 f6       	brne	.-80     	; 0x962 <__LOCK_REGION_LENGTH__+0x562>
				else
					tmp0 |= 0x80; //Set lower half-bit (one-zero transition)
			}
		}
		j = (8 - i) << 1;
		DSI8xFrames[j - 1] = tmp1;
     9b2:	8e 2d       	mov	r24, r14
     9b4:	88 0f       	add	r24, r24
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	fc 01       	movw	r30, r24
     9ba:	ea 5b       	subi	r30, 0xBA	; 186
     9bc:	fe 4d       	sbci	r31, 0xDE	; 222
     9be:	d0 82       	st	Z, r13
		DSI8xFrames[j] = tmp0; //Manchester coded
     9c0:	fc 01       	movw	r30, r24
     9c2:	e9 5b       	subi	r30, 0xB9	; 185
     9c4:	fe 4d       	sbci	r31, 0xDE	; 222
     9c6:	f0 82       	st	Z, r15
     9c8:	ea 94       	dec	r14
     9ca:	ab 81       	ldd	r26, Y+3	; 0x03
     9cc:	bc 81       	ldd	r27, Y+4	; 0x04
     9ce:	11 96       	adiw	r26, 0x01	; 1
     9d0:	ab 83       	std	Y+3, r26	; 0x03
     9d2:	bc 83       	std	Y+4, r27	; 0x04
		links[i].updateLevel();
	msenCh.updateLevel();
	for (i = 0; i < 9; i++)
		sysState.setLevels[i] = (gLevels[i] < 1) ? 0 : (uint8_t)gLevels[i];
	DSI8xFrames[0] = gLevelChg; //DSI start bit
	for (i = 0; i < 8; i++) //DSI frame bits 0-7
     9d4:	e1 10       	cpse	r14, r1
     9d6:	b8 cf       	rjmp	.-144    	; 0x948 <__LOCK_REGION_LENGTH__+0x548>
		}
		j = (8 - i) << 1;
		DSI8xFrames[j - 1] = tmp1;
		DSI8xFrames[j] = tmp0; //Manchester coded
	}
	DSI8xFrames[17] = 0; //DSI stop bit
     9d8:	10 92 58 21 	sts	0x2158, r1	; 0x802158 <DSI8xFrames+0x11>
	gLevelChg = 0; //Clear flags for changed levels
     9dc:	10 92 5c 21 	sts	0x215C, r1	; 0x80215c <gLevelChg>
	if (sysState.setLevels[8] > 0) //On/off channel processing
     9e0:	80 91 1c 21 	lds	r24, 0x211C	; 0x80211c <sysState+0x10>
     9e4:	88 23       	and	r24, r24
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__LOCK_REGION_LENGTH__+0x5f0>
		PORTA.OUTSET = PIN7_bm;
     9e8:	80 e8       	ldi	r24, 0x80	; 128
     9ea:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
     9ee:	03 c0       	rjmp	.+6      	; 0x9f6 <__LOCK_REGION_LENGTH__+0x5f6>
	else
		PORTA.OUTCLR = PIN7_bm;
     9f0:	80 e8       	ldi	r24, 0x80	; 128
     9f2:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>

	if ((char)sysState.sysTick % 4 == 0) //Initialize conversion sequence 8 times per second
     9f6:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <sysState>
     9fa:	83 70       	andi	r24, 0x03	; 3
     9fc:	39 f4       	brne	.+14     	; 0xa0c <__LOCK_REGION_LENGTH__+0x60c>
	{
		ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN1_gc;
     9fe:	e0 e0       	ldi	r30, 0x00	; 0
     a00:	f2 e0       	ldi	r31, 0x02	; 2
     a02:	88 e0       	ldi	r24, 0x08	; 8
     a04:	81 a3       	std	Z+33, r24	; 0x21
		ADCA.CTRLA |= ADC_START_bm; //Start conversion from pin 1 (channel 1)
     a06:	80 81       	ld	r24, Z
     a08:	84 60       	ori	r24, 0x04	; 4
     a0a:	80 83       	st	Z, r24
	}

	if (!((uint8_t)sysState.sysTick & 0x1F))
     a0c:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <sysState>
     a10:	8f 71       	andi	r24, 0x1F	; 31
     a12:	19 f4       	brne	.+6      	; 0xa1a <__LOCK_REGION_LENGTH__+0x61a>
		PORTC.OUTTGL = PIN0_bm; //Heartbeat LED
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	80 93 47 06 	sts	0x0647, r24	; 0x800647 <__TEXT_REGION_LENGTH__+0x700647>

	if (((uint32_t)sysState.sysTick & 0x7FFFF) == 0) //Save state to EEPROM every 4.5 hrs
     a1a:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <sysState>
     a1e:	90 91 0d 21 	lds	r25, 0x210D	; 0x80210d <sysState+0x1>
     a22:	a0 91 0e 21 	lds	r26, 0x210E	; 0x80210e <sysState+0x2>
     a26:	b0 91 0f 21 	lds	r27, 0x210F	; 0x80210f <sysState+0x3>
     a2a:	a7 70       	andi	r26, 0x07	; 7
     a2c:	bb 27       	eor	r27, r27
     a2e:	89 2b       	or	r24, r25
     a30:	8a 2b       	or	r24, r26
     a32:	8b 2b       	or	r24, r27
     a34:	41 f4       	brne	.+16     	; 0xa46 <__LOCK_REGION_LENGTH__+0x646>
		eeprom_update_block(&channelOT, &savedCOT, sizeof(channelsOnTime));
     a36:	48 e3       	ldi	r20, 0x38	; 56
     a38:	50 e0       	ldi	r21, 0x00	; 0
     a3a:	61 e2       	ldi	r22, 0x21	; 33
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	84 ed       	ldi	r24, 0xD4	; 212
     a40:	90 e2       	ldi	r25, 0x20	; 32
     a42:	0e 94 89 0a 	call	0x1512	; 0x1512 <eeprom_update_block>

	if (rxMode == SetConfig) //We are currently receiving data packet
     a46:	80 91 5b 21 	lds	r24, 0x215B	; 0x80215b <rxMode>
     a4a:	83 32       	cpi	r24, 0x23	; 35
     a4c:	01 f5       	brne	.+64     	; 0xa8e <__LOCK_REGION_LENGTH__+0x68e>
	{
		if (rs485busy == rxMark) //Second tick in a row detected
     a4e:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <rxMark>
     a52:	90 91 01 20 	lds	r25, 0x2001	; 0x802001 <_ZZ10__vector_7E9rs485busy>
     a56:	98 13       	cpse	r25, r24
     a58:	15 c0       	rjmp	.+42     	; 0xa84 <__LOCK_REGION_LENGTH__+0x684>
		{
			rxMode = 0; //Packet considered lost
     a5a:	10 92 5b 21 	sts	0x215B, r1	; 0x80215b <rxMode>
			USARTC0.CTRLB |= USART_MPCM_bm; //Set MPCM bit
     a5e:	e0 ec       	ldi	r30, 0xC0	; 192
     a60:	f8 e0       	ldi	r31, 0x08	; 8
     a62:	83 81       	ldd	r24, Z+3	; 0x03
     a64:	82 60       	ori	r24, 0x02	; 2
     a66:	83 83       	std	Z+3, r24	; 0x03
			#ifdef RXC_EDMA
			EDMA.CH0.CTRLA = 0;
     a68:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__TEXT_REGION_LENGTH__+0x700110>
			while (EDMA.CH0.CTRLB & EDMA_CH_CHBUSY_bm);
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f1 e0       	ldi	r31, 0x01	; 1
     a70:	81 89       	ldd	r24, Z+17	; 0x11
     a72:	88 23       	and	r24, r24
     a74:	ec f3       	brlt	.-6      	; 0xa70 <__LOCK_REGION_LENGTH__+0x670>
			USARTC0.CTRLA = USART_DRIE_bm | USART_RXCINTLVL_HI_gc;
     a76:	80 e7       	ldi	r24, 0x70	; 112
     a78:	80 93 c2 08 	sts	0x08C2, r24	; 0x8008c2 <__TEXT_REGION_LENGTH__+0x7008c2>
			PORTC.OUTCLR = PIN4_bm;
     a7c:	80 e1       	ldi	r24, 0x10	; 16
     a7e:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
     a82:	0a c0       	rjmp	.+20     	; 0xa98 <__LOCK_REGION_LENGTH__+0x698>
			#endif
		}
		else
			rs485busy = rxMark;
     a84:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <rxMark>
     a88:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <_ZZ10__vector_7E9rs485busy>
     a8c:	05 c0       	rjmp	.+10     	; 0xa98 <__LOCK_REGION_LENGTH__+0x698>
	}
	else
		rs485busy = rxMark - 1;
     a8e:	80 91 5a 21 	lds	r24, 0x215A	; 0x80215a <rxMark>
     a92:	81 50       	subi	r24, 0x01	; 1
     a94:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <_ZZ10__vector_7E9rs485busy>
	framePtr = DSI8xFrames;
     a98:	87 e4       	ldi	r24, 0x47	; 71
     a9a:	91 e2       	ldi	r25, 0x21	; 33
     a9c:	80 93 45 21 	sts	0x2145, r24	; 0x802145 <framePtr>
     aa0:	90 93 46 21 	sts	0x2146, r25	; 0x802146 <framePtr+0x1>
	TCD5.INTFLAGS |= TC5_OVFIF_bm;
     aa4:	e0 e4       	ldi	r30, 0x40	; 64
     aa6:	f9 e0       	ldi	r31, 0x09	; 9
     aa8:	84 85       	ldd	r24, Z+12	; 0x0c
     aaa:	81 60       	ori	r24, 0x01	; 1
     aac:	84 87       	std	Z+12, r24	; 0x0c
	TCD5.INTCTRLA = TC_OVFINTLVL_HI_gc;
     aae:	83 e0       	ldi	r24, 0x03	; 3
     ab0:	86 83       	std	Z+6, r24	; 0x06
}
     ab2:	26 c0       	rjmp	.+76     	; 0xb00 <__LOCK_REGION_LENGTH__+0x700>
				}
				else //Level needs to be raised
				{
					tempLvl += ((-tempLvl > delta) ? delta : -tempLvl) + (int16_t)_lvl[s];
					if (!gLevels[j] && tempLvl > 0) //Lamp has been switched on - remember ticks
						_onTimeStamp = sysState.sysTick;
     ab4:	ac e0       	ldi	r26, 0x0C	; 12
     ab6:	b1 e2       	ldi	r27, 0x21	; 33
     ab8:	8c 91       	ld	r24, X
     aba:	83 8f       	std	Z+27, r24	; 0x1b
     abc:	80 91 0d 21 	lds	r24, 0x210D	; 0x80210d <sysState+0x1>
     ac0:	84 8f       	std	Z+28, r24	; 0x1c
     ac2:	80 91 0e 21 	lds	r24, 0x210E	; 0x80210e <sysState+0x2>
     ac6:	85 8f       	std	Z+29, r24	; 0x1d
     ac8:	80 91 0f 21 	lds	r24, 0x210F	; 0x80210f <sysState+0x3>
     acc:	86 8f       	std	Z+30, r24	; 0x1e
     ace:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <sysState+0x4>
     ad2:	87 8f       	std	Z+31, r24	; 0x1f
     ad4:	80 91 11 21 	lds	r24, 0x2111	; 0x802111 <sysState+0x5>
     ad8:	80 a3       	std	Z+32, r24	; 0x20
     ada:	80 91 12 21 	lds	r24, 0x2112	; 0x802112 <sysState+0x6>
     ade:	81 a3       	std	Z+33, r24	; 0x21
     ae0:	80 91 13 21 	lds	r24, 0x2113	; 0x802113 <sysState+0x7>
     ae4:	82 a3       	std	Z+34, r24	; 0x22
				}
				gLevels[j] = tempLvl;
     ae6:	44 0f       	add	r20, r20
     ae8:	55 1f       	adc	r21, r21
     aea:	43 5a       	subi	r20, 0xA3	; 163
     aec:	5e 4d       	sbci	r21, 0xDE	; 222
     aee:	da 01       	movw	r26, r20
     af0:	2d 93       	st	X+, r18
     af2:	3c 93       	st	X, r19
     af4:	74 cd       	rjmp	.-1304   	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
     af6:	a4 e1       	ldi	r26, 0x14	; 20
     af8:	b1 e2       	ldi	r27, 0x21	; 33
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
			return;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	01 cf       	rjmp	.-510    	; 0x902 <__LOCK_REGION_LENGTH__+0x502>
	else
		rs485busy = rxMark - 1;
	framePtr = DSI8xFrames;
	TCD5.INTFLAGS |= TC5_OVFIF_bm;
	TCD5.INTCTRLA = TC_OVFINTLVL_HI_gc;
}
     b00:	2e 96       	adiw	r28, 0x0e	; 14
     b02:	cd bf       	out	0x3d, r28	; 61
     b04:	de bf       	out	0x3e, r29	; 62
     b06:	df 91       	pop	r29
     b08:	cf 91       	pop	r28
     b0a:	ff 91       	pop	r31
     b0c:	ef 91       	pop	r30
     b0e:	bf 91       	pop	r27
     b10:	af 91       	pop	r26
     b12:	9f 91       	pop	r25
     b14:	8f 91       	pop	r24
     b16:	7f 91       	pop	r23
     b18:	6f 91       	pop	r22
     b1a:	5f 91       	pop	r21
     b1c:	4f 91       	pop	r20
     b1e:	3f 91       	pop	r19
     b20:	2f 91       	pop	r18
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	ff 90       	pop	r15
     b28:	ef 90       	pop	r14
     b2a:	df 90       	pop	r13
     b2c:	cf 90       	pop	r12
     b2e:	bf 90       	pop	r11
     b30:	af 90       	pop	r10
     b32:	9f 90       	pop	r9
     b34:	8f 90       	pop	r8
     b36:	7f 90       	pop	r7
     b38:	6f 90       	pop	r6
     b3a:	5f 90       	pop	r5
     b3c:	4f 90       	pop	r4
     b3e:	3f 90       	pop	r3
     b40:	2f 90       	pop	r2
     b42:	0f 90       	pop	r0
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	0f 90       	pop	r0
     b48:	1f 90       	pop	r1
     b4a:	18 95       	reti

00000b4c <__vector_34>:

ISR(ADCA_CH0_vect)
{
     b4c:	1f 92       	push	r1
     b4e:	0f 92       	push	r0
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	0f 92       	push	r0
     b54:	11 24       	eor	r1, r1
     b56:	af 92       	push	r10
     b58:	bf 92       	push	r11
     b5a:	df 92       	push	r13
     b5c:	ef 92       	push	r14
     b5e:	ff 92       	push	r15
     b60:	0f 93       	push	r16
     b62:	1f 93       	push	r17
     b64:	2f 93       	push	r18
     b66:	3f 93       	push	r19
     b68:	4f 93       	push	r20
     b6a:	5f 93       	push	r21
     b6c:	6f 93       	push	r22
     b6e:	7f 93       	push	r23
     b70:	8f 93       	push	r24
     b72:	9f 93       	push	r25
     b74:	af 93       	push	r26
     b76:	bf 93       	push	r27
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	ef 93       	push	r30
     b7e:	ff 93       	push	r31
	static uint8_t sAdcCnt = 0;
	int16_t result = ADCA.CH0RES;
     b80:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__TEXT_REGION_LENGTH__+0x700210>
     b84:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__TEXT_REGION_LENGTH__+0x700211>
	if (sAdcCnt < 4 && LINK_VALID_MIN < result && result < LINK_VALID_MAX)
     b88:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <_edata>
     b8c:	24 30       	cpi	r18, 0x04	; 4
     b8e:	08 f0       	brcs	.+2      	; 0xb92 <__vector_34+0x46>
     b90:	5f c1       	rjmp	.+702    	; 0xe50 <__vector_34+0x304>
     b92:	bc 01       	movw	r22, r24
     b94:	6e 5e       	subi	r22, 0xEE	; 238
     b96:	73 41       	sbci	r23, 0x13	; 19
     b98:	6b 36       	cpi	r22, 0x6B	; 107
     b9a:	77 46       	sbci	r23, 0x67	; 103
     b9c:	08 f0       	brcs	.+2      	; 0xba0 <__vector_34+0x54>
     b9e:	49 c1       	rjmp	.+658    	; 0xe32 <__vector_34+0x2e6>
	{
		sysState.linksMask |= (1 << sAdcCnt); //Set 'valid' bit
     ba0:	a2 2e       	mov	r10, r18
     ba2:	b1 2c       	mov	r11, r1
     ba4:	ec e0       	ldi	r30, 0x0C	; 12
     ba6:	f1 e2       	ldi	r31, 0x21	; 33
     ba8:	61 e0       	ldi	r22, 0x01	; 1
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	02 2e       	mov	r0, r18
     bae:	02 c0       	rjmp	.+4      	; 0xbb4 <__vector_34+0x68>
     bb0:	66 0f       	add	r22, r22
     bb2:	77 1f       	adc	r23, r23
     bb4:	0a 94       	dec	r0
     bb6:	e2 f7       	brpl	.-8      	; 0xbb0 <__vector_34+0x64>
     bb8:	35 89       	ldd	r19, Z+21	; 0x15
     bba:	36 2b       	or	r19, r22
     bbc:	35 8b       	std	Z+21, r19	; 0x15
		if (result < LINK_ON_BARRIER)
     bbe:	85 34       	cpi	r24, 0x45	; 69
     bc0:	6b e1       	ldi	r22, 0x1B	; 27
     bc2:	96 07       	cpc	r25, r22
     bc4:	0c f0       	brlt	.+2      	; 0xbc8 <__vector_34+0x7c>
     bc6:	88 c0       	rjmp	.+272    	; 0xcd8 <__vector_34+0x18c>
		{
			result = 0;
			if (sysState.linksMask & (0x10 << sAdcCnt)) //Previous level was non-zero
     bc8:	80 e1       	ldi	r24, 0x10	; 16
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	02 2e       	mov	r0, r18
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <__vector_34+0x88>
     bd0:	88 0f       	add	r24, r24
     bd2:	99 1f       	adc	r25, r25
     bd4:	0a 94       	dec	r0
     bd6:	e2 f7       	brpl	.-8      	; 0xbd0 <__vector_34+0x84>
     bd8:	43 2f       	mov	r20, r19
     bda:	50 e0       	ldi	r21, 0x00	; 0
     bdc:	48 23       	and	r20, r24
     bde:	59 23       	and	r21, r25
     be0:	45 2b       	or	r20, r21
     be2:	09 f4       	brne	.+2      	; 0xbe6 <__vector_34+0x9a>
     be4:	74 c0       	rjmp	.+232    	; 0xcce <__vector_34+0x182>
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		uint8_t oLvl = sysState.linkLevels[_linkNum];
     be6:	43 e2       	ldi	r20, 0x23	; 35
     be8:	4a 9d       	mul	r20, r10
     bea:	f0 01       	movw	r30, r0
     bec:	4b 9d       	mul	r20, r11
     bee:	f0 0d       	add	r31, r0
     bf0:	11 24       	eor	r1, r1
     bf2:	e0 5f       	subi	r30, 0xF0	; 240
     bf4:	ff 4d       	sbci	r31, 0xDF	; 223
     bf6:	42 81       	ldd	r20, Z+2	; 0x02
     bf8:	50 e0       	ldi	r21, 0x00	; 0
     bfa:	fa 01       	movw	r30, r20
     bfc:	e4 5f       	subi	r30, 0xF4	; 244
     bfe:	fe 4d       	sbci	r31, 0xDE	; 222
     c00:	e1 89       	ldd	r30, Z+17	; 0x11
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
     c02:	6e 2f       	mov	r22, r30
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	6e 5f       	subi	r22, 0xFE	; 254
     c08:	7f 4f       	sbci	r23, 0xFF	; 255
     c0a:	65 30       	cpi	r22, 0x05	; 5
     c0c:	71 05       	cpc	r23, r1
     c0e:	18 f4       	brcc	.+6      	; 0xc16 <__vector_34+0xca>
     c10:	ee 23       	and	r30, r30
     c12:	09 f4       	brne	.+2      	; 0xc16 <__vector_34+0xca>
     c14:	5c c0       	rjmp	.+184    	; 0xcce <__vector_34+0x182>
			return;
		sysState.linkLevels[_linkNum] = level;
     c16:	fa 01       	movw	r30, r20
     c18:	e4 5f       	subi	r30, 0xF4	; 244
     c1a:	fe 4d       	sbci	r31, 0xDE	; 222
     c1c:	11 8a       	std	Z+17, r1	; 0x11

		for (uint8_t i = 0; i < _linkCnt; i++)
     c1e:	43 e2       	ldi	r20, 0x23	; 35
     c20:	4a 9d       	mul	r20, r10
     c22:	f0 01       	movw	r30, r0
     c24:	4b 9d       	mul	r20, r11
     c26:	f0 0d       	add	r31, r0
     c28:	11 24       	eor	r1, r1
     c2a:	e0 5f       	subi	r30, 0xF0	; 240
     c2c:	ff 4d       	sbci	r31, 0xDF	; 223
     c2e:	d1 80       	ldd	r13, Z+1	; 0x01
     c30:	dd 20       	and	r13, r13
     c32:	19 f1       	breq	.+70     	; 0xc7a <__vector_34+0x12e>
     c34:	c3 e2       	ldi	r28, 0x23	; 35
     c36:	2c 9f       	mul	r18, r28
     c38:	a0 01       	movw	r20, r0
     c3a:	11 24       	eor	r1, r1
     c3c:	4d 5e       	subi	r20, 0xED	; 237
     c3e:	5f 4d       	sbci	r21, 0xDF	; 223
     c40:	00 e0       	ldi	r16, 0x00	; 0
     c42:	10 e0       	ldi	r17, 0x00	; 0
     c44:	da 01       	movw	r26, r20
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     c46:	ec 91       	ld	r30, X
     c48:	4f 5f       	subi	r20, 0xFF	; 255
     c4a:	5f 4f       	sbci	r21, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	ee 0f       	add	r30, r30
     c50:	ff 1f       	adc	r31, r31
     c52:	e3 5a       	subi	r30, 0xA3	; 163
     c54:	fe 4d       	sbci	r31, 0xDE	; 222
     c56:	e0 80       	ld	r14, Z
     c58:	f1 80       	ldd	r15, Z+1	; 0x01
     c5a:	13 96       	adiw	r26, 0x03	; 3
     c5c:	6c 91       	ld	r22, X
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	e1 e0       	ldi	r30, 0x01	; 1
     c62:	6e 15       	cp	r22, r14
     c64:	7f 05       	cpc	r23, r15
     c66:	09 f4       	brne	.+2      	; 0xc6a <__vector_34+0x11e>
     c68:	e0 e0       	ldi	r30, 0x00	; 0
     c6a:	0e 2b       	or	r16, r30
			if (!level || !_difLvl[i]) //Set zero level directly
				_lvl[i] = 0;
     c6c:	fa 01       	movw	r30, r20
     c6e:	12 82       	std	Z+2, r1	; 0x02
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
			return;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
     c70:	1f 5f       	subi	r17, 0xFF	; 255
     c72:	1d 11       	cpse	r17, r13
     c74:	e7 cf       	rjmp	.-50     	; 0xc44 <__vector_34+0xf8>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     c76:	01 11       	cpse	r16, r1
     c78:	2a c0       	rjmp	.+84     	; 0xcce <__vector_34+0x182>
			_tickLastChg = sysState.sysTick;
     c7a:	63 e2       	ldi	r22, 0x23	; 35
     c7c:	6a 9d       	mul	r22, r10
     c7e:	a0 01       	movw	r20, r0
     c80:	6b 9d       	mul	r22, r11
     c82:	50 0d       	add	r21, r0
     c84:	11 24       	eor	r1, r1
     c86:	ea 01       	movw	r28, r20
     c88:	c0 5f       	subi	r28, 0xF0	; 240
     c8a:	df 4d       	sbci	r29, 0xDF	; 223
     c8c:	de 01       	movw	r26, r28
     c8e:	53 96       	adiw	r26, 0x13	; 19
     c90:	ec e0       	ldi	r30, 0x0C	; 12
     c92:	f1 e2       	ldi	r31, 0x21	; 33
     c94:	40 81       	ld	r20, Z
     c96:	4b 8b       	std	Y+19, r20	; 0x13
     c98:	41 81       	ldd	r20, Z+1	; 0x01
     c9a:	11 96       	adiw	r26, 0x01	; 1
     c9c:	4c 93       	st	X, r20
     c9e:	11 97       	sbiw	r26, 0x01	; 1
     ca0:	42 81       	ldd	r20, Z+2	; 0x02
     ca2:	12 96       	adiw	r26, 0x02	; 2
     ca4:	4c 93       	st	X, r20
     ca6:	12 97       	sbiw	r26, 0x02	; 2
     ca8:	43 81       	ldd	r20, Z+3	; 0x03
     caa:	13 96       	adiw	r26, 0x03	; 3
     cac:	4c 93       	st	X, r20
     cae:	13 97       	sbiw	r26, 0x03	; 3
     cb0:	44 81       	ldd	r20, Z+4	; 0x04
     cb2:	14 96       	adiw	r26, 0x04	; 4
     cb4:	4c 93       	st	X, r20
     cb6:	14 97       	sbiw	r26, 0x04	; 4
     cb8:	45 81       	ldd	r20, Z+5	; 0x05
     cba:	15 96       	adiw	r26, 0x05	; 5
     cbc:	4c 93       	st	X, r20
     cbe:	15 97       	sbiw	r26, 0x05	; 5
     cc0:	46 81       	ldd	r20, Z+6	; 0x06
     cc2:	16 96       	adiw	r26, 0x06	; 6
     cc4:	4c 93       	st	X, r20
     cc6:	16 97       	sbiw	r26, 0x06	; 6
     cc8:	47 81       	ldd	r20, Z+7	; 0x07
     cca:	17 96       	adiw	r26, 0x07	; 7
     ccc:	4c 93       	st	X, r20
		if (result < LINK_ON_BARRIER)
		{
			result = 0;
			if (sysState.linksMask & (0x10 << sAdcCnt)) //Previous level was non-zero
				links[sAdcCnt].setLevel(0);
			sysState.linksMask &= ~(0x10 << sAdcCnt); //Clear 'non-zero' bit
     cce:	80 95       	com	r24
     cd0:	38 23       	and	r19, r24
     cd2:	30 93 21 21 	sts	0x2121, r19	; 0x802121 <sysState+0x15>
     cd6:	a8 c1       	rjmp	.+848    	; 0x1028 <__vector_34+0x4dc>
		}
		else
		{
			result = (result - LINK_1PERC_CODE) / LINK_SCALE;
     cd8:	80 59       	subi	r24, 0x90	; 144
     cda:	91 42       	sbci	r25, 0x21	; 33
     cdc:	64 e5       	ldi	r22, 0x54	; 84
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	0e 94 4b 0a 	call	0x1496	; 0x1496 <__divmodhi4>
			if (result < 5)
     ce4:	65 30       	cpi	r22, 0x05	; 5
     ce6:	71 05       	cpc	r23, r1
     ce8:	14 f4       	brge	.+4      	; 0xcee <__vector_34+0x1a2>
				result = 5;
     cea:	65 e0       	ldi	r22, 0x05	; 5
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	6f 3f       	cpi	r22, 0xFF	; 255
     cf0:	71 05       	cpc	r23, r1
     cf2:	19 f0       	breq	.+6      	; 0xcfa <__vector_34+0x1ae>
     cf4:	14 f0       	brlt	.+4      	; 0xcfa <__vector_34+0x1ae>
     cf6:	6f ef       	ldi	r22, 0xFF	; 255
     cf8:	70 e0       	ldi	r23, 0x00	; 0
			if (result > 255)
				result = 255;
			sysState.linksMask |= (0x10 << sAdcCnt); //Set 'non-zero' bit
     cfa:	80 e1       	ldi	r24, 0x10	; 16
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	02 2e       	mov	r0, r18
     d00:	02 c0       	rjmp	.+4      	; 0xd06 <__vector_34+0x1ba>
     d02:	88 0f       	add	r24, r24
     d04:	99 1f       	adc	r25, r25
     d06:	0a 94       	dec	r0
     d08:	e2 f7       	brpl	.-8      	; 0xd02 <__vector_34+0x1b6>
     d0a:	38 2b       	or	r19, r24
     d0c:	30 93 21 21 	sts	0x2121, r19	; 0x802121 <sysState+0x15>
			links[sAdcCnt].setLevel((uint8_t)result);
     d10:	16 2f       	mov	r17, r22
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		uint8_t oLvl = sysState.linkLevels[_linkNum];
     d12:	83 e2       	ldi	r24, 0x23	; 35
     d14:	8a 9d       	mul	r24, r10
     d16:	f0 01       	movw	r30, r0
     d18:	8b 9d       	mul	r24, r11
     d1a:	f0 0d       	add	r31, r0
     d1c:	11 24       	eor	r1, r1
     d1e:	e0 5f       	subi	r30, 0xF0	; 240
     d20:	ff 4d       	sbci	r31, 0xDF	; 223
     d22:	42 81       	ldd	r20, Z+2	; 0x02
     d24:	50 e0       	ldi	r21, 0x00	; 0
     d26:	fa 01       	movw	r30, r20
     d28:	e4 5f       	subi	r30, 0xF4	; 244
     d2a:	fe 4d       	sbci	r31, 0xDE	; 222
     d2c:	31 89       	ldd	r19, Z+17	; 0x11
     d2e:	77 27       	eor	r23, r23
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
     d30:	83 2f       	mov	r24, r19
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	86 1b       	sub	r24, r22
     d36:	97 0b       	sbc	r25, r23
     d38:	02 96       	adiw	r24, 0x02	; 2
     d3a:	05 97       	sbiw	r24, 0x05	; 5
     d3c:	48 f4       	brcc	.+18     	; 0xd50 <__vector_34+0x204>
     d3e:	91 e0       	ldi	r25, 0x01	; 1
     d40:	11 11       	cpse	r17, r1
     d42:	01 c0       	rjmp	.+2      	; 0xd46 <__vector_34+0x1fa>
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	31 11       	cpse	r19, r1
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	98 13       	cpse	r25, r24
     d4e:	6c c1       	rjmp	.+728    	; 0x1028 <__vector_34+0x4dc>
			return;
		sysState.linkLevels[_linkNum] = level;
     d50:	fa 01       	movw	r30, r20
     d52:	e4 5f       	subi	r30, 0xF4	; 244
     d54:	fe 4d       	sbci	r31, 0xDE	; 222
     d56:	11 8b       	std	Z+17, r17	; 0x11

		for (uint8_t i = 0; i < _linkCnt; i++)
     d58:	83 e2       	ldi	r24, 0x23	; 35
     d5a:	8a 9d       	mul	r24, r10
     d5c:	f0 01       	movw	r30, r0
     d5e:	8b 9d       	mul	r24, r11
     d60:	f0 0d       	add	r31, r0
     d62:	11 24       	eor	r1, r1
     d64:	e0 5f       	subi	r30, 0xF0	; 240
     d66:	ff 4d       	sbci	r31, 0xDF	; 223
     d68:	01 81       	ldd	r16, Z+1	; 0x01
     d6a:	00 23       	and	r16, r16
     d6c:	b9 f1       	breq	.+110    	; 0xddc <__vector_34+0x290>
     d6e:	f3 e2       	ldi	r31, 0x23	; 35
     d70:	2f 9f       	mul	r18, r31
     d72:	d0 01       	movw	r26, r0
     d74:	11 24       	eor	r1, r1
     d76:	ad 5e       	subi	r26, 0xED	; 237
     d78:	bf 4d       	sbci	r27, 0xDF	; 223
     d7a:	50 e0       	ldi	r21, 0x00	; 0
     d7c:	30 e0       	ldi	r19, 0x00	; 0
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     d7e:	ed 01       	movw	r28, r26
     d80:	e8 81       	ld	r30, Y
     d82:	11 96       	adiw	r26, 0x01	; 1
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	ee 0f       	add	r30, r30
     d88:	ff 1f       	adc	r31, r31
     d8a:	e3 5a       	subi	r30, 0xA3	; 163
     d8c:	fe 4d       	sbci	r31, 0xDE	; 222
     d8e:	01 90       	ld	r0, Z+
     d90:	f0 81       	ld	r31, Z
     d92:	e0 2d       	mov	r30, r0
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	41 e0       	ldi	r20, 0x01	; 1
     d9a:	8e 17       	cp	r24, r30
     d9c:	9f 07       	cpc	r25, r31
     d9e:	09 f4       	brne	.+2      	; 0xda2 <__vector_34+0x256>
     da0:	40 e0       	ldi	r20, 0x00	; 0
     da2:	54 2b       	or	r21, r20
			if (!level || !_difLvl[i]) //Set zero level directly
     da4:	11 23       	and	r17, r17
     da6:	29 f0       	breq	.+10     	; 0xdb2 <__vector_34+0x266>
     da8:	18 96       	adiw	r26, 0x08	; 8
     daa:	8c 91       	ld	r24, X
     dac:	18 97       	sbiw	r26, 0x08	; 8
     dae:	81 11       	cpse	r24, r1
     db0:	04 c0       	rjmp	.+8      	; 0xdba <__vector_34+0x26e>
				_lvl[i] = 0;
     db2:	12 96       	adiw	r26, 0x02	; 2
     db4:	1c 92       	st	X, r1
     db6:	12 97       	sbiw	r26, 0x02	; 2
     db8:	0c c0       	rjmp	.+24     	; 0xdd2 <__vector_34+0x286>
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
     dba:	86 9f       	mul	r24, r22
     dbc:	f0 01       	movw	r30, r0
     dbe:	87 9f       	mul	r24, r23
     dc0:	f0 0d       	add	r31, r0
     dc2:	11 24       	eor	r1, r1
     dc4:	15 96       	adiw	r26, 0x05	; 5
     dc6:	8c 91       	ld	r24, X
     dc8:	15 97       	sbiw	r26, 0x05	; 5
     dca:	8f 0f       	add	r24, r31
     dcc:	12 96       	adiw	r26, 0x02	; 2
     dce:	8c 93       	st	X, r24
     dd0:	12 97       	sbiw	r26, 0x02	; 2
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
			return;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
     dd2:	3f 5f       	subi	r19, 0xFF	; 255
     dd4:	03 13       	cpse	r16, r19
     dd6:	d3 cf       	rjmp	.-90     	; 0xd7e <__vector_34+0x232>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     dd8:	51 11       	cpse	r21, r1
     dda:	26 c1       	rjmp	.+588    	; 0x1028 <__vector_34+0x4dc>
			_tickLastChg = sysState.sysTick;
     ddc:	33 e2       	ldi	r19, 0x23	; 35
     dde:	3a 9d       	mul	r19, r10
     de0:	c0 01       	movw	r24, r0
     de2:	3b 9d       	mul	r19, r11
     de4:	90 0d       	add	r25, r0
     de6:	11 24       	eor	r1, r1
     de8:	ec 01       	movw	r28, r24
     dea:	c0 5f       	subi	r28, 0xF0	; 240
     dec:	df 4d       	sbci	r29, 0xDF	; 223
     dee:	de 01       	movw	r26, r28
     df0:	53 96       	adiw	r26, 0x13	; 19
     df2:	ec e0       	ldi	r30, 0x0C	; 12
     df4:	f1 e2       	ldi	r31, 0x21	; 33
     df6:	80 81       	ld	r24, Z
     df8:	8b 8b       	std	Y+19, r24	; 0x13
     dfa:	81 81       	ldd	r24, Z+1	; 0x01
     dfc:	11 96       	adiw	r26, 0x01	; 1
     dfe:	8c 93       	st	X, r24
     e00:	11 97       	sbiw	r26, 0x01	; 1
     e02:	82 81       	ldd	r24, Z+2	; 0x02
     e04:	12 96       	adiw	r26, 0x02	; 2
     e06:	8c 93       	st	X, r24
     e08:	12 97       	sbiw	r26, 0x02	; 2
     e0a:	83 81       	ldd	r24, Z+3	; 0x03
     e0c:	13 96       	adiw	r26, 0x03	; 3
     e0e:	8c 93       	st	X, r24
     e10:	13 97       	sbiw	r26, 0x03	; 3
     e12:	84 81       	ldd	r24, Z+4	; 0x04
     e14:	14 96       	adiw	r26, 0x04	; 4
     e16:	8c 93       	st	X, r24
     e18:	14 97       	sbiw	r26, 0x04	; 4
     e1a:	85 81       	ldd	r24, Z+5	; 0x05
     e1c:	15 96       	adiw	r26, 0x05	; 5
     e1e:	8c 93       	st	X, r24
     e20:	15 97       	sbiw	r26, 0x05	; 5
     e22:	86 81       	ldd	r24, Z+6	; 0x06
     e24:	16 96       	adiw	r26, 0x06	; 6
     e26:	8c 93       	st	X, r24
     e28:	16 97       	sbiw	r26, 0x06	; 6
     e2a:	87 81       	ldd	r24, Z+7	; 0x07
     e2c:	17 96       	adiw	r26, 0x07	; 7
     e2e:	8c 93       	st	X, r24
     e30:	fb c0       	rjmp	.+502    	; 0x1028 <__vector_34+0x4dc>
			sysState.linksMask |= (0x10 << sAdcCnt); //Set 'non-zero' bit
			links[sAdcCnt].setLevel((uint8_t)result);
		}
	}
	else if (sAdcCnt < 4)
		sysState.linksMask &= ~(0x11 << sAdcCnt); //Clear 'valid' and 'non-zero' bits
     e32:	ec e0       	ldi	r30, 0x0C	; 12
     e34:	f1 e2       	ldi	r31, 0x21	; 33
     e36:	81 e1       	ldi	r24, 0x11	; 17
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	02 2e       	mov	r0, r18
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <__vector_34+0x2f6>
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	0a 94       	dec	r0
     e44:	e2 f7       	brpl	.-8      	; 0xe3e <__vector_34+0x2f2>
     e46:	80 95       	com	r24
     e48:	95 89       	ldd	r25, Z+21	; 0x15
     e4a:	89 23       	and	r24, r25
     e4c:	85 8b       	std	Z+21, r24	; 0x15
     e4e:	ec c0       	rjmp	.+472    	; 0x1028 <__vector_34+0x4dc>
	else //sAdcCnt == 4: MSEN channel
		msenCh.setLevel((uint8_t)(result >> 6));
     e50:	08 2e       	mov	r0, r24
     e52:	89 2f       	mov	r24, r25
     e54:	00 0c       	add	r0, r0
     e56:	88 1f       	adc	r24, r24
     e58:	99 0b       	sbc	r25, r25
     e5a:	00 0c       	add	r0, r0
     e5c:	88 1f       	adc	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	38 2f       	mov	r19, r24
		_onTime = validConf.msenOnTime > 5 ? validConf.msenOnTime : 6;
		_fTime = _onTime + validConf.msenLowTime;
	}
	void setLevel(uint8_t level)
	{
		if (level < MSEN_VALID_MIN || !validConf.msenOnTime || (sysState.linksMask & (0x10 << _linkNum)))
     e62:	84 31       	cpi	r24, 0x14	; 20
     e64:	c0 f0       	brcs	.+48     	; 0xe96 <__vector_34+0x34a>
     e66:	40 91 3e 21 	lds	r20, 0x213E	; 0x80213e <validConf+0x1a>
     e6a:	44 23       	and	r20, r20
     e6c:	a1 f0       	breq	.+40     	; 0xe96 <__vector_34+0x34a>
     e6e:	e0 91 04 20 	lds	r30, 0x2004	; 0x802004 <msenCh+0x2>
     e72:	ae 2f       	mov	r26, r30
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	40 91 21 21 	lds	r20, 0x2121	; 0x802121 <sysState+0x15>
     e7a:	64 2f       	mov	r22, r20
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	40 e1       	ldi	r20, 0x10	; 16
     e80:	50 e0       	ldi	r21, 0x00	; 0
     e82:	0e 2e       	mov	r0, r30
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <__vector_34+0x33e>
     e86:	44 0f       	add	r20, r20
     e88:	55 1f       	adc	r21, r21
     e8a:	0a 94       	dec	r0
     e8c:	e2 f7       	brpl	.-8      	; 0xe86 <__vector_34+0x33a>
     e8e:	46 23       	and	r20, r22
     e90:	57 23       	and	r21, r23
     e92:	45 2b       	or	r20, r21
     e94:	29 f0       	breq	.+10     	; 0xea0 <__vector_34+0x354>
		{
			_lvl = 0; //MSEN disconnected, disabled (by zero on time) or there is non-zero level from link
     e96:	e2 e0       	ldi	r30, 0x02	; 2
     e98:	f0 e2       	ldi	r31, 0x20	; 32
     e9a:	13 82       	std	Z+3, r1	; 0x03
			cntDown = false;
     e9c:	10 82       	st	Z, r1
     e9e:	c4 c0       	rjmp	.+392    	; 0x1028 <__vector_34+0x4dc>
			return;
		}
		if (level > MSEN_SEN1_TRIG && _lvl == MSEN_VALID_MIN) //Off to on transition
     ea0:	8a 33       	cpi	r24, 0x3A	; 58
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__vector_34+0x35a>
     ea4:	96 c0       	rjmp	.+300    	; 0xfd2 <__vector_34+0x486>
     ea6:	40 91 05 20 	lds	r20, 0x2005	; 0x802005 <msenCh+0x3>
     eaa:	44 31       	cpi	r20, 0x14	; 20
     eac:	09 f0       	breq	.+2      	; 0xeb0 <__vector_34+0x364>
     eae:	91 c0       	rjmp	.+290    	; 0xfd2 <__vector_34+0x486>
		{
			_lvl = level;
     eb0:	80 93 05 20 	sts	0x2005, r24	; 0x802005 <msenCh+0x3>
		}
	}

	void setLevel(uint8_t level, bool direction) //Accepts level in the range 0…255
	{
		_dir = direction;
     eb4:	83 e2       	ldi	r24, 0x23	; 35
     eb6:	8a 9f       	mul	r24, r26
     eb8:	e0 01       	movw	r28, r0
     eba:	8b 9f       	mul	r24, r27
     ebc:	d0 0d       	add	r29, r0
     ebe:	11 24       	eor	r1, r1
     ec0:	c0 5f       	subi	r28, 0xF0	; 240
     ec2:	df 4d       	sbci	r29, 0xDF	; 223
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	37 34       	cpi	r19, 0x47	; 71
     ec8:	08 f4       	brcc	.+2      	; 0xecc <__vector_34+0x380>
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	88 83       	st	Y, r24
	}

	void setLevel(uint8_t level) //Accepts level in the range 0…255
	{
		bool dimInProcess = false;
		uint8_t oLvl = sysState.linkLevels[_linkNum];
     ece:	83 e2       	ldi	r24, 0x23	; 35
     ed0:	8a 9f       	mul	r24, r26
     ed2:	e0 01       	movw	r28, r0
     ed4:	8b 9f       	mul	r24, r27
     ed6:	d0 0d       	add	r29, r0
     ed8:	11 24       	eor	r1, r1
     eda:	c0 5f       	subi	r28, 0xF0	; 240
     edc:	df 4d       	sbci	r29, 0xDF	; 223
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	ec 01       	movw	r28, r24
     ee4:	c4 5f       	subi	r28, 0xF4	; 244
     ee6:	de 4d       	sbci	r29, 0xDE	; 222
     ee8:	39 89       	ldd	r19, Y+17	; 0x11
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
     eea:	43 2f       	mov	r20, r19
     eec:	50 e0       	ldi	r21, 0x00	; 0
     eee:	4d 5f       	subi	r20, 0xFD	; 253
     ef0:	51 09       	sbc	r21, r1
     ef2:	45 30       	cpi	r20, 0x05	; 5
     ef4:	51 05       	cpc	r21, r1
     ef6:	10 f4       	brcc	.+4      	; 0xefc <__vector_34+0x3b0>
     ef8:	31 11       	cpse	r19, r1
     efa:	66 c0       	rjmp	.+204    	; 0xfc8 <__vector_34+0x47c>
			return;
		sysState.linkLevels[_linkNum] = level;
     efc:	ec 01       	movw	r28, r24
     efe:	c4 5f       	subi	r28, 0xF4	; 244
     f00:	de 4d       	sbci	r29, 0xDE	; 222
     f02:	3f ef       	ldi	r19, 0xFF	; 255
     f04:	39 8b       	std	Y+17, r19	; 0x11

		for (uint8_t i = 0; i < _linkCnt; i++)
     f06:	83 e2       	ldi	r24, 0x23	; 35
     f08:	8a 9f       	mul	r24, r26
     f0a:	e0 01       	movw	r28, r0
     f0c:	8b 9f       	mul	r24, r27
     f0e:	d0 0d       	add	r29, r0
     f10:	11 24       	eor	r1, r1
     f12:	c0 5f       	subi	r28, 0xF0	; 240
     f14:	df 4d       	sbci	r29, 0xDF	; 223
     f16:	69 81       	ldd	r22, Y+1	; 0x01
     f18:	66 23       	and	r22, r22
     f1a:	69 f1       	breq	.+90     	; 0xf76 <__vector_34+0x42a>
     f1c:	33 e2       	ldi	r19, 0x23	; 35
     f1e:	e3 9f       	mul	r30, r19
     f20:	f0 01       	movw	r30, r0
     f22:	11 24       	eor	r1, r1
     f24:	ed 5e       	subi	r30, 0xED	; 237
     f26:	ff 4d       	sbci	r31, 0xDF	; 223
     f28:	50 e0       	ldi	r21, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
				_lvl[i] = 0;
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
     f2c:	7f ef       	ldi	r23, 0xFF	; 255
     f2e:	cf 01       	movw	r24, r30
			return;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
		{
			dimInProcess |= (_lvl[i] != gLevels[_link[i]]);
     f30:	40 81       	ld	r20, Z
     f32:	31 96       	adiw	r30, 0x01	; 1
     f34:	c4 2f       	mov	r28, r20
     f36:	d0 e0       	ldi	r29, 0x00	; 0
     f38:	cc 0f       	add	r28, r28
     f3a:	dd 1f       	adc	r29, r29
     f3c:	c3 5a       	subi	r28, 0xA3	; 163
     f3e:	de 4d       	sbci	r29, 0xDE	; 222
     f40:	08 81       	ld	r16, Y
     f42:	19 81       	ldd	r17, Y+1	; 0x01
     f44:	ec 01       	movw	r28, r24
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	41 e0       	ldi	r20, 0x01	; 1
     f4c:	80 17       	cp	r24, r16
     f4e:	91 07       	cpc	r25, r17
     f50:	09 f4       	brne	.+2      	; 0xf54 <__vector_34+0x408>
     f52:	40 e0       	ldi	r20, 0x00	; 0
     f54:	54 2b       	or	r21, r20
			if (!level || !_difLvl[i]) //Set zero level directly
     f56:	80 85       	ldd	r24, Z+8	; 0x08
     f58:	81 11       	cpse	r24, r1
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <__vector_34+0x414>
				_lvl[i] = 0;
     f5c:	12 82       	std	Z+2, r1	; 0x02
     f5e:	06 c0       	rjmp	.+12     	; 0xf6c <__vector_34+0x420>
			else //Convert non-zero value to the actual range
			{
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
     f60:	78 9f       	mul	r23, r24
     f62:	c0 01       	movw	r24, r0
     f64:	11 24       	eor	r1, r1
     f66:	85 81       	ldd	r24, Z+5	; 0x05
     f68:	89 0f       	add	r24, r25
     f6a:	82 83       	std	Z+2, r24	; 0x02
		int16_t tempLvl = (int16_t)oLvl - level;
		if (-3 < tempLvl && tempLvl < 3 && ((level == 0) == (0 == oLvl)))
			return;
		sysState.linkLevels[_linkNum] = level;

		for (uint8_t i = 0; i < _linkCnt; i++)
     f6c:	3f 5f       	subi	r19, 0xFF	; 255
     f6e:	63 13       	cpse	r22, r19
     f70:	de cf       	rjmp	.-68     	; 0xf2e <__vector_34+0x3e2>
				uint16_t temp = level;
				temp *= _difLvl[i];
				_lvl[i] = (uint8_t)(temp >> 8) + _minLvl[i];
			}
		}
		if (!dimInProcess) //Refresh saved ticks value only if no dimming in the process right now
     f72:	51 11       	cpse	r21, r1
     f74:	29 c0       	rjmp	.+82     	; 0xfc8 <__vector_34+0x47c>
			_tickLastChg = sysState.sysTick;
     f76:	83 e2       	ldi	r24, 0x23	; 35
     f78:	8a 9f       	mul	r24, r26
     f7a:	e0 01       	movw	r28, r0
     f7c:	8b 9f       	mul	r24, r27
     f7e:	d0 0d       	add	r29, r0
     f80:	11 24       	eor	r1, r1
     f82:	c0 5f       	subi	r28, 0xF0	; 240
     f84:	df 4d       	sbci	r29, 0xDF	; 223
     f86:	de 01       	movw	r26, r28
     f88:	53 96       	adiw	r26, 0x13	; 19
     f8a:	ec e0       	ldi	r30, 0x0C	; 12
     f8c:	f1 e2       	ldi	r31, 0x21	; 33
     f8e:	80 81       	ld	r24, Z
     f90:	8b 8b       	std	Y+19, r24	; 0x13
     f92:	81 81       	ldd	r24, Z+1	; 0x01
     f94:	11 96       	adiw	r26, 0x01	; 1
     f96:	8c 93       	st	X, r24
     f98:	11 97       	sbiw	r26, 0x01	; 1
     f9a:	82 81       	ldd	r24, Z+2	; 0x02
     f9c:	12 96       	adiw	r26, 0x02	; 2
     f9e:	8c 93       	st	X, r24
     fa0:	12 97       	sbiw	r26, 0x02	; 2
     fa2:	83 81       	ldd	r24, Z+3	; 0x03
     fa4:	13 96       	adiw	r26, 0x03	; 3
     fa6:	8c 93       	st	X, r24
     fa8:	13 97       	sbiw	r26, 0x03	; 3
     faa:	84 81       	ldd	r24, Z+4	; 0x04
     fac:	14 96       	adiw	r26, 0x04	; 4
     fae:	8c 93       	st	X, r24
     fb0:	14 97       	sbiw	r26, 0x04	; 4
     fb2:	85 81       	ldd	r24, Z+5	; 0x05
     fb4:	15 96       	adiw	r26, 0x05	; 5
     fb6:	8c 93       	st	X, r24
     fb8:	15 97       	sbiw	r26, 0x05	; 5
     fba:	86 81       	ldd	r24, Z+6	; 0x06
     fbc:	16 96       	adiw	r26, 0x06	; 6
     fbe:	8c 93       	st	X, r24
     fc0:	16 97       	sbiw	r26, 0x06	; 6
     fc2:	87 81       	ldd	r24, Z+7	; 0x07
     fc4:	17 96       	adiw	r26, 0x07	; 7
     fc6:	8c 93       	st	X, r24
		}
		if (level > MSEN_SEN1_TRIG && _lvl == MSEN_VALID_MIN) //Off to on transition
		{
			_lvl = level;
			links[_linkNum].setLevel(255, level > MSEN_SEN2_TRIG); //Start from max light level
			ltEnt = cntDown = false;
     fc8:	e2 e0       	ldi	r30, 0x02	; 2
     fca:	f0 e2       	ldi	r31, 0x20	; 32
     fcc:	10 82       	st	Z, r1
     fce:	11 82       	std	Z+1, r1	; 0x01
     fd0:	2b c0       	rjmp	.+86     	; 0x1028 <__vector_34+0x4dc>
			return;
		}
		if (level < MSEN_SEN1_TRIG && _lvl > level) //On to off transition
     fd2:	39 33       	cpi	r19, 0x39	; 57
     fd4:	48 f5       	brcc	.+82     	; 0x1028 <__vector_34+0x4dc>
     fd6:	80 91 05 20 	lds	r24, 0x2005	; 0x802005 <msenCh+0x3>
     fda:	38 17       	cp	r19, r24
     fdc:	28 f5       	brcc	.+74     	; 0x1028 <__vector_34+0x4dc>
		{
			_lvl = MSEN_VALID_MIN;
     fde:	e2 e0       	ldi	r30, 0x02	; 2
     fe0:	f0 e2       	ldi	r31, 0x20	; 32
     fe2:	84 e1       	ldi	r24, 0x14	; 20
     fe4:	83 83       	std	Z+3, r24	; 0x03
			_onTimeStamp = sysState.sysTick;
     fe6:	ac e0       	ldi	r26, 0x0C	; 12
     fe8:	b1 e2       	ldi	r27, 0x21	; 33
     fea:	8c 91       	ld	r24, X
     fec:	86 83       	std	Z+6, r24	; 0x06
     fee:	11 96       	adiw	r26, 0x01	; 1
     ff0:	8c 91       	ld	r24, X
     ff2:	11 97       	sbiw	r26, 0x01	; 1
     ff4:	87 83       	std	Z+7, r24	; 0x07
     ff6:	12 96       	adiw	r26, 0x02	; 2
     ff8:	8c 91       	ld	r24, X
     ffa:	12 97       	sbiw	r26, 0x02	; 2
     ffc:	80 87       	std	Z+8, r24	; 0x08
     ffe:	13 96       	adiw	r26, 0x03	; 3
    1000:	8c 91       	ld	r24, X
    1002:	13 97       	sbiw	r26, 0x03	; 3
    1004:	81 87       	std	Z+9, r24	; 0x09
    1006:	14 96       	adiw	r26, 0x04	; 4
    1008:	8c 91       	ld	r24, X
    100a:	14 97       	sbiw	r26, 0x04	; 4
    100c:	82 87       	std	Z+10, r24	; 0x0a
    100e:	15 96       	adiw	r26, 0x05	; 5
    1010:	8c 91       	ld	r24, X
    1012:	15 97       	sbiw	r26, 0x05	; 5
    1014:	83 87       	std	Z+11, r24	; 0x0b
    1016:	16 96       	adiw	r26, 0x06	; 6
    1018:	8c 91       	ld	r24, X
    101a:	16 97       	sbiw	r26, 0x06	; 6
    101c:	84 87       	std	Z+12, r24	; 0x0c
    101e:	17 96       	adiw	r26, 0x07	; 7
    1020:	8c 91       	ld	r24, X
    1022:	85 87       	std	Z+13, r24	; 0x0d
			cntDown = true;
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	80 83       	st	Z, r24
	else if (sAdcCnt < 4)
		sysState.linksMask &= ~(0x11 << sAdcCnt); //Clear 'valid' and 'non-zero' bits
	else //sAdcCnt == 4: MSEN channel
		msenCh.setLevel((uint8_t)(result >> 6));

	sAdcCnt++;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	82 0f       	add	r24, r18
    102c:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <_edata>
	ADCA.CH0.MUXCTRL = (sAdcCnt + 1) << ADC_CH_MUXPOS_gp;
    1030:	2e 5f       	subi	r18, 0xFE	; 254
    1032:	22 0f       	add	r18, r18
    1034:	22 0f       	add	r18, r18
    1036:	22 0f       	add	r18, r18
    1038:	20 93 21 02 	sts	0x0221, r18	; 0x800221 <__TEXT_REGION_LENGTH__+0x700221>
	if (sAdcCnt < 5)
    103c:	85 30       	cpi	r24, 0x05	; 5
    103e:	30 f4       	brcc	.+12     	; 0x104c <__vector_34+0x500>
		ADCA.CTRLA |= ADC_START_bm;
    1040:	e0 e0       	ldi	r30, 0x00	; 0
    1042:	f2 e0       	ldi	r31, 0x02	; 2
    1044:	80 81       	ld	r24, Z
    1046:	84 60       	ori	r24, 0x04	; 4
    1048:	80 83       	st	Z, r24
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <__vector_34+0x504>
	else
		sAdcCnt = 0;
    104c:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <_edata>
}
    1050:	ff 91       	pop	r31
    1052:	ef 91       	pop	r30
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	bf 91       	pop	r27
    105a:	af 91       	pop	r26
    105c:	9f 91       	pop	r25
    105e:	8f 91       	pop	r24
    1060:	7f 91       	pop	r23
    1062:	6f 91       	pop	r22
    1064:	5f 91       	pop	r21
    1066:	4f 91       	pop	r20
    1068:	3f 91       	pop	r19
    106a:	2f 91       	pop	r18
    106c:	1f 91       	pop	r17
    106e:	0f 91       	pop	r16
    1070:	ff 90       	pop	r15
    1072:	ef 90       	pop	r14
    1074:	df 90       	pop	r13
    1076:	bf 90       	pop	r11
    1078:	af 90       	pop	r10
    107a:	0f 90       	pop	r0
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	0f 90       	pop	r0
    1080:	1f 90       	pop	r1
    1082:	18 95       	reti

00001084 <__vector_23>:

ISR(USARTC0_RXC_vect) //Data received from RS485
{
    1084:	1f 92       	push	r1
    1086:	0f 92       	push	r0
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	0f 92       	push	r0
    108c:	11 24       	eor	r1, r1
    108e:	2f 93       	push	r18
    1090:	3f 93       	push	r19
    1092:	4f 93       	push	r20
    1094:	5f 93       	push	r21
    1096:	6f 93       	push	r22
    1098:	7f 93       	push	r23
    109a:	8f 93       	push	r24
    109c:	9f 93       	push	r25
    109e:	af 93       	push	r26
    10a0:	bf 93       	push	r27
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	ef 93       	push	r30
    10a8:	ff 93       	push	r31
	#ifndef RXC_EDMA
	static uint8_t uCnt;
	static uint8_t *rxBuf;
	#endif
	uint8_t data = USARTC0.DATA;
    10aa:	e0 ec       	ldi	r30, 0xC0	; 192
    10ac:	f8 e0       	ldi	r31, 0x08	; 8
    10ae:	80 81       	ld	r24, Z
	if (USARTC0.CTRLB & USART_MPCM_bm) //Address listening mode
    10b0:	93 81       	ldd	r25, Z+3	; 0x03
    10b2:	91 ff       	sbrs	r25, 1
    10b4:	75 c0       	rjmp	.+234    	; 0x11a0 <__vector_23+0x11c>
	{
		if (CmdLC <= data && data <= CmdUC)
    10b6:	9f ed       	ldi	r25, 0xDF	; 223
    10b8:	98 0f       	add	r25, r24
    10ba:	94 30       	cpi	r25, 0x04	; 4
    10bc:	08 f0       	brcs	.+2      	; 0x10c0 <__vector_23+0x3c>
    10be:	6e c0       	rjmp	.+220    	; 0x119c <__vector_23+0x118>
		{
			USARTC0.CTRLB &= ~USART_MPCM_bm; //Clear MPCM bit
    10c0:	93 81       	ldd	r25, Z+3	; 0x03
    10c2:	9d 7f       	andi	r25, 0xFD	; 253
    10c4:	93 83       	std	Z+3, r25	; 0x03
			rxMode = data;
    10c6:	80 93 5b 21 	sts	0x215B, r24	; 0x80215b <rxMode>
			if (data == SetConfig)
    10ca:	83 32       	cpi	r24, 0x23	; 35
    10cc:	91 f4       	brne	.+36     	; 0x10f2 <__vector_23+0x6e>
			{
				rxMark = (uint8_t)sysState.sysTick;
    10ce:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <sysState>
    10d2:	80 93 5a 21 	sts	0x215A, r24	; 0x80215a <rxMark>
				#ifdef RXC_EDMA
				EDMA.CH0.TRFCNT = sizeof(systemConfig); //Bytes to receive into iobuf
    10d6:	e0 e0       	ldi	r30, 0x00	; 0
    10d8:	f1 e0       	ldi	r31, 0x01	; 1
    10da:	81 e2       	ldi	r24, 0x21	; 33
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	86 8b       	std	Z+22, r24	; 0x16
    10e0:	97 8b       	std	Z+23, r25	; 0x17
				EDMA.CH0.CTRLA = EDMA_CH_ENABLE_bm | EDMA_CH_SINGLE_bm;
    10e2:	84 e8       	ldi	r24, 0x84	; 132
    10e4:	80 8b       	std	Z+16, r24	; 0x10
				USARTC0.CTRLA = USART_RXCINTLVL_OFF_gc; //Disable interrupt
    10e6:	10 92 c2 08 	sts	0x08C2, r1	; 0x8008c2 <__TEXT_REGION_LENGTH__+0x7008c2>
				PORTC.OUTSET = PIN4_bm;
    10ea:	80 e1       	ldi	r24, 0x10	; 16
    10ec:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    10f0:	57 c0       	rjmp	.+174    	; 0x11a0 <__vector_23+0x11c>
0, 30, 96,	//Motion sensor on time, low time, low level
0, 0, 0};	//groupConfig, rtcCorrect, CRC16

void inline UCTXen()
{
	PORTC.OUTSET = PIN1_bm;
    10f2:	82 e0       	ldi	r24, 0x02	; 2
    10f4:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10f8:	8f e6       	ldi	r24, 0x6F	; 111
    10fa:	92 e0       	ldi	r25, 0x02	; 2
    10fc:	01 97       	sbiw	r24, 0x01	; 1
    10fe:	f1 f7       	brne	.-4      	; 0x10fc <__vector_23+0x78>
    1100:	00 c0       	rjmp	.+0      	; 0x1102 <__vector_23+0x7e>
    1102:	00 00       	nop
				#endif
			}
			else //Data transmit request
			{
				UCTXen();
				if (rxMode == GetConfig)
    1104:	80 91 5b 21 	lds	r24, 0x215B	; 0x80215b <rxMode>
    1108:	82 32       	cpi	r24, 0x22	; 34
    110a:	59 f4       	brne	.+22     	; 0x1122 <__vector_23+0x9e>
				{
					EDMA.CH1.TRFCNT = sizeof(systemConfig) + 3;
    110c:	e0 e0       	ldi	r30, 0x00	; 0
    110e:	f1 e0       	ldi	r31, 0x01	; 1
    1110:	84 e2       	ldi	r24, 0x24	; 36
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	86 a3       	std	Z+38, r24	; 0x26
    1116:	97 a3       	std	Z+39, r25	; 0x27
					EDMA.CH1.ADDR = (register16_t)&validConf;
    1118:	84 e2       	ldi	r24, 0x24	; 36
    111a:	91 e2       	ldi	r25, 0x21	; 33
    111c:	80 a7       	std	Z+40, r24	; 0x28
    111e:	91 a7       	std	Z+41, r25	; 0x29
    1120:	39 c0       	rjmp	.+114    	; 0x1194 <__vector_23+0x110>
				}
				else if (rxMode == GetStatus) //Get state
    1122:	80 91 5b 21 	lds	r24, 0x215B	; 0x80215b <rxMode>
    1126:	81 32       	cpi	r24, 0x21	; 33
    1128:	c9 f4       	brne	.+50     	; 0x115c <__vector_23+0xd8>
				{
					memcpy(iobuf, &sysState, sizeof(systemState));
    112a:	cc e9       	ldi	r28, 0x9C	; 156
    112c:	d0 e2       	ldi	r29, 0x20	; 32
    112e:	88 e1       	ldi	r24, 0x18	; 24
    1130:	ec e0       	ldi	r30, 0x0C	; 12
    1132:	f1 e2       	ldi	r31, 0x21	; 33
    1134:	de 01       	movw	r26, r28
    1136:	01 90       	ld	r0, Z+
    1138:	0d 92       	st	X+, r0
    113a:	8a 95       	dec	r24
    113c:	e1 f7       	brne	.-8      	; 0x1136 <__vector_23+0xb2>
					((systemState*)iobuf)->CRC16 = CalculateCRC16(iobuf, sizeof(systemState) - 2);
    113e:	66 e1       	ldi	r22, 0x16	; 22
    1140:	ce 01       	movw	r24, r28
    1142:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pva>
    1146:	8e 8b       	std	Y+22, r24	; 0x16
    1148:	9f 8b       	std	Y+23, r25	; 0x17
					EDMA.CH1.TRFCNT = sizeof(systemState) + 3;
    114a:	e0 e0       	ldi	r30, 0x00	; 0
    114c:	f1 e0       	ldi	r31, 0x01	; 1
    114e:	8b e1       	ldi	r24, 0x1B	; 27
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	86 a3       	std	Z+38, r24	; 0x26
    1154:	97 a3       	std	Z+39, r25	; 0x27
					EDMA.CH1.ADDR = (register16_t)iobuf;
    1156:	c0 a7       	std	Z+40, r28	; 0x28
    1158:	d1 a7       	std	Z+41, r29	; 0x29
    115a:	1c c0       	rjmp	.+56     	; 0x1194 <__vector_23+0x110>
				}
				else //Get on time
				{
					memcpy(iobuf, &channelOT, sizeof(channelsOnTime));
    115c:	88 e3       	ldi	r24, 0x38	; 56
    115e:	e4 ed       	ldi	r30, 0xD4	; 212
    1160:	f0 e2       	ldi	r31, 0x20	; 32
    1162:	ac e9       	ldi	r26, 0x9C	; 156
    1164:	b0 e2       	ldi	r27, 0x20	; 32
    1166:	01 90       	ld	r0, Z+
    1168:	0d 92       	st	X+, r0
    116a:	8a 95       	dec	r24
    116c:	e1 f7       	brne	.-8      	; 0x1166 <__vector_23+0xe2>
					((channelsOnTime*)iobuf)->CRC16 = CalculateCRC16(iobuf, sizeof(channelsOnTime) - 2);
    116e:	66 e3       	ldi	r22, 0x36	; 54
    1170:	8c e9       	ldi	r24, 0x9C	; 156
    1172:	90 e2       	ldi	r25, 0x20	; 32
    1174:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pva>
    1178:	ac e9       	ldi	r26, 0x9C	; 156
    117a:	b0 e2       	ldi	r27, 0x20	; 32
    117c:	d6 96       	adiw	r26, 0x36	; 54
    117e:	8d 93       	st	X+, r24
    1180:	9c 93       	st	X, r25
    1182:	d7 97       	sbiw	r26, 0x37	; 55
					EDMA.CH1.TRFCNT = sizeof(channelsOnTime) + 3;
    1184:	e0 e0       	ldi	r30, 0x00	; 0
    1186:	f1 e0       	ldi	r31, 0x01	; 1
    1188:	8b e3       	ldi	r24, 0x3B	; 59
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	86 a3       	std	Z+38, r24	; 0x26
    118e:	97 a3       	std	Z+39, r25	; 0x27
					EDMA.CH1.ADDR = (register16_t)iobuf;
    1190:	a0 a7       	std	Z+40, r26	; 0x28
    1192:	b1 a7       	std	Z+41, r27	; 0x29
				}
				EDMA.CH1.CTRLA = EDMA_CH_ENABLE_bm | EDMA_CH_SINGLE_bm;
    1194:	84 e8       	ldi	r24, 0x84	; 132
    1196:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <__vector_23+0x11c>
			}
		}
		else
			rxMode = 0;
    119c:	10 92 5b 21 	sts	0x215B, r1	; 0x80215b <rxMode>
			if (CalculateCRC16(iobuf, sizeof(systemConfig) - 2) == ((systemConfig*)iobuf)->CRC16)
				ApplyConfig();
		}
	}
	#endif
}
    11a0:	ff 91       	pop	r31
    11a2:	ef 91       	pop	r30
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	bf 91       	pop	r27
    11aa:	af 91       	pop	r26
    11ac:	9f 91       	pop	r25
    11ae:	8f 91       	pop	r24
    11b0:	7f 91       	pop	r23
    11b2:	6f 91       	pop	r22
    11b4:	5f 91       	pop	r21
    11b6:	4f 91       	pop	r20
    11b8:	3f 91       	pop	r19
    11ba:	2f 91       	pop	r18
    11bc:	0f 90       	pop	r0
    11be:	0f be       	out	0x3f, r0	; 63
    11c0:	0f 90       	pop	r0
    11c2:	1f 90       	pop	r1
    11c4:	18 95       	reti

000011c6 <__vector_3>:

#ifdef RXC_EDMA
ISR(EDMA_CH0_vect)
{
    11c6:	1f 92       	push	r1
    11c8:	0f 92       	push	r0
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	0f 92       	push	r0
    11ce:	11 24       	eor	r1, r1
    11d0:	2f 93       	push	r18
    11d2:	3f 93       	push	r19
    11d4:	4f 93       	push	r20
    11d6:	5f 93       	push	r21
    11d8:	6f 93       	push	r22
    11da:	7f 93       	push	r23
    11dc:	8f 93       	push	r24
    11de:	9f 93       	push	r25
    11e0:	af 93       	push	r26
    11e2:	bf 93       	push	r27
    11e4:	ef 93       	push	r30
    11e6:	ff 93       	push	r31
	rxMode = 0;
    11e8:	10 92 5b 21 	sts	0x215B, r1	; 0x80215b <rxMode>
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm | USART_MPCM_bm; //Set MPCM bit
    11ec:	e0 ec       	ldi	r30, 0xC0	; 192
    11ee:	f8 e0       	ldi	r31, 0x08	; 8
    11f0:	8a e1       	ldi	r24, 0x1A	; 26
    11f2:	83 83       	std	Z+3, r24	; 0x03
	USARTC0.CTRLA = USART_DRIE_bm | USART_RXCINTLVL_MED_gc;
    11f4:	80 e6       	ldi	r24, 0x60	; 96
    11f6:	82 83       	std	Z+2, r24	; 0x02
	if (CalculateCRC16(iobuf, sizeof(systemConfig) - 2) == ((systemConfig*)iobuf)->CRC16)
    11f8:	6f e1       	ldi	r22, 0x1F	; 31
    11fa:	8c e9       	ldi	r24, 0x9C	; 156
    11fc:	90 e2       	ldi	r25, 0x20	; 32
    11fe:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pva>
    1202:	20 91 bb 20 	lds	r18, 0x20BB	; 0x8020bb <iobuf+0x1f>
    1206:	30 91 bc 20 	lds	r19, 0x20BC	; 0x8020bc <iobuf+0x20>
    120a:	82 17       	cp	r24, r18
    120c:	93 07       	cpc	r25, r19
    120e:	11 f4       	brne	.+4      	; 0x1214 <__vector_3+0x4e>
		ApplyConfig();
    1210:	0e 94 90 00 	call	0x120	; 0x120 <_Z11ApplyConfigv>
	EDMA.CH0.CTRLA = 0;
    1214:	e0 e0       	ldi	r30, 0x00	; 0
    1216:	f1 e0       	ldi	r31, 0x01	; 1
    1218:	10 8a       	std	Z+16, r1	; 0x10
	EDMA.CH0.CTRLB = EDMA_CH_TRNIF_bm | EDMA_CH_ERRIF_bm | EDMA_CH_TRNINTLVL_LO_gc;
    121a:	81 e3       	ldi	r24, 0x31	; 49
    121c:	81 8b       	std	Z+17, r24	; 0x11
	PORTC.OUTCLR = PIN4_bm;
    121e:	80 e1       	ldi	r24, 0x10	; 16
    1220:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
}
    1224:	ff 91       	pop	r31
    1226:	ef 91       	pop	r30
    1228:	bf 91       	pop	r27
    122a:	af 91       	pop	r26
    122c:	9f 91       	pop	r25
    122e:	8f 91       	pop	r24
    1230:	7f 91       	pop	r23
    1232:	6f 91       	pop	r22
    1234:	5f 91       	pop	r21
    1236:	4f 91       	pop	r20
    1238:	3f 91       	pop	r19
    123a:	2f 91       	pop	r18
    123c:	0f 90       	pop	r0
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	0f 90       	pop	r0
    1242:	1f 90       	pop	r1
    1244:	18 95       	reti

00001246 <__vector_4>:
#endif

ISR(EDMA_CH1_vect) //Packet has been sent completely over RS485
{
    1246:	1f 92       	push	r1
    1248:	0f 92       	push	r0
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	0f 92       	push	r0
    124e:	11 24       	eor	r1, r1
    1250:	8f 93       	push	r24
    1252:	ef 93       	push	r30
    1254:	ff 93       	push	r31
	UCRXen(); //Set bus in the idle state
    1256:	82 e0       	ldi	r24, 0x02	; 2
    1258:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
	rxMode = 0;
    125c:	10 92 5b 21 	sts	0x215B, r1	; 0x80215b <rxMode>
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm | USART_MPCM_bm; //Set MPCM bit
    1260:	8a e1       	ldi	r24, 0x1A	; 26
    1262:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	EDMA.CH1.CTRLA = 0;
    1266:	e0 e0       	ldi	r30, 0x00	; 0
    1268:	f1 e0       	ldi	r31, 0x01	; 1
    126a:	10 a2       	std	Z+32, r1	; 0x20
	EDMA.CH1.CTRLB = EDMA_CH_TRNIF_bm | EDMA_CH_ERRIF_bm | EDMA_CH_TRNINTLVL_LO_gc;
    126c:	81 e3       	ldi	r24, 0x31	; 49
    126e:	81 a3       	std	Z+33, r24	; 0x21
}
    1270:	ff 91       	pop	r31
    1272:	ef 91       	pop	r30
    1274:	8f 91       	pop	r24
    1276:	0f 90       	pop	r0
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	0f 90       	pop	r0
    127c:	1f 90       	pop	r1
    127e:	18 95       	reti

00001280 <__vector_36>:

ISR(TCD5_OVF_vect)
{
    1280:	1f 92       	push	r1
    1282:	0f 92       	push	r0
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	0f 92       	push	r0
    1288:	11 24       	eor	r1, r1
    128a:	2f 93       	push	r18
    128c:	8f 93       	push	r24
    128e:	9f 93       	push	r25
    1290:	ef 93       	push	r30
    1292:	ff 93       	push	r31
	PORTD.OUT = *framePtr++;
    1294:	e0 91 45 21 	lds	r30, 0x2145	; 0x802145 <framePtr>
    1298:	f0 91 46 21 	lds	r31, 0x2146	; 0x802146 <framePtr+0x1>
    129c:	cf 01       	movw	r24, r30
    129e:	01 96       	adiw	r24, 0x01	; 1
    12a0:	80 93 45 21 	sts	0x2145, r24	; 0x802145 <framePtr>
    12a4:	90 93 46 21 	sts	0x2146, r25	; 0x802146 <framePtr+0x1>
    12a8:	20 81       	ld	r18, Z
    12aa:	20 93 64 06 	sts	0x0664, r18	; 0x800664 <__TEXT_REGION_LENGTH__+0x700664>
	if (framePtr == DSI8xFrames + sizeof(DSI8xFrames) - 1)
    12ae:	89 55       	subi	r24, 0x59	; 89
    12b0:	91 42       	sbci	r25, 0x21	; 33
    12b2:	11 f4       	brne	.+4      	; 0x12b8 <__vector_36+0x38>
		TCD5.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    12b4:	10 92 46 09 	sts	0x0946, r1	; 0x800946 <__TEXT_REGION_LENGTH__+0x700946>
	TCD5.INTFLAGS = TC5_OVFIF_bm;
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	80 93 4c 09 	sts	0x094C, r24	; 0x80094c <__TEXT_REGION_LENGTH__+0x70094c>
}
    12be:	ff 91       	pop	r31
    12c0:	ef 91       	pop	r30
    12c2:	9f 91       	pop	r25
    12c4:	8f 91       	pop	r24
    12c6:	2f 91       	pop	r18
    12c8:	0f 90       	pop	r0
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	0f 90       	pop	r0
    12ce:	1f 90       	pop	r1
    12d0:	18 95       	reti

000012d2 <_Z7mcuInitv>:

inline void mcuInit()
{
	//Port A configuration: 0-5 analog inputs, 7 inverted output
	PORTA.DIRSET = PIN7_bm;
    12d2:	e0 e0       	ldi	r30, 0x00	; 0
    12d4:	f6 e0       	ldi	r31, 0x06	; 6
    12d6:	80 e8       	ldi	r24, 0x80	; 128
    12d8:	81 83       	std	Z+1, r24	; 0x01
	PORTCFG.MPCMASK = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm;
    12da:	a0 eb       	ldi	r26, 0xB0	; 176
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	8f e3       	ldi	r24, 0x3F	; 63
    12e0:	8c 93       	st	X, r24
	PORTA.PIN0CTRL = PORT_OPC_TOTEM_gc | PORT_ISC_INPUT_DISABLE_gc;
    12e2:	87 e0       	ldi	r24, 0x07	; 7
    12e4:	80 8b       	std	Z+16, r24	; 0x10
	PORTA.PIN7CTRL = PORT_OPC_TOTEM_gc | PORT_INVEN_bm;
    12e6:	80 e4       	ldi	r24, 0x40	; 64
    12e8:	87 8b       	std	Z+23, r24	; 0x17
	//Port C configuration: 0-1, 3-7 outputs
	PORTC.DIRSET = PIN0_bm | PIN1_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
    12ea:	8b ef       	ldi	r24, 0xFB	; 251
    12ec:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
	//Port D configuration: 0-7 inverted outputs
	PORTD.DIRSET = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
    12f0:	e0 e6       	ldi	r30, 0x60	; 96
    12f2:	f6 e0       	ldi	r31, 0x06	; 6
    12f4:	8f ef       	ldi	r24, 0xFF	; 255
    12f6:	81 83       	std	Z+1, r24	; 0x01
	PORTCFG.MPCMASK = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
    12f8:	8c 93       	st	X, r24
	PORTD.PIN0CTRL = PORT_OPC_TOTEM_gc | PORT_INVEN_bm | PORT_ISC_INPUT_DISABLE_gc;
    12fa:	87 e4       	ldi	r24, 0x47	; 71
    12fc:	80 8b       	std	Z+16, r24	; 0x10
	//Clock configuration: 32MHz RC with DFLL from XOSC 32768Hz
	OSC.XOSCCTRL = OSC_XOSCSEL_32KHz_gc;
    12fe:	e0 e5       	ldi	r30, 0x50	; 80
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	82 e0       	ldi	r24, 0x02	; 2
    1304:	82 83       	std	Z+2, r24	; 0x02
	OSC.CTRL |= OSC_RC32MEN_bm | OSC_XOSCEN_bm;
    1306:	80 81       	ld	r24, Z
    1308:	8a 60       	ori	r24, 0x0A	; 10
    130a:	80 83       	st	Z, r24
	while (!(OSC.STATUS & OSC_XOSCRDY_bm));
    130c:	81 81       	ldd	r24, Z+1	; 0x01
    130e:	83 ff       	sbrs	r24, 3
    1310:	fd cf       	rjmp	.-6      	; 0x130c <_Z7mcuInitv+0x3a>
	while (!(OSC.STATUS & OSC_RC32MRDY_bm));
    1312:	e0 e5       	ldi	r30, 0x50	; 80
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	81 81       	ldd	r24, Z+1	; 0x01
    1318:	81 ff       	sbrs	r24, 1
    131a:	fd cf       	rjmp	.-6      	; 0x1316 <_Z7mcuInitv+0x44>
	OSC.DFLLCTRL = OSC_RC32MCREF_XOSC32K_gc;
    131c:	a0 e5       	ldi	r26, 0x50	; 80
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	82 e0       	ldi	r24, 0x02	; 2
    1322:	16 96       	adiw	r26, 0x06	; 6
    1324:	8c 93       	st	X, r24
    1326:	16 97       	sbiw	r26, 0x06	; 6
	DFLLRC32M.CTRL = DFLL_ENABLE_bm;
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
	CCP = CCP_IOREG_gc;
    132e:	98 ed       	ldi	r25, 0xD8	; 216
    1330:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
    1332:	e0 e4       	ldi	r30, 0x40	; 64
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 83       	st	Z, r24
	OSC.CTRL = OSC_RC32MEN_bm | OSC_XOSCEN_bm; //Disable unused clock sources
    1338:	8a e0       	ldi	r24, 0x0A	; 10
    133a:	8c 93       	st	X, r24
	CLK.RTCCTRL = CLK_RTCSRC_TOSC_gc | CLK_RTCEN_bm; //1024Hz RTC clock source
    133c:	83 e0       	ldi	r24, 0x03	; 3
    133e:	83 83       	std	Z+3, r24	; 0x03
	while (RTC.STATUS & RTC_SYNCBUSY_bm);
    1340:	e0 e0       	ldi	r30, 0x00	; 0
    1342:	f4 e0       	ldi	r31, 0x04	; 4
    1344:	81 81       	ldd	r24, Z+1	; 0x01
    1346:	80 fd       	sbrc	r24, 0
    1348:	fd cf       	rjmp	.-6      	; 0x1344 <_Z7mcuInitv+0x72>
	CCP = CCP_IOREG_gc;
    134a:	88 ed       	ldi	r24, 0xD8	; 216
    134c:	84 bf       	out	0x34, r24	; 52
	CLK.LOCK = CLK_LOCK_bm; //Disable further changes in clock system
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	80 93 42 00 	sts	0x0042, r24	; 0x800042 <__TEXT_REGION_LENGTH__+0x700042>
	//PMIC: enable interrupts
	PMIC.CTRL = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
    1354:	27 e0       	ldi	r18, 0x07	; 7
    1356:	20 93 a2 00 	sts	0x00A2, r18	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	//RTC configuration: 1024 / 2 = 512Hz clock, medium level interrupt
	RTC.PER = 16; //32 overflows per second
    135a:	e0 e0       	ldi	r30, 0x00	; 0
    135c:	f4 e0       	ldi	r31, 0x04	; 4
    135e:	40 e1       	ldi	r20, 0x10	; 16
    1360:	50 e0       	ldi	r21, 0x00	; 0
    1362:	42 87       	std	Z+10, r20	; 0x0a
    1364:	53 87       	std	Z+11, r21	; 0x0b
	RTC.INTCTRL = RTC_OVFINTLVL_MED_gc;
    1366:	92 e0       	ldi	r25, 0x02	; 2
    1368:	92 83       	std	Z+2, r25	; 0x02
	RTC.CTRL = RTC_PRESCALER_DIV2_gc;
    136a:	90 83       	st	Z, r25
	RTC.CNT = 0;
    136c:	10 86       	std	Z+8, r1	; 0x08
    136e:	11 86       	std	Z+9, r1	; 0x09
	//USARTC configuration: start / 9 data / 2 stop; 76.8kbps baud, multi-processor communication
	USARTC0.CTRLB = USART_RXEN_bm | USART_TXEN_bm | USART_MPCM_bm;
    1370:	e0 ec       	ldi	r30, 0xC0	; 192
    1372:	f8 e0       	ldi	r31, 0x08	; 8
    1374:	9a e1       	ldi	r25, 0x1A	; 26
    1376:	93 83       	std	Z+3, r25	; 0x03
	USARTC0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_SBMODE_bm | USART_CHSIZE_9BIT_gc;
    1378:	9f e0       	ldi	r25, 0x0F	; 15
    137a:	94 83       	std	Z+4, r25	; 0x04
	USARTC0.BAUDCTRLA = 12 << USART_BSEL_gp;
    137c:	9c e0       	ldi	r25, 0x0C	; 12
    137e:	96 83       	std	Z+6, r25	; 0x06
	USARTC0.BAUDCTRLB = 1 << USART_BSCALE_gp;
    1380:	90 e1       	ldi	r25, 0x10	; 16
    1382:	97 83       	std	Z+7, r25	; 0x07
	USARTC0.CTRLA = USART_DRIE_bm | USART_RXCINTLVL_MED_gc;
    1384:	30 e6       	ldi	r19, 0x60	; 96
    1386:	32 83       	std	Z+2, r19	; 0x02
	//ADC configuration: 1MHz, 15bit oversampling
	ADCA.CTRLA = ADC_ENABLE_bm;
    1388:	e0 e0       	ldi	r30, 0x00	; 0
    138a:	f2 e0       	ldi	r31, 0x02	; 2
    138c:	80 83       	st	Z, r24
	ADCA.CTRLB = ADC_CONMODE_bm | ADC_RESOLUTION_MT12BIT_gc; //Signed mode
    138e:	32 e1       	ldi	r19, 0x12	; 18
    1390:	31 83       	std	Z+1, r19	; 0x01
	ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;
    1392:	30 e2       	ldi	r19, 0x20	; 32
    1394:	32 83       	std	Z+2, r19	; 0x02
	ADCA.PRESCALER = ADC_PRESCALER_DIV32_gc;
    1396:	43 e0       	ldi	r20, 0x03	; 3
    1398:	44 83       	std	Z+4, r20	; 0x04
	ADCA.SAMPCTRL = 7 << ADC_SAMPVAL_gp;
    139a:	20 87       	std	Z+8, r18	; 0x08
	ADCA.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc | ADC_CH_GAIN_1X_gc;
    139c:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.CH0.INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_LO_gc;
    139e:	82 a3       	std	Z+34, r24	; 0x22
	ADCA.CH0.AVGCTRL = ADC_CH_SAMPNUM_16X_gc; //This will produce 15 bit result
    13a0:	24 e0       	ldi	r18, 0x04	; 4
    13a2:	24 a7       	std	Z+44, r18	; 0x2c
	//TCD5 configuration: 500kHz, 1199Hz overflow rate
	TCD5.CTRLA = TC_CLKSEL_DIV64_gc;
    13a4:	e0 e4       	ldi	r30, 0x40	; 64
    13a6:	f9 e0       	ldi	r31, 0x09	; 9
    13a8:	25 e0       	ldi	r18, 0x05	; 5
    13aa:	20 83       	st	Z, r18
	TCD5.CTRLB = TC_WGMODE_NORMAL_gc;
    13ac:	11 82       	std	Z+1, r1	; 0x01
	TCD5.PERBUF = 417;
    13ae:	41 ea       	ldi	r20, 0xA1	; 161
    13b0:	51 e0       	ldi	r21, 0x01	; 1
    13b2:	46 ab       	std	Z+54, r20	; 0x36
    13b4:	57 ab       	std	Z+55, r21	; 0x37
	TCD5.CTRLGCLR = TC5_STOP_bm;
    13b6:	30 87       	std	Z+8, r19	; 0x08
	//EDMA peripheral channel 0: USARTC read transfer
	EDMA.CH0.CTRLB = EDMA_CH_TRNINTLVL_LO_gc;
    13b8:	e0 e0       	ldi	r30, 0x00	; 0
    13ba:	f1 e0       	ldi	r31, 0x01	; 1
    13bc:	81 8b       	std	Z+17, r24	; 0x11
	EDMA.CH0.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_INC_gc;
    13be:	31 e3       	ldi	r19, 0x31	; 49
    13c0:	32 8b       	std	Z+18, r19	; 0x12
	EDMA.CH0.ADDR = (register16_t)iobuf;
    13c2:	4c e9       	ldi	r20, 0x9C	; 156
    13c4:	50 e2       	ldi	r21, 0x20	; 32
    13c6:	40 8f       	std	Z+24, r20	; 0x18
    13c8:	51 8f       	std	Z+25, r21	; 0x19
	EDMA.CH0.TRIGSRC = EDMA_CH_TRIGSRC_USARTC0_RXC_gc;
    13ca:	4c e4       	ldi	r20, 0x4C	; 76
    13cc:	44 8b       	std	Z+20, r20	; 0x14
	//EDMA peripheral channel 1: USARTC write transfer
	EDMA.CH1.CTRLB = EDMA_CH_TRNINTLVL_LO_gc; //Low-level interrupt
    13ce:	81 a3       	std	Z+33, r24	; 0x21
	EDMA.CH1.ADDRCTRL = EDMA_CH_RELOAD_TRANSACTION_gc | EDMA_CH_DIR_INC_gc;
    13d0:	32 a3       	std	Z+34, r19	; 0x22
	EDMA.CH1.TRIGSRC = EDMA_CH_TRIGSRC_USARTC0_DRE_gc;
    13d2:	8d e4       	ldi	r24, 0x4D	; 77
    13d4:	84 a3       	std	Z+36, r24	; 0x24
	//EDMA: 1 standard and 2 peripheral channels
	EDMA.CTRL = EDMA_ENABLE_bm | EDMA_CHMODE_STD2_gc | EDMA_DBUFMODE_DISABLE_gc | EDMA_PRIMODE_RR0123_gc;
    13d6:	80 ea       	ldi	r24, 0xA0	; 160
    13d8:	80 83       	st	Z, r24
	//Power reduction
	PR.PRGEN = PR_XCL_bm | PR_EVSYS_bm;
    13da:	e0 e7       	ldi	r30, 0x70	; 112
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	82 e8       	ldi	r24, 0x82	; 130
    13e0:	80 83       	st	Z, r24
	PR.PRPA = PR_DAC_bm | PR_AC_bm;
    13e2:	21 83       	std	Z+1, r18	; 0x01
	PR.PRPC = PR_TWI_bm | PR_SPI_bm | PR_HIRES_bm | PR_TC5_bm | PR_TC4_bm;
    13e4:	8f e4       	ldi	r24, 0x4F	; 79
    13e6:	83 83       	std	Z+3, r24	; 0x03
	PR.PRPD = PR_USART0_bm;
    13e8:	94 83       	std	Z+4, r25	; 0x04
	sei();
    13ea:	78 94       	sei
    13ec:	08 95       	ret

000013ee <main>:
}

int main(void)
{
	mcuInit();
    13ee:	0e 94 69 09 	call	0x12d2	; 0x12d2 <_Z7mcuInitv>
	eeprom_read_block(&channelOT, &savedCOT, sizeof(channelsOnTime));
    13f2:	48 e3       	ldi	r20, 0x38	; 56
    13f4:	50 e0       	ldi	r21, 0x00	; 0
    13f6:	61 e2       	ldi	r22, 0x21	; 33
    13f8:	70 e0       	ldi	r23, 0x00	; 0
    13fa:	84 ed       	ldi	r24, 0xD4	; 212
    13fc:	90 e2       	ldi	r25, 0x20	; 32
    13fe:	0e 94 85 0a 	call	0x150a	; 0x150a <eeprom_read_block>
	eeprom_read_block(iobuf, &savedConfig, sizeof(systemConfig) - 2);
    1402:	4f e1       	ldi	r20, 0x1F	; 31
    1404:	50 e0       	ldi	r21, 0x00	; 0
    1406:	60 e0       	ldi	r22, 0x00	; 0
    1408:	70 e0       	ldi	r23, 0x00	; 0
    140a:	8c e9       	ldi	r24, 0x9C	; 156
    140c:	90 e2       	ldi	r25, 0x20	; 32
    140e:	0e 94 85 0a 	call	0x150a	; 0x150a <eeprom_read_block>
	((systemConfig*)iobuf)->overrideCfg = ((systemConfig*)iobuf)->groupConf = 0; //Ignore saved overrides
    1412:	cc e9       	ldi	r28, 0x9C	; 156
    1414:	d0 e2       	ldi	r29, 0x20	; 32
    1416:	1d 8e       	std	Y+29, r1	; 0x1d
    1418:	19 8a       	std	Y+17, r1	; 0x11
	((systemConfig*)iobuf)->CRC16 = CalculateCRC16(iobuf, sizeof(systemConfig) - 2);
    141a:	6f e1       	ldi	r22, 0x1F	; 31
    141c:	ce 01       	movw	r24, r28
    141e:	0e 94 76 00 	call	0xec	; 0xec <_Z14CalculateCRC16Pva>
    1422:	8f 8f       	std	Y+31, r24	; 0x1f
    1424:	98 a3       	std	Y+32, r25	; 0x20
	ApplyConfig();
    1426:	0e 94 90 00 	call	0x120	; 0x120 <_Z11ApplyConfigv>
    142a:	ff cf       	rjmp	.-2      	; 0x142a <main+0x3c>

0000142c <_GLOBAL__sub_I_gLevels>:
	uint64_t _tickLastChg, _onTimeStamp;

public:
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    142c:	e0 e1       	ldi	r30, 0x10	; 16
    142e:	f0 e2       	ldi	r31, 0x20	; 32
    1430:	93 e0       	ldi	r25, 0x03	; 3
    1432:	91 83       	std	Z+1, r25	; 0x01
		_link[0] = posA;
    1434:	87 e0       	ldi	r24, 0x07	; 7
    1436:	83 83       	std	Z+3, r24	; 0x03
		_link[1] = posB;
    1438:	86 e0       	ldi	r24, 0x06	; 6
    143a:	84 83       	std	Z+4, r24	; 0x04
		_link[2] = posC;
    143c:	85 e0       	ldi	r24, 0x05	; 5
    143e:	85 83       	std	Z+5, r24	; 0x05
		_linkNum = num;
    1440:	12 82       	std	Z+2, r1	; 0x02
		_chActMask = 0x10 << num;
    1442:	80 e1       	ldi	r24, 0x10	; 16
    1444:	82 8b       	std	Z+18, r24	; 0x12
	uint64_t _tickLastChg, _onTimeStamp;

public:
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    1446:	94 a3       	std	Z+36, r25	; 0x24
		_link[0] = posA;
    1448:	84 e0       	ldi	r24, 0x04	; 4
    144a:	86 a3       	std	Z+38, r24	; 0x26
		_link[1] = posB;
    144c:	97 a3       	std	Z+39, r25	; 0x27
		_link[2] = posC;
    144e:	82 e0       	ldi	r24, 0x02	; 2
    1450:	80 a7       	std	Z+40, r24	; 0x28
		_linkNum = num;
    1452:	21 e0       	ldi	r18, 0x01	; 1
    1454:	25 a3       	std	Z+37, r18	; 0x25
		_chActMask = 0x10 << num;
    1456:	30 e2       	ldi	r19, 0x20	; 32
    1458:	35 ab       	std	Z+53, r19	; 0x35
	uint64_t _tickLastChg, _onTimeStamp;

public:
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    145a:	80 93 57 20 	sts	0x2057, r24	; 0x802057 <links+0x47>
		_link[0] = posA;
    145e:	20 93 59 20 	sts	0x2059, r18	; 0x802059 <links+0x49>
		_link[1] = posB;
    1462:	10 92 5a 20 	sts	0x205A, r1	; 0x80205a <links+0x4a>
		_link[2] = posC;
    1466:	10 92 5b 20 	sts	0x205B, r1	; 0x80205b <links+0x4b>
		_linkNum = num;
    146a:	80 93 58 20 	sts	0x2058, r24	; 0x802058 <links+0x48>
		_chActMask = 0x10 << num;
    146e:	30 e4       	ldi	r19, 0x40	; 64
    1470:	30 93 68 20 	sts	0x2068, r19	; 0x802068 <links+0x58>
	uint64_t _tickLastChg, _onTimeStamp;

public:
	LCport(uint8_t num, uint8_t count, uint8_t posA, uint8_t posB, uint8_t posC)
	{
		_linkCnt = count;
    1474:	20 93 7a 20 	sts	0x207A, r18	; 0x80207a <links+0x6a>
		_link[0] = posA;
    1478:	28 e0       	ldi	r18, 0x08	; 8
    147a:	20 93 7c 20 	sts	0x207C, r18	; 0x80207c <links+0x6c>
		_link[1] = posB;
    147e:	10 92 7d 20 	sts	0x207D, r1	; 0x80207d <links+0x6d>
		_link[2] = posC;
    1482:	10 92 7e 20 	sts	0x207E, r1	; 0x80207e <links+0x6e>
		_linkNum = num;
    1486:	90 93 7b 20 	sts	0x207B, r25	; 0x80207b <links+0x6b>
		_chActMask = 0x10 << num;
    148a:	90 e8       	ldi	r25, 0x80	; 128
    148c:	90 93 8b 20 	sts	0x208B, r25	; 0x80208b <links+0x7b>
	uint8_t _onTime, _fTime;
	uint64_t _onTimeStamp;
public:
	Msen(uint8_t actLink)
	{
		_linkNum = actLink;
    1490:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <msenCh+0x2>
    1494:	08 95       	ret

00001496 <__divmodhi4>:
    1496:	97 fb       	bst	r25, 7
    1498:	07 2e       	mov	r0, r23
    149a:	16 f4       	brtc	.+4      	; 0x14a0 <__divmodhi4+0xa>
    149c:	00 94       	com	r0
    149e:	07 d0       	rcall	.+14     	; 0x14ae <__divmodhi4_neg1>
    14a0:	77 fd       	sbrc	r23, 7
    14a2:	09 d0       	rcall	.+18     	; 0x14b6 <__divmodhi4_neg2>
    14a4:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <__udivmodhi4>
    14a8:	07 fc       	sbrc	r0, 7
    14aa:	05 d0       	rcall	.+10     	; 0x14b6 <__divmodhi4_neg2>
    14ac:	3e f4       	brtc	.+14     	; 0x14bc <__divmodhi4_exit>

000014ae <__divmodhi4_neg1>:
    14ae:	90 95       	com	r25
    14b0:	81 95       	neg	r24
    14b2:	9f 4f       	sbci	r25, 0xFF	; 255
    14b4:	08 95       	ret

000014b6 <__divmodhi4_neg2>:
    14b6:	70 95       	com	r23
    14b8:	61 95       	neg	r22
    14ba:	7f 4f       	sbci	r23, 0xFF	; 255

000014bc <__divmodhi4_exit>:
    14bc:	08 95       	ret

000014be <__adddi3_s8>:
    14be:	00 24       	eor	r0, r0
    14c0:	a7 fd       	sbrc	r26, 7
    14c2:	00 94       	com	r0
    14c4:	2a 0f       	add	r18, r26
    14c6:	30 1d       	adc	r19, r0
    14c8:	40 1d       	adc	r20, r0
    14ca:	50 1d       	adc	r21, r0
    14cc:	60 1d       	adc	r22, r0
    14ce:	70 1d       	adc	r23, r0
    14d0:	80 1d       	adc	r24, r0
    14d2:	90 1d       	adc	r25, r0
    14d4:	08 95       	ret

000014d6 <__udivmodhi4>:
    14d6:	aa 1b       	sub	r26, r26
    14d8:	bb 1b       	sub	r27, r27
    14da:	51 e1       	ldi	r21, 0x11	; 17
    14dc:	07 c0       	rjmp	.+14     	; 0x14ec <__udivmodhi4_ep>

000014de <__udivmodhi4_loop>:
    14de:	aa 1f       	adc	r26, r26
    14e0:	bb 1f       	adc	r27, r27
    14e2:	a6 17       	cp	r26, r22
    14e4:	b7 07       	cpc	r27, r23
    14e6:	10 f0       	brcs	.+4      	; 0x14ec <__udivmodhi4_ep>
    14e8:	a6 1b       	sub	r26, r22
    14ea:	b7 0b       	sbc	r27, r23

000014ec <__udivmodhi4_ep>:
    14ec:	88 1f       	adc	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	5a 95       	dec	r21
    14f2:	a9 f7       	brne	.-22     	; 0x14de <__udivmodhi4_loop>
    14f4:	80 95       	com	r24
    14f6:	90 95       	com	r25
    14f8:	bc 01       	movw	r22, r24
    14fa:	cd 01       	movw	r24, r26
    14fc:	08 95       	ret

000014fe <__tablejump2__>:
    14fe:	ee 0f       	add	r30, r30
    1500:	ff 1f       	adc	r31, r31
    1502:	05 90       	lpm	r0, Z+
    1504:	f4 91       	lpm	r31, Z
    1506:	e0 2d       	mov	r30, r0
    1508:	09 94       	ijmp

0000150a <eeprom_read_block>:
    150a:	60 50       	subi	r22, 0x00	; 0
    150c:	70 4f       	sbci	r23, 0xF0	; 240
    150e:	0c 94 c2 0a 	jmp	0x1584	; 0x1584 <memcpy>

00001512 <eeprom_update_block>:
    1512:	dc 01       	movw	r26, r24
    1514:	a4 0f       	add	r26, r20
    1516:	b5 1f       	adc	r27, r21
    1518:	41 50       	subi	r20, 0x01	; 1
    151a:	50 40       	sbci	r21, 0x00	; 0
    151c:	48 f0       	brcs	.+18     	; 0x1530 <eeprom_update_block+0x1e>
    151e:	cb 01       	movw	r24, r22
    1520:	84 0f       	add	r24, r20
    1522:	95 1f       	adc	r25, r21
    1524:	2e 91       	ld	r18, -X
    1526:	0e 94 9a 0a 	call	0x1534	; 0x1534 <eeprom_update_r18>
    152a:	41 50       	subi	r20, 0x01	; 1
    152c:	50 40       	sbci	r21, 0x00	; 0
    152e:	d0 f7       	brcc	.-12     	; 0x1524 <eeprom_update_block+0x12>
    1530:	08 95       	ret

00001532 <eeprom_update_byte>:
    1532:	26 2f       	mov	r18, r22

00001534 <eeprom_update_r18>:
    1534:	0e 94 be 0a 	call	0x157c	; 0x157c <eeprom_mapen>
    1538:	00 80       	ld	r0, Z
    153a:	02 16       	cp	r0, r18
    153c:	19 f0       	breq	.+6      	; 0x1544 <eeprom_update_r18+0x10>
    153e:	0e 94 a5 0a 	call	0x154a	; 0x154a <eeprom_write_r18>
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	08 95       	ret

00001548 <eeprom_write_byte>:
    1548:	26 2f       	mov	r18, r22

0000154a <eeprom_write_r18>:
    154a:	af 93       	push	r26
    154c:	bf 93       	push	r27
    154e:	e0 ec       	ldi	r30, 0xC0	; 192
    1550:	f1 e0       	ldi	r31, 0x01	; 1
    1552:	37 85       	ldd	r19, Z+15	; 0x0f
    1554:	37 fd       	sbrc	r19, 7
    1556:	fd cf       	rjmp	.-6      	; 0x1552 <eeprom_write_r18+0x8>
    1558:	dc 01       	movw	r26, r24
    155a:	a0 50       	subi	r26, 0x00	; 0
    155c:	b0 4f       	sbci	r27, 0xF0	; 240
    155e:	2c 93       	st	X, r18
    1560:	25 e3       	ldi	r18, 0x35	; 53
    1562:	22 87       	std	Z+10, r18	; 0x0a
    1564:	28 ed       	ldi	r18, 0xD8	; 216
    1566:	31 e0       	ldi	r19, 0x01	; 1
    1568:	24 bf       	out	0x34, r18	; 52
    156a:	33 87       	std	Z+11, r19	; 0x0b
    156c:	01 96       	adiw	r24, 0x01	; 1
    156e:	bf 91       	pop	r27
    1570:	af 91       	pop	r26
    1572:	08 95       	ret

00001574 <eeprom_read_byte>:
    1574:	03 d0       	rcall	.+6      	; 0x157c <eeprom_mapen>
    1576:	80 81       	ld	r24, Z
    1578:	99 27       	eor	r25, r25
    157a:	08 95       	ret

0000157c <eeprom_mapen>:
    157c:	fc 01       	movw	r30, r24
    157e:	e0 50       	subi	r30, 0x00	; 0
    1580:	f0 4f       	sbci	r31, 0xF0	; 240
    1582:	08 95       	ret

00001584 <memcpy>:
    1584:	fb 01       	movw	r30, r22
    1586:	dc 01       	movw	r26, r24
    1588:	02 c0       	rjmp	.+4      	; 0x158e <memcpy+0xa>
    158a:	01 90       	ld	r0, Z+
    158c:	0d 92       	st	X+, r0
    158e:	41 50       	subi	r20, 0x01	; 1
    1590:	50 40       	sbci	r21, 0x00	; 0
    1592:	d8 f7       	brcc	.-10     	; 0x158a <memcpy+0x6>
    1594:	08 95       	ret

00001596 <_exit>:
    1596:	f8 94       	cli

00001598 <__stop_program>:
    1598:	ff cf       	rjmp	.-2      	; 0x1598 <__stop_program>
